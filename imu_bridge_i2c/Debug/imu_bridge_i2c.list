
imu_bridge_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002418  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c26c  0800c26c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c26c  0800c26c  0001c26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c274  0800c274  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c274  0800c274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800c27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  2000000c  0800c288  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  0800c288  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2a8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030dd  00000000  00000000  0003b327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  0003e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ca  00000000  00000000  0003fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a09  00000000  00000000  0004130a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002209f  00000000  00000000  00063d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d19a4  00000000  00000000  00085db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f68  00000000  00000000  00157758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0015e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009e3c 	.word	0x08009e3c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08009e3c 	.word	0x08009e3c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <a_mpu9250_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu9250_read(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	607a      	str	r2, [r7, #4]
 80004d2:	461a      	mov	r2, r3
 80004d4:	460b      	mov	r3, r1
 80004d6:	72fb      	strb	r3, [r7, #11]
 80004d8:	4613      	mov	r3, r2
 80004da:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                     /* if iic interface */
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10e      	bne.n	8000504 <a_mpu9250_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	68dc      	ldr	r4, [r3, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	7818      	ldrb	r0, [r3, #0]
 80004ee:	893b      	ldrh	r3, [r7, #8]
 80004f0:	7af9      	ldrb	r1, [r7, #11]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	47a0      	blx	r4
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <a_mpu9250_read+0x38>
        {
            return 1;                                                                 /* return error */
 80004fc:	2301      	movs	r3, #1
 80004fe:	e010      	b.n	8000522 <a_mpu9250_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8000500:	2300      	movs	r3, #0
 8000502:	e00e      	b.n	8000522 <a_mpu9250_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	7afa      	ldrb	r2, [r7, #11]
 800050a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800050e:	b2d0      	uxtb	r0, r2
 8000510:	893a      	ldrh	r2, [r7, #8]
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	4798      	blx	r3
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <a_mpu9250_read+0x58>
        {
            return 1;                                                                 /* return error */
 800051c:	2301      	movs	r3, #1
 800051e:	e000      	b.n	8000522 <a_mpu9250_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8000520:	2300      	movs	r3, #0
        }
    }
}
 8000522:	4618      	mov	r0, r3
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	bd90      	pop	{r4, r7, pc}

0800052a <a_mpu9250_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu9250_write(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 800052a:	b590      	push	{r4, r7, lr}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	461a      	mov	r2, r3
 8000536:	460b      	mov	r3, r1
 8000538:	72fb      	strb	r3, [r7, #11]
 800053a:	4613      	mov	r3, r2
 800053c:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                      /* if iic interface */
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000544:	2b00      	cmp	r3, #0
 8000546:	d10e      	bne.n	8000566 <a_mpu9250_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	691c      	ldr	r4, [r3, #16]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	7818      	ldrb	r0, [r3, #0]
 8000550:	893b      	ldrh	r3, [r7, #8]
 8000552:	7af9      	ldrb	r1, [r7, #11]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	47a0      	blx	r4
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <a_mpu9250_write+0x38>
        {
            return 1;                                                                  /* return error */
 800055e:	2301      	movs	r3, #1
 8000560:	e010      	b.n	8000584 <a_mpu9250_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8000562:	2300      	movs	r3, #0
 8000564:	e00e      	b.n	8000584 <a_mpu9250_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6a1b      	ldr	r3, [r3, #32]
 800056a:	7afa      	ldrb	r2, [r7, #11]
 800056c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000570:	b2d0      	uxtb	r0, r2
 8000572:	893a      	ldrh	r2, [r7, #8]
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	4798      	blx	r3
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <a_mpu9250_write+0x58>
        {
            return 1;                                                                  /* return error */
 800057e:	2301      	movs	r3, #1
 8000580:	e000      	b.n	8000584 <a_mpu9250_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8000582:	2300      	movs	r3, #0
        }
    }
}
 8000584:	4618      	mov	r0, r3
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}

0800058c <a_mpu9250_mag_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu9250_mag_write(mpu9250_handle_t *handle, uint8_t reg, uint8_t *data)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	460b      	mov	r3, r1
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	72fb      	strb	r3, [r7, #11]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                            /* if iic interface */
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10d      	bne.n	80005c0 <a_mpu9250_mag_write+0x34>
    {
        if (handle->iic_write(AK8963_IIC_ADDRESS << 1, reg, (uint8_t *)data, 1) != 0)        /* write data */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	691c      	ldr	r4, [r3, #16]
 80005a8:	7af9      	ldrb	r1, [r7, #11]
 80005aa:	2301      	movs	r3, #1
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	2018      	movs	r0, #24
 80005b0:	47a0      	blx	r4
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <a_mpu9250_mag_write+0x30>
        {
            return 1;                                                                        /* return error */
 80005b8:	2301      	movs	r3, #1
 80005ba:	e002      	b.n	80005c2 <a_mpu9250_mag_write+0x36>
        }
        else
        {
            return 0;                                                                        /* success return 0 */
 80005bc:	2300      	movs	r3, #0
 80005be:	e000      	b.n	80005c2 <a_mpu9250_mag_write+0x36>
        }
    }
    else                                                                                     /* spi interface */
    {
        return 1;
 80005c0:	2301      	movs	r3, #1
    }
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd90      	pop	{r4, r7, pc}

080005ca <a_mpu9250_mag_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu9250_mag_read(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80005ca:	b590      	push	{r4, r7, lr}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	461a      	mov	r2, r3
 80005d6:	460b      	mov	r3, r1
 80005d8:	72fb      	strb	r3, [r7, #11]
 80005da:	4613      	mov	r3, r2
 80005dc:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                            /* if iic interface */
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10d      	bne.n	8000604 <a_mpu9250_mag_read+0x3a>
    {
        if (handle->iic_read(AK8963_IIC_ADDRESS << 1, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	68dc      	ldr	r4, [r3, #12]
 80005ec:	893b      	ldrh	r3, [r7, #8]
 80005ee:	7af9      	ldrb	r1, [r7, #11]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	2018      	movs	r0, #24
 80005f4:	47a0      	blx	r4
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <a_mpu9250_mag_read+0x36>
        {
            return 1;                                                                        /* return error */
 80005fc:	2301      	movs	r3, #1
 80005fe:	e002      	b.n	8000606 <a_mpu9250_mag_read+0x3c>
        }
        else
        {
            return 0;                                                                        /* success return 0 */
 8000600:	2300      	movs	r3, #0
 8000602:	e000      	b.n	8000606 <a_mpu9250_mag_read+0x3c>
        }
    }
    else                                                                                     /* spi interface */
    {
        return 1;
 8000604:	2301      	movs	r3, #1
    }
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bd90      	pop	{r4, r7, pc}

0800060e <a_mpu9250_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu9250_deinit(mpu9250_handle_t *handle)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)        /* if iic interface */
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800061c:	2b00      	cmp	r3, #0
 800061e:	d109      	bne.n	8000634 <a_mpu9250_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	4798      	blx	r3
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <a_mpu9250_deinit+0x22>
        {
            return 1;                                    /* return error */
 800062c:	2301      	movs	r3, #1
 800062e:	e00a      	b.n	8000646 <a_mpu9250_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8000630:	2300      	movs	r3, #0
 8000632:	e008      	b.n	8000646 <a_mpu9250_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <a_mpu9250_deinit+0x36>
        {
            return 1;                                    /* return error */
 8000640:	2301      	movs	r3, #1
 8000642:	e000      	b.n	8000646 <a_mpu9250_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8000644:	2300      	movs	r3, #0
        }
    }
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <mpu9250_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu9250_set_interface(mpu9250_handle_t *handle, mpu9250_interface_t interface)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <mpu9250_set_interface+0x16>
    {
        return 2;                                /* return error */
 8000660:	2302      	movs	r3, #2
 8000662:	e004      	b.n	800066e <mpu9250_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	78fa      	ldrb	r2, [r7, #3]
 8000668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return 0;                                    /* success return 0 */
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <mpu9250_get_interface>:
 *             - 0 success
 *             - 2 handle is NULL
 * @note       none
 */
uint8_t mpu9250_get_interface(mpu9250_handle_t *handle, mpu9250_interface_t *interface)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	6039      	str	r1, [r7, #0]
    if (handle == NULL)                                         /* check handle */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <mpu9250_get_interface+0x14>
    {
        return 2;                                               /* return error */
 800068a:	2302      	movs	r3, #2
 800068c:	e005      	b.n	800069a <mpu9250_get_interface+0x20>
    }
    
    *interface = (mpu9250_interface_t)(handle->iic_spi);        /* get interface */
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	701a      	strb	r2, [r3, #0]
    
    return 0;                                                   /* success return 0 */
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <mpu9250_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu9250_set_addr_pin(mpu9250_handle_t *handle, mpu9250_address_t addr_pin)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	460b      	mov	r3, r1
 80006b0:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d101      	bne.n	80006bc <mpu9250_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 80006b8:	2302      	movs	r3, #2
 80006ba:	e003      	b.n	80006c4 <mpu9250_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	78fa      	ldrb	r2, [r7, #3]
 80006c0:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <mpu9250_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu9250_init(mpu9250_handle_t *handle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <mpu9250_init+0x12>
    {
        return 2;                                                                   /* return error */
 80006de:	2302      	movs	r3, #2
 80006e0:	e0fb      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <mpu9250_init+0x1e>
    {
        return 3;                                                                   /* return error */
 80006ea:	2303      	movs	r3, #3
 80006ec:	e0f5      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d105      	bne.n	8000702 <mpu9250_init+0x32>
    {
        handle->debug_print("mpu9250: iic_init is null.\n");                        /* iic_init is null */
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006fa:	487a      	ldr	r0, [pc, #488]	; (80008e4 <mpu9250_init+0x214>)
 80006fc:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80006fe:	2303      	movs	r3, #3
 8000700:	e0eb      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d105      	bne.n	8000716 <mpu9250_init+0x46>
    {
        handle->debug_print("mpu9250: iic_deinit is null.\n");                      /* iic_deinit is null */
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070e:	4876      	ldr	r0, [pc, #472]	; (80008e8 <mpu9250_init+0x218>)
 8000710:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000712:	2303      	movs	r3, #3
 8000714:	e0e1      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d105      	bne.n	800072a <mpu9250_init+0x5a>
    {
        handle->debug_print("mpu9250: iic_read is null.\n");                        /* iic_read is null */
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000722:	4872      	ldr	r0, [pc, #456]	; (80008ec <mpu9250_init+0x21c>)
 8000724:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000726:	2303      	movs	r3, #3
 8000728:	e0d7      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <mpu9250_init+0x6e>
    {
        handle->debug_print("mpu9250: iic_write is null.\n");                       /* iic_write is null */
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000736:	486e      	ldr	r0, [pc, #440]	; (80008f0 <mpu9250_init+0x220>)
 8000738:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800073a:	2303      	movs	r3, #3
 800073c:	e0cd      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d105      	bne.n	8000752 <mpu9250_init+0x82>
    {
        handle->debug_print("mpu9250: spi_init is null.\n");                        /* spi_init is null */
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074a:	486a      	ldr	r0, [pc, #424]	; (80008f4 <mpu9250_init+0x224>)
 800074c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800074e:	2303      	movs	r3, #3
 8000750:	e0c3      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d105      	bne.n	8000766 <mpu9250_init+0x96>
    {
        handle->debug_print("mpu9250: spi_deinit is null.\n");                      /* spi_deinit is null */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075e:	4866      	ldr	r0, [pc, #408]	; (80008f8 <mpu9250_init+0x228>)
 8000760:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000762:	2303      	movs	r3, #3
 8000764:	e0b9      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d105      	bne.n	800077a <mpu9250_init+0xaa>
    {
        handle->debug_print("mpu9250: spi_read is null.\n");                        /* spi_read is null */
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000772:	4862      	ldr	r0, [pc, #392]	; (80008fc <mpu9250_init+0x22c>)
 8000774:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000776:	2303      	movs	r3, #3
 8000778:	e0af      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d105      	bne.n	800078e <mpu9250_init+0xbe>
    {
        handle->debug_print("mpu9250: spi_write is null.\n");                       /* spi_write is null */
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	485e      	ldr	r0, [pc, #376]	; (8000900 <mpu9250_init+0x230>)
 8000788:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800078a:	2303      	movs	r3, #3
 800078c:	e0a5      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000792:	2b00      	cmp	r3, #0
 8000794:	d105      	bne.n	80007a2 <mpu9250_init+0xd2>
    {
        handle->debug_print("mpu9250: delay_ms is null.\n");                        /* delay_ms is null */
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079a:	485a      	ldr	r0, [pc, #360]	; (8000904 <mpu9250_init+0x234>)
 800079c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800079e:	2303      	movs	r3, #3
 80007a0:	e09b      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d105      	bne.n	80007b6 <mpu9250_init+0xe6>
    {
        handle->debug_print("mpu9250: receive_callback is null.\n");                /* receive_callback is null */
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ae:	4856      	ldr	r0, [pc, #344]	; (8000908 <mpu9250_init+0x238>)
 80007b0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80007b2:	2303      	movs	r3, #3
 80007b4:	e091      	b.n	80008da <mpu9250_init+0x20a>
    }
    
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                   /* if iic interface */
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10d      	bne.n	80007dc <mpu9250_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4798      	blx	r3
 80007c6:	4603      	mov	r3, r0
 80007c8:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80007ca:	7afb      	ldrb	r3, [r7, #11]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d013      	beq.n	80007f8 <mpu9250_init+0x128>
        {
            handle->debug_print("mpu9250: iic init failed.\n");                     /* iic init failed */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d4:	484d      	ldr	r0, [pc, #308]	; (800090c <mpu9250_init+0x23c>)
 80007d6:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80007d8:	2301      	movs	r3, #1
 80007da:	e07e      	b.n	80008da <mpu9250_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	4798      	blx	r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d005      	beq.n	80007f8 <mpu9250_init+0x128>
        {
            handle->debug_print("mpu9250: spi init failed.\n");                     /* spi init failed */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	4847      	ldr	r0, [pc, #284]	; (8000910 <mpu9250_init+0x240>)
 80007f2:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80007f4:	2301      	movs	r3, #1
 80007f6:	e070      	b.n	80008da <mpu9250_init+0x20a>
        }
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 80007f8:	f107 020a 	add.w	r2, r7, #10
 80007fc:	2301      	movs	r3, #1
 80007fe:	2175      	movs	r1, #117	; 0x75
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fe61 	bl	80004c8 <a_mpu9250_read>
 8000806:	4603      	mov	r3, r0
 8000808:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800080a:	7afb      	ldrb	r3, [r7, #11]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d008      	beq.n	8000822 <mpu9250_init+0x152>
    {
        handle->debug_print("mpu9250: read who am i failed.\n");                    /* read who am I failed */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	483f      	ldr	r0, [pc, #252]	; (8000914 <mpu9250_init+0x244>)
 8000816:	4798      	blx	r3
        (void)a_mpu9250_deinit(handle);                                             /* iic or spi deinit */
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fef8 	bl	800060e <a_mpu9250_deinit>
        
        return 5;                                                                   /* return error */
 800081e:	2305      	movs	r3, #5
 8000820:	e05b      	b.n	80008da <mpu9250_init+0x20a>
    }
    if (prev != 0x71)                                                               /* check the id */
 8000822:	7abb      	ldrb	r3, [r7, #10]
 8000824:	2b71      	cmp	r3, #113	; 0x71
 8000826:	d008      	beq.n	800083a <mpu9250_init+0x16a>
    {
        handle->debug_print("mpu9250: id is invalid.\n");                           /* id is invalid */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800082c:	483a      	ldr	r0, [pc, #232]	; (8000918 <mpu9250_init+0x248>)
 800082e:	4798      	blx	r3
        (void)a_mpu9250_deinit(handle);                                             /* iic or spi deinit */
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff feec 	bl	800060e <a_mpu9250_deinit>
        
        return 5;                                                                   /* return error */
 8000836:	2305      	movs	r3, #5
 8000838:	e04f      	b.n	80008da <mpu9250_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	72bb      	strb	r3, [r7, #10]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 800083e:	f107 020a 	add.w	r2, r7, #10
 8000842:	2301      	movs	r3, #1
 8000844:	216b      	movs	r1, #107	; 0x6b
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fe6f 	bl	800052a <a_mpu9250_write>
 800084c:	4603      	mov	r3, r0
 800084e:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8000850:	7afb      	ldrb	r3, [r7, #11]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d008      	beq.n	8000868 <mpu9250_init+0x198>
    {
        handle->debug_print("mpu9250: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	4830      	ldr	r0, [pc, #192]	; (800091c <mpu9250_init+0x24c>)
 800085c:	4798      	blx	r3
        (void)a_mpu9250_deinit(handle);                                             /* iic or spi deinit */
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fed5 	bl	800060e <a_mpu9250_deinit>
        
        return 4;                                                                   /* return error */
 8000864:	2304      	movs	r3, #4
 8000866:	e038      	b.n	80008da <mpu9250_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086c:	200a      	movs	r0, #10
 800086e:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8000870:	2364      	movs	r3, #100	; 0x64
 8000872:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8000874:	e029      	b.n	80008ca <mpu9250_init+0x1fa>
    {
        res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 8000876:	f107 020a 	add.w	r2, r7, #10
 800087a:	2301      	movs	r3, #1
 800087c:	216b      	movs	r1, #107	; 0x6b
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe22 	bl	80004c8 <a_mpu9250_read>
 8000884:	4603      	mov	r3, r0
 8000886:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d008      	beq.n	80008a0 <mpu9250_init+0x1d0>
        {
            handle->debug_print("mpu9250: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000892:	4823      	ldr	r0, [pc, #140]	; (8000920 <mpu9250_init+0x250>)
 8000894:	4798      	blx	r3
            (void)a_mpu9250_deinit(handle);                                         /* iic or spi deinit */
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff feb9 	bl	800060e <a_mpu9250_deinit>
            
            return 4;                                                               /* return error */
 800089c:	2304      	movs	r3, #4
 800089e:	e01c      	b.n	80008da <mpu9250_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 80008a0:	7abb      	ldrb	r3, [r7, #10]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db09      	blt.n	80008bc <mpu9250_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2201      	movs	r2, #1
 80008ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            
            return 0;                                                               /* success return 0 */
 80008b8:	2300      	movs	r3, #0
 80008ba:	e00e      	b.n	80008da <mpu9250_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c0:	200a      	movs	r0, #10
 80008c2:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1d2      	bne.n	8000876 <mpu9250_init+0x1a6>
    }
    
    handle->debug_print("mpu9250: reset failed.\n");                                /* reset failed */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d4:	4813      	ldr	r0, [pc, #76]	; (8000924 <mpu9250_init+0x254>)
 80008d6:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 80008d8:	2304      	movs	r3, #4
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	0800a270 	.word	0x0800a270
 80008e8:	0800a28c 	.word	0x0800a28c
 80008ec:	0800a2ac 	.word	0x0800a2ac
 80008f0:	0800a2c8 	.word	0x0800a2c8
 80008f4:	0800a2e8 	.word	0x0800a2e8
 80008f8:	0800a304 	.word	0x0800a304
 80008fc:	0800a324 	.word	0x0800a324
 8000900:	0800a340 	.word	0x0800a340
 8000904:	0800a360 	.word	0x0800a360
 8000908:	0800a37c 	.word	0x0800a37c
 800090c:	0800a3a0 	.word	0x0800a3a0
 8000910:	0800a3bc 	.word	0x0800a3bc
 8000914:	0800a3d8 	.word	0x0800a3d8
 8000918:	0800a3f8 	.word	0x0800a3f8
 800091c:	0800a414 	.word	0x0800a414
 8000920:	0800a438 	.word	0x0800a438
 8000924:	0800a45c 	.word	0x0800a45c

08000928 <mpu9250_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu9250_deinit(mpu9250_handle_t *handle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <mpu9250_deinit+0x12>
    {
        return 2;                                                               /* return error */
 8000936:	2302      	movs	r3, #2
 8000938:	e031      	b.n	800099e <mpu9250_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000940:	2b01      	cmp	r3, #1
 8000942:	d001      	beq.n	8000948 <mpu9250_deinit+0x20>
    {
        return 3;                                                               /* return error */
 8000944:	2303      	movs	r3, #3
 8000946:	e02a      	b.n	800099e <mpu9250_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 8000948:	234f      	movs	r3, #79	; 0x4f
 800094a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 800094c:	f107 020e 	add.w	r2, r7, #14
 8000950:	2301      	movs	r3, #1
 8000952:	216b      	movs	r1, #107	; 0x6b
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff fde8 	bl	800052a <a_mpu9250_write>
 800095a:	4603      	mov	r3, r0
 800095c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <mpu9250_deinit+0x48>
    {
        handle->debug_print("mpu9250: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000968:	480f      	ldr	r0, [pc, #60]	; (80009a8 <mpu9250_deinit+0x80>)
 800096a:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 800096c:	2304      	movs	r3, #4
 800096e:	e016      	b.n	800099e <mpu9250_deinit+0x76>
    }
    res = a_mpu9250_deinit(handle);                                             /* deinit */
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff fe4c 	bl	800060e <a_mpu9250_deinit>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d005      	beq.n	800098c <mpu9250_deinit+0x64>
    {
        handle->debug_print("mpu9250: deinit failed.\n");                       /* deinit failed */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <mpu9250_deinit+0x84>)
 8000986:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 8000988:	2301      	movs	r3, #1
 800098a:	e008      	b.n	800099e <mpu9250_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    return 0;                                                                   /* success return 0 */
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	0800a414 	.word	0x0800a414
 80009ac:	0800a474 	.word	0x0800a474

080009b0 <mpu9250_read>:
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     int16_t (*mag_raw)[3], float (*mag_ut)[3],
                     uint16_t *len
                    )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <mpu9250_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 80009c4:	2302      	movs	r3, #2
 80009c6:	f001 bd65 	b.w	8002494 <mpu9250_read+0x1ae4>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d002      	beq.n	80009da <mpu9250_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 80009d4:	2303      	movs	r3, #3
 80009d6:	f001 bd5d 	b.w	8002494 <mpu9250_read+0x1ae4>
    }
    if ((*len) == 0)                                                                               /* check length */
 80009da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d106      	bne.n	80009f0 <mpu9250_read+0x40>
    {
        handle->debug_print("mpu9250: length is zero.\n");                                         /* length is zero */
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	4873      	ldr	r0, [pc, #460]	; (8000bb4 <mpu9250_read+0x204>)
 80009e8:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 80009ea:	2304      	movs	r3, #4
 80009ec:	f001 bd52 	b.w	8002494 <mpu9250_read+0x1ae4>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d006      	beq.n	8000a08 <mpu9250_read+0x58>
    {
        handle->debug_print("mpu9250: dmp is running.\n");                                         /* dmp is running */
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fe:	486e      	ldr	r0, [pc, #440]	; (8000bb8 <mpu9250_read+0x208>)
 8000a00:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 8000a02:	2305      	movs	r3, #5
 8000a04:	f001 bd46 	b.w	8002494 <mpu9250_read+0x1ae4>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 8000a08:	f107 0217 	add.w	r2, r7, #23
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	216a      	movs	r1, #106	; 0x6a
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f7ff fd59 	bl	80004c8 <a_mpu9250_read>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 8000a1c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d006      	beq.n	8000a32 <mpu9250_read+0x82>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	4864      	ldr	r0, [pc, #400]	; (8000bbc <mpu9250_read+0x20c>)
 8000a2a:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f001 bd31 	b.w	8002494 <mpu9250_read+0x1ae4>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 8000a32:	f107 0216 	add.w	r2, r7, #22
 8000a36:	2301      	movs	r3, #1
 8000a38:	211c      	movs	r1, #28
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fd44 	bl	80004c8 <a_mpu9250_read>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 8000a46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d006      	beq.n	8000a5c <mpu9250_read+0xac>
    {
        handle->debug_print("mpu9250: read accel config failed.\n");                               /* read accel config failed */
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	485b      	ldr	r0, [pc, #364]	; (8000bc0 <mpu9250_read+0x210>)
 8000a54:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8000a56:	2301      	movs	r3, #1
 8000a58:	f001 bd1c 	b.w	8002494 <mpu9250_read+0x1ae4>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 8000a5c:	f107 0215 	add.w	r2, r7, #21
 8000a60:	2301      	movs	r3, #1
 8000a62:	211b      	movs	r1, #27
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff fd2f 	bl	80004c8 <a_mpu9250_read>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 8000a70:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <mpu9250_read+0xd6>
    {
        handle->debug_print("mpu9250: read gyro config failed.\n");                                /* read gyro config failed */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	4851      	ldr	r0, [pc, #324]	; (8000bc4 <mpu9250_read+0x214>)
 8000a7e:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8000a80:	2301      	movs	r3, #1
 8000a82:	f001 bd07 	b.w	8002494 <mpu9250_read+0x1ae4>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 8000a86:	7dbb      	ldrb	r3, [r7, #22]
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	75bb      	strb	r3, [r7, #22]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 8000a94:	7d7b      	ldrb	r3, [r7, #21]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	757b      	strb	r3, [r7, #21]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f001 81fb 	beq.w	8001ea4 <mpu9250_read+0x14f4>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu9250_read(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 8000aae:	f107 0214 	add.w	r2, r7, #20
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	2123      	movs	r1, #35	; 0x23
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fd06 	bl	80004c8 <a_mpu9250_read>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8000ac2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <mpu9250_read+0x128>
        {
            handle->debug_print("mpu9250: read fifo enable failed.\n");                            /* read fifo enable failed */
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ace:	483e      	ldr	r0, [pc, #248]	; (8000bc8 <mpu9250_read+0x218>)
 8000ad0:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f001 bcde 	b.w	8002494 <mpu9250_read+0x1ae4>
        }
        if ((conf != 0x78) && (conf != 0x79))                                                      /* check the conf */
 8000ad8:	7d3b      	ldrb	r3, [r7, #20]
 8000ada:	2b78      	cmp	r3, #120	; 0x78
 8000adc:	d009      	beq.n	8000af2 <mpu9250_read+0x142>
 8000ade:	7d3b      	ldrb	r3, [r7, #20]
 8000ae0:	2b79      	cmp	r3, #121	; 0x79
 8000ae2:	d006      	beq.n	8000af2 <mpu9250_read+0x142>
        {
            handle->debug_print("mpu9250: fifo conf is error.\n");                                 /* fifo conf is error */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	4838      	ldr	r0, [pc, #224]	; (8000bcc <mpu9250_read+0x21c>)
 8000aea:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 8000aec:	2306      	movs	r3, #6
 8000aee:	f001 bcd1 	b.w	8002494 <mpu9250_read+0x1ae4>
        }
        
        res = a_mpu9250_read(handle, MPU9250_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 8000af2:	f107 0210 	add.w	r2, r7, #16
 8000af6:	2302      	movs	r3, #2
 8000af8:	2172      	movs	r1, #114	; 0x72
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff fce4 	bl	80004c8 <a_mpu9250_read>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8000b06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <mpu9250_read+0x16c>
        {
            handle->debug_print("mpu9250: read fifo count failed.\n");                             /* read fifo count failed */
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	482f      	ldr	r0, [pc, #188]	; (8000bd0 <mpu9250_read+0x220>)
 8000b14:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8000b16:	2301      	movs	r3, #1
 8000b18:	f001 bcbc 	b.w	8002494 <mpu9250_read+0x1ae4>
        }
        
        if (conf == 0x78)                                                                          /* only acc and gyro */
 8000b1c:	7d3b      	ldrb	r3, [r7, #20]
 8000b1e:	2b78      	cmp	r3, #120	; 0x78
 8000b20:	f040 8443 	bne.w	80013aa <mpu9250_read+0x9fa>
        {
            count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                  /* set count */
 8000b24:	7c3b      	ldrb	r3, [r7, #16]
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	7c7b      	ldrb	r3, [r7, #17]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < 1024) ? count : 1024;                                                 /* just the counter */
 8000b34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3a:	bf28      	it	cs
 8000b3c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8000b40:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < ((*len) * 12)) ? count : ((*len) * 12);                               /* just outer buffer size */
 8000b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	461a      	mov	r2, r3
 8000b52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b54:	4293      	cmp	r3, r2
 8000b56:	bfa8      	it	ge
 8000b58:	4613      	movge	r3, r2
 8000b5a:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count / 12) * 12;                                                             /* 12 times */
 8000b5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b5e:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <mpu9250_read+0x224>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	461a      	mov	r2, r3
 8000b6a:	0052      	lsls	r2, r2, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	84fb      	strh	r3, [r7, #38]	; 0x26
            *len = count / 12;                                                                     /* set the output length */
 8000b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <mpu9250_read+0x224>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b80:	801a      	strh	r2, [r3, #0]
            res = a_mpu9250_read(handle, MPU9250_REG_R_W, handle->buf, count);                     /* read data */
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8000b88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b8a:	2174      	movs	r1, #116	; 0x74
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff fc9b 	bl	80004c8 <a_mpu9250_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 8000b98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <mpu9250_read+0x1fe>
            {
                handle->debug_print("mpu9250: read failed.\n");                                    /* read failed */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <mpu9250_read+0x228>)
 8000ba6:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f001 bc73 	b.w	8002494 <mpu9250_read+0x1ae4>
            }
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8000bae:	2300      	movs	r3, #0
 8000bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000bb2:	e3f1      	b.n	8001398 <mpu9250_read+0x9e8>
 8000bb4:	0800a490 	.word	0x0800a490
 8000bb8:	08009f60 	.word	0x08009f60
 8000bbc:	0800a228 	.word	0x0800a228
 8000bc0:	0800a1e0 	.word	0x0800a1e0
 8000bc4:	0800a204 	.word	0x0800a204
 8000bc8:	0800a4ac 	.word	0x0800a4ac
 8000bcc:	0800a4d0 	.word	0x0800a4d0
 8000bd0:	0800a164 	.word	0x0800a164
 8000bd4:	aaaaaaab 	.word	0xaaaaaaab
 8000bd8:	0800a188 	.word	0x0800a188
 8000bdc:	46800000 	.word	0x46800000
 8000be0:	46000000 	.word	0x46000000
            {
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8000be4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 1];                              /* set raw accel x */
 8000bfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	3301      	adds	r3, #1
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c10:	b219      	sxth	r1, r3
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8000c12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	4413      	add	r3, r2
 8000c22:	ea40 0201 	orr.w	r2, r0, r1
 8000c26:	b212      	sxth	r2, r2
 8000c28:	801a      	strh	r2, [r3, #0]
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8000c2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	3302      	adds	r3, #2
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 3];                              /* set raw accel y */
 8000c42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	3303      	adds	r3, #3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4413      	add	r3, r2
 8000c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c56:	b219      	sxth	r1, r3
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8000c58:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	461a      	mov	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4413      	add	r3, r2
 8000c68:	ea40 0201 	orr.w	r2, r0, r1
 8000c6c:	b212      	sxth	r2, r2
 8000c6e:	805a      	strh	r2, [r3, #2]
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8000c70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 5];                              /* set raw accel z */
 8000c88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	3305      	adds	r3, #5
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c9c:	b219      	sxth	r1, r3
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8000c9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	461a      	mov	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	ea40 0201 	orr.w	r2, r0, r1
 8000cb2:	b212      	sxth	r2, r2
 8000cb4:	809a      	strh	r2, [r3, #4]
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8000cb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	3306      	adds	r3, #6
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 7];                               /* set raw gyro x */
 8000cce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	3307      	adds	r3, #7
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ce2:	b219      	sxth	r1, r3
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8000ce4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	461a      	mov	r2, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	ea40 0201 	orr.w	r2, r0, r1
 8000cf8:	b212      	sxth	r2, r2
 8000cfa:	801a      	strh	r2, [r3, #0]
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8000cfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3308      	adds	r3, #8
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 9];                               /* set raw gyro y */
 8000d14:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	3309      	adds	r3, #9
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d28:	b219      	sxth	r1, r3
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8000d2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	461a      	mov	r2, r3
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	ea40 0201 	orr.w	r2, r0, r1
 8000d3e:	b212      	sxth	r2, r2
 8000d40:	805a      	strh	r2, [r3, #2]
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8000d42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	330a      	adds	r3, #10
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 11];                              /* set raw gyro z */
 8000d5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	330b      	adds	r3, #11
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d6e:	b219      	sxth	r1, r3
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8000d70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	ea40 0201 	orr.w	r2, r0, r1
 8000d84:	b212      	sxth	r2, r2
 8000d86:	809a      	strh	r2, [r3, #4]
                mag_raw[i][0] = 0;                                                                 /* set 0 */
 8000d88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4413      	add	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	461a      	mov	r2, r3
 8000d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	801a      	strh	r2, [r3, #0]
                mag_raw[i][1] = 0;                                                                 /* set 0 */
 8000d9c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	461a      	mov	r2, r3
 8000da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000daa:	4413      	add	r3, r2
 8000dac:	2200      	movs	r2, #0
 8000dae:	805a      	strh	r2, [r3, #2]
                mag_raw[i][2] = 0;                                                                 /* set 0 */
 8000db0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dbe:	4413      	add	r3, r2
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	809a      	strh	r2, [r3, #4]
                
                if (accel_conf == 0)                                                               /* ±2g */
 8000dc4:	7dbb      	ldrb	r3, [r7, #22]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d154      	bne.n	8000e74 <mpu9250_read+0x4c4>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                           /* set accel x */
 8000dca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	4413      	add	r3, r2
 8000dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	ed5f 6a87 	vldr	s13, [pc, #-540]	; 8000bdc <mpu9250_read+0x22c>
 8000dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dfe:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                           /* set accel y */
 8000e02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	4413      	add	r3, r2
 8000e12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	ed5f 6a95 	vldr	s13, [pc, #-596]	; 8000bdc <mpu9250_read+0x22c>
 8000e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e36:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                           /* set accel z */
 8000e3a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	461a      	mov	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	4413      	add	r3, r2
 8000e4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	ed5f 6aa3 	vldr	s13, [pc, #-652]	; 8000bdc <mpu9250_read+0x22c>
 8000e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e6e:	edc3 7a02 	vstr	s15, [r3, #8]
 8000e72:	e103      	b.n	800107c <mpu9250_read+0x6cc>
                }
                else if (accel_conf == 1)                                                          /* ±4g */
 8000e74:	7dbb      	ldrb	r3, [r7, #22]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d154      	bne.n	8000f24 <mpu9250_read+0x574>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                            /* set accel x */
 8000e7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	461a      	mov	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	4413      	add	r3, r2
 8000e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	ed5f 6ab2 	vldr	s13, [pc, #-712]	; 8000be0 <mpu9250_read+0x230>
 8000eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eae:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                            /* set accel y */
 8000eb2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ece:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	ed5f 6ac0 	vldr	s13, [pc, #-768]	; 8000be0 <mpu9250_read+0x230>
 8000ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee6:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                            /* set accel z */
 8000eea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	461a      	mov	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	eddf 6ab1 	vldr	s13, [pc, #708]	; 80011dc <mpu9250_read+0x82c>
 8000f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1e:	edc3 7a02 	vstr	s15, [r3, #8]
 8000f22:	e0ab      	b.n	800107c <mpu9250_read+0x6cc>
                }
                else if (accel_conf == 2)                                                          /* ±8g */
 8000f24:	7dbb      	ldrb	r3, [r7, #22]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d154      	bne.n	8000fd4 <mpu9250_read+0x624>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                            /* set accel x */
 8000f2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	461a      	mov	r2, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	4413      	add	r3, r2
 8000f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80011e0 <mpu9250_read+0x830>
 8000f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                            /* set accel y */
 8000f62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	4413      	add	r3, r2
 8000f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	eddf 6a94 	vldr	s13, [pc, #592]	; 80011e0 <mpu9250_read+0x830>
 8000f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f96:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                            /* set accel z */
 8000f9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	4413      	add	r3, r2
 8000faa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	eddf 6a86 	vldr	s13, [pc, #536]	; 80011e0 <mpu9250_read+0x830>
 8000fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fce:	edc3 7a02 	vstr	s15, [r3, #8]
 8000fd2:	e053      	b.n	800107c <mpu9250_read+0x6cc>
                }
                else                                                                               /* ±16g */
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                            /* set accel x */
 8000fd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	eddf 6a78 	vldr	s13, [pc, #480]	; 80011e4 <mpu9250_read+0x834>
 8001004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001008:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                            /* set accel y */
 800100c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	461a      	mov	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4413      	add	r3, r2
 800101c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001028:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80011e4 <mpu9250_read+0x834>
 800103c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001040:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                            /* set accel z */
 8001044:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4413      	add	r3, r2
 8001054:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001060:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80011e4 <mpu9250_read+0x834>
 8001074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001078:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                
                if (gyro_conf == 0)                                                                /* ±250dps */
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d154      	bne.n	800112c <mpu9250_read+0x77c>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                             /* set gyro x */
 8001082:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	461a      	mov	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	4413      	add	r3, r2
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	461a      	mov	r2, r3
 80010aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ac:	4413      	add	r3, r2
 80010ae:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80011e8 <mpu9250_read+0x838>
 80010b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b6:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                             /* set gyro y */
 80010ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	461a      	mov	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	461a      	mov	r2, r3
 80010e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010e4:	4413      	add	r3, r2
 80010e6:	eddf 6a40 	vldr	s13, [pc, #256]	; 80011e8 <mpu9250_read+0x838>
 80010ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ee:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                             /* set gyro z */
 80010f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	461a      	mov	r2, r3
 800111a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800111c:	4413      	add	r3, r2
 800111e:	eddf 6a32 	vldr	s13, [pc, #200]	; 80011e8 <mpu9250_read+0x838>
 8001122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001126:	edc3 7a02 	vstr	s15, [r3, #8]
 800112a:	e111      	b.n	8001350 <mpu9250_read+0x9a0>
                }
                else if (gyro_conf == 1)                                                           /* ±500dps */
 800112c:	7d7b      	ldrb	r3, [r7, #21]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d162      	bne.n	80011f8 <mpu9250_read+0x848>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                              /* set gyro x */
 8001132:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	461a      	mov	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800115c:	4413      	add	r3, r2
 800115e:	eddf 6a23 	vldr	s13, [pc, #140]	; 80011ec <mpu9250_read+0x83c>
 8001162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001166:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                              /* set gyro y */
 800116a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	461a      	mov	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	4413      	add	r3, r2
 800117a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001186:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001194:	4413      	add	r3, r2
 8001196:	eddf 6a15 	vldr	s13, [pc, #84]	; 80011ec <mpu9250_read+0x83c>
 800119a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119e:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                              /* set gyro z */
 80011a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	461a      	mov	r2, r3
 80011ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011cc:	4413      	add	r3, r2
 80011ce:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011ec <mpu9250_read+0x83c>
 80011d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d6:	edc3 7a02 	vstr	s15, [r3, #8]
 80011da:	e0b9      	b.n	8001350 <mpu9250_read+0x9a0>
 80011dc:	46000000 	.word	0x46000000
 80011e0:	45800000 	.word	0x45800000
 80011e4:	45000000 	.word	0x45000000
 80011e8:	43030000 	.word	0x43030000
 80011ec:	42830000 	.word	0x42830000
 80011f0:	42033333 	.word	0x42033333
 80011f4:	41833333 	.word	0x41833333
                }
                else if (gyro_conf == 2)                                                           /* ±1000dps */
 80011f8:	7d7b      	ldrb	r3, [r7, #21]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d154      	bne.n	80012a8 <mpu9250_read+0x8f8>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                              /* set gyro x */
 80011fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	461a      	mov	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	4413      	add	r3, r2
 800120e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	461a      	mov	r2, r3
 8001226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001228:	4413      	add	r3, r2
 800122a:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 80011f0 <mpu9250_read+0x840>
 800122e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001232:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                              /* set gyro y */
 8001236:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	461a      	mov	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001252:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	461a      	mov	r2, r3
 800125e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001260:	4413      	add	r3, r2
 8001262:	ed5f 6a1d 	vldr	s13, [pc, #-116]	; 80011f0 <mpu9250_read+0x840>
 8001266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126a:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                              /* set gyro z */
 800126e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	461a      	mov	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	461a      	mov	r2, r3
 8001296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001298:	4413      	add	r3, r2
 800129a:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 80011f0 <mpu9250_read+0x840>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	edc3 7a02 	vstr	s15, [r3, #8]
 80012a6:	e053      	b.n	8001350 <mpu9250_read+0x9a0>
                }
                else                                                                               /* ±2000dps */
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                              /* set gyro x */
 80012a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	461a      	mov	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	461a      	mov	r2, r3
 80012d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d2:	4413      	add	r3, r2
 80012d4:	ed5f 6a39 	vldr	s13, [pc, #-228]	; 80011f4 <mpu9250_read+0x844>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                              /* set gyro y */
 80012e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	461a      	mov	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	461a      	mov	r2, r3
 8001308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800130a:	4413      	add	r3, r2
 800130c:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80011f4 <mpu9250_read+0x844>
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                              /* set gyro z */
 8001318:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	461a      	mov	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001334:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	461a      	mov	r2, r3
 8001340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001342:	4413      	add	r3, r2
 8001344:	ed5f 6a55 	vldr	s13, [pc, #-340]	; 80011f4 <mpu9250_read+0x844>
 8001348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134c:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                mag_ut[i][0] = 0.0f;                                                               /* set 0.0f */
 8001350:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	461a      	mov	r2, r3
 800135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800135e:	4413      	add	r3, r2
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
                mag_ut[i][1] = 0.0f;                                                               /* set 0.0f */
 8001366:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	461a      	mov	r2, r3
 8001372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001374:	4413      	add	r3, r2
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
                mag_ut[i][2] = 0.0f;                                                               /* set 0.0f */
 800137c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	461a      	mov	r2, r3
 8001388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800138a:	4413      	add	r3, r2
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8001392:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001394:	3301      	adds	r3, #1
 8001396:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800139e:	429a      	cmp	r2, r3
 80013a0:	f4ff ac20 	bcc.w	8000be4 <mpu9250_read+0x234>
            }
            
            return 0;                                                                              /* success return 0 */
 80013a4:	2300      	movs	r3, #0
 80013a6:	f001 b875 	b.w	8002494 <mpu9250_read+0x1ae4>
        {
            float mag_k_x;
            float mag_k_y;
            float mag_k_z;
            
            count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                  /* set count */
 80013aa:	7c3b      	ldrb	r3, [r7, #16]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	7c7b      	ldrb	r3, [r7, #17]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < 1024) ? count : 1024;                                                 /* just the counter */
 80013ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c0:	bf28      	it	cs
 80013c2:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 80013c6:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < ((*len) * 20)) ? count : ((*len) * 20);                               /* just outer buffer size */
 80013c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	461a      	mov	r2, r3
 80013d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013da:	4293      	cmp	r3, r2
 80013dc:	bfa8      	it	ge
 80013de:	4613      	movge	r3, r2
 80013e0:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count / 20) * 20;                                                             /* 20 times */
 80013e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013e4:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <mpu9250_read+0xb24>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            *len = count / 20;                                                                     /* set the output length */
 80013f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <mpu9250_read+0xb24>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	b29a      	uxth	r2, r3
 8001404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001406:	801a      	strh	r2, [r3, #0]
            res = a_mpu9250_read(handle, MPU9250_REG_R_W, handle->buf, count);                     /* read data */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800140e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001410:	2174      	movs	r1, #116	; 0x74
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff f858 	bl	80004c8 <a_mpu9250_read>
 8001418:	4603      	mov	r3, r0
 800141a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 800141e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <mpu9250_read+0xa84>
            {
                handle->debug_print("mpu9250: read failed.\n");                                    /* read failed */
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	482b      	ldr	r0, [pc, #172]	; (80014d8 <mpu9250_read+0xb28>)
 800142c:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 800142e:	2301      	movs	r3, #1
 8001430:	f001 b830 	b.w	8002494 <mpu9250_read+0x1ae4>
            }
            
            mag_k_x = ((float)handle->mag_asa[0] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the x sensitivity adjustment */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001442:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80014dc <mpu9250_read+0xb2c>
 8001446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800144a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800144e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001452:	eddf 6a22 	vldr	s13, [pc, #136]	; 80014dc <mpu9250_read+0xb2c>
 8001456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001462:	edc7 7a08 	vstr	s15, [r7, #32]
            mag_k_y = ((float)handle->mag_asa[1] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the y sensitivity adjustment */
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001474:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80014dc <mpu9250_read+0xb2c>
 8001478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800147c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001480:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001484:	eddf 6a15 	vldr	s13, [pc, #84]	; 80014dc <mpu9250_read+0xb2c>
 8001488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001494:	edc7 7a07 	vstr	s15, [r7, #28]
            mag_k_z = ((float)handle->mag_asa[2] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the z sensitivity adjustment */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80014dc <mpu9250_read+0xb2c>
 80014aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014b6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80014dc <mpu9250_read+0xb2c>
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c6:	edc7 7a06 	vstr	s15, [r7, #24]
            
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 80014ca:	2300      	movs	r3, #0
 80014cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80014ce:	f000 bce1 	b.w	8001e94 <mpu9250_read+0x14e4>
 80014d2:	bf00      	nop
 80014d4:	cccccccd 	.word	0xcccccccd
 80014d8:	0800a188 	.word	0x0800a188
 80014dc:	43000000 	.word	0x43000000
 80014e0:	46800000 	.word	0x46800000
            {
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 0] << 8) | 
 80014e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 1];                              /* set raw accel x */
 80014fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	3301      	adds	r3, #1
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001510:	b219      	sxth	r1, r3
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 0] << 8) | 
 8001512:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	461a      	mov	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4413      	add	r3, r2
 8001522:	ea40 0201 	orr.w	r2, r0, r1
 8001526:	b212      	sxth	r2, r2
 8001528:	801a      	strh	r2, [r3, #0]
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 2] << 8) | 
 800152a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 3];                              /* set raw accel y */
 8001542:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	3303      	adds	r3, #3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001556:	b219      	sxth	r1, r3
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 2] << 8) | 
 8001558:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4413      	add	r3, r2
 8001568:	ea40 0201 	orr.w	r2, r0, r1
 800156c:	b212      	sxth	r2, r2
 800156e:	805a      	strh	r2, [r3, #2]
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 4] << 8) | 
 8001570:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	3304      	adds	r3, #4
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 5];                              /* set raw accel z */
 8001588:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	3305      	adds	r3, #5
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800159c:	b219      	sxth	r1, r3
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 4] << 8) | 
 800159e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	461a      	mov	r2, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4413      	add	r3, r2
 80015ae:	ea40 0201 	orr.w	r2, r0, r1
 80015b2:	b212      	sxth	r2, r2
 80015b4:	809a      	strh	r2, [r3, #4]
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 6] << 8) | 
 80015b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	3306      	adds	r3, #6
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 7];                               /* set raw gyro x */
 80015ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	3307      	adds	r3, #7
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015e2:	b219      	sxth	r1, r3
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 6] << 8) | 
 80015e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	461a      	mov	r2, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	ea40 0201 	orr.w	r2, r0, r1
 80015f8:	b212      	sxth	r2, r2
 80015fa:	801a      	strh	r2, [r3, #0]
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 8] << 8) | 
 80015fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3308      	adds	r3, #8
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 9];                               /* set raw gyro y */
 8001614:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	3309      	adds	r3, #9
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001628:	b219      	sxth	r1, r3
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 8] << 8) | 
 800162a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	461a      	mov	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	ea40 0201 	orr.w	r2, r0, r1
 800163e:	b212      	sxth	r2, r2
 8001640:	805a      	strh	r2, [r3, #2]
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 10] << 8) | 
 8001642:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	330a      	adds	r3, #10
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 11];                              /* set raw gyro z */
 800165a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	330b      	adds	r3, #11
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800166e:	b219      	sxth	r1, r3
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 10] << 8) | 
 8001670:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	461a      	mov	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4413      	add	r3, r2
 8001680:	ea40 0201 	orr.w	r2, r0, r1
 8001684:	b212      	sxth	r2, r2
 8001686:	809a      	strh	r2, [r3, #4]
                mag_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 14] << 8) | 
 8001688:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	330e      	adds	r3, #14
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 13];                               /* set raw mag x */
 80016a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	330d      	adds	r3, #13
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016b4:	b219      	sxth	r1, r3
                mag_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 14] << 8) | 
 80016b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	461a      	mov	r2, r3
 80016c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c4:	4413      	add	r3, r2
 80016c6:	ea40 0201 	orr.w	r2, r0, r1
 80016ca:	b212      	sxth	r2, r2
 80016cc:	801a      	strh	r2, [r3, #0]
                mag_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 16] << 8) | 
 80016ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	3310      	adds	r3, #16
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 15];                               /* set raw mag y */
 80016e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	330f      	adds	r3, #15
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4413      	add	r3, r2
 80016f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016fa:	b219      	sxth	r1, r3
                mag_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 16] << 8) | 
 80016fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	461a      	mov	r2, r3
 8001708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800170a:	4413      	add	r3, r2
 800170c:	ea40 0201 	orr.w	r2, r0, r1
 8001710:	b212      	sxth	r2, r2
 8001712:	805a      	strh	r2, [r3, #2]
                mag_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 18] << 8) | 
 8001714:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	3312      	adds	r3, #18
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 17];                               /* set raw mag z */
 800172c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	3311      	adds	r3, #17
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001740:	b219      	sxth	r1, r3
                mag_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 18] << 8) | 
 8001742:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	461a      	mov	r2, r3
 800174e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001750:	4413      	add	r3, r2
 8001752:	ea40 0201 	orr.w	r2, r0, r1
 8001756:	b212      	sxth	r2, r2
 8001758:	809a      	strh	r2, [r3, #4]
                
                if (accel_conf == 0)                                                               /* ±2g */
 800175a:	7dbb      	ldrb	r3, [r7, #22]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d154      	bne.n	800180a <mpu9250_read+0xe5a>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                           /* set accel x */
 8001760:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	461a      	mov	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4413      	add	r3, r2
 8001770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 80014e0 <mpu9250_read+0xb30>
 8001790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001794:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                           /* set accel y */
 8001798:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4413      	add	r3, r2
 80017a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	461a      	mov	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	ed5f 6aba 	vldr	s13, [pc, #-744]	; 80014e0 <mpu9250_read+0xb30>
 80017c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017cc:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                           /* set accel z */
 80017d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 80014e0 <mpu9250_read+0xb30>
 8001800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001804:	edc3 7a02 	vstr	s15, [r3, #8]
 8001808:	e103      	b.n	8001a12 <mpu9250_read+0x1062>
                }
                else if (accel_conf == 1)                                                          /* ±4g */
 800180a:	7dbb      	ldrb	r3, [r7, #22]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d154      	bne.n	80018ba <mpu9250_read+0xf0a>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                            /* set accel x */
 8001810:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	461a      	mov	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	eddf 6acd 	vldr	s13, [pc, #820]	; 8001b74 <mpu9250_read+0x11c4>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                            /* set accel y */
 8001848:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	eddf 6abf 	vldr	s13, [pc, #764]	; 8001b74 <mpu9250_read+0x11c4>
 8001878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187c:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                            /* set accel z */
 8001880:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	461a      	mov	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4413      	add	r3, r2
 8001890:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001b74 <mpu9250_read+0x11c4>
 80018b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b4:	edc3 7a02 	vstr	s15, [r3, #8]
 80018b8:	e0ab      	b.n	8001a12 <mpu9250_read+0x1062>
                }
                else if (accel_conf == 2)                                                          /* ±8g */
 80018ba:	7dbb      	ldrb	r3, [r7, #22]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d154      	bne.n	800196a <mpu9250_read+0xfba>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                            /* set accel x */
 80018c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	461a      	mov	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4413      	add	r3, r2
 80018d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8001b78 <mpu9250_read+0x11c8>
 80018f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f4:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                            /* set accel y */
 80018f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	461a      	mov	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4413      	add	r3, r2
 8001908:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001914:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001b78 <mpu9250_read+0x11c8>
 8001928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192c:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                            /* set accel z */
 8001930:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	461a      	mov	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4413      	add	r3, r2
 8001940:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	eddf 6a86 	vldr	s13, [pc, #536]	; 8001b78 <mpu9250_read+0x11c8>
 8001960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001964:	edc3 7a02 	vstr	s15, [r3, #8]
 8001968:	e053      	b.n	8001a12 <mpu9250_read+0x1062>
                }
                else                                                                               /* ±16g */
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                            /* set accel x */
 800196a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4413      	add	r3, r2
 800197a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001986:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001b7c <mpu9250_read+0x11cc>
 800199a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199e:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                            /* set accel y */
 80019a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	461a      	mov	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	461a      	mov	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001b7c <mpu9250_read+0x11cc>
 80019d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d6:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                            /* set accel z */
 80019da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	461a      	mov	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001b7c <mpu9250_read+0x11cc>
 8001a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0e:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                
                if (gyro_conf == 0)                                                                /* ±250dps */
 8001a12:	7d7b      	ldrb	r3, [r7, #21]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d154      	bne.n	8001ac2 <mpu9250_read+0x1112>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                             /* set gyro x */
 8001a18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	461a      	mov	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a42:	4413      	add	r3, r2
 8001a44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001b80 <mpu9250_read+0x11d0>
 8001a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4c:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                             /* set gyro y */
 8001a50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	461a      	mov	r2, r3
 8001a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a7a:	4413      	add	r3, r2
 8001a7c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001b80 <mpu9250_read+0x11d0>
 8001a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a84:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                             /* set gyro z */
 8001a88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	461a      	mov	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab2:	4413      	add	r3, r2
 8001ab4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001b80 <mpu9250_read+0x11d0>
 8001ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abc:	edc3 7a02 	vstr	s15, [r3, #8]
 8001ac0:	e116      	b.n	8001cf0 <mpu9250_read+0x1340>
                }
                else if (gyro_conf == 1)                                                           /* ±500dps */
 8001ac2:	7d7b      	ldrb	r3, [r7, #21]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d167      	bne.n	8001b98 <mpu9250_read+0x11e8>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                              /* set gyro x */
 8001ac8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	461a      	mov	r2, r3
 8001af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af2:	4413      	add	r3, r2
 8001af4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001b84 <mpu9250_read+0x11d4>
 8001af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afc:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                              /* set gyro y */
 8001b00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	461a      	mov	r2, r3
 8001b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2a:	4413      	add	r3, r2
 8001b2c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001b84 <mpu9250_read+0x11d4>
 8001b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b34:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                              /* set gyro z */
 8001b38:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	461a      	mov	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b62:	4413      	add	r3, r2
 8001b64:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001b84 <mpu9250_read+0x11d4>
 8001b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001b70:	e0be      	b.n	8001cf0 <mpu9250_read+0x1340>
 8001b72:	bf00      	nop
 8001b74:	46000000 	.word	0x46000000
 8001b78:	45800000 	.word	0x45800000
 8001b7c:	45000000 	.word	0x45000000
 8001b80:	43030000 	.word	0x43030000
 8001b84:	42830000 	.word	0x42830000
 8001b88:	42033333 	.word	0x42033333
 8001b8c:	41833333 	.word	0x41833333
 8001b90:	3e19999a 	.word	0x3e19999a
 8001b94:	3f19999a 	.word	0x3f19999a
                }
                else if (gyro_conf == 2)                                                           /* ±1000dps */
 8001b98:	7d7b      	ldrb	r3, [r7, #21]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d154      	bne.n	8001c48 <mpu9250_read+0x1298>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                              /* set gyro x */
 8001b9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bc8:	4413      	add	r3, r2
 8001bca:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8001b88 <mpu9250_read+0x11d8>
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                              /* set gyro y */
 8001bd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	461a      	mov	r2, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c00:	4413      	add	r3, r2
 8001c02:	ed5f 6a1f 	vldr	s13, [pc, #-124]	; 8001b88 <mpu9250_read+0x11d8>
 8001c06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c0a:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                              /* set gyro z */
 8001c0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	461a      	mov	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	461a      	mov	r2, r3
 8001c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c38:	4413      	add	r3, r2
 8001c3a:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 8001b88 <mpu9250_read+0x11d8>
 8001c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c42:	edc3 7a02 	vstr	s15, [r3, #8]
 8001c46:	e053      	b.n	8001cf0 <mpu9250_read+0x1340>
                }
                else                                                                               /* ±2000dps */
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                              /* set gyro x */
 8001c48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	461a      	mov	r2, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c64:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c72:	4413      	add	r3, r2
 8001c74:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8001b8c <mpu9250_read+0x11dc>
 8001c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7c:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                              /* set gyro y */
 8001c80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c94:	ee07 3a90 	vmov	s15, r3
 8001c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001caa:	4413      	add	r3, r2
 8001cac:	ed5f 6a49 	vldr	s13, [pc, #-292]	; 8001b8c <mpu9250_read+0x11dc>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                              /* set gyro z */
 8001cb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce2:	4413      	add	r3, r2
 8001ce4:	ed5f 6a57 	vldr	s13, [pc, #-348]	; 8001b8c <mpu9250_read+0x11dc>
 8001ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cec:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                if ((handle->buf[i * 20 + 19] & (1 << 4)) != 0)                                    /* if 16 bits */
 8001cf0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	3313      	adds	r3, #19
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d060      	beq.n	8001dce <mpu9250_read+0x141e>
                {
                    mag_ut[i][0] = (float)mag_raw[i][0] * mag_k_x * 0.15f;                         /* set the mag x */
 8001d0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	461a      	mov	r2, r3
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d28:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3e:	4413      	add	r3, r2
 8001d40:	ed1f 7a6d 	vldr	s14, [pc, #-436]	; 8001b90 <mpu9250_read+0x11e0>
 8001d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d48:	edc3 7a00 	vstr	s15, [r3]
                    mag_ut[i][1] = (float)mag_raw[i][1] * mag_k_y * 0.15f;                         /* set the mag y */
 8001d4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	461a      	mov	r2, r3
 8001d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7e:	4413      	add	r3, r2
 8001d80:	ed1f 7a7d 	vldr	s14, [pc, #-500]	; 8001b90 <mpu9250_read+0x11e0>
 8001d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d88:	edc3 7a01 	vstr	s15, [r3, #4]
                    mag_ut[i][2] = (float)mag_raw[i][2] * mag_k_z * 0.15f;                         /* set the mag z */
 8001d8c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	461a      	mov	r2, r3
 8001d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dbe:	4413      	add	r3, r2
 8001dc0:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 8001b90 <mpu9250_read+0x11e0>
 8001dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc8:	edc3 7a02 	vstr	s15, [r3, #8]
 8001dcc:	e05f      	b.n	8001e8e <mpu9250_read+0x14de>
                }
                else                                                                               /* if 14 bits */
                {
                    mag_ut[i][0] = (float)mag_raw[i][0] * mag_k_x * 0.6f;                          /* set the mag x */
 8001dce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ddc:	4413      	add	r3, r2
 8001dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dea:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e00:	4413      	add	r3, r2
 8001e02:	ed1f 7a9c 	vldr	s14, [pc, #-624]	; 8001b94 <mpu9250_read+0x11e4>
 8001e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
                    mag_ut[i][1] = (float)mag_raw[i][1] * mag_k_y * 0.6f;                          /* set the mag y */
 8001e0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	461a      	mov	r2, r3
 8001e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e40:	4413      	add	r3, r2
 8001e42:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 8001b94 <mpu9250_read+0x11e4>
 8001e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4a:	edc3 7a01 	vstr	s15, [r3, #4]
                    mag_ut[i][2] = (float)mag_raw[i][2] * mag_k_z * 0.6f;                          /* set the mag z */
 8001e4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e80:	4413      	add	r3, r2
 8001e82:	ed1f 7abc 	vldr	s14, [pc, #-752]	; 8001b94 <mpu9250_read+0x11e4>
 8001e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8a:	edc3 7a02 	vstr	s15, [r3, #8]
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8001e8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e90:	3301      	adds	r3, #1
 8001e92:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	f4ff ab22 	bcc.w	80014e4 <mpu9250_read+0xb34>
                }
            }
            
            return 0;                                                                              /* success return 0 */
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e2f7      	b.n	8002494 <mpu9250_read+0x1ae4>
        }
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8001ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	801a      	strh	r2, [r3, #0]
        res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001eb0:	230e      	movs	r3, #14
 8001eb2:	213b      	movs	r1, #59	; 0x3b
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7fe fb07 	bl	80004c8 <a_mpu9250_read>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8001ec0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <mpu9250_read+0x1524>
        {
            handle->debug_print("mpu9250: read failed.\n");                                        /* read failed */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	48b0      	ldr	r0, [pc, #704]	; (8002190 <mpu9250_read+0x17e0>)
 8001ece:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e2df      	b.n	8002494 <mpu9250_read+0x1ae4>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 8001f70:	7dbb      	ldrb	r3, [r7, #22]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d12a      	bne.n	8001fcc <mpu9250_read+0x161c>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f84:	eddf 6a83 	vldr	s13, [pc, #524]	; 8002194 <mpu9250_read+0x17e4>
 8001f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa0:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8002194 <mpu9250_read+0x17e4>
 8001fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fbc:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002194 <mpu9250_read+0x17e4>
 8001fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	edc3 7a02 	vstr	s15, [r3, #8]
 8001fca:	e085      	b.n	80020d8 <mpu9250_read+0x1728>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 8001fcc:	7dbb      	ldrb	r3, [r7, #22]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d12a      	bne.n	8002028 <mpu9250_read+0x1678>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe0:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8002198 <mpu9250_read+0x17e8>
 8001fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffc:	eddf 6a66 	vldr	s13, [pc, #408]	; 8002198 <mpu9250_read+0x17e8>
 8002000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8002198 <mpu9250_read+0x17e8>
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	edc3 7a02 	vstr	s15, [r3, #8]
 8002026:	e057      	b.n	80020d8 <mpu9250_read+0x1728>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 8002028:	7dbb      	ldrb	r3, [r7, #22]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d12a      	bne.n	8002084 <mpu9250_read+0x16d4>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800219c <mpu9250_read+0x17ec>
 8002040:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002058:	eddf 6a50 	vldr	s13, [pc, #320]	; 800219c <mpu9250_read+0x17ec>
 800205c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002074:	eddf 6a49 	vldr	s13, [pc, #292]	; 800219c <mpu9250_read+0x17ec>
 8002078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002082:	e029      	b.n	80020d8 <mpu9250_read+0x1728>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002092:	eddf 6a43 	vldr	s13, [pc, #268]	; 80021a0 <mpu9250_read+0x17f0>
 8002096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ae:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80021a0 <mpu9250_read+0x17f0>
 80020b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ca:	eddf 6a35 	vldr	s13, [pc, #212]	; 80021a0 <mpu9250_read+0x17f0>
 80020ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 80020d8:	7d7b      	ldrb	r3, [r7, #21]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d12a      	bne.n	8002134 <mpu9250_read+0x1784>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ec:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80021a4 <mpu9250_read+0x17f4>
 80020f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f6:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002108:	eddf 6a26 	vldr	s13, [pc, #152]	; 80021a4 <mpu9250_read+0x17f4>
 800210c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002112:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002124:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80021a4 <mpu9250_read+0x17f4>
 8002128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800212c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002132:	e097      	b.n	8002264 <mpu9250_read+0x18b4>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 8002134:	7d7b      	ldrb	r3, [r7, #21]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d13c      	bne.n	80021b4 <mpu9250_read+0x1804>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002148:	eddf 6a17 	vldr	s13, [pc, #92]	; 80021a8 <mpu9250_read+0x17f8>
 800214c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002152:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002164:	eddf 6a10 	vldr	s13, [pc, #64]	; 80021a8 <mpu9250_read+0x17f8>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216e:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002180:	eddf 6a09 	vldr	s13, [pc, #36]	; 80021a8 <mpu9250_read+0x17f8>
 8002184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218a:	edc3 7a02 	vstr	s15, [r3, #8]
 800218e:	e069      	b.n	8002264 <mpu9250_read+0x18b4>
 8002190:	0800a188 	.word	0x0800a188
 8002194:	46800000 	.word	0x46800000
 8002198:	46000000 	.word	0x46000000
 800219c:	45800000 	.word	0x45800000
 80021a0:	45000000 	.word	0x45000000
 80021a4:	43030000 	.word	0x43030000
 80021a8:	42830000 	.word	0x42830000
 80021ac:	42033333 	.word	0x42033333
 80021b0:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 80021b4:	7d7b      	ldrb	r3, [r7, #21]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d12a      	bne.n	8002210 <mpu9250_read+0x1860>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c8:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 80021ac <mpu9250_read+0x17fc>
 80021cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d2:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e4:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 80021ac <mpu9250_read+0x17fc>
 80021e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ee:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002200:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 80021ac <mpu9250_read+0x17fc>
 8002204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800220a:	edc3 7a02 	vstr	s15, [r3, #8]
 800220e:	e029      	b.n	8002264 <mpu9250_read+0x18b4>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221e:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 80021b0 <mpu9250_read+0x1800>
 8002222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002228:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223a:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 80021b0 <mpu9250_read+0x1800>
 800223e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002244:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002256:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 80021b0 <mpu9250_read+0x1800>
 800225a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800225e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002260:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        if (handle->mag_inited == 1)                                                               /* if mag is inited */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800226a:	2b01      	cmp	r3, #1
 800226c:	f040 80fc 	bne.w	8002468 <mpu9250_read+0x1ab8>
        {
            float mag_k_x;
            float mag_k_y;
            float mag_k_z;
            
            res = a_mpu9250_mag_read(handle, AK8963_REG_ST1, handle->buf, 8);                      /* read the mag data */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8002276:	2308      	movs	r3, #8
 8002278:	2102      	movs	r1, #2
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7fe f9a5 	bl	80005ca <a_mpu9250_mag_read>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 8002286:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <mpu9250_read+0x18ea>
            {
                handle->debug_print("mpu9250: mag read failed.\n");                                /* mag read failed */
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	4882      	ldr	r0, [pc, #520]	; (800249c <mpu9250_read+0x1aec>)
 8002294:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 8002296:	2301      	movs	r3, #1
 8002298:	e0fc      	b.n	8002494 <mpu9250_read+0x1ae4>
            }
            mag_raw[0][0] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[1];             /* set raw mag x */
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b2:	801a      	strh	r2, [r3, #0]
            mag_raw[0][1] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[3];             /* set raw mag y */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	b21a      	sxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022cc:	805a      	strh	r2, [r3, #2]
            mag_raw[0][2] = (int16_t)((uint16_t)handle->buf[6] << 8) | handle->buf[5];             /* set raw mag z */
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	b21a      	sxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80022de:	b21b      	sxth	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e6:	809a      	strh	r2, [r3, #4]

            mag_k_x = ((float)handle->mag_asa[0] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the x sensitivity adjustment */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80024a0 <mpu9250_read+0x1af0>
 80022fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002302:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002306:	eddf 6a66 	vldr	s13, [pc, #408]	; 80024a0 <mpu9250_read+0x1af0>
 800230a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002316:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            mag_k_y = ((float)handle->mag_asa[1] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the y sensitivity adjustment */
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002328:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80024a0 <mpu9250_read+0x1af0>
 800232c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002330:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002334:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002338:	eddf 6a59 	vldr	s13, [pc, #356]	; 80024a0 <mpu9250_read+0x1af0>
 800233c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002348:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            mag_k_z = ((float)handle->mag_asa[2] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the z sensitivity adjustment */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80024a0 <mpu9250_read+0x1af0>
 800235e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800236a:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80024a0 <mpu9250_read+0x1af0>
 800236e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800237a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            if ((handle->buf[7] & (1 << 4)) != 0)                                                  /* if 16 bits */
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d036      	beq.n	80023fa <mpu9250_read+0x1a4a>
            {
                mag_ut[0][0] = (float)mag_raw[0][0] * mag_k_x * 0.15f;                             /* set the mag x */
 800238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800239a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80024a4 <mpu9250_read+0x1af4>
 80023a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ac:	edc3 7a00 	vstr	s15, [r3]
                mag_ut[0][1] = (float)mag_raw[0][1] * mag_k_y * 0.15f;                             /* set the mag y */
 80023b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80024a4 <mpu9250_read+0x1af4>
 80023ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d0:	edc3 7a01 	vstr	s15, [r3, #4]
                mag_ut[0][2] = (float)mag_raw[0][2] * mag_k_z * 0.15f;                             /* set the mag z */
 80023d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ea:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80024a4 <mpu9250_read+0x1af4>
 80023ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f4:	edc3 7a02 	vstr	s15, [r3, #8]
 80023f8:	e04b      	b.n	8002492 <mpu9250_read+0x1ae2>
            }
            else                                                                                   /* if 14 bits */
            {
                mag_ut[0][0] = (float)mag_raw[0][0] * mag_k_x * 0.6f;                              /* set the mag x */
 80023fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002408:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800240c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002410:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80024a8 <mpu9250_read+0x1af8>
 8002414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241a:	edc3 7a00 	vstr	s15, [r3]
                mag_ut[0][1] = (float)mag_raw[0][1] * mag_k_y * 0.6f;                              /* set the mag y */
 800241e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002420:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002434:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80024a8 <mpu9250_read+0x1af8>
 8002438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243e:	edc3 7a01 	vstr	s15, [r3, #4]
                mag_ut[0][2] = (float)mag_raw[0][2] * mag_k_z * 0.6f;                              /* set the mag z */
 8002442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002444:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002450:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002458:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80024a8 <mpu9250_read+0x1af8>
 800245c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002462:	edc3 7a02 	vstr	s15, [r3, #8]
 8002466:	e014      	b.n	8002492 <mpu9250_read+0x1ae2>
            }
        }
        else
        {
            mag_raw[0][0] = 0;                                                                     /* set raw mag x 0 */
 8002468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246a:	2200      	movs	r2, #0
 800246c:	801a      	strh	r2, [r3, #0]
            mag_raw[0][1] = 0;                                                                     /* set raw mag y 0 */
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	2200      	movs	r2, #0
 8002472:	805a      	strh	r2, [r3, #2]
            mag_raw[0][2] = 0;                                                                     /* set raw mag z 0 */
 8002474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002476:	2200      	movs	r2, #0
 8002478:	809a      	strh	r2, [r3, #4]
            mag_ut[0][0] = 0.0f;                                                                   /* set mag x 0.0f */
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
            mag_ut[0][1] = 0.0f;                                                                   /* set mag y 0.0f */
 8002482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
            mag_ut[0][2] = 0.0f;                                                                   /* set mag z 0.0f */
 800248a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 8002492:	2300      	movs	r3, #0
    }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3738      	adds	r7, #56	; 0x38
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	0800a4f0 	.word	0x0800a4f0
 80024a0:	43000000 	.word	0x43000000
 80024a4:	3e19999a 	.word	0x3e19999a
 80024a8:	3f19999a 	.word	0x3f19999a

080024ac <mpu9250_read_temperature>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu9250_read_temperature(mpu9250_handle_t *handle, int16_t (*raw), float *degrees)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                      /* check handle */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <mpu9250_read_temperature+0x16>
    {
        return 2;                                                            /* return error */
 80024be:	2302      	movs	r3, #2
 80024c0:	e034      	b.n	800252c <mpu9250_read_temperature+0x80>
    }
    if (handle->inited != 1)                                                 /* check handle initialization */
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d001      	beq.n	80024d0 <mpu9250_read_temperature+0x24>
    {
        return 3;                                                            /* return error */
 80024cc:	2303      	movs	r3, #3
 80024ce:	e02d      	b.n	800252c <mpu9250_read_temperature+0x80>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_TEMP_OUT_H, buf, 2);            /* read data */
 80024d0:	f107 0214 	add.w	r2, r7, #20
 80024d4:	2302      	movs	r3, #2
 80024d6:	2141      	movs	r1, #65	; 0x41
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7fd fff5 	bl	80004c8 <a_mpu9250_read>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                            /* check result */
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <mpu9250_read_temperature+0x48>
    {
        handle->debug_print("mpu9250: read failed.\n");                      /* read failed */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	4811      	ldr	r0, [pc, #68]	; (8002534 <mpu9250_read_temperature+0x88>)
 80024ee:	4798      	blx	r3
       
        return 1;                                                            /* return error */
 80024f0:	2301      	movs	r3, #1
 80024f2:	e01b      	b.n	800252c <mpu9250_read_temperature+0x80>
    }
    *raw = (int16_t)((uint16_t)buf[0] << 8) | buf[1];                        /* get the raw */
 80024f4:	7d3b      	ldrb	r3, [r7, #20]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	7d7b      	ldrb	r3, [r7, #21]
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b21a      	sxth	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	801a      	strh	r2, [r3, #0]
    *degrees = (float)(*raw) / 321.0f + 21.0f;                               /* convert the degrees */
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002514:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002538 <mpu9250_read_temperature+0x8c>
 8002518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251c:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8002520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edc3 7a00 	vstr	s15, [r3]
    
    return 0;                                                                /* success return 0 */
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	0800a188 	.word	0x0800a188
 8002538:	43a08000 	.word	0x43a08000

0800253c <mpu9250_mag_init>:
 *            - 5 mag id is invalid
 *            - 6 spi don't support
 * @note      none
 */
uint8_t mpu9250_mag_init(mpu9250_handle_t *handle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    uint32_t timeout;
    
    if (handle == NULL)                                                                     /* check handle */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <mpu9250_mag_init+0x12>
    {
        return 2;                                                                           /* return error */
 800254a:	2302      	movs	r3, #2
 800254c:	e123      	b.n	8002796 <mpu9250_mag_init+0x25a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002554:	2b01      	cmp	r3, #1
 8002556:	d001      	beq.n	800255c <mpu9250_mag_init+0x20>
    {
        return 3;                                                                           /* return error */
 8002558:	2303      	movs	r3, #3
 800255a:	e11c      	b.n	8002796 <mpu9250_mag_init+0x25a>
    }
    
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                           /* if iic interface */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 8112 	bne.w	800278c <mpu9250_mag_init+0x250>
    {
        res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);           /* read config */
 8002568:	f107 020a 	add.w	r2, r7, #10
 800256c:	2301      	movs	r3, #1
 800256e:	216a      	movs	r1, #106	; 0x6a
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7fd ffa9 	bl	80004c8 <a_mpu9250_read>
 8002576:	4603      	mov	r3, r0
 8002578:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <mpu9250_mag_init+0x50>
        {
            handle->debug_print("mpu9250: read user ctrl failed.\n");                       /* read user ctrl failed */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	4886      	ldr	r0, [pc, #536]	; (80027a0 <mpu9250_mag_init+0x264>)
 8002586:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002588:	2301      	movs	r3, #1
 800258a:	e104      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        prev &= ~(1 << 5);                                                                  /* disable iic master */
 800258c:	7abb      	ldrb	r3, [r7, #10]
 800258e:	f023 0320 	bic.w	r3, r3, #32
 8002592:	b2db      	uxtb	r3, r3
 8002594:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);          /* write config */
 8002596:	f107 020a 	add.w	r2, r7, #10
 800259a:	2301      	movs	r3, #1
 800259c:	216a      	movs	r1, #106	; 0x6a
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fd ffc3 	bl	800052a <a_mpu9250_write>
 80025a4:	4603      	mov	r3, r0
 80025a6:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80025a8:	7afb      	ldrb	r3, [r7, #11]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <mpu9250_mag_init+0x7e>
        {
            handle->debug_print("mpu9250: write user ctrl failed.\n");                      /* write user ctrl failed */
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	487c      	ldr	r0, [pc, #496]	; (80027a4 <mpu9250_mag_init+0x268>)
 80025b4:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0ed      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read config */
 80025ba:	f107 020a 	add.w	r2, r7, #10
 80025be:	2301      	movs	r3, #1
 80025c0:	2137      	movs	r1, #55	; 0x37
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fd ff80 	bl	80004c8 <a_mpu9250_read>
 80025c8:	4603      	mov	r3, r0
 80025ca:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80025cc:	7afb      	ldrb	r3, [r7, #11]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <mpu9250_mag_init+0xa2>
        {
            handle->debug_print("mpu9250: read int pin cfg failed.\n");                     /* read int pin cfg failed */
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	4874      	ldr	r0, [pc, #464]	; (80027a8 <mpu9250_mag_init+0x26c>)
 80025d8:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80025da:	2301      	movs	r3, #1
 80025dc:	e0db      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        prev &= ~(1 << 1);                                                                  /* clear config */
 80025de:	7abb      	ldrb	r3, [r7, #10]
 80025e0:	f023 0302 	bic.w	r3, r3, #2
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	72bb      	strb	r3, [r7, #10]
        prev |= 1 << 1;                                                                     /* enable bypass */
 80025e8:	7abb      	ldrb	r3, [r7, #10]
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write config */
 80025f2:	f107 020a 	add.w	r2, r7, #10
 80025f6:	2301      	movs	r3, #1
 80025f8:	2137      	movs	r1, #55	; 0x37
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fd ff95 	bl	800052a <a_mpu9250_write>
 8002600:	4603      	mov	r3, r0
 8002602:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002604:	7afb      	ldrb	r3, [r7, #11]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <mpu9250_mag_init+0xda>
        {
            handle->debug_print("mpu9250: write int pin cfg failed.\n");                    /* write int pin cfg failed */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	4867      	ldr	r0, [pc, #412]	; (80027ac <mpu9250_mag_init+0x270>)
 8002610:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002612:	2301      	movs	r3, #1
 8002614:	e0bf      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        
        res = a_mpu9250_mag_read(handle, AK8963_REG_WIA, (uint8_t *)&prev, 1);              /* read who am I */
 8002616:	f107 020a 	add.w	r2, r7, #10
 800261a:	2301      	movs	r3, #1
 800261c:	2100      	movs	r1, #0
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fd ffd3 	bl	80005ca <a_mpu9250_mag_read>
 8002624:	4603      	mov	r3, r0
 8002626:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002628:	7afb      	ldrb	r3, [r7, #11]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <mpu9250_mag_init+0xfe>
        {
            handle->debug_print("mpu9250: mag read who am i failed.\n");                    /* mag read who am I failed */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	485f      	ldr	r0, [pc, #380]	; (80027b0 <mpu9250_mag_init+0x274>)
 8002634:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002636:	2301      	movs	r3, #1
 8002638:	e0ad      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        if (prev != 0x48)                                                                   /* check the id */
 800263a:	7abb      	ldrb	r3, [r7, #10]
 800263c:	2b48      	cmp	r3, #72	; 0x48
 800263e:	d005      	beq.n	800264c <mpu9250_mag_init+0x110>
        {
            handle->debug_print("mpu9250: mag id is invalid.\n");                           /* mag id is invalid */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	485b      	ldr	r0, [pc, #364]	; (80027b4 <mpu9250_mag_init+0x278>)
 8002646:	4798      	blx	r3
           
            return 5;                                                                       /* return error */
 8002648:	2305      	movs	r3, #5
 800264a:	e0a4      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        
        prev = 0x01;                                                                        /* set the reset command */
 800264c:	2301      	movs	r3, #1
 800264e:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL2, &prev);                         /* reset the magnetometer */
 8002650:	f107 030a 	add.w	r3, r7, #10
 8002654:	461a      	mov	r2, r3
 8002656:	210b      	movs	r1, #11
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fd ff97 	bl	800058c <a_mpu9250_mag_write>
 800265e:	4603      	mov	r3, r0
 8002660:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <mpu9250_mag_init+0x138>
        {
            handle->debug_print("mpu9250: mag write cntl2 failed.\n");                      /* mag write cntl2 failed */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	4852      	ldr	r0, [pc, #328]	; (80027b8 <mpu9250_mag_init+0x27c>)
 800266e:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002670:	2301      	movs	r3, #1
 8002672:	e090      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        timeout = 100;                                                                      /* set timeout 1000ms */
 8002674:	2364      	movs	r3, #100	; 0x64
 8002676:	60fb      	str	r3, [r7, #12]
        while (timeout != 0)                                                                /* check the timeout */
 8002678:	e01d      	b.n	80026b6 <mpu9250_mag_init+0x17a>
        {
            res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL2, (uint8_t *)&prev, 1);        /* read cntl2 */
 800267a:	f107 020a 	add.w	r2, r7, #10
 800267e:	2301      	movs	r3, #1
 8002680:	210b      	movs	r1, #11
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fd ffa1 	bl	80005ca <a_mpu9250_mag_read>
 8002688:	4603      	mov	r3, r0
 800268a:	72fb      	strb	r3, [r7, #11]
            if (res != 0)                                                                   /* check result */
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <mpu9250_mag_init+0x162>
            {
                handle->debug_print("mpu9250: mag read cntl2 failed.\n");                   /* mag read cntl2 failed */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	4849      	ldr	r0, [pc, #292]	; (80027bc <mpu9250_mag_init+0x280>)
 8002698:	4798      	blx	r3
               
                return 1;                                                                   /* return error */
 800269a:	2301      	movs	r3, #1
 800269c:	e07b      	b.n	8002796 <mpu9250_mag_init+0x25a>
            }
            if ((prev & 0x01) == 0x00)                                                      /* check finished */
 800269e:	7abb      	ldrb	r3, [r7, #10]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <mpu9250_mag_init+0x182>
            {
                break;                                                                      /* break */
            }
            handle->delay_ms(10);                                                           /* delay 10ms */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	200a      	movs	r0, #10
 80026ae:	4798      	blx	r3
            timeout--;                                                                      /* timeout-- */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
        while (timeout != 0)                                                                /* check the timeout */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1de      	bne.n	800267a <mpu9250_mag_init+0x13e>
 80026bc:	e000      	b.n	80026c0 <mpu9250_mag_init+0x184>
                break;                                                                      /* break */
 80026be:	bf00      	nop
        }
        if (timeout == 0)                                                                   /* check the timeout */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d105      	bne.n	80026d2 <mpu9250_mag_init+0x196>
        {
            handle->debug_print("mpu9250: reset failed.\n");                                /* reset failed */
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	483d      	ldr	r0, [pc, #244]	; (80027c0 <mpu9250_mag_init+0x284>)
 80026cc:	4798      	blx	r3
           
            return 4;                                                                       /* return error */
 80026ce:	2304      	movs	r3, #4
 80026d0:	e061      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        
        prev = 0x00;                                                                        /* power down */
 80026d2:	2300      	movs	r3, #0
 80026d4:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 80026d6:	f107 030a 	add.w	r3, r7, #10
 80026da:	461a      	mov	r2, r3
 80026dc:	210a      	movs	r1, #10
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fd ff54 	bl	800058c <a_mpu9250_mag_write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <mpu9250_mag_init+0x1be>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	4834      	ldr	r0, [pc, #208]	; (80027c4 <mpu9250_mag_init+0x288>)
 80026f4:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e04d      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        handle->delay_ms(10);                                                               /* delay 10ms */
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	200a      	movs	r0, #10
 8002700:	4798      	blx	r3
        prev = 0x0F;                                                                        /* fuse rom access mode */
 8002702:	230f      	movs	r3, #15
 8002704:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 8002706:	f107 030a 	add.w	r3, r7, #10
 800270a:	461a      	mov	r2, r3
 800270c:	210a      	movs	r1, #10
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fd ff3c 	bl	800058c <a_mpu9250_mag_write>
 8002714:	4603      	mov	r3, r0
 8002716:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <mpu9250_mag_init+0x1ee>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	4828      	ldr	r0, [pc, #160]	; (80027c4 <mpu9250_mag_init+0x288>)
 8002724:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002726:	2301      	movs	r3, #1
 8002728:	e035      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        res = a_mpu9250_mag_read(handle, AK8963_REG_ASAX, handle->mag_asa, 3);              /* read the asa */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 8002730:	2303      	movs	r3, #3
 8002732:	2110      	movs	r1, #16
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fd ff48 	bl	80005ca <a_mpu9250_mag_read>
 800273a:	4603      	mov	r3, r0
 800273c:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <mpu9250_mag_init+0x214>
        {
            handle->debug_print("mpu9250: mag read asa failed.\n");                         /* mag read asa failed */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	481f      	ldr	r0, [pc, #124]	; (80027c8 <mpu9250_mag_init+0x28c>)
 800274a:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 800274c:	2301      	movs	r3, #1
 800274e:	e022      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        prev = 0x00;                                                                        /* power down */
 8002750:	2300      	movs	r3, #0
 8002752:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 8002754:	f107 030a 	add.w	r3, r7, #10
 8002758:	461a      	mov	r2, r3
 800275a:	210a      	movs	r1, #10
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7fd ff15 	bl	800058c <a_mpu9250_mag_write>
 8002762:	4603      	mov	r3, r0
 8002764:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <mpu9250_mag_init+0x23c>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	4814      	ldr	r0, [pc, #80]	; (80027c4 <mpu9250_mag_init+0x288>)
 8002772:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002774:	2301      	movs	r3, #1
 8002776:	e00e      	b.n	8002796 <mpu9250_mag_init+0x25a>
        }
        handle->delay_ms(10);                                                               /* delay 10ms */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	200a      	movs	r0, #10
 800277e:	4798      	blx	r3
        
        handle->mag_inited = 1;                                                             /* flag inited */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        return 0;                                                                           /* success return 0 */
 8002788:	2300      	movs	r3, #0
 800278a:	e004      	b.n	8002796 <mpu9250_mag_init+0x25a>
    }
    else
    {
        handle->debug_print("mpu9250: spi don't support.\n");                               /* spi don't support */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	480e      	ldr	r0, [pc, #56]	; (80027cc <mpu9250_mag_init+0x290>)
 8002792:	4798      	blx	r3
       
        return 6;                                                                           /* return error */
 8002794:	2306      	movs	r3, #6
    }
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	0800a228 	.word	0x0800a228
 80027a4:	0800a24c 	.word	0x0800a24c
 80027a8:	0800a50c 	.word	0x0800a50c
 80027ac:	0800a530 	.word	0x0800a530
 80027b0:	0800a554 	.word	0x0800a554
 80027b4:	0800a578 	.word	0x0800a578
 80027b8:	0800a598 	.word	0x0800a598
 80027bc:	0800a5bc 	.word	0x0800a5bc
 80027c0:	0800a45c 	.word	0x0800a45c
 80027c4:	0800a5e0 	.word	0x0800a5e0
 80027c8:	0800a604 	.word	0x0800a604
 80027cc:	0800a624 	.word	0x0800a624

080027d0 <mpu9250_mag_deinit>:
 *             - 3 handle is not initialized
 *             - 4 mag is not inited
 * @note       none
 */
uint8_t mpu9250_mag_deinit(mpu9250_handle_t *handle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <mpu9250_mag_deinit+0x12>
    {
        return 2;                                                                   /* return error */
 80027de:	2302      	movs	r3, #2
 80027e0:	e0b3      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d001      	beq.n	80027f0 <mpu9250_mag_deinit+0x20>
    {
        return 3;                                                                   /* return error */
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0ac      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d005      	beq.n	8002806 <mpu9250_mag_deinit+0x36>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	4855      	ldr	r0, [pc, #340]	; (8002954 <mpu9250_mag_deinit+0x184>)
 8002800:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 8002802:	2304      	movs	r3, #4
 8002804:	e0a1      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* read config */
 8002806:	f107 020e 	add.w	r2, r7, #14
 800280a:	2301      	movs	r3, #1
 800280c:	216a      	movs	r1, #106	; 0x6a
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fd fe5a 	bl	80004c8 <a_mpu9250_read>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <mpu9250_mag_deinit+0x5a>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                   /* read user ctrl failed */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	484d      	ldr	r0, [pc, #308]	; (8002958 <mpu9250_mag_deinit+0x188>)
 8002824:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002826:	2301      	movs	r3, #1
 8002828:	e08f      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(1 << 5);                                                              /* disable iic master */
 800282a:	7bbb      	ldrb	r3, [r7, #14]
 800282c:	f023 0320 	bic.w	r3, r3, #32
 8002830:	b2db      	uxtb	r3, r3
 8002832:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);      /* write config */
 8002834:	f107 020e 	add.w	r2, r7, #14
 8002838:	2301      	movs	r3, #1
 800283a:	216a      	movs	r1, #106	; 0x6a
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7fd fe74 	bl	800052a <a_mpu9250_write>
 8002842:	4603      	mov	r3, r0
 8002844:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <mpu9250_mag_deinit+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                  /* write user ctrl failed */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	4842      	ldr	r0, [pc, #264]	; (800295c <mpu9250_mag_deinit+0x18c>)
 8002852:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002854:	2301      	movs	r3, #1
 8002856:	e078      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);     /* read config */
 8002858:	f107 020e 	add.w	r2, r7, #14
 800285c:	2301      	movs	r3, #1
 800285e:	2137      	movs	r1, #55	; 0x37
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7fd fe31 	bl	80004c8 <a_mpu9250_read>
 8002866:	4603      	mov	r3, r0
 8002868:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <mpu9250_mag_deinit+0xac>
    {
        handle->debug_print("mpu9250: read int pin cfg failed.\n");                 /* read int pin cfg failed */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	483a      	ldr	r0, [pc, #232]	; (8002960 <mpu9250_mag_deinit+0x190>)
 8002876:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002878:	2301      	movs	r3, #1
 800287a:	e066      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(1 << 1);                                                              /* clear config */
 800287c:	7bbb      	ldrb	r3, [r7, #14]
 800287e:	f023 0302 	bic.w	r3, r3, #2
 8002882:	b2db      	uxtb	r3, r3
 8002884:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 1;                                                                 /* enable bypass */
 8002886:	7bbb      	ldrb	r3, [r7, #14]
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);    /* write config */
 8002890:	f107 020e 	add.w	r2, r7, #14
 8002894:	2301      	movs	r3, #1
 8002896:	2137      	movs	r1, #55	; 0x37
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7fd fe46 	bl	800052a <a_mpu9250_write>
 800289e:	4603      	mov	r3, r0
 80028a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <mpu9250_mag_deinit+0xe4>
    {
        handle->debug_print("mpu9250: write int pin cfg failed.\n");                /* write int pin cfg failed */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	482d      	ldr	r0, [pc, #180]	; (8002964 <mpu9250_mag_deinit+0x194>)
 80028ae:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80028b0:	2301      	movs	r3, #1
 80028b2:	e04a      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_WIA, (uint8_t *)&prev, 1);          /* read who am I */
 80028b4:	f107 020e 	add.w	r2, r7, #14
 80028b8:	2301      	movs	r3, #1
 80028ba:	2100      	movs	r1, #0
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7fd fe84 	bl	80005ca <a_mpu9250_mag_read>
 80028c2:	4603      	mov	r3, r0
 80028c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <mpu9250_mag_deinit+0x108>
    {
        handle->debug_print("mpu9250: mag read who am i failed.\n");                /* mag read who am I failed */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	4825      	ldr	r0, [pc, #148]	; (8002968 <mpu9250_mag_deinit+0x198>)
 80028d2:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80028d4:	2301      	movs	r3, #1
 80028d6:	e038      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    if (prev != 0x48)                                                               /* check the id */
 80028d8:	7bbb      	ldrb	r3, [r7, #14]
 80028da:	2b48      	cmp	r3, #72	; 0x48
 80028dc:	d005      	beq.n	80028ea <mpu9250_mag_deinit+0x11a>
    {
        handle->debug_print("mpu9250: mag id is invalid.\n");                       /* mag id is invalid */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	4822      	ldr	r0, [pc, #136]	; (800296c <mpu9250_mag_deinit+0x19c>)
 80028e4:	4798      	blx	r3
       
        return 5;                                                                   /* return error */
 80028e6:	2305      	movs	r3, #5
 80028e8:	e02f      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 80028ea:	f107 020e 	add.w	r2, r7, #14
 80028ee:	2301      	movs	r3, #1
 80028f0:	210a      	movs	r1, #10
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fd fe69 	bl	80005ca <a_mpu9250_mag_read>
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <mpu9250_mag_deinit+0x13e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	481a      	ldr	r0, [pc, #104]	; (8002970 <mpu9250_mag_deinit+0x1a0>)
 8002908:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800290a:	2301      	movs	r3, #1
 800290c:	e01d      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(0xF << 0);                                                            /* clear config */
 800290e:	7bbb      	ldrb	r3, [r7, #14]
 8002910:	f023 030f 	bic.w	r3, r3, #15
 8002914:	b2db      	uxtb	r3, r3
 8002916:	73bb      	strb	r3, [r7, #14]
    prev |= 0x00 << 0;                                                              /* set the power mode */
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 800291c:	f107 030e 	add.w	r3, r7, #14
 8002920:	461a      	mov	r2, r3
 8002922:	210a      	movs	r1, #10
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7fd fe31 	bl	800058c <a_mpu9250_mag_write>
 800292a:	4603      	mov	r3, r0
 800292c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <mpu9250_mag_deinit+0x170>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <mpu9250_mag_deinit+0x1a4>)
 800293a:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800293c:	2301      	movs	r3, #1
 800293e:	e004      	b.n	800294a <mpu9250_mag_deinit+0x17a>
    }
    
    handle->mag_inited = 0;                                                         /* flag closed */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    return 0;                                                                       /* success return 0 */
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	0800a644 	.word	0x0800a644
 8002958:	0800a228 	.word	0x0800a228
 800295c:	0800a24c 	.word	0x0800a24c
 8002960:	0800a50c 	.word	0x0800a50c
 8002964:	0800a530 	.word	0x0800a530
 8002968:	0800a554 	.word	0x0800a554
 800296c:	0800a578 	.word	0x0800a578
 8002970:	0800a664 	.word	0x0800a664
 8002974:	0800a5e0 	.word	0x0800a5e0

08002978 <mpu9250_mag_set_mode>:
 *            - 3 handle is not initialized
 *            - 4 mag is not inited
 * @note      none
 */
uint8_t mpu9250_mag_set_mode(mpu9250_handle_t *handle, mpu9250_magnetometer_mode_t mode)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <mpu9250_mag_set_mode+0x16>
    {
        return 2;                                                                   /* return error */
 800298a:	2302      	movs	r3, #2
 800298c:	e040      	b.n	8002a10 <mpu9250_mag_set_mode+0x98>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002994:	2b01      	cmp	r3, #1
 8002996:	d001      	beq.n	800299c <mpu9250_mag_set_mode+0x24>
    {
        return 3;                                                                   /* return error */
 8002998:	2303      	movs	r3, #3
 800299a:	e039      	b.n	8002a10 <mpu9250_mag_set_mode+0x98>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d005      	beq.n	80029b2 <mpu9250_mag_set_mode+0x3a>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	481b      	ldr	r0, [pc, #108]	; (8002a18 <mpu9250_mag_set_mode+0xa0>)
 80029ac:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 80029ae:	2304      	movs	r3, #4
 80029b0:	e02e      	b.n	8002a10 <mpu9250_mag_set_mode+0x98>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 80029b2:	f107 020e 	add.w	r2, r7, #14
 80029b6:	2301      	movs	r3, #1
 80029b8:	210a      	movs	r1, #10
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fd fe05 	bl	80005ca <a_mpu9250_mag_read>
 80029c0:	4603      	mov	r3, r0
 80029c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <mpu9250_mag_set_mode+0x5e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	4813      	ldr	r0, [pc, #76]	; (8002a1c <mpu9250_mag_set_mode+0xa4>)
 80029d0:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80029d2:	2301      	movs	r3, #1
 80029d4:	e01c      	b.n	8002a10 <mpu9250_mag_set_mode+0x98>
    }
    prev &= ~(0xF << 0);                                                            /* clear config */
 80029d6:	7bbb      	ldrb	r3, [r7, #14]
 80029d8:	f023 030f 	bic.w	r3, r3, #15
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 0;                                                              /* set the mode */
 80029e0:	7bba      	ldrb	r2, [r7, #14]
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 80029ea:	f107 030e 	add.w	r3, r7, #14
 80029ee:	461a      	mov	r2, r3
 80029f0:	210a      	movs	r1, #10
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fd fdca 	bl	800058c <a_mpu9250_mag_write>
 80029f8:	4603      	mov	r3, r0
 80029fa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <mpu9250_mag_set_mode+0x96>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	4806      	ldr	r0, [pc, #24]	; (8002a20 <mpu9250_mag_set_mode+0xa8>)
 8002a08:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <mpu9250_mag_set_mode+0x98>
    }
    
    return 0;                                                                       /* success return 0 */
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	0800a644 	.word	0x0800a644
 8002a1c:	0800a664 	.word	0x0800a664
 8002a20:	0800a5e0 	.word	0x0800a5e0

08002a24 <mpu9250_mag_set_bits>:
 *            - 3 handle is not initialized
 *            - 4 mag is not inited
 * @note      none
 */
uint8_t mpu9250_mag_set_bits(mpu9250_handle_t *handle, mpu9250_magnetometer_bits_t bits)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <mpu9250_mag_set_bits+0x16>
    {
        return 2;                                                                   /* return error */
 8002a36:	2302      	movs	r3, #2
 8002a38:	e044      	b.n	8002ac4 <mpu9250_mag_set_bits+0xa0>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <mpu9250_mag_set_bits+0x24>
    {
        return 3;                                                                   /* return error */
 8002a44:	2303      	movs	r3, #3
 8002a46:	e03d      	b.n	8002ac4 <mpu9250_mag_set_bits+0xa0>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d005      	beq.n	8002a5e <mpu9250_mag_set_bits+0x3a>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	481d      	ldr	r0, [pc, #116]	; (8002acc <mpu9250_mag_set_bits+0xa8>)
 8002a58:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e032      	b.n	8002ac4 <mpu9250_mag_set_bits+0xa0>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 8002a5e:	f107 020e 	add.w	r2, r7, #14
 8002a62:	2301      	movs	r3, #1
 8002a64:	210a      	movs	r1, #10
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fd fdaf 	bl	80005ca <a_mpu9250_mag_read>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <mpu9250_mag_set_bits+0x5e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	4815      	ldr	r0, [pc, #84]	; (8002ad0 <mpu9250_mag_set_bits+0xac>)
 8002a7c:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e020      	b.n	8002ac4 <mpu9250_mag_set_bits+0xa0>
    }
    prev &= ~(1 << 4);                                                              /* clear config */
 8002a82:	7bbb      	ldrb	r3, [r7, #14]
 8002a84:	f023 0310 	bic.w	r3, r3, #16
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	73bb      	strb	r3, [r7, #14]
    prev |= bits << 4;                                                              /* set the mode */
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	b25a      	sxtb	r2, r3
 8002a92:	7bbb      	ldrb	r3, [r7, #14]
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 8002a9e:	f107 030e 	add.w	r3, r7, #14
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	210a      	movs	r1, #10
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd fd70 	bl	800058c <a_mpu9250_mag_write>
 8002aac:	4603      	mov	r3, r0
 8002aae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <mpu9250_mag_set_bits+0x9e>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <mpu9250_mag_set_bits+0xb0>)
 8002abc:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <mpu9250_mag_set_bits+0xa0>
    }
    
    return 0;                                                                       /* success return 0 */
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	0800a644 	.word	0x0800a644
 8002ad0:	0800a664 	.word	0x0800a664
 8002ad4:	0800a5e0 	.word	0x0800a5e0

08002ad8 <mpu9250_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <mpu9250_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 8002aea:	2302      	movs	r3, #2
 8002aec:	e039      	b.n	8002b62 <mpu9250_set_fifo+0x8a>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d001      	beq.n	8002afc <mpu9250_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8002af8:	2303      	movs	r3, #3
 8002afa:	e032      	b.n	8002b62 <mpu9250_set_fifo+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8002afc:	f107 020e 	add.w	r2, r7, #14
 8002b00:	2301      	movs	r3, #1
 8002b02:	216a      	movs	r1, #106	; 0x6a
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7fd fcdf 	bl	80004c8 <a_mpu9250_read>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <mpu9250_set_fifo+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                     /* read user ctrl failed */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	4814      	ldr	r0, [pc, #80]	; (8002b6c <mpu9250_set_fifo+0x94>)
 8002b1a:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e020      	b.n	8002b62 <mpu9250_set_fifo+0x8a>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 8002b20:	7bbb      	ldrb	r3, [r7, #14]
 8002b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	b25a      	sxtb	r2, r3
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8002b3c:	f107 020e 	add.w	r2, r7, #14
 8002b40:	2301      	movs	r3, #1
 8002b42:	216a      	movs	r1, #106	; 0x6a
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fd fcf0 	bl	800052a <a_mpu9250_write>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <mpu9250_set_fifo+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                    /* write user ctrl failed */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	4805      	ldr	r0, [pc, #20]	; (8002b70 <mpu9250_set_fifo+0x98>)
 8002b5a:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <mpu9250_set_fifo+0x8a>
    }
    
    return 0;                                                                         /* success return 0 */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	0800a228 	.word	0x0800a228
 8002b70:	0800a24c 	.word	0x0800a24c

08002b74 <mpu9250_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_iic_master(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <mpu9250_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 8002b86:	2302      	movs	r3, #2
 8002b88:	e039      	b.n	8002bfe <mpu9250_set_iic_master+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d001      	beq.n	8002b98 <mpu9250_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 8002b94:	2303      	movs	r3, #3
 8002b96:	e032      	b.n	8002bfe <mpu9250_set_iic_master+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002b98:	f107 020e 	add.w	r2, r7, #14
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	216a      	movs	r1, #106	; 0x6a
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fd fc91 	bl	80004c8 <a_mpu9250_read>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <mpu9250_set_iic_master+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                    /* read user ctrl failed */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	4814      	ldr	r0, [pc, #80]	; (8002c08 <mpu9250_set_iic_master+0x94>)
 8002bb6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e020      	b.n	8002bfe <mpu9250_set_iic_master+0x8a>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	f023 0320 	bic.w	r3, r3, #32
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	015b      	lsls	r3, r3, #5
 8002bca:	b25a      	sxtb	r2, r3
 8002bcc:	7bbb      	ldrb	r3, [r7, #14]
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002bd8:	f107 020e 	add.w	r2, r7, #14
 8002bdc:	2301      	movs	r3, #1
 8002bde:	216a      	movs	r1, #106	; 0x6a
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fd fca2 	bl	800052a <a_mpu9250_write>
 8002be6:	4603      	mov	r3, r0
 8002be8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <mpu9250_set_iic_master+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                   /* write user ctrl failed */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <mpu9250_set_iic_master+0x98>)
 8002bf6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <mpu9250_set_iic_master+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	0800a228 	.word	0x0800a228
 8002c0c:	0800a24c 	.word	0x0800a24c

08002c10 <mpu9250_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_disable_iic_slave(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <mpu9250_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 8002c22:	2302      	movs	r3, #2
 8002c24:	e039      	b.n	8002c9a <mpu9250_set_disable_iic_slave+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d001      	beq.n	8002c34 <mpu9250_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 8002c30:	2303      	movs	r3, #3
 8002c32:	e032      	b.n	8002c9a <mpu9250_set_disable_iic_slave+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002c34:	f107 020e 	add.w	r2, r7, #14
 8002c38:	2301      	movs	r3, #1
 8002c3a:	216a      	movs	r1, #106	; 0x6a
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fd fc43 	bl	80004c8 <a_mpu9250_read>
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <mpu9250_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                    /* read user ctrl failed */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	4814      	ldr	r0, [pc, #80]	; (8002ca4 <mpu9250_set_disable_iic_slave+0x94>)
 8002c52:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002c54:	2301      	movs	r3, #1
 8002c56:	e020      	b.n	8002c9a <mpu9250_set_disable_iic_slave+0x8a>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8002c58:	7bbb      	ldrb	r3, [r7, #14]
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	b25a      	sxtb	r2, r3
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002c74:	f107 020e 	add.w	r2, r7, #14
 8002c78:	2301      	movs	r3, #1
 8002c7a:	216a      	movs	r1, #106	; 0x6a
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fd fc54 	bl	800052a <a_mpu9250_write>
 8002c82:	4603      	mov	r3, r0
 8002c84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <mpu9250_set_disable_iic_slave+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                   /* write user ctrl failed */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <mpu9250_set_disable_iic_slave+0x98>)
 8002c92:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <mpu9250_set_disable_iic_slave+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	0800a228 	.word	0x0800a228
 8002ca8:	0800a24c 	.word	0x0800a24c

08002cac <mpu9250_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_clock_source(mpu9250_handle_t *handle, mpu9250_clock_source_t clock_source)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <mpu9250_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e035      	b.n	8002d2e <mpu9250_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d001      	beq.n	8002cd0 <mpu9250_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e02e      	b.n	8002d2e <mpu9250_set_clock_source+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002cd0:	f107 020e 	add.w	r2, r7, #14
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	216b      	movs	r1, #107	; 0x6b
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd fbf5 	bl	80004c8 <a_mpu9250_read>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <mpu9250_set_clock_source+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	4812      	ldr	r0, [pc, #72]	; (8002d38 <mpu9250_set_clock_source+0x8c>)
 8002cee:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e01c      	b.n	8002d2e <mpu9250_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 8002cf4:	7bbb      	ldrb	r3, [r7, #14]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 8002cfe:	7bba      	ldrb	r2, [r7, #14]
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002d08:	f107 020e 	add.w	r2, r7, #14
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	216b      	movs	r1, #107	; 0x6b
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7fd fc0a 	bl	800052a <a_mpu9250_write>
 8002d16:	4603      	mov	r3, r0
 8002d18:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <mpu9250_set_clock_source+0x80>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	4805      	ldr	r0, [pc, #20]	; (8002d3c <mpu9250_set_clock_source+0x90>)
 8002d26:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <mpu9250_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	0800a818 	.word	0x0800a818
 8002d3c:	0800a844 	.word	0x0800a844

08002d40 <mpu9250_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_ptat(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <mpu9250_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 8002d52:	2302      	movs	r3, #2
 8002d54:	e03c      	b.n	8002dd0 <mpu9250_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d001      	beq.n	8002d64 <mpu9250_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 8002d60:	2303      	movs	r3, #3
 8002d62:	e035      	b.n	8002dd0 <mpu9250_set_ptat+0x90>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002d64:	f107 020e 	add.w	r2, r7, #14
 8002d68:	2301      	movs	r3, #1
 8002d6a:	216b      	movs	r1, #107	; 0x6b
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fd fbab 	bl	80004c8 <a_mpu9250_read>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <mpu9250_set_ptat+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	4815      	ldr	r0, [pc, #84]	; (8002dd8 <mpu9250_set_ptat+0x98>)
 8002d82:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002d84:	2301      	movs	r3, #1
 8002d86:	e023      	b.n	8002dd0 <mpu9250_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8002d88:	7bbb      	ldrb	r3, [r7, #14]
 8002d8a:	f023 0308 	bic.w	r3, r3, #8
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <mpu9250_set_ptat+0x5c>
 8002d98:	2208      	movs	r2, #8
 8002d9a:	e000      	b.n	8002d9e <mpu9250_set_ptat+0x5e>
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	7bbb      	ldrb	r3, [r7, #14]
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	4313      	orrs	r3, r2
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002daa:	f107 020e 	add.w	r2, r7, #14
 8002dae:	2301      	movs	r3, #1
 8002db0:	216b      	movs	r1, #107	; 0x6b
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd fbb9 	bl	800052a <a_mpu9250_write>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <mpu9250_set_ptat+0x8e>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	4805      	ldr	r0, [pc, #20]	; (8002ddc <mpu9250_set_ptat+0x9c>)
 8002dc8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <mpu9250_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	0800a818 	.word	0x0800a818
 8002ddc:	0800a844 	.word	0x0800a844

08002de0 <mpu9250_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_cycle_wake_up(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <mpu9250_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 8002df2:	2302      	movs	r3, #2
 8002df4:	e039      	b.n	8002e6a <mpu9250_set_cycle_wake_up+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d001      	beq.n	8002e04 <mpu9250_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 8002e00:	2303      	movs	r3, #3
 8002e02:	e032      	b.n	8002e6a <mpu9250_set_cycle_wake_up+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002e04:	f107 020e 	add.w	r2, r7, #14
 8002e08:	2301      	movs	r3, #1
 8002e0a:	216b      	movs	r1, #107	; 0x6b
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fd fb5b 	bl	80004c8 <a_mpu9250_read>
 8002e12:	4603      	mov	r3, r0
 8002e14:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <mpu9250_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	4814      	ldr	r0, [pc, #80]	; (8002e74 <mpu9250_set_cycle_wake_up+0x94>)
 8002e22:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002e24:	2301      	movs	r3, #1
 8002e26:	e020      	b.n	8002e6a <mpu9250_set_cycle_wake_up+0x8a>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8002e28:	7bbb      	ldrb	r3, [r7, #14]
 8002e2a:	f023 0320 	bic.w	r3, r3, #32
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	015b      	lsls	r3, r3, #5
 8002e36:	b25a      	sxtb	r2, r3
 8002e38:	7bbb      	ldrb	r3, [r7, #14]
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	b25b      	sxtb	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002e44:	f107 020e 	add.w	r2, r7, #14
 8002e48:	2301      	movs	r3, #1
 8002e4a:	216b      	movs	r1, #107	; 0x6b
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fd fb6c 	bl	800052a <a_mpu9250_write>
 8002e52:	4603      	mov	r3, r0
 8002e54:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <mpu9250_set_cycle_wake_up+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	4805      	ldr	r0, [pc, #20]	; (8002e78 <mpu9250_set_cycle_wake_up+0x98>)
 8002e62:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <mpu9250_set_cycle_wake_up+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	0800a818 	.word	0x0800a818
 8002e78:	0800a844 	.word	0x0800a844

08002e7c <mpu9250_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_sleep(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <mpu9250_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e039      	b.n	8002f06 <mpu9250_set_sleep+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d001      	beq.n	8002ea0 <mpu9250_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e032      	b.n	8002f06 <mpu9250_set_sleep+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002ea0:	f107 020e 	add.w	r2, r7, #14
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	216b      	movs	r1, #107	; 0x6b
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7fd fb0d 	bl	80004c8 <a_mpu9250_read>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <mpu9250_set_sleep+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	4814      	ldr	r0, [pc, #80]	; (8002f10 <mpu9250_set_sleep+0x94>)
 8002ebe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e020      	b.n	8002f06 <mpu9250_set_sleep+0x8a>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 8002ec4:	7bbb      	ldrb	r3, [r7, #14]
 8002ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	019b      	lsls	r3, r3, #6
 8002ed2:	b25a      	sxtb	r2, r3
 8002ed4:	7bbb      	ldrb	r3, [r7, #14]
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002ee0:	f107 020e 	add.w	r2, r7, #14
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	216b      	movs	r1, #107	; 0x6b
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fd fb1e 	bl	800052a <a_mpu9250_write>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <mpu9250_set_sleep+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	4805      	ldr	r0, [pc, #20]	; (8002f14 <mpu9250_set_sleep+0x98>)
 8002efe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <mpu9250_set_sleep+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	0800a818 	.word	0x0800a818
 8002f14:	0800a844 	.word	0x0800a844

08002f18 <mpu9250_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyro_standby(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <mpu9250_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e039      	b.n	8002fa2 <mpu9250_set_gyro_standby+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d001      	beq.n	8002f3c <mpu9250_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e032      	b.n	8002fa2 <mpu9250_set_gyro_standby+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002f3c:	f107 020e 	add.w	r2, r7, #14
 8002f40:	2301      	movs	r3, #1
 8002f42:	216b      	movs	r1, #107	; 0x6b
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fd fabf 	bl	80004c8 <a_mpu9250_read>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <mpu9250_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	4814      	ldr	r0, [pc, #80]	; (8002fac <mpu9250_set_gyro_standby+0x94>)
 8002f5a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e020      	b.n	8002fa2 <mpu9250_set_gyro_standby+0x8a>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8002f60:	7bbb      	ldrb	r3, [r7, #14]
 8002f62:	f023 0310 	bic.w	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	b25a      	sxtb	r2, r3
 8002f70:	7bbb      	ldrb	r3, [r7, #14]
 8002f72:	b25b      	sxtb	r3, r3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002f7c:	f107 020e 	add.w	r2, r7, #14
 8002f80:	2301      	movs	r3, #1
 8002f82:	216b      	movs	r1, #107	; 0x6b
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fd fad0 	bl	800052a <a_mpu9250_write>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <mpu9250_set_gyro_standby+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <mpu9250_set_gyro_standby+0x98>)
 8002f9a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <mpu9250_set_gyro_standby+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	0800a818 	.word	0x0800a818
 8002fb0:	0800a844 	.word	0x0800a844

08002fb4 <mpu9250_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_standby_mode(mpu9250_handle_t *handle, mpu9250_source_t source, mpu9250_bool_t enable)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <mpu9250_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e043      	b.n	8003056 <mpu9250_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d001      	beq.n	8002fdc <mpu9250_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e03c      	b.n	8003056 <mpu9250_set_standby_mode+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8002fdc:	f107 020e 	add.w	r2, r7, #14
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	216c      	movs	r1, #108	; 0x6c
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fd fa6f 	bl	80004c8 <a_mpu9250_read>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <mpu9250_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu9250: read power management 2 failed.\n");           /* read power management 2 failed */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	4819      	ldr	r0, [pc, #100]	; (8003060 <mpu9250_set_standby_mode+0xac>)
 8002ffa:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e02a      	b.n	8003056 <mpu9250_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2201      	movs	r2, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	b25b      	sxtb	r3, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	b25a      	sxtb	r2, r3
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	b25b      	sxtb	r3, r3
 8003012:	4013      	ands	r3, r2
 8003014:	b25b      	sxtb	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 800301a:	78ba      	ldrb	r2, [r7, #2]
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	b25a      	sxtb	r2, r3
 8003024:	7bbb      	ldrb	r3, [r7, #14]
 8003026:	b25b      	sxtb	r3, r3
 8003028:	4313      	orrs	r3, r2
 800302a:	b25b      	sxtb	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8003030:	f107 020e 	add.w	r2, r7, #14
 8003034:	2301      	movs	r3, #1
 8003036:	216c      	movs	r1, #108	; 0x6c
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd fa76 	bl	800052a <a_mpu9250_write>
 800303e:	4603      	mov	r3, r0
 8003040:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <mpu9250_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu9250: write power management 2 failed.\n");          /* write power management 2 failed */
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <mpu9250_set_standby_mode+0xb0>)
 800304e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <mpu9250_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0800a870 	.word	0x0800a870
 8003064:	0800a89c 	.word	0x0800a89c

08003068 <mpu9250_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_sample_rate_divider(mpu9250_handle_t *handle, uint8_t d)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <mpu9250_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 800307a:	2302      	movs	r3, #2
 800307c:	e018      	b.n	80030b0 <mpu9250_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003084:	2b01      	cmp	r3, #1
 8003086:	d001      	beq.n	800308c <mpu9250_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 8003088:	2303      	movs	r3, #3
 800308a:	e011      	b.n	80030b0 <mpu9250_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu9250_write(handle, MPU9250_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 800308c:	1cfa      	adds	r2, r7, #3
 800308e:	2301      	movs	r3, #1
 8003090:	2119      	movs	r1, #25
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fa49 	bl	800052a <a_mpu9250_write>
 8003098:	4603      	mov	r3, r0
 800309a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <mpu9250_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu9250: write smprt div failed.\n");                   /* write smprt div failed */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	4804      	ldr	r0, [pc, #16]	; (80030b8 <mpu9250_set_sample_rate_divider+0x50>)
 80030a8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <mpu9250_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	0800a95c 	.word	0x0800a95c

080030bc <mpu9250_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_extern_sync(mpu9250_handle_t *handle, mpu9250_extern_sync_t sync)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <mpu9250_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 80030ce:	2302      	movs	r3, #2
 80030d0:	e039      	b.n	8003146 <mpu9250_set_extern_sync+0x8a>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <mpu9250_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 80030dc:	2303      	movs	r3, #3
 80030de:	e032      	b.n	8003146 <mpu9250_set_extern_sync+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80030e0:	f107 020e 	add.w	r2, r7, #14
 80030e4:	2301      	movs	r3, #1
 80030e6:	211a      	movs	r1, #26
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7fd f9ed 	bl	80004c8 <a_mpu9250_read>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <mpu9250_set_extern_sync+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	4814      	ldr	r0, [pc, #80]	; (8003150 <mpu9250_set_extern_sync+0x94>)
 80030fe:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003100:	2301      	movs	r3, #1
 8003102:	e020      	b.n	8003146 <mpu9250_set_extern_sync+0x8a>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 8003104:	7bbb      	ldrb	r3, [r7, #14]
 8003106:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800310a:	b2db      	uxtb	r3, r3
 800310c:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	b25a      	sxtb	r2, r3
 8003114:	7bbb      	ldrb	r3, [r7, #14]
 8003116:	b25b      	sxtb	r3, r3
 8003118:	4313      	orrs	r3, r2
 800311a:	b25b      	sxtb	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8003120:	f107 020e 	add.w	r2, r7, #14
 8003124:	2301      	movs	r3, #1
 8003126:	211a      	movs	r1, #26
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd f9fe 	bl	800052a <a_mpu9250_write>
 800312e:	4603      	mov	r3, r0
 8003130:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <mpu9250_set_extern_sync+0x88>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	4805      	ldr	r0, [pc, #20]	; (8003154 <mpu9250_set_extern_sync+0x98>)
 800313e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <mpu9250_set_extern_sync+0x8a>
    }
    
    return 0;                                                                      /* success return 0 */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	0800a9a4 	.word	0x0800a9a4
 8003154:	0800a9c4 	.word	0x0800a9c4

08003158 <mpu9250_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_low_pass_filter(mpu9250_handle_t *handle, mpu9250_low_pass_filter_t filter)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <mpu9250_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 800316a:	2302      	movs	r3, #2
 800316c:	e035      	b.n	80031da <mpu9250_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003174:	2b01      	cmp	r3, #1
 8003176:	d001      	beq.n	800317c <mpu9250_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 8003178:	2303      	movs	r3, #3
 800317a:	e02e      	b.n	80031da <mpu9250_set_low_pass_filter+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 800317c:	f107 020e 	add.w	r2, r7, #14
 8003180:	2301      	movs	r3, #1
 8003182:	211a      	movs	r1, #26
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fd f99f 	bl	80004c8 <a_mpu9250_read>
 800318a:	4603      	mov	r3, r0
 800318c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <mpu9250_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	4812      	ldr	r0, [pc, #72]	; (80031e4 <mpu9250_set_low_pass_filter+0x8c>)
 800319a:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 800319c:	2301      	movs	r3, #1
 800319e:	e01c      	b.n	80031da <mpu9250_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 80031aa:	7bba      	ldrb	r2, [r7, #14]
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 80031b4:	f107 020e 	add.w	r2, r7, #14
 80031b8:	2301      	movs	r3, #1
 80031ba:	211a      	movs	r1, #26
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fd f9b4 	bl	800052a <a_mpu9250_write>
 80031c2:	4603      	mov	r3, r0
 80031c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <mpu9250_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	4805      	ldr	r0, [pc, #20]	; (80031e8 <mpu9250_set_low_pass_filter+0x90>)
 80031d2:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <mpu9250_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	0800a9a4 	.word	0x0800a9a4
 80031e8:	0800a9c4 	.word	0x0800a9c4

080031ec <mpu9250_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_mode(mpu9250_handle_t *handle, mpu9250_fifo_mode mode)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <mpu9250_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 80031fe:	2302      	movs	r3, #2
 8003200:	e039      	b.n	8003276 <mpu9250_set_fifo_mode+0x8a>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <mpu9250_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 800320c:	2303      	movs	r3, #3
 800320e:	e032      	b.n	8003276 <mpu9250_set_fifo_mode+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8003210:	f107 020e 	add.w	r2, r7, #14
 8003214:	2301      	movs	r3, #1
 8003216:	211a      	movs	r1, #26
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd f955 	bl	80004c8 <a_mpu9250_read>
 800321e:	4603      	mov	r3, r0
 8003220:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <mpu9250_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	4814      	ldr	r0, [pc, #80]	; (8003280 <mpu9250_set_fifo_mode+0x94>)
 800322e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003230:	2301      	movs	r3, #1
 8003232:	e020      	b.n	8003276 <mpu9250_set_fifo_mode+0x8a>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8003234:	7bbb      	ldrb	r3, [r7, #14]
 8003236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800323a:	b2db      	uxtb	r3, r3
 800323c:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	b25a      	sxtb	r2, r3
 8003244:	7bbb      	ldrb	r3, [r7, #14]
 8003246:	b25b      	sxtb	r3, r3
 8003248:	4313      	orrs	r3, r2
 800324a:	b25b      	sxtb	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8003250:	f107 020e 	add.w	r2, r7, #14
 8003254:	2301      	movs	r3, #1
 8003256:	211a      	movs	r1, #26
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fd f966 	bl	800052a <a_mpu9250_write>
 800325e:	4603      	mov	r3, r0
 8003260:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <mpu9250_set_fifo_mode+0x88>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	4805      	ldr	r0, [pc, #20]	; (8003284 <mpu9250_set_fifo_mode+0x98>)
 800326e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <mpu9250_set_fifo_mode+0x8a>
    }
    
    return 0;                                                                      /* success return 0 */
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	0800a9a4 	.word	0x0800a9a4
 8003284:	0800a9c4 	.word	0x0800a9c4

08003288 <mpu9250_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_test(mpu9250_handle_t *handle, mpu9250_axis_t axis, mpu9250_bool_t enable)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
 8003294:	4613      	mov	r3, r2
 8003296:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <mpu9250_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 800329e:	2302      	movs	r3, #2
 80032a0:	e043      	b.n	800332a <mpu9250_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d001      	beq.n	80032b0 <mpu9250_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 80032ac:	2303      	movs	r3, #3
 80032ae:	e03c      	b.n	800332a <mpu9250_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 80032b0:	f107 020e 	add.w	r2, r7, #14
 80032b4:	2301      	movs	r3, #1
 80032b6:	211b      	movs	r1, #27
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd f905 	bl	80004c8 <a_mpu9250_read>
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <mpu9250_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	4819      	ldr	r0, [pc, #100]	; (8003334 <mpu9250_set_gyroscope_test+0xac>)
 80032ce:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80032d0:	2301      	movs	r3, #1
 80032d2:	e02a      	b.n	800332a <mpu9250_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	2201      	movs	r2, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	b25b      	sxtb	r3, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	b25a      	sxtb	r2, r3
 80032e2:	7bbb      	ldrb	r3, [r7, #14]
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	4013      	ands	r3, r2
 80032e8:	b25b      	sxtb	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 80032ee:	78ba      	ldrb	r2, [r7, #2]
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	b25a      	sxtb	r2, r3
 80032f8:	7bbb      	ldrb	r3, [r7, #14]
 80032fa:	b25b      	sxtb	r3, r3
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b25b      	sxtb	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8003304:	f107 020e 	add.w	r2, r7, #14
 8003308:	2301      	movs	r3, #1
 800330a:	211b      	movs	r1, #27
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7fd f90c 	bl	800052a <a_mpu9250_write>
 8003312:	4603      	mov	r3, r0
 8003314:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <mpu9250_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	4805      	ldr	r0, [pc, #20]	; (8003338 <mpu9250_set_gyroscope_test+0xb0>)
 8003322:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <mpu9250_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	0800a9e4 	.word	0x0800a9e4
 8003338:	0800aa0c 	.word	0x0800aa0c

0800333c <mpu9250_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_range(mpu9250_handle_t *handle, mpu9250_gyroscope_range_t range)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <mpu9250_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 800334e:	2302      	movs	r3, #2
 8003350:	e039      	b.n	80033c6 <mpu9250_set_gyroscope_range+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <mpu9250_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 800335c:	2303      	movs	r3, #3
 800335e:	e032      	b.n	80033c6 <mpu9250_set_gyroscope_range+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8003360:	f107 020e 	add.w	r2, r7, #14
 8003364:	2301      	movs	r3, #1
 8003366:	211b      	movs	r1, #27
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7fd f8ad 	bl	80004c8 <a_mpu9250_read>
 800336e:	4603      	mov	r3, r0
 8003370:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <mpu9250_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	4814      	ldr	r0, [pc, #80]	; (80033d0 <mpu9250_set_gyroscope_range+0x94>)
 800337e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003380:	2301      	movs	r3, #1
 8003382:	e020      	b.n	80033c6 <mpu9250_set_gyroscope_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	f023 0318 	bic.w	r3, r3, #24
 800338a:	b2db      	uxtb	r3, r3
 800338c:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	b25a      	sxtb	r2, r3
 8003394:	7bbb      	ldrb	r3, [r7, #14]
 8003396:	b25b      	sxtb	r3, r3
 8003398:	4313      	orrs	r3, r2
 800339a:	b25b      	sxtb	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80033a0:	f107 020e 	add.w	r2, r7, #14
 80033a4:	2301      	movs	r3, #1
 80033a6:	211b      	movs	r1, #27
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7fd f8be 	bl	800052a <a_mpu9250_write>
 80033ae:	4603      	mov	r3, r0
 80033b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <mpu9250_set_gyroscope_range+0x88>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	4805      	ldr	r0, [pc, #20]	; (80033d4 <mpu9250_set_gyroscope_range+0x98>)
 80033be:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <mpu9250_set_gyroscope_range+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	0800a9e4 	.word	0x0800a9e4
 80033d4:	0800aa0c 	.word	0x0800aa0c

080033d8 <mpu9250_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_choice(mpu9250_handle_t *handle, uint8_t choice)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <mpu9250_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 80033ea:	2302      	movs	r3, #2
 80033ec:	e03e      	b.n	800346c <mpu9250_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d001      	beq.n	80033fc <mpu9250_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 80033f8:	2303      	movs	r3, #3
 80033fa:	e037      	b.n	800346c <mpu9250_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d905      	bls.n	800340e <mpu9250_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu9250: choice > 3.\n");                                  /* choice > 3 */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	481b      	ldr	r0, [pc, #108]	; (8003474 <mpu9250_set_gyroscope_choice+0x9c>)
 8003408:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 800340a:	2304      	movs	r3, #4
 800340c:	e02e      	b.n	800346c <mpu9250_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 800340e:	f107 020e 	add.w	r2, r7, #14
 8003412:	2301      	movs	r3, #1
 8003414:	211b      	movs	r1, #27
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd f856 	bl	80004c8 <a_mpu9250_read>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <mpu9250_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	4813      	ldr	r0, [pc, #76]	; (8003478 <mpu9250_set_gyroscope_choice+0xa0>)
 800342c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800342e:	2301      	movs	r3, #1
 8003430:	e01c      	b.n	800346c <mpu9250_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 8003432:	7bbb      	ldrb	r3, [r7, #14]
 8003434:	f023 0303 	bic.w	r3, r3, #3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 800343c:	7bba      	ldrb	r2, [r7, #14]
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	4313      	orrs	r3, r2
 8003442:	b2db      	uxtb	r3, r3
 8003444:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8003446:	f107 020e 	add.w	r2, r7, #14
 800344a:	2301      	movs	r3, #1
 800344c:	211b      	movs	r1, #27
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd f86b 	bl	800052a <a_mpu9250_write>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <mpu9250_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	4806      	ldr	r0, [pc, #24]	; (800347c <mpu9250_set_gyroscope_choice+0xa4>)
 8003464:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <mpu9250_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	0800aa38 	.word	0x0800aa38
 8003478:	0800a9e4 	.word	0x0800a9e4
 800347c:	0800aa0c 	.word	0x0800aa0c

08003480 <mpu9250_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_test(mpu9250_handle_t *handle, mpu9250_axis_t axis, mpu9250_bool_t enable)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
 800348c:	4613      	mov	r3, r2
 800348e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <mpu9250_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8003496:	2302      	movs	r3, #2
 8003498:	e043      	b.n	8003522 <mpu9250_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d001      	beq.n	80034a8 <mpu9250_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 80034a4:	2303      	movs	r3, #3
 80034a6:	e03c      	b.n	8003522 <mpu9250_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 80034a8:	f107 020e 	add.w	r2, r7, #14
 80034ac:	2301      	movs	r3, #1
 80034ae:	211c      	movs	r1, #28
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7fd f809 	bl	80004c8 <a_mpu9250_read>
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <mpu9250_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu9250: read accelerometer config failed.\n");            /* read accelerometer config failed */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	4819      	ldr	r0, [pc, #100]	; (800352c <mpu9250_set_accelerometer_test+0xac>)
 80034c6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80034c8:	2301      	movs	r3, #1
 80034ca:	e02a      	b.n	8003522 <mpu9250_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	2201      	movs	r2, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	b25a      	sxtb	r2, r3
 80034da:	7bbb      	ldrb	r3, [r7, #14]
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	4013      	ands	r3, r2
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 80034e6:	78ba      	ldrb	r2, [r7, #2]
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	b25a      	sxtb	r2, r3
 80034f0:	7bbb      	ldrb	r3, [r7, #14]
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 80034fc:	f107 020e 	add.w	r2, r7, #14
 8003500:	2301      	movs	r3, #1
 8003502:	211c      	movs	r1, #28
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd f810 	bl	800052a <a_mpu9250_write>
 800350a:	4603      	mov	r3, r0
 800350c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <mpu9250_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu9250: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	4805      	ldr	r0, [pc, #20]	; (8003530 <mpu9250_set_accelerometer_test+0xb0>)
 800351a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <mpu9250_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	0800a090 	.word	0x0800a090
 8003530:	0800aa50 	.word	0x0800aa50

08003534 <mpu9250_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_range(mpu9250_handle_t *handle, mpu9250_accelerometer_range_t range)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <mpu9250_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 8003546:	2302      	movs	r3, #2
 8003548:	e039      	b.n	80035be <mpu9250_set_accelerometer_range+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <mpu9250_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8003554:	2303      	movs	r3, #3
 8003556:	e032      	b.n	80035be <mpu9250_set_accelerometer_range+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8003558:	f107 020e 	add.w	r2, r7, #14
 800355c:	2301      	movs	r3, #1
 800355e:	211c      	movs	r1, #28
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fc ffb1 	bl	80004c8 <a_mpu9250_read>
 8003566:	4603      	mov	r3, r0
 8003568:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <mpu9250_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu9250: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	4814      	ldr	r0, [pc, #80]	; (80035c8 <mpu9250_set_accelerometer_range+0x94>)
 8003576:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003578:	2301      	movs	r3, #1
 800357a:	e020      	b.n	80035be <mpu9250_set_accelerometer_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 800357c:	7bbb      	ldrb	r3, [r7, #14]
 800357e:	f023 0318 	bic.w	r3, r3, #24
 8003582:	b2db      	uxtb	r3, r3
 8003584:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	b25a      	sxtb	r2, r3
 800358c:	7bbb      	ldrb	r3, [r7, #14]
 800358e:	b25b      	sxtb	r3, r3
 8003590:	4313      	orrs	r3, r2
 8003592:	b25b      	sxtb	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8003598:	f107 020e 	add.w	r2, r7, #14
 800359c:	2301      	movs	r3, #1
 800359e:	211c      	movs	r1, #28
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fc ffc2 	bl	800052a <a_mpu9250_write>
 80035a6:	4603      	mov	r3, r0
 80035a8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <mpu9250_set_accelerometer_range+0x88>
    {
        handle->debug_print("mpu9250: write accelerometer config failed.\n");           /* write accelerometer config failed */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	4805      	ldr	r0, [pc, #20]	; (80035cc <mpu9250_set_accelerometer_range+0x98>)
 80035b6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <mpu9250_set_accelerometer_range+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	0800a090 	.word	0x0800a090
 80035cc:	0800aa50 	.word	0x0800aa50

080035d0 <mpu9250_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_1024kb(mpu9250_handle_t *handle)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <mpu9250_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 80035de:	2302      	movs	r3, #2
 80035e0:	e035      	b.n	800364e <mpu9250_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d001      	beq.n	80035f0 <mpu9250_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 80035ec:	2303      	movs	r3, #3
 80035ee:	e02e      	b.n	800364e <mpu9250_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 80035f0:	f107 020e 	add.w	r2, r7, #14
 80035f4:	2301      	movs	r3, #1
 80035f6:	211d      	movs	r1, #29
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fc ff65 	bl	80004c8 <a_mpu9250_read>
 80035fe:	4603      	mov	r3, r0
 8003600:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <mpu9250_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	4812      	ldr	r0, [pc, #72]	; (8003658 <mpu9250_set_fifo_1024kb+0x88>)
 800360e:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003610:	2301      	movs	r3, #1
 8003612:	e01c      	b.n	800364e <mpu9250_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8003614:	7bbb      	ldrb	r3, [r7, #14]
 8003616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800361a:	b2db      	uxtb	r3, r3
 800361c:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 800361e:	7bbb      	ldrb	r3, [r7, #14]
 8003620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003624:	b2db      	uxtb	r3, r3
 8003626:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8003628:	f107 020e 	add.w	r2, r7, #14
 800362c:	2301      	movs	r3, #1
 800362e:	211d      	movs	r1, #29
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fc ff7a 	bl	800052a <a_mpu9250_write>
 8003636:	4603      	mov	r3, r0
 8003638:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <mpu9250_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	4805      	ldr	r0, [pc, #20]	; (800365c <mpu9250_set_fifo_1024kb+0x8c>)
 8003646:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <mpu9250_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	0800aa80 	.word	0x0800aa80
 800365c:	0800aab0 	.word	0x0800aab0

08003660 <mpu9250_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_choice(mpu9250_handle_t *handle, uint8_t choice)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <mpu9250_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8003672:	2302      	movs	r3, #2
 8003674:	e042      	b.n	80036fc <mpu9250_set_accelerometer_choice+0x9c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800367c:	2b01      	cmp	r3, #1
 800367e:	d001      	beq.n	8003684 <mpu9250_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8003680:	2303      	movs	r3, #3
 8003682:	e03b      	b.n	80036fc <mpu9250_set_accelerometer_choice+0x9c>
    }
    if (choice > 1)                                                                     /* check the choice */
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d905      	bls.n	8003696 <mpu9250_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu9250: choice > 1.\n");                                  /* choice > 1 */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	481d      	ldr	r0, [pc, #116]	; (8003704 <mpu9250_set_accelerometer_choice+0xa4>)
 8003690:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 8003692:	2304      	movs	r3, #4
 8003694:	e032      	b.n	80036fc <mpu9250_set_accelerometer_choice+0x9c>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 8003696:	f107 020e 	add.w	r2, r7, #14
 800369a:	2301      	movs	r3, #1
 800369c:	211d      	movs	r1, #29
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fc ff12 	bl	80004c8 <a_mpu9250_read>
 80036a4:	4603      	mov	r3, r0
 80036a6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <mpu9250_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	4815      	ldr	r0, [pc, #84]	; (8003708 <mpu9250_set_accelerometer_choice+0xa8>)
 80036b4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80036b6:	2301      	movs	r3, #1
 80036b8:	e020      	b.n	80036fc <mpu9250_set_accelerometer_choice+0x9c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 80036ba:	7bbb      	ldrb	r3, [r7, #14]
 80036bc:	f023 0308 	bic.w	r3, r3, #8
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	b25a      	sxtb	r2, r3
 80036ca:	7bbb      	ldrb	r3, [r7, #14]
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 80036d6:	f107 020e 	add.w	r2, r7, #14
 80036da:	2301      	movs	r3, #1
 80036dc:	211d      	movs	r1, #29
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fc ff23 	bl	800052a <a_mpu9250_write>
 80036e4:	4603      	mov	r3, r0
 80036e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <mpu9250_set_accelerometer_choice+0x9a>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	4806      	ldr	r0, [pc, #24]	; (800370c <mpu9250_set_accelerometer_choice+0xac>)
 80036f4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <mpu9250_set_accelerometer_choice+0x9c>
    }
    
    return 0;                                                                           /* success return 0 */
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	0800aae0 	.word	0x0800aae0
 8003708:	0800aa80 	.word	0x0800aa80
 800370c:	0800aab0 	.word	0x0800aab0

08003710 <mpu9250_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_low_pass_filter(mpu9250_handle_t *handle, mpu9250_accelerometer_low_pass_filter_t filter)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <mpu9250_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 8003722:	2302      	movs	r3, #2
 8003724:	e035      	b.n	8003792 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800372c:	2b01      	cmp	r3, #1
 800372e:	d001      	beq.n	8003734 <mpu9250_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 8003730:	2303      	movs	r3, #3
 8003732:	e02e      	b.n	8003792 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8003734:	f107 020e 	add.w	r2, r7, #14
 8003738:	2301      	movs	r3, #1
 800373a:	211d      	movs	r1, #29
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fc fec3 	bl	80004c8 <a_mpu9250_read>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <mpu9250_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	4812      	ldr	r0, [pc, #72]	; (800379c <mpu9250_set_accelerometer_low_pass_filter+0x8c>)
 8003752:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003754:	2301      	movs	r3, #1
 8003756:	e01c      	b.n	8003792 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 8003758:	7bbb      	ldrb	r3, [r7, #14]
 800375a:	f023 0307 	bic.w	r3, r3, #7
 800375e:	b2db      	uxtb	r3, r3
 8003760:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 8003762:	7bba      	ldrb	r2, [r7, #14]
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	4313      	orrs	r3, r2
 8003768:	b2db      	uxtb	r3, r3
 800376a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 800376c:	f107 020e 	add.w	r2, r7, #14
 8003770:	2301      	movs	r3, #1
 8003772:	211d      	movs	r1, #29
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fc fed8 	bl	800052a <a_mpu9250_write>
 800377a:	4603      	mov	r3, r0
 800377c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <mpu9250_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	4805      	ldr	r0, [pc, #20]	; (80037a0 <mpu9250_set_accelerometer_low_pass_filter+0x90>)
 800378a:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	0800aa80 	.word	0x0800aa80
 80037a0:	0800aab0 	.word	0x0800aab0

080037a4 <mpu9250_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_low_power_accel_output_rate(mpu9250_handle_t *handle, mpu9250_low_power_accel_output_rate_t rate)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <mpu9250_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 80037b6:	2302      	movs	r3, #2
 80037b8:	e035      	b.n	8003826 <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d001      	beq.n	80037c8 <mpu9250_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 80037c4:	2303      	movs	r3, #3
 80037c6:	e02e      	b.n	8003826 <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 80037c8:	f107 020e 	add.w	r2, r7, #14
 80037cc:	2301      	movs	r3, #1
 80037ce:	211e      	movs	r1, #30
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fc fe79 	bl	80004c8 <a_mpu9250_read>
 80037d6:	4603      	mov	r3, r0
 80037d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <mpu9250_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu9250: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	4812      	ldr	r0, [pc, #72]	; (8003830 <mpu9250_set_low_power_accel_output_rate+0x8c>)
 80037e6:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80037e8:	2301      	movs	r3, #1
 80037ea:	e01c      	b.n	8003826 <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	f023 030f 	bic.w	r3, r3, #15
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 80037f6:	7bba      	ldrb	r2, [r7, #14]
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 8003800:	f107 020e 	add.w	r2, r7, #14
 8003804:	2301      	movs	r3, #1
 8003806:	211e      	movs	r1, #30
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fc fe8e 	bl	800052a <a_mpu9250_write>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <mpu9250_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu9250: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	4805      	ldr	r0, [pc, #20]	; (8003834 <mpu9250_set_low_power_accel_output_rate+0x90>)
 800381e:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	0800aaf8 	.word	0x0800aaf8
 8003834:	0800ab24 	.word	0x0800ab24

08003838 <mpu9250_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_wake_on_motion(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <mpu9250_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 800384a:	2302      	movs	r3, #2
 800384c:	e039      	b.n	80038c2 <mpu9250_set_wake_on_motion+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <mpu9250_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 8003858:	2303      	movs	r3, #3
 800385a:	e032      	b.n	80038c2 <mpu9250_set_wake_on_motion+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 800385c:	f107 020e 	add.w	r2, r7, #14
 8003860:	2301      	movs	r3, #1
 8003862:	2169      	movs	r1, #105	; 0x69
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7fc fe2f 	bl	80004c8 <a_mpu9250_read>
 800386a:	4603      	mov	r3, r0
 800386c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <mpu9250_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu9250: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	4814      	ldr	r0, [pc, #80]	; (80038cc <mpu9250_set_wake_on_motion+0x94>)
 800387a:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800387c:	2301      	movs	r3, #1
 800387e:	e020      	b.n	80038c2 <mpu9250_set_wake_on_motion+0x8a>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003886:	b2db      	uxtb	r3, r3
 8003888:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	01db      	lsls	r3, r3, #7
 800388e:	b25a      	sxtb	r2, r3
 8003890:	7bbb      	ldrb	r3, [r7, #14]
 8003892:	b25b      	sxtb	r3, r3
 8003894:	4313      	orrs	r3, r2
 8003896:	b25b      	sxtb	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800389c:	f107 020e 	add.w	r2, r7, #14
 80038a0:	2301      	movs	r3, #1
 80038a2:	2169      	movs	r1, #105	; 0x69
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fc fe40 	bl	800052a <a_mpu9250_write>
 80038aa:	4603      	mov	r3, r0
 80038ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <mpu9250_set_wake_on_motion+0x88>
    {
        handle->debug_print("mpu9250: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	4805      	ldr	r0, [pc, #20]	; (80038d0 <mpu9250_set_wake_on_motion+0x98>)
 80038ba:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <mpu9250_set_wake_on_motion+0x8a>
    }
    
    return 0;                                                                               /* success return 0 */
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	0800ab54 	.word	0x0800ab54
 80038d0:	0800ab80 	.word	0x0800ab80

080038d4 <mpu9250_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accel_compare_with_previous_sample(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <mpu9250_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 80038e6:	2302      	movs	r3, #2
 80038e8:	e039      	b.n	800395e <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <mpu9250_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 80038f4:	2303      	movs	r3, #3
 80038f6:	e032      	b.n	800395e <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 80038f8:	f107 020e 	add.w	r2, r7, #14
 80038fc:	2301      	movs	r3, #1
 80038fe:	2169      	movs	r1, #105	; 0x69
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fc fde1 	bl	80004c8 <a_mpu9250_read>
 8003906:	4603      	mov	r3, r0
 8003908:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <mpu9250_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu9250: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	4814      	ldr	r0, [pc, #80]	; (8003968 <mpu9250_set_accel_compare_with_previous_sample+0x94>)
 8003916:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8003918:	2301      	movs	r3, #1
 800391a:	e020      	b.n	800395e <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 800391c:	7bbb      	ldrb	r3, [r7, #14]
 800391e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003922:	b2db      	uxtb	r3, r3
 8003924:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	019b      	lsls	r3, r3, #6
 800392a:	b25a      	sxtb	r2, r3
 800392c:	7bbb      	ldrb	r3, [r7, #14]
 800392e:	b25b      	sxtb	r3, r3
 8003930:	4313      	orrs	r3, r2
 8003932:	b25b      	sxtb	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8003938:	f107 020e 	add.w	r2, r7, #14
 800393c:	2301      	movs	r3, #1
 800393e:	2169      	movs	r1, #105	; 0x69
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fc fdf2 	bl	800052a <a_mpu9250_write>
 8003946:	4603      	mov	r3, r0
 8003948:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <mpu9250_set_accel_compare_with_previous_sample+0x88>
    {
        handle->debug_print("mpu9250: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	4805      	ldr	r0, [pc, #20]	; (800396c <mpu9250_set_accel_compare_with_previous_sample+0x98>)
 8003956:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    
    return 0;                                                                               /* success return 0 */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	0800ab54 	.word	0x0800ab54
 800396c:	0800ab80 	.word	0x0800ab80

08003970 <mpu9250_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_enable(mpu9250_handle_t *handle, mpu9250_fifo_t fifo, mpu9250_bool_t enable)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
 800397c:	4613      	mov	r3, r2
 800397e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <mpu9250_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 8003986:	2302      	movs	r3, #2
 8003988:	e043      	b.n	8003a12 <mpu9250_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003990:	2b01      	cmp	r3, #1
 8003992:	d001      	beq.n	8003998 <mpu9250_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 8003994:	2303      	movs	r3, #3
 8003996:	e03c      	b.n	8003a12 <mpu9250_set_fifo_enable+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8003998:	f107 020e 	add.w	r2, r7, #14
 800399c:	2301      	movs	r3, #1
 800399e:	2123      	movs	r1, #35	; 0x23
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fc fd91 	bl	80004c8 <a_mpu9250_read>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <mpu9250_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu9250: read fifo enable config failed.\n");          /* read fifo enable config failed */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	4819      	ldr	r0, [pc, #100]	; (8003a1c <mpu9250_set_fifo_enable+0xac>)
 80039b6:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80039b8:	2301      	movs	r3, #1
 80039ba:	e02a      	b.n	8003a12 <mpu9250_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2201      	movs	r2, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	b25a      	sxtb	r2, r3
 80039ca:	7bbb      	ldrb	r3, [r7, #14]
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	4013      	ands	r3, r2
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 80039d6:	78ba      	ldrb	r2, [r7, #2]
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	b25a      	sxtb	r2, r3
 80039e0:	7bbb      	ldrb	r3, [r7, #14]
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 80039ec:	f107 020e 	add.w	r2, r7, #14
 80039f0:	2301      	movs	r3, #1
 80039f2:	2123      	movs	r1, #35	; 0x23
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fc fd98 	bl	800052a <a_mpu9250_write>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <mpu9250_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu9250: write fifo enable config failed.\n");         /* write fifo enable config failed */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	4805      	ldr	r0, [pc, #20]	; (8003a20 <mpu9250_set_fifo_enable+0xb0>)
 8003a0a:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <mpu9250_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0800abac 	.word	0x0800abac
 8003a20:	0800abd8 	.word	0x0800abd8

08003a24 <mpu9250_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_level(mpu9250_handle_t *handle, mpu9250_pin_level_t level)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <mpu9250_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8003a36:	2302      	movs	r3, #2
 8003a38:	e039      	b.n	8003aae <mpu9250_set_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d001      	beq.n	8003a48 <mpu9250_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8003a44:	2303      	movs	r3, #3
 8003a46:	e032      	b.n	8003aae <mpu9250_set_interrupt_level+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003a48:	f107 020e 	add.w	r2, r7, #14
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	2137      	movs	r1, #55	; 0x37
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fc fd39 	bl	80004c8 <a_mpu9250_read>
 8003a56:	4603      	mov	r3, r0
 8003a58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <mpu9250_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <mpu9250_set_interrupt_level+0x94>)
 8003a66:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e020      	b.n	8003aae <mpu9250_set_interrupt_level+0x8a>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 8003a6c:	7bbb      	ldrb	r3, [r7, #14]
 8003a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	01db      	lsls	r3, r3, #7
 8003a7a:	b25a      	sxtb	r2, r3
 8003a7c:	7bbb      	ldrb	r3, [r7, #14]
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003a88:	f107 020e 	add.w	r2, r7, #14
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	2137      	movs	r1, #55	; 0x37
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fc fd4a 	bl	800052a <a_mpu9250_write>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <mpu9250_set_interrupt_level+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	4805      	ldr	r0, [pc, #20]	; (8003abc <mpu9250_set_interrupt_level+0x98>)
 8003aa6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <mpu9250_set_interrupt_level+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	0800ac04 	.word	0x0800ac04
 8003abc:	0800ac2c 	.word	0x0800ac2c

08003ac0 <mpu9250_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_pin_type(mpu9250_handle_t *handle, mpu9250_pin_type_t type)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <mpu9250_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e039      	b.n	8003b4a <mpu9250_set_interrupt_pin_type+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d001      	beq.n	8003ae4 <mpu9250_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e032      	b.n	8003b4a <mpu9250_set_interrupt_pin_type+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003ae4:	f107 020e 	add.w	r2, r7, #14
 8003ae8:	2301      	movs	r3, #1
 8003aea:	2137      	movs	r1, #55	; 0x37
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fc fceb 	bl	80004c8 <a_mpu9250_read>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <mpu9250_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	4814      	ldr	r0, [pc, #80]	; (8003b54 <mpu9250_set_interrupt_pin_type+0x94>)
 8003b02:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003b04:	2301      	movs	r3, #1
 8003b06:	e020      	b.n	8003b4a <mpu9250_set_interrupt_pin_type+0x8a>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 8003b08:	7bbb      	ldrb	r3, [r7, #14]
 8003b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	b25a      	sxtb	r2, r3
 8003b18:	7bbb      	ldrb	r3, [r7, #14]
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003b24:	f107 020e 	add.w	r2, r7, #14
 8003b28:	2301      	movs	r3, #1
 8003b2a:	2137      	movs	r1, #55	; 0x37
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7fc fcfc 	bl	800052a <a_mpu9250_write>
 8003b32:	4603      	mov	r3, r0
 8003b34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <mpu9250_set_interrupt_pin_type+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	4805      	ldr	r0, [pc, #20]	; (8003b58 <mpu9250_set_interrupt_pin_type+0x98>)
 8003b42:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <mpu9250_set_interrupt_pin_type+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	0800ac04 	.word	0x0800ac04
 8003b58:	0800ac2c 	.word	0x0800ac2c

08003b5c <mpu9250_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_latch(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <mpu9250_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e03c      	b.n	8003bec <mpu9250_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d001      	beq.n	8003b80 <mpu9250_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e035      	b.n	8003bec <mpu9250_set_interrupt_latch+0x90>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003b80:	f107 020e 	add.w	r2, r7, #14
 8003b84:	2301      	movs	r3, #1
 8003b86:	2137      	movs	r1, #55	; 0x37
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fc fc9d 	bl	80004c8 <a_mpu9250_read>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <mpu9250_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	4815      	ldr	r0, [pc, #84]	; (8003bf4 <mpu9250_set_interrupt_latch+0x98>)
 8003b9e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e023      	b.n	8003bec <mpu9250_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 8003ba4:	7bbb      	ldrb	r3, [r7, #14]
 8003ba6:	f023 0320 	bic.w	r3, r3, #32
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <mpu9250_set_interrupt_latch+0x5c>
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	e000      	b.n	8003bba <mpu9250_set_interrupt_latch+0x5e>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	7bbb      	ldrb	r3, [r7, #14]
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003bc6:	f107 020e 	add.w	r2, r7, #14
 8003bca:	2301      	movs	r3, #1
 8003bcc:	2137      	movs	r1, #55	; 0x37
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fc fcab 	bl	800052a <a_mpu9250_write>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <mpu9250_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <mpu9250_set_interrupt_latch+0x9c>)
 8003be4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <mpu9250_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	0800ac04 	.word	0x0800ac04
 8003bf8:	0800ac2c 	.word	0x0800ac2c

08003bfc <mpu9250_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_read_clear(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <mpu9250_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e039      	b.n	8003c86 <mpu9250_set_interrupt_read_clear+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d001      	beq.n	8003c20 <mpu9250_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e032      	b.n	8003c86 <mpu9250_set_interrupt_read_clear+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003c20:	f107 020e 	add.w	r2, r7, #14
 8003c24:	2301      	movs	r3, #1
 8003c26:	2137      	movs	r1, #55	; 0x37
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7fc fc4d 	bl	80004c8 <a_mpu9250_read>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <mpu9250_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	4814      	ldr	r0, [pc, #80]	; (8003c90 <mpu9250_set_interrupt_read_clear+0x94>)
 8003c3e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003c40:	2301      	movs	r3, #1
 8003c42:	e020      	b.n	8003c86 <mpu9250_set_interrupt_read_clear+0x8a>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 8003c44:	7bbb      	ldrb	r3, [r7, #14]
 8003c46:	f023 0310 	bic.w	r3, r3, #16
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	b25a      	sxtb	r2, r3
 8003c54:	7bbb      	ldrb	r3, [r7, #14]
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b25b      	sxtb	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003c60:	f107 020e 	add.w	r2, r7, #14
 8003c64:	2301      	movs	r3, #1
 8003c66:	2137      	movs	r1, #55	; 0x37
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7fc fc5e 	bl	800052a <a_mpu9250_write>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <mpu9250_set_interrupt_read_clear+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	4805      	ldr	r0, [pc, #20]	; (8003c94 <mpu9250_set_interrupt_read_clear+0x98>)
 8003c7e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <mpu9250_set_interrupt_read_clear+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	0800ac04 	.word	0x0800ac04
 8003c94:	0800ac2c 	.word	0x0800ac2c

08003c98 <mpu9250_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fsync_interrupt_level(mpu9250_handle_t *handle, mpu9250_pin_level_t level)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <mpu9250_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8003caa:	2302      	movs	r3, #2
 8003cac:	e039      	b.n	8003d22 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d001      	beq.n	8003cbc <mpu9250_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e032      	b.n	8003d22 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003cbc:	f107 020e 	add.w	r2, r7, #14
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2137      	movs	r1, #55	; 0x37
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fc fbff 	bl	80004c8 <a_mpu9250_read>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <mpu9250_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	4814      	ldr	r0, [pc, #80]	; (8003d2c <mpu9250_set_fsync_interrupt_level+0x94>)
 8003cda:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e020      	b.n	8003d22 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8003ce0:	7bbb      	ldrb	r3, [r7, #14]
 8003ce2:	f023 0308 	bic.w	r3, r3, #8
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	b25a      	sxtb	r2, r3
 8003cf0:	7bbb      	ldrb	r3, [r7, #14]
 8003cf2:	b25b      	sxtb	r3, r3
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003cfc:	f107 020e 	add.w	r2, r7, #14
 8003d00:	2301      	movs	r3, #1
 8003d02:	2137      	movs	r1, #55	; 0x37
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fc fc10 	bl	800052a <a_mpu9250_write>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <mpu9250_set_fsync_interrupt_level+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	4805      	ldr	r0, [pc, #20]	; (8003d30 <mpu9250_set_fsync_interrupt_level+0x98>)
 8003d1a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	0800ac04 	.word	0x0800ac04
 8003d30:	0800ac2c 	.word	0x0800ac2c

08003d34 <mpu9250_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fsync_interrupt(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <mpu9250_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 8003d46:	2302      	movs	r3, #2
 8003d48:	e039      	b.n	8003dbe <mpu9250_set_fsync_interrupt+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d001      	beq.n	8003d58 <mpu9250_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 8003d54:	2303      	movs	r3, #3
 8003d56:	e032      	b.n	8003dbe <mpu9250_set_fsync_interrupt+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003d58:	f107 020e 	add.w	r2, r7, #14
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	2137      	movs	r1, #55	; 0x37
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fc fbb1 	bl	80004c8 <a_mpu9250_read>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <mpu9250_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	4814      	ldr	r0, [pc, #80]	; (8003dc8 <mpu9250_set_fsync_interrupt+0x94>)
 8003d76:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e020      	b.n	8003dbe <mpu9250_set_fsync_interrupt+0x8a>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 8003d7c:	7bbb      	ldrb	r3, [r7, #14]
 8003d7e:	f023 0304 	bic.w	r3, r3, #4
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	b25a      	sxtb	r2, r3
 8003d8c:	7bbb      	ldrb	r3, [r7, #14]
 8003d8e:	b25b      	sxtb	r3, r3
 8003d90:	4313      	orrs	r3, r2
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003d98:	f107 020e 	add.w	r2, r7, #14
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2137      	movs	r1, #55	; 0x37
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fc fbc2 	bl	800052a <a_mpu9250_write>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <mpu9250_set_fsync_interrupt+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	4805      	ldr	r0, [pc, #20]	; (8003dcc <mpu9250_set_fsync_interrupt+0x98>)
 8003db6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <mpu9250_set_fsync_interrupt+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	0800ac04 	.word	0x0800ac04
 8003dcc:	0800ac2c 	.word	0x0800ac2c

08003dd0 <mpu9250_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_iic_bypass(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <mpu9250_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 8003de2:	2302      	movs	r3, #2
 8003de4:	e039      	b.n	8003e5a <mpu9250_set_iic_bypass+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <mpu9250_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 8003df0:	2303      	movs	r3, #3
 8003df2:	e032      	b.n	8003e5a <mpu9250_set_iic_bypass+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8003df4:	f107 020e 	add.w	r2, r7, #14
 8003df8:	2301      	movs	r3, #1
 8003dfa:	2137      	movs	r1, #55	; 0x37
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fc fb63 	bl	80004c8 <a_mpu9250_read>
 8003e02:	4603      	mov	r3, r0
 8003e04:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <mpu9250_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	4814      	ldr	r0, [pc, #80]	; (8003e64 <mpu9250_set_iic_bypass+0x94>)
 8003e12:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003e14:	2301      	movs	r3, #1
 8003e16:	e020      	b.n	8003e5a <mpu9250_set_iic_bypass+0x8a>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 8003e18:	7bbb      	ldrb	r3, [r7, #14]
 8003e1a:	f023 0302 	bic.w	r3, r3, #2
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	b25a      	sxtb	r2, r3
 8003e28:	7bbb      	ldrb	r3, [r7, #14]
 8003e2a:	b25b      	sxtb	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003e34:	f107 020e 	add.w	r2, r7, #14
 8003e38:	2301      	movs	r3, #1
 8003e3a:	2137      	movs	r1, #55	; 0x37
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fc fb74 	bl	800052a <a_mpu9250_write>
 8003e42:	4603      	mov	r3, r0
 8003e44:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <mpu9250_set_iic_bypass+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	4805      	ldr	r0, [pc, #20]	; (8003e68 <mpu9250_set_iic_bypass+0x98>)
 8003e52:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <mpu9250_set_iic_bypass+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	0800ac04 	.word	0x0800ac04
 8003e68:	0800ac2c 	.word	0x0800ac2c

08003e6c <mpu9250_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt(mpu9250_handle_t *handle, mpu9250_interrupt_t type, mpu9250_bool_t enable)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <mpu9250_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 8003e82:	2302      	movs	r3, #2
 8003e84:	e043      	b.n	8003f0e <mpu9250_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d001      	beq.n	8003e94 <mpu9250_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 8003e90:	2303      	movs	r3, #3
 8003e92:	e03c      	b.n	8003f0e <mpu9250_set_interrupt+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8003e94:	f107 020e 	add.w	r2, r7, #14
 8003e98:	2301      	movs	r3, #1
 8003e9a:	2138      	movs	r1, #56	; 0x38
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fc fb13 	bl	80004c8 <a_mpu9250_read>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <mpu9250_set_interrupt+0x4c>
    {
        handle->debug_print("mpu9250: read interrupt enable failed.\n");                /* read interrupt enable failed */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	4819      	ldr	r0, [pc, #100]	; (8003f18 <mpu9250_set_interrupt+0xac>)
 8003eb2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e02a      	b.n	8003f0e <mpu9250_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	b25a      	sxtb	r2, r3
 8003ec6:	7bbb      	ldrb	r3, [r7, #14]
 8003ec8:	b25b      	sxtb	r3, r3
 8003eca:	4013      	ands	r3, r2
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 8003ed2:	78ba      	ldrb	r2, [r7, #2]
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	b25a      	sxtb	r2, r3
 8003edc:	7bbb      	ldrb	r3, [r7, #14]
 8003ede:	b25b      	sxtb	r3, r3
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	b25b      	sxtb	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8003ee8:	f107 020e 	add.w	r2, r7, #14
 8003eec:	2301      	movs	r3, #1
 8003eee:	2138      	movs	r1, #56	; 0x38
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7fc fb1a 	bl	800052a <a_mpu9250_write>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <mpu9250_set_interrupt+0xa0>
    {
        handle->debug_print("mpu9250: write interrupt enable failed.\n");               /* write interrupt enable failed */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	4805      	ldr	r0, [pc, #20]	; (8003f1c <mpu9250_set_interrupt+0xb0>)
 8003f06:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <mpu9250_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	0800ac54 	.word	0x0800ac54
 8003f1c:	0800ac7c 	.word	0x0800ac7c

08003f20 <mpu9250_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu9250_basic_init(mpu9250_interface_t interface, mpu9250_address_t addr_pin)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	460a      	mov	r2, r1
 8003f2a:	71fb      	strb	r3, [r7, #7]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU9250_LINK_INIT(&gs_handle, mpu9250_handle_t);
 8003f30:	f240 4244 	movw	r2, #1092	; 0x444
 8003f34:	2100      	movs	r1, #0
 8003f36:	48a5      	ldr	r0, [pc, #660]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f38:	f005 ff53 	bl	8009de2 <memset>
    DRIVER_MPU9250_LINK_IIC_INIT(&gs_handle, mpu9250_interface_iic_init);
 8003f3c:	4ba3      	ldr	r3, [pc, #652]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f3e:	4aa4      	ldr	r2, [pc, #656]	; (80041d0 <mpu9250_basic_init+0x2b0>)
 8003f40:	605a      	str	r2, [r3, #4]
    DRIVER_MPU9250_LINK_IIC_DEINIT(&gs_handle, mpu9250_interface_iic_deinit);
 8003f42:	4ba2      	ldr	r3, [pc, #648]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f44:	4aa3      	ldr	r2, [pc, #652]	; (80041d4 <mpu9250_basic_init+0x2b4>)
 8003f46:	609a      	str	r2, [r3, #8]
    DRIVER_MPU9250_LINK_IIC_READ(&gs_handle, mpu9250_interface_iic_read);
 8003f48:	4ba0      	ldr	r3, [pc, #640]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f4a:	4aa3      	ldr	r2, [pc, #652]	; (80041d8 <mpu9250_basic_init+0x2b8>)
 8003f4c:	60da      	str	r2, [r3, #12]
    DRIVER_MPU9250_LINK_IIC_WRITE(&gs_handle, mpu9250_interface_iic_write);
 8003f4e:	4b9f      	ldr	r3, [pc, #636]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f50:	4aa2      	ldr	r2, [pc, #648]	; (80041dc <mpu9250_basic_init+0x2bc>)
 8003f52:	611a      	str	r2, [r3, #16]
    DRIVER_MPU9250_LINK_SPI_INIT(&gs_handle, mpu9250_interface_spi_init);
 8003f54:	4b9d      	ldr	r3, [pc, #628]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f56:	4aa2      	ldr	r2, [pc, #648]	; (80041e0 <mpu9250_basic_init+0x2c0>)
 8003f58:	615a      	str	r2, [r3, #20]
    DRIVER_MPU9250_LINK_SPI_DEINIT(&gs_handle, mpu9250_interface_spi_deinit);
 8003f5a:	4b9c      	ldr	r3, [pc, #624]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f5c:	4aa1      	ldr	r2, [pc, #644]	; (80041e4 <mpu9250_basic_init+0x2c4>)
 8003f5e:	619a      	str	r2, [r3, #24]
    DRIVER_MPU9250_LINK_SPI_READ(&gs_handle, mpu9250_interface_spi_read);
 8003f60:	4b9a      	ldr	r3, [pc, #616]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f62:	4aa1      	ldr	r2, [pc, #644]	; (80041e8 <mpu9250_basic_init+0x2c8>)
 8003f64:	61da      	str	r2, [r3, #28]
    DRIVER_MPU9250_LINK_SPI_WRITE(&gs_handle, mpu9250_interface_spi_write);
 8003f66:	4b99      	ldr	r3, [pc, #612]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f68:	4aa0      	ldr	r2, [pc, #640]	; (80041ec <mpu9250_basic_init+0x2cc>)
 8003f6a:	621a      	str	r2, [r3, #32]
    DRIVER_MPU9250_LINK_DELAY_MS(&gs_handle, mpu9250_interface_delay_ms);
 8003f6c:	4b97      	ldr	r3, [pc, #604]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f6e:	4aa0      	ldr	r2, [pc, #640]	; (80041f0 <mpu9250_basic_init+0x2d0>)
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
    DRIVER_MPU9250_LINK_DEBUG_PRINT(&gs_handle, mpu9250_interface_debug_print);
 8003f72:	4b96      	ldr	r3, [pc, #600]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f74:	4a9f      	ldr	r2, [pc, #636]	; (80041f4 <mpu9250_basic_init+0x2d4>)
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
    DRIVER_MPU9250_LINK_RECEIVE_CALLBACK(&gs_handle, mpu9250_interface_receive_callback);
 8003f78:	4b94      	ldr	r3, [pc, #592]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f7a:	4a9f      	ldr	r2, [pc, #636]	; (80041f8 <mpu9250_basic_init+0x2d8>)
 8003f7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* set the interface */
    res = mpu9250_set_interface(&gs_handle, interface);
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	4619      	mov	r1, r3
 8003f82:	4892      	ldr	r0, [pc, #584]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003f84:	f7fc fb63 	bl	800064e <mpu9250_set_interface>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <mpu9250_basic_init+0x7e>
    {
        mpu9250_interface_debug_print("mpu9250: set interface failed.\n");
 8003f92:	489a      	ldr	r0, [pc, #616]	; (80041fc <mpu9250_basic_init+0x2dc>)
 8003f94:	f000 fd5a 	bl	8004a4c <mpu9250_interface_debug_print>
       
        return 1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f000 bc0b 	b.w	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the addr pin */
    res = mpu9250_set_addr_pin(&gs_handle, addr_pin);
 8003f9e:	79bb      	ldrb	r3, [r7, #6]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	488a      	ldr	r0, [pc, #552]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003fa4:	f7fc fb7f 	bl	80006a6 <mpu9250_set_addr_pin>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <mpu9250_basic_init+0x9c>
    {
        mpu9250_interface_debug_print("mpu9250: set addr pin failed.\n");
 8003fb2:	4893      	ldr	r0, [pc, #588]	; (8004200 <mpu9250_basic_init+0x2e0>)
 8003fb4:	f000 fd4a 	bl	8004a4c <mpu9250_interface_debug_print>
       
        return 1;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e3fb      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* init */
    res = mpu9250_init(&gs_handle);
 8003fbc:	4883      	ldr	r0, [pc, #524]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003fbe:	f7fc fb87 	bl	80006d0 <mpu9250_init>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <mpu9250_basic_init+0xb6>
    {
        mpu9250_interface_debug_print("mpu9250: init failed.\n");
 8003fcc:	488d      	ldr	r0, [pc, #564]	; (8004204 <mpu9250_basic_init+0x2e4>)
 8003fce:	f000 fd3d 	bl	8004a4c <mpu9250_interface_debug_print>
       
        return 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e3ee      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* delay 100 ms */
    mpu9250_interface_delay_ms(100);
 8003fd6:	2064      	movs	r0, #100	; 0x64
 8003fd8:	f000 fd2d 	bl	8004a36 <mpu9250_interface_delay_ms>
    
    /* disable sleep */
    res = mpu9250_set_sleep(&gs_handle, MPU9250_BOOL_FALSE);
 8003fdc:	2100      	movs	r1, #0
 8003fde:	487b      	ldr	r0, [pc, #492]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003fe0:	f7fe ff4c 	bl	8002e7c <mpu9250_set_sleep>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <mpu9250_basic_init+0xde>
    {
        mpu9250_interface_debug_print("mpu9250: set sleep failed.\n");
 8003fee:	4886      	ldr	r0, [pc, #536]	; (8004208 <mpu9250_basic_init+0x2e8>)
 8003ff0:	f000 fd2c 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8003ff4:	4875      	ldr	r0, [pc, #468]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8003ff6:	f7fc fc97 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e3da      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU9250_INTERFACE_SPI)
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d110      	bne.n	8004026 <mpu9250_basic_init+0x106>
    {
        /* disable iic */
        res = mpu9250_set_disable_iic_slave(&gs_handle, MPU9250_BOOL_TRUE);
 8004004:	2101      	movs	r1, #1
 8004006:	4871      	ldr	r0, [pc, #452]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004008:	f7fe fe02 	bl	8002c10 <mpu9250_set_disable_iic_slave>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <mpu9250_basic_init+0x106>
        {
            mpu9250_interface_debug_print("mpu9250: set disable iic slave failed.\n");
 8004016:	487d      	ldr	r0, [pc, #500]	; (800420c <mpu9250_basic_init+0x2ec>)
 8004018:	f000 fd18 	bl	8004a4c <mpu9250_interface_debug_print>
            (void)mpu9250_deinit(&gs_handle);
 800401c:	486b      	ldr	r0, [pc, #428]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800401e:	f7fc fc83 	bl	8000928 <mpu9250_deinit>
           
            return 1;
 8004022:	2301      	movs	r3, #1
 8004024:	e3c6      	b.n	80047b4 <mpu9250_basic_init+0x894>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu9250_set_fifo_1024kb(&gs_handle);
 8004026:	4869      	ldr	r0, [pc, #420]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004028:	f7ff fad2 	bl	80035d0 <mpu9250_set_fifo_1024kb>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <mpu9250_basic_init+0x126>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo 1024kb failed.\n");
 8004036:	4876      	ldr	r0, [pc, #472]	; (8004210 <mpu9250_basic_init+0x2f0>)
 8004038:	f000 fd08 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800403c:	4863      	ldr	r0, [pc, #396]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800403e:	f7fc fc73 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004042:	2301      	movs	r3, #1
 8004044:	e3b6      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default clock source */
    res = mpu9250_set_clock_source(&gs_handle, MPU9250_BASIC_DEFAULT_CLOCK_SOURCE);
 8004046:	2101      	movs	r1, #1
 8004048:	4860      	ldr	r0, [pc, #384]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800404a:	f7fe fe2f 	bl	8002cac <mpu9250_set_clock_source>
 800404e:	4603      	mov	r3, r0
 8004050:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <mpu9250_basic_init+0x148>
    {
        mpu9250_interface_debug_print("mpu9250: set clock source failed.\n");
 8004058:	486e      	ldr	r0, [pc, #440]	; (8004214 <mpu9250_basic_init+0x2f4>)
 800405a:	f000 fcf7 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800405e:	485b      	ldr	r0, [pc, #364]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004060:	f7fc fc62 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004064:	2301      	movs	r3, #1
 8004066:	e3a5      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default rate */
    res = mpu9250_set_sample_rate_divider(&gs_handle, 1000 / (MPU9250_BASIC_DEFAULT_RATE - 1));
 8004068:	2114      	movs	r1, #20
 800406a:	4858      	ldr	r0, [pc, #352]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800406c:	f7fe fffc 	bl	8003068 <mpu9250_set_sample_rate_divider>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <mpu9250_basic_init+0x16a>
    {
        mpu9250_interface_debug_print("mpu9250: set sample rate divider failed.\n");
 800407a:	4867      	ldr	r0, [pc, #412]	; (8004218 <mpu9250_basic_init+0x2f8>)
 800407c:	f000 fce6 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004080:	4852      	ldr	r0, [pc, #328]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004082:	f7fc fc51 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004086:	2301      	movs	r3, #1
 8004088:	e394      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* enable temperature sensor */
    res = mpu9250_set_ptat(&gs_handle, MPU9250_BOOL_TRUE);
 800408a:	2101      	movs	r1, #1
 800408c:	484f      	ldr	r0, [pc, #316]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800408e:	f7fe fe57 	bl	8002d40 <mpu9250_set_ptat>
 8004092:	4603      	mov	r3, r0
 8004094:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <mpu9250_basic_init+0x18c>
    {
        mpu9250_interface_debug_print("mpu9250: set ptat failed.\n");
 800409c:	485f      	ldr	r0, [pc, #380]	; (800421c <mpu9250_basic_init+0x2fc>)
 800409e:	f000 fcd5 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80040a2:	484a      	ldr	r0, [pc, #296]	; (80041cc <mpu9250_basic_init+0x2ac>)
 80040a4:	f7fc fc40 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e383      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default cycle wake up */
    res = mpu9250_set_cycle_wake_up(&gs_handle, MPU9250_BASIC_DEFAULT_CYCLE_WAKE_UP);
 80040ac:	2100      	movs	r1, #0
 80040ae:	4847      	ldr	r0, [pc, #284]	; (80041cc <mpu9250_basic_init+0x2ac>)
 80040b0:	f7fe fe96 	bl	8002de0 <mpu9250_set_cycle_wake_up>
 80040b4:	4603      	mov	r3, r0
 80040b6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <mpu9250_basic_init+0x1ae>
    {
        mpu9250_interface_debug_print("mpu9250: set cycle wake up failed.\n");
 80040be:	4858      	ldr	r0, [pc, #352]	; (8004220 <mpu9250_basic_init+0x300>)
 80040c0:	f000 fcc4 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80040c4:	4841      	ldr	r0, [pc, #260]	; (80041cc <mpu9250_basic_init+0x2ac>)
 80040c6:	f7fc fc2f 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e372      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc x */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_X, MPU9250_BOOL_FALSE);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2105      	movs	r1, #5
 80040d2:	483e      	ldr	r0, [pc, #248]	; (80041cc <mpu9250_basic_init+0x2ac>)
 80040d4:	f7fe ff6e 	bl	8002fb4 <mpu9250_set_standby_mode>
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <mpu9250_basic_init+0x1d2>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 80040e2:	4850      	ldr	r0, [pc, #320]	; (8004224 <mpu9250_basic_init+0x304>)
 80040e4:	f000 fcb2 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80040e8:	4838      	ldr	r0, [pc, #224]	; (80041cc <mpu9250_basic_init+0x2ac>)
 80040ea:	f7fc fc1d 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e360      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc y */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_Y, MPU9250_BOOL_FALSE);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2104      	movs	r1, #4
 80040f6:	4835      	ldr	r0, [pc, #212]	; (80041cc <mpu9250_basic_init+0x2ac>)
 80040f8:	f7fe ff5c 	bl	8002fb4 <mpu9250_set_standby_mode>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <mpu9250_basic_init+0x1f6>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 8004106:	4847      	ldr	r0, [pc, #284]	; (8004224 <mpu9250_basic_init+0x304>)
 8004108:	f000 fca0 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800410c:	482f      	ldr	r0, [pc, #188]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800410e:	f7fc fc0b 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004112:	2301      	movs	r3, #1
 8004114:	e34e      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc z */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_Z, MPU9250_BOOL_FALSE);
 8004116:	2200      	movs	r2, #0
 8004118:	2103      	movs	r1, #3
 800411a:	482c      	ldr	r0, [pc, #176]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800411c:	f7fe ff4a 	bl	8002fb4 <mpu9250_set_standby_mode>
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <mpu9250_basic_init+0x21a>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 800412a:	483e      	ldr	r0, [pc, #248]	; (8004224 <mpu9250_basic_init+0x304>)
 800412c:	f000 fc8e 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004130:	4826      	ldr	r0, [pc, #152]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004132:	f7fc fbf9 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004136:	2301      	movs	r3, #1
 8004138:	e33c      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro x */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_X, MPU9250_BOOL_FALSE);
 800413a:	2200      	movs	r2, #0
 800413c:	2102      	movs	r1, #2
 800413e:	4823      	ldr	r0, [pc, #140]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004140:	f7fe ff38 	bl	8002fb4 <mpu9250_set_standby_mode>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <mpu9250_basic_init+0x23e>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 800414e:	4835      	ldr	r0, [pc, #212]	; (8004224 <mpu9250_basic_init+0x304>)
 8004150:	f000 fc7c 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004154:	481d      	ldr	r0, [pc, #116]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004156:	f7fc fbe7 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800415a:	2301      	movs	r3, #1
 800415c:	e32a      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro y */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_Y, MPU9250_BOOL_FALSE);
 800415e:	2200      	movs	r2, #0
 8004160:	2101      	movs	r1, #1
 8004162:	481a      	ldr	r0, [pc, #104]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004164:	f7fe ff26 	bl	8002fb4 <mpu9250_set_standby_mode>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <mpu9250_basic_init+0x262>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 8004172:	482c      	ldr	r0, [pc, #176]	; (8004224 <mpu9250_basic_init+0x304>)
 8004174:	f000 fc6a 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004178:	4814      	ldr	r0, [pc, #80]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800417a:	f7fc fbd5 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800417e:	2301      	movs	r3, #1
 8004180:	e318      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro z */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_Z, MPU9250_BOOL_FALSE);
 8004182:	2200      	movs	r2, #0
 8004184:	2100      	movs	r1, #0
 8004186:	4811      	ldr	r0, [pc, #68]	; (80041cc <mpu9250_basic_init+0x2ac>)
 8004188:	f7fe ff14 	bl	8002fb4 <mpu9250_set_standby_mode>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <mpu9250_basic_init+0x286>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 8004196:	4823      	ldr	r0, [pc, #140]	; (8004224 <mpu9250_basic_init+0x304>)
 8004198:	f000 fc58 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800419c:	480b      	ldr	r0, [pc, #44]	; (80041cc <mpu9250_basic_init+0x2ac>)
 800419e:	f7fc fbc3 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e306      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable gyroscope x test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_X, MPU9250_BOOL_FALSE);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2107      	movs	r1, #7
 80041aa:	4808      	ldr	r0, [pc, #32]	; (80041cc <mpu9250_basic_init+0x2ac>)
 80041ac:	f7ff f86c 	bl	8003288 <mpu9250_set_gyroscope_test>
 80041b0:	4603      	mov	r3, r0
 80041b2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d038      	beq.n	800422c <mpu9250_basic_init+0x30c>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 80041ba:	481b      	ldr	r0, [pc, #108]	; (8004228 <mpu9250_basic_init+0x308>)
 80041bc:	f000 fc46 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80041c0:	4802      	ldr	r0, [pc, #8]	; (80041cc <mpu9250_basic_init+0x2ac>)
 80041c2:	f7fc fbb1 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e2f4      	b.n	80047b4 <mpu9250_basic_init+0x894>
 80041ca:	bf00      	nop
 80041cc:	20000028 	.word	0x20000028
 80041d0:	08004925 	.word	0x08004925
 80041d4:	08004935 	.word	0x08004935
 80041d8:	08004945 	.word	0x08004945
 80041dc:	08004991 	.word	0x08004991
 80041e0:	080049dd 	.word	0x080049dd
 80041e4:	080049eb 	.word	0x080049eb
 80041e8:	080049fb 	.word	0x080049fb
 80041ec:	08004a19 	.word	0x08004a19
 80041f0:	08004a37 	.word	0x08004a37
 80041f4:	08004a4d 	.word	0x08004a4d
 80041f8:	08004a65 	.word	0x08004a65
 80041fc:	0800b7cc 	.word	0x0800b7cc
 8004200:	0800b7ec 	.word	0x0800b7ec
 8004204:	0800b80c 	.word	0x0800b80c
 8004208:	0800b824 	.word	0x0800b824
 800420c:	0800b840 	.word	0x0800b840
 8004210:	0800b868 	.word	0x0800b868
 8004214:	0800b88c 	.word	0x0800b88c
 8004218:	0800b8b0 	.word	0x0800b8b0
 800421c:	0800b8dc 	.word	0x0800b8dc
 8004220:	0800b8f8 	.word	0x0800b8f8
 8004224:	0800b91c 	.word	0x0800b91c
 8004228:	0800b940 	.word	0x0800b940
    }
    
    /* disable gyroscope y test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_Y, MPU9250_BOOL_FALSE);
 800422c:	2200      	movs	r2, #0
 800422e:	2106      	movs	r1, #6
 8004230:	48b0      	ldr	r0, [pc, #704]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004232:	f7ff f829 	bl	8003288 <mpu9250_set_gyroscope_test>
 8004236:	4603      	mov	r3, r0
 8004238:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <mpu9250_basic_init+0x330>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 8004240:	48ad      	ldr	r0, [pc, #692]	; (80044f8 <mpu9250_basic_init+0x5d8>)
 8004242:	f000 fc03 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004246:	48ab      	ldr	r0, [pc, #684]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004248:	f7fc fb6e 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800424c:	2301      	movs	r3, #1
 800424e:	e2b1      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable gyroscope z test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_Z, MPU9250_BOOL_FALSE);
 8004250:	2200      	movs	r2, #0
 8004252:	2105      	movs	r1, #5
 8004254:	48a7      	ldr	r0, [pc, #668]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004256:	f7ff f817 	bl	8003288 <mpu9250_set_gyroscope_test>
 800425a:	4603      	mov	r3, r0
 800425c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <mpu9250_basic_init+0x354>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 8004264:	48a4      	ldr	r0, [pc, #656]	; (80044f8 <mpu9250_basic_init+0x5d8>)
 8004266:	f000 fbf1 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800426a:	48a2      	ldr	r0, [pc, #648]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800426c:	f7fc fb5c 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004270:	2301      	movs	r3, #1
 8004272:	e29f      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer x test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_X, MPU9250_BOOL_FALSE);
 8004274:	2200      	movs	r2, #0
 8004276:	2107      	movs	r1, #7
 8004278:	489e      	ldr	r0, [pc, #632]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800427a:	f7ff f901 	bl	8003480 <mpu9250_set_accelerometer_test>
 800427e:	4603      	mov	r3, r0
 8004280:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <mpu9250_basic_init+0x378>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 8004288:	489c      	ldr	r0, [pc, #624]	; (80044fc <mpu9250_basic_init+0x5dc>)
 800428a:	f000 fbdf 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800428e:	4899      	ldr	r0, [pc, #612]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004290:	f7fc fb4a 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004294:	2301      	movs	r3, #1
 8004296:	e28d      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer y test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_Y, MPU9250_BOOL_FALSE);
 8004298:	2200      	movs	r2, #0
 800429a:	2106      	movs	r1, #6
 800429c:	4895      	ldr	r0, [pc, #596]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800429e:	f7ff f8ef 	bl	8003480 <mpu9250_set_accelerometer_test>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <mpu9250_basic_init+0x39c>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 80042ac:	4893      	ldr	r0, [pc, #588]	; (80044fc <mpu9250_basic_init+0x5dc>)
 80042ae:	f000 fbcd 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80042b2:	4890      	ldr	r0, [pc, #576]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80042b4:	f7fc fb38 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e27b      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer z test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_Z, MPU9250_BOOL_FALSE);
 80042bc:	2200      	movs	r2, #0
 80042be:	2105      	movs	r1, #5
 80042c0:	488c      	ldr	r0, [pc, #560]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80042c2:	f7ff f8dd 	bl	8003480 <mpu9250_set_accelerometer_test>
 80042c6:	4603      	mov	r3, r0
 80042c8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <mpu9250_basic_init+0x3c0>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 80042d0:	488a      	ldr	r0, [pc, #552]	; (80044fc <mpu9250_basic_init+0x5dc>)
 80042d2:	f000 fbbb 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80042d6:	4887      	ldr	r0, [pc, #540]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80042d8:	f7fc fb26 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80042dc:	2301      	movs	r3, #1
 80042de:	e269      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable fifo */
    res = mpu9250_set_fifo(&gs_handle, MPU9250_BOOL_FALSE);
 80042e0:	2100      	movs	r1, #0
 80042e2:	4884      	ldr	r0, [pc, #528]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80042e4:	f7fe fbf8 	bl	8002ad8 <mpu9250_set_fifo>
 80042e8:	4603      	mov	r3, r0
 80042ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <mpu9250_basic_init+0x3e2>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo failed.\n");
 80042f2:	4883      	ldr	r0, [pc, #524]	; (8004500 <mpu9250_basic_init+0x5e0>)
 80042f4:	f000 fbaa 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80042f8:	487e      	ldr	r0, [pc, #504]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80042fa:	f7fc fb15 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	e258      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable temp fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_TEMP, MPU9250_BOOL_FALSE);
 8004302:	2200      	movs	r2, #0
 8004304:	2107      	movs	r1, #7
 8004306:	487b      	ldr	r0, [pc, #492]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004308:	f7ff fb32 	bl	8003970 <mpu9250_set_fifo_enable>
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <mpu9250_basic_init+0x406>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 8004316:	487b      	ldr	r0, [pc, #492]	; (8004504 <mpu9250_basic_init+0x5e4>)
 8004318:	f000 fb98 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800431c:	4875      	ldr	r0, [pc, #468]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800431e:	f7fc fb03 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004322:	2301      	movs	r3, #1
 8004324:	e246      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable xg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_XG, MPU9250_BOOL_FALSE);
 8004326:	2200      	movs	r2, #0
 8004328:	2106      	movs	r1, #6
 800432a:	4872      	ldr	r0, [pc, #456]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800432c:	f7ff fb20 	bl	8003970 <mpu9250_set_fifo_enable>
 8004330:	4603      	mov	r3, r0
 8004332:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <mpu9250_basic_init+0x42a>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 800433a:	4872      	ldr	r0, [pc, #456]	; (8004504 <mpu9250_basic_init+0x5e4>)
 800433c:	f000 fb86 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004340:	486c      	ldr	r0, [pc, #432]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004342:	f7fc faf1 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004346:	2301      	movs	r3, #1
 8004348:	e234      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable yg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_YG, MPU9250_BOOL_FALSE);
 800434a:	2200      	movs	r2, #0
 800434c:	2105      	movs	r1, #5
 800434e:	4869      	ldr	r0, [pc, #420]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004350:	f7ff fb0e 	bl	8003970 <mpu9250_set_fifo_enable>
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <mpu9250_basic_init+0x44e>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 800435e:	4869      	ldr	r0, [pc, #420]	; (8004504 <mpu9250_basic_init+0x5e4>)
 8004360:	f000 fb74 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004364:	4863      	ldr	r0, [pc, #396]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004366:	f7fc fadf 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800436a:	2301      	movs	r3, #1
 800436c:	e222      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable zg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_ZG, MPU9250_BOOL_FALSE);
 800436e:	2200      	movs	r2, #0
 8004370:	2104      	movs	r1, #4
 8004372:	4860      	ldr	r0, [pc, #384]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004374:	f7ff fafc 	bl	8003970 <mpu9250_set_fifo_enable>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <mpu9250_basic_init+0x472>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 8004382:	4860      	ldr	r0, [pc, #384]	; (8004504 <mpu9250_basic_init+0x5e4>)
 8004384:	f000 fb62 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004388:	485a      	ldr	r0, [pc, #360]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800438a:	f7fc facd 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800438e:	2301      	movs	r3, #1
 8004390:	e210      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* disable accel fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_ACCEL, MPU9250_BOOL_FALSE);
 8004392:	2200      	movs	r2, #0
 8004394:	2103      	movs	r1, #3
 8004396:	4857      	ldr	r0, [pc, #348]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004398:	f7ff faea 	bl	8003970 <mpu9250_set_fifo_enable>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <mpu9250_basic_init+0x496>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 80043a6:	4857      	ldr	r0, [pc, #348]	; (8004504 <mpu9250_basic_init+0x5e4>)
 80043a8:	f000 fb50 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80043ac:	4851      	ldr	r0, [pc, #324]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80043ae:	f7fc fabb 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1fe      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt level */
    res = mpu9250_set_interrupt_level(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 80043b6:	2101      	movs	r1, #1
 80043b8:	484e      	ldr	r0, [pc, #312]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80043ba:	f7ff fb33 	bl	8003a24 <mpu9250_set_interrupt_level>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <mpu9250_basic_init+0x4b8>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt level failed.\n");
 80043c8:	484f      	ldr	r0, [pc, #316]	; (8004508 <mpu9250_basic_init+0x5e8>)
 80043ca:	f000 fb3f 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80043ce:	4849      	ldr	r0, [pc, #292]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80043d0:	f7fc faaa 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e1ed      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default pin type */
    res = mpu9250_set_interrupt_pin_type(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 80043d8:	2100      	movs	r1, #0
 80043da:	4846      	ldr	r0, [pc, #280]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80043dc:	f7ff fb70 	bl	8003ac0 <mpu9250_set_interrupt_pin_type>
 80043e0:	4603      	mov	r3, r0
 80043e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <mpu9250_basic_init+0x4da>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt pin type failed.\n");
 80043ea:	4848      	ldr	r0, [pc, #288]	; (800450c <mpu9250_basic_init+0x5ec>)
 80043ec:	f000 fb2e 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80043f0:	4840      	ldr	r0, [pc, #256]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80043f2:	f7fc fa99 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1dc      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default motion interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_MOTION, MPU9250_BASIC_DEFAULT_INTERRUPT_MOTION);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2106      	movs	r1, #6
 80043fe:	483d      	ldr	r0, [pc, #244]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004400:	f7ff fd34 	bl	8003e6c <mpu9250_set_interrupt>
 8004404:	4603      	mov	r3, r0
 8004406:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <mpu9250_basic_init+0x4fe>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 800440e:	4840      	ldr	r0, [pc, #256]	; (8004510 <mpu9250_basic_init+0x5f0>)
 8004410:	f000 fb1c 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004414:	4837      	ldr	r0, [pc, #220]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004416:	f7fc fa87 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800441a:	2301      	movs	r3, #1
 800441c:	e1ca      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_FIFO_OVERFLOW, MPU9250_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 800441e:	2200      	movs	r2, #0
 8004420:	2104      	movs	r1, #4
 8004422:	4834      	ldr	r0, [pc, #208]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004424:	f7ff fd22 	bl	8003e6c <mpu9250_set_interrupt>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <mpu9250_basic_init+0x522>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 8004432:	4837      	ldr	r0, [pc, #220]	; (8004510 <mpu9250_basic_init+0x5f0>)
 8004434:	f000 fb0a 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004438:	482e      	ldr	r0, [pc, #184]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800443a:	f7fc fa75 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800443e:	2301      	movs	r3, #1
 8004440:	e1b8      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default dmp interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_DMP, MPU9250_BASIC_DEFAULT_INTERRUPT_DMP);
 8004442:	2200      	movs	r2, #0
 8004444:	2101      	movs	r1, #1
 8004446:	482b      	ldr	r0, [pc, #172]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004448:	f7ff fd10 	bl	8003e6c <mpu9250_set_interrupt>
 800444c:	4603      	mov	r3, r0
 800444e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <mpu9250_basic_init+0x546>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 8004456:	482e      	ldr	r0, [pc, #184]	; (8004510 <mpu9250_basic_init+0x5f0>)
 8004458:	f000 faf8 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800445c:	4825      	ldr	r0, [pc, #148]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800445e:	f7fc fa63 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004462:	2301      	movs	r3, #1
 8004464:	e1a6      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync int interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_FSYNC_INT, MPU9250_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 8004466:	2200      	movs	r2, #0
 8004468:	2103      	movs	r1, #3
 800446a:	4822      	ldr	r0, [pc, #136]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 800446c:	f7ff fcfe 	bl	8003e6c <mpu9250_set_interrupt>
 8004470:	4603      	mov	r3, r0
 8004472:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <mpu9250_basic_init+0x56a>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 800447a:	4825      	ldr	r0, [pc, #148]	; (8004510 <mpu9250_basic_init+0x5f0>)
 800447c:	f000 fae6 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004480:	481c      	ldr	r0, [pc, #112]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004482:	f7fc fa51 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004486:	2301      	movs	r3, #1
 8004488:	e194      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default data ready interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_DATA_READY, MPU9250_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 800448a:	2200      	movs	r2, #0
 800448c:	2100      	movs	r1, #0
 800448e:	4819      	ldr	r0, [pc, #100]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 8004490:	f7ff fcec 	bl	8003e6c <mpu9250_set_interrupt>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <mpu9250_basic_init+0x58e>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 800449e:	481c      	ldr	r0, [pc, #112]	; (8004510 <mpu9250_basic_init+0x5f0>)
 80044a0:	f000 fad4 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80044a4:	4813      	ldr	r0, [pc, #76]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80044a6:	f7fc fa3f 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e182      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt latch */
    res = mpu9250_set_interrupt_latch(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_LATCH);
 80044ae:	2101      	movs	r1, #1
 80044b0:	4810      	ldr	r0, [pc, #64]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80044b2:	f7ff fb53 	bl	8003b5c <mpu9250_set_interrupt_latch>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <mpu9250_basic_init+0x5b0>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt latch failed.\n");
 80044c0:	4814      	ldr	r0, [pc, #80]	; (8004514 <mpu9250_basic_init+0x5f4>)
 80044c2:	f000 fac3 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80044c6:	480b      	ldr	r0, [pc, #44]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80044c8:	f7fc fa2e 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e171      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt read clear */
    res = mpu9250_set_interrupt_read_clear(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 80044d0:	2101      	movs	r1, #1
 80044d2:	4808      	ldr	r0, [pc, #32]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80044d4:	f7ff fb92 	bl	8003bfc <mpu9250_set_interrupt_read_clear>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01c      	beq.n	800451c <mpu9250_basic_init+0x5fc>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt read clear failed.\n");
 80044e2:	480d      	ldr	r0, [pc, #52]	; (8004518 <mpu9250_basic_init+0x5f8>)
 80044e4:	f000 fab2 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80044e8:	4802      	ldr	r0, [pc, #8]	; (80044f4 <mpu9250_basic_init+0x5d4>)
 80044ea:	f7fc fa1d 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e160      	b.n	80047b4 <mpu9250_basic_init+0x894>
 80044f2:	bf00      	nop
 80044f4:	20000028 	.word	0x20000028
 80044f8:	0800b940 	.word	0x0800b940
 80044fc:	0800b968 	.word	0x0800b968
 8004500:	0800b994 	.word	0x0800b994
 8004504:	0800b9b0 	.word	0x0800b9b0
 8004508:	0800b9d4 	.word	0x0800b9d4
 800450c:	0800b9fc 	.word	0x0800b9fc
 8004510:	0800ba28 	.word	0x0800ba28
 8004514:	0800ba48 	.word	0x0800ba48
 8004518:	0800ba70 	.word	0x0800ba70
    }
    
    /* set the extern sync */
    res = mpu9250_set_extern_sync(&gs_handle, MPU9250_BASIC_DEFAULT_EXTERN_SYNC);
 800451c:	2100      	movs	r1, #0
 800451e:	48a7      	ldr	r0, [pc, #668]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004520:	f7fe fdcc 	bl	80030bc <mpu9250_set_extern_sync>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <mpu9250_basic_init+0x61e>
    {
        mpu9250_interface_debug_print("mpu9250: set extern sync failed.\n");
 800452e:	48a4      	ldr	r0, [pc, #656]	; (80047c0 <mpu9250_basic_init+0x8a0>)
 8004530:	f000 fa8c 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004534:	48a1      	ldr	r0, [pc, #644]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004536:	f7fc f9f7 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800453a:	2301      	movs	r3, #1
 800453c:	e13a      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync interrupt */
    res = mpu9250_set_fsync_interrupt(&gs_handle, MPU9250_BASIC_DEFAULT_FSYNC_INTERRUPT);
 800453e:	2100      	movs	r1, #0
 8004540:	489e      	ldr	r0, [pc, #632]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004542:	f7ff fbf7 	bl	8003d34 <mpu9250_set_fsync_interrupt>
 8004546:	4603      	mov	r3, r0
 8004548:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <mpu9250_basic_init+0x640>
    {
        mpu9250_interface_debug_print("mpu9250: set fsync interrupt failed.\n");
 8004550:	489c      	ldr	r0, [pc, #624]	; (80047c4 <mpu9250_basic_init+0x8a4>)
 8004552:	f000 fa7b 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004556:	4899      	ldr	r0, [pc, #612]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004558:	f7fc f9e6 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800455c:	2301      	movs	r3, #1
 800455e:	e129      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync interrupt level */
    res = mpu9250_set_fsync_interrupt_level(&gs_handle, MPU9250_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8004560:	2101      	movs	r1, #1
 8004562:	4896      	ldr	r0, [pc, #600]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004564:	f7ff fb98 	bl	8003c98 <mpu9250_set_fsync_interrupt_level>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <mpu9250_basic_init+0x662>
    {
        mpu9250_interface_debug_print("mpu9250: set fsync interrupt level failed.\n");
 8004572:	4895      	ldr	r0, [pc, #596]	; (80047c8 <mpu9250_basic_init+0x8a8>)
 8004574:	f000 fa6a 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004578:	4890      	ldr	r0, [pc, #576]	; (80047bc <mpu9250_basic_init+0x89c>)
 800457a:	f7fc f9d5 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800457e:	2301      	movs	r3, #1
 8004580:	e118      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default iic master */
    res = mpu9250_set_iic_master(&gs_handle, MPU9250_BASIC_DEFAULT_IIC_MASTER);
 8004582:	2100      	movs	r1, #0
 8004584:	488d      	ldr	r0, [pc, #564]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004586:	f7fe faf5 	bl	8002b74 <mpu9250_set_iic_master>
 800458a:	4603      	mov	r3, r0
 800458c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <mpu9250_basic_init+0x684>
    {
        mpu9250_interface_debug_print("mpu9250: set iic master failed.\n");
 8004594:	488d      	ldr	r0, [pc, #564]	; (80047cc <mpu9250_basic_init+0x8ac>)
 8004596:	f000 fa59 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800459a:	4888      	ldr	r0, [pc, #544]	; (80047bc <mpu9250_basic_init+0x89c>)
 800459c:	f7fc f9c4 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e107      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default iic bypass */
    res = mpu9250_set_iic_bypass(&gs_handle, MPU9250_BASIC_DEFAULT_IIC_BYPASS);
 80045a4:	2100      	movs	r1, #0
 80045a6:	4885      	ldr	r0, [pc, #532]	; (80047bc <mpu9250_basic_init+0x89c>)
 80045a8:	f7ff fc12 	bl	8003dd0 <mpu9250_set_iic_bypass>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <mpu9250_basic_init+0x6a6>
    {
        mpu9250_interface_debug_print("mpu9250: set iic bypass failed.\n");
 80045b6:	4886      	ldr	r0, [pc, #536]	; (80047d0 <mpu9250_basic_init+0x8b0>)
 80045b8:	f000 fa48 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80045bc:	487f      	ldr	r0, [pc, #508]	; (80047bc <mpu9250_basic_init+0x89c>)
 80045be:	f7fc f9b3 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0f6      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer range */
    res = mpu9250_set_accelerometer_range(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 80045c6:	2100      	movs	r1, #0
 80045c8:	487c      	ldr	r0, [pc, #496]	; (80047bc <mpu9250_basic_init+0x89c>)
 80045ca:	f7fe ffb3 	bl	8003534 <mpu9250_set_accelerometer_range>
 80045ce:	4603      	mov	r3, r0
 80045d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <mpu9250_basic_init+0x6c8>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer range failed.\n");
 80045d8:	487e      	ldr	r0, [pc, #504]	; (80047d4 <mpu9250_basic_init+0x8b4>)
 80045da:	f000 fa37 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80045de:	4877      	ldr	r0, [pc, #476]	; (80047bc <mpu9250_basic_init+0x89c>)
 80045e0:	f7fc f9a2 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0e5      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyroscope range */
    res = mpu9250_set_gyroscope_range(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_RANGE);
 80045e8:	2103      	movs	r1, #3
 80045ea:	4874      	ldr	r0, [pc, #464]	; (80047bc <mpu9250_basic_init+0x89c>)
 80045ec:	f7fe fea6 	bl	800333c <mpu9250_set_gyroscope_range>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <mpu9250_basic_init+0x6ea>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope range failed.\n");
 80045fa:	4877      	ldr	r0, [pc, #476]	; (80047d8 <mpu9250_basic_init+0x8b8>)
 80045fc:	f000 fa26 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004600:	486e      	ldr	r0, [pc, #440]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004602:	f7fc f991 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004606:	2301      	movs	r3, #1
 8004608:	e0d4      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyro standby */
    res = mpu9250_set_gyro_standby(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 800460a:	2100      	movs	r1, #0
 800460c:	486b      	ldr	r0, [pc, #428]	; (80047bc <mpu9250_basic_init+0x89c>)
 800460e:	f7fe fc83 	bl	8002f18 <mpu9250_set_gyro_standby>
 8004612:	4603      	mov	r3, r0
 8004614:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <mpu9250_basic_init+0x70c>
    {
        mpu9250_interface_debug_print("mpu9250: set gyro standby failed.\n");
 800461c:	486f      	ldr	r0, [pc, #444]	; (80047dc <mpu9250_basic_init+0x8bc>)
 800461e:	f000 fa15 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004622:	4866      	ldr	r0, [pc, #408]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004624:	f7fc f980 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004628:	2301      	movs	r3, #1
 800462a:	e0c3      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fifo mode */
    res = mpu9250_set_fifo_mode(&gs_handle, MPU9250_BASIC_DEFAULT_FIFO_MODE);
 800462c:	2101      	movs	r1, #1
 800462e:	4863      	ldr	r0, [pc, #396]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004630:	f7fe fddc 	bl	80031ec <mpu9250_set_fifo_mode>
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <mpu9250_basic_init+0x72e>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo mode failed.\n");
 800463e:	4868      	ldr	r0, [pc, #416]	; (80047e0 <mpu9250_basic_init+0x8c0>)
 8004640:	f000 fa04 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004644:	485d      	ldr	r0, [pc, #372]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004646:	f7fc f96f 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800464a:	2301      	movs	r3, #1
 800464c:	e0b2      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyroscope choice */
    res = mpu9250_set_gyroscope_choice(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 800464e:	2100      	movs	r1, #0
 8004650:	485a      	ldr	r0, [pc, #360]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004652:	f7fe fec1 	bl	80033d8 <mpu9250_set_gyroscope_choice>
 8004656:	4603      	mov	r3, r0
 8004658:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <mpu9250_basic_init+0x750>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope choice failed.\n");
 8004660:	4860      	ldr	r0, [pc, #384]	; (80047e4 <mpu9250_basic_init+0x8c4>)
 8004662:	f000 f9f3 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004666:	4855      	ldr	r0, [pc, #340]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004668:	f7fc f95e 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800466c:	2301      	movs	r3, #1
 800466e:	e0a1      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default low pass filter */
    res = mpu9250_set_low_pass_filter(&gs_handle, MPU9250_BASIC_DEFAULT_LOW_PASS_FILTER);
 8004670:	2103      	movs	r1, #3
 8004672:	4852      	ldr	r0, [pc, #328]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004674:	f7fe fd70 	bl	8003158 <mpu9250_set_low_pass_filter>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <mpu9250_basic_init+0x772>
    {
        mpu9250_interface_debug_print("mpu9250: set low pass filter failed.\n");
 8004682:	4859      	ldr	r0, [pc, #356]	; (80047e8 <mpu9250_basic_init+0x8c8>)
 8004684:	f000 f9e2 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004688:	484c      	ldr	r0, [pc, #304]	; (80047bc <mpu9250_basic_init+0x89c>)
 800468a:	f7fc f94d 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 800468e:	2301      	movs	r3, #1
 8004690:	e090      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer choice */
    res = mpu9250_set_accelerometer_choice(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 8004692:	2100      	movs	r1, #0
 8004694:	4849      	ldr	r0, [pc, #292]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004696:	f7fe ffe3 	bl	8003660 <mpu9250_set_accelerometer_choice>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <mpu9250_basic_init+0x794>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer choice failed.\n");
 80046a4:	4851      	ldr	r0, [pc, #324]	; (80047ec <mpu9250_basic_init+0x8cc>)
 80046a6:	f000 f9d1 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80046aa:	4844      	ldr	r0, [pc, #272]	; (80047bc <mpu9250_basic_init+0x89c>)
 80046ac:	f7fc f93c 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07f      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu9250_set_accelerometer_low_pass_filter(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 80046b4:	2103      	movs	r1, #3
 80046b6:	4841      	ldr	r0, [pc, #260]	; (80047bc <mpu9250_basic_init+0x89c>)
 80046b8:	f7ff f82a 	bl	8003710 <mpu9250_set_accelerometer_low_pass_filter>
 80046bc:	4603      	mov	r3, r0
 80046be:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <mpu9250_basic_init+0x7b6>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer low pass filter failed.\n");
 80046c6:	484a      	ldr	r0, [pc, #296]	; (80047f0 <mpu9250_basic_init+0x8d0>)
 80046c8:	f000 f9c0 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80046cc:	483b      	ldr	r0, [pc, #236]	; (80047bc <mpu9250_basic_init+0x89c>)
 80046ce:	f7fc f92b 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06e      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default low power accel output rate */
    res = mpu9250_set_low_power_accel_output_rate(&gs_handle, MPU9250_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 80046d6:	2108      	movs	r1, #8
 80046d8:	4838      	ldr	r0, [pc, #224]	; (80047bc <mpu9250_basic_init+0x89c>)
 80046da:	f7ff f863 	bl	80037a4 <mpu9250_set_low_power_accel_output_rate>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <mpu9250_basic_init+0x7d8>
    {
        mpu9250_interface_debug_print("mpu9250: set low power accel output rate failed.\n");
 80046e8:	4842      	ldr	r0, [pc, #264]	; (80047f4 <mpu9250_basic_init+0x8d4>)
 80046ea:	f000 f9af 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80046ee:	4833      	ldr	r0, [pc, #204]	; (80047bc <mpu9250_basic_init+0x89c>)
 80046f0:	f7fc f91a 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e05d      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default wake on motion */
    res = mpu9250_set_wake_on_motion(&gs_handle, MPU9250_BASIC_DEFAULT_WAKE_ON_MOTION);
 80046f8:	2100      	movs	r1, #0
 80046fa:	4830      	ldr	r0, [pc, #192]	; (80047bc <mpu9250_basic_init+0x89c>)
 80046fc:	f7ff f89c 	bl	8003838 <mpu9250_set_wake_on_motion>
 8004700:	4603      	mov	r3, r0
 8004702:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <mpu9250_basic_init+0x7fa>
    {
        mpu9250_interface_debug_print("mpu9250: set wake on motion failed.\n");
 800470a:	483b      	ldr	r0, [pc, #236]	; (80047f8 <mpu9250_basic_init+0x8d8>)
 800470c:	f000 f99e 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004710:	482a      	ldr	r0, [pc, #168]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004712:	f7fc f909 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004716:	2301      	movs	r3, #1
 8004718:	e04c      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu9250_set_accel_compare_with_previous_sample(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 800471a:	2101      	movs	r1, #1
 800471c:	4827      	ldr	r0, [pc, #156]	; (80047bc <mpu9250_basic_init+0x89c>)
 800471e:	f7ff f8d9 	bl	80038d4 <mpu9250_set_accel_compare_with_previous_sample>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <mpu9250_basic_init+0x81c>
    {
        mpu9250_interface_debug_print("mpu9250: set accel compare with previous sample failed.\n");
 800472c:	4833      	ldr	r0, [pc, #204]	; (80047fc <mpu9250_basic_init+0x8dc>)
 800472e:	f000 f98d 	bl	8004a4c <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004732:	4822      	ldr	r0, [pc, #136]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004734:	f7fc f8f8 	bl	8000928 <mpu9250_deinit>
       
        return 1;
 8004738:	2301      	movs	r3, #1
 800473a:	e03b      	b.n	80047b4 <mpu9250_basic_init+0x894>
    }
    
    /* if iic interface */
    if (interface == MPU9250_INTERFACE_IIC)
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d137      	bne.n	80047b2 <mpu9250_basic_init+0x892>
    {
        /* mag init */
        res = mpu9250_mag_init(&gs_handle); 
 8004742:	481e      	ldr	r0, [pc, #120]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004744:	f7fd fefa 	bl	800253c <mpu9250_mag_init>
 8004748:	4603      	mov	r3, r0
 800474a:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <mpu9250_basic_init+0x842>
        {
            mpu9250_interface_debug_print("mpu9250: mag init failed.\n");
 8004752:	482b      	ldr	r0, [pc, #172]	; (8004800 <mpu9250_basic_init+0x8e0>)
 8004754:	f000 f97a 	bl	8004a4c <mpu9250_interface_debug_print>
            (void)mpu9250_deinit(&gs_handle);
 8004758:	4818      	ldr	r0, [pc, #96]	; (80047bc <mpu9250_basic_init+0x89c>)
 800475a:	f7fc f8e5 	bl	8000928 <mpu9250_deinit>
           
            return 1;
 800475e:	2301      	movs	r3, #1
 8004760:	e028      	b.n	80047b4 <mpu9250_basic_init+0x894>
        }
        
        /* set the mag default mode */
        res = mpu9250_mag_set_mode(&gs_handle, MPU9250_BASIC_DEFAULT_MAGNETOMETER_MODE);
 8004762:	2106      	movs	r1, #6
 8004764:	4815      	ldr	r0, [pc, #84]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004766:	f7fe f907 	bl	8002978 <mpu9250_mag_set_mode>
 800476a:	4603      	mov	r3, r0
 800476c:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <mpu9250_basic_init+0x86a>
        {
            mpu9250_interface_debug_print("mpu9250: mag set mode failed.\n");
 8004774:	4823      	ldr	r0, [pc, #140]	; (8004804 <mpu9250_basic_init+0x8e4>)
 8004776:	f000 f969 	bl	8004a4c <mpu9250_interface_debug_print>
            (void)mpu9250_mag_deinit(&gs_handle); 
 800477a:	4810      	ldr	r0, [pc, #64]	; (80047bc <mpu9250_basic_init+0x89c>)
 800477c:	f7fe f828 	bl	80027d0 <mpu9250_mag_deinit>
            (void)mpu9250_deinit(&gs_handle);
 8004780:	480e      	ldr	r0, [pc, #56]	; (80047bc <mpu9250_basic_init+0x89c>)
 8004782:	f7fc f8d1 	bl	8000928 <mpu9250_deinit>
           
            return 1;
 8004786:	2301      	movs	r3, #1
 8004788:	e014      	b.n	80047b4 <mpu9250_basic_init+0x894>
        }
        
        /* set the mag default bits */
        res = mpu9250_mag_set_bits(&gs_handle, MPU9250_BASIC_DEFAULT_MAGNETOMETER_BITS);
 800478a:	2101      	movs	r1, #1
 800478c:	480b      	ldr	r0, [pc, #44]	; (80047bc <mpu9250_basic_init+0x89c>)
 800478e:	f7fe f949 	bl	8002a24 <mpu9250_mag_set_bits>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <mpu9250_basic_init+0x892>
        {
            mpu9250_interface_debug_print("mpu9250: mag set bits failed.\n");
 800479c:	481a      	ldr	r0, [pc, #104]	; (8004808 <mpu9250_basic_init+0x8e8>)
 800479e:	f000 f955 	bl	8004a4c <mpu9250_interface_debug_print>
            (void)mpu9250_mag_deinit(&gs_handle); 
 80047a2:	4806      	ldr	r0, [pc, #24]	; (80047bc <mpu9250_basic_init+0x89c>)
 80047a4:	f7fe f814 	bl	80027d0 <mpu9250_mag_deinit>
            (void)mpu9250_deinit(&gs_handle);
 80047a8:	4804      	ldr	r0, [pc, #16]	; (80047bc <mpu9250_basic_init+0x89c>)
 80047aa:	f7fc f8bd 	bl	8000928 <mpu9250_deinit>
           
            return 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <mpu9250_basic_init+0x894>
        }
    }
    
    return 0;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000028 	.word	0x20000028
 80047c0:	0800ba9c 	.word	0x0800ba9c
 80047c4:	0800bac0 	.word	0x0800bac0
 80047c8:	0800bae8 	.word	0x0800bae8
 80047cc:	0800bb14 	.word	0x0800bb14
 80047d0:	0800bb38 	.word	0x0800bb38
 80047d4:	0800bb5c 	.word	0x0800bb5c
 80047d8:	0800bb88 	.word	0x0800bb88
 80047dc:	0800bbb0 	.word	0x0800bbb0
 80047e0:	0800bbd4 	.word	0x0800bbd4
 80047e4:	0800bbf4 	.word	0x0800bbf4
 80047e8:	0800bc1c 	.word	0x0800bc1c
 80047ec:	0800bc44 	.word	0x0800bc44
 80047f0:	0800bc70 	.word	0x0800bc70
 80047f4:	0800bca4 	.word	0x0800bca4
 80047f8:	0800bcd8 	.word	0x0800bcd8
 80047fc:	0800bd00 	.word	0x0800bd00
 8004800:	0800bd3c 	.word	0x0800bd3c
 8004804:	0800bd58 	.word	0x0800bd58
 8004808:	0800bd78 	.word	0x0800bd78

0800480c <mpu9250_basic_read_temperature>:
 *             - 0 success
 *             - 1 read temperature failed
 * @note       none
 */
uint8_t mpu9250_basic_read_temperature(float *degrees)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    int16_t raw;
    
    /* read temperature */
    if (mpu9250_read_temperature(&gs_handle, &raw, degrees) != 0)
 8004814:	f107 030e 	add.w	r3, r7, #14
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4619      	mov	r1, r3
 800481c:	4806      	ldr	r0, [pc, #24]	; (8004838 <mpu9250_basic_read_temperature+0x2c>)
 800481e:	f7fd fe45 	bl	80024ac <mpu9250_read_temperature>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <mpu9250_basic_read_temperature+0x20>
    {
        return 1;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <mpu9250_basic_read_temperature+0x22>
    }
    
    return 0;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000028 	.word	0x20000028

0800483c <mpu9250_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_basic_read(float g[3], float dps[3], float ut[3])
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b098      	sub	sp, #96	; 0x60
 8004840:	af04      	add	r7, sp, #16
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
    float accel[3];
    float gyro[3];
    float mag[3];
    
    /* set 1 */
    len = 1;
 8004848:	2301      	movs	r3, #1
 800484a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    
    /* read data */
    if (mpu9250_read(&gs_handle,
 800484e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004852:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004856:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800485a:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 800485e:	9303      	str	r3, [sp, #12]
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	9302      	str	r3, [sp, #8]
 8004866:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	f107 0320 	add.w	r3, r7, #32
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	4603      	mov	r3, r0
 8004874:	4816      	ldr	r0, [pc, #88]	; (80048d0 <mpu9250_basic_read+0x94>)
 8004876:	f7fc f89b 	bl	80009b0 <mpu9250_read>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <mpu9250_basic_read+0x48>
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                    (int16_t (*)[3])&mag_raw, (float (*)[3])&mag,
                     &len) != 0
                    )
    {
        return 1;
 8004880:	2301      	movs	r3, #1
 8004882:	e021      	b.n	80048c8 <mpu9250_basic_read+0x8c>
    }
    
    /* copy the data */
    g[0] = accel[0];
 8004884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]
    g[1] = accel[1];
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3304      	adds	r3, #4
 800488e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004890:	601a      	str	r2, [r3, #0]
    g[2] = accel[2];
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3308      	adds	r3, #8
 8004896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004898:	601a      	str	r2, [r3, #0]
    dps[0] = gyro[0];
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	601a      	str	r2, [r3, #0]
    dps[1] = gyro[1];
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3304      	adds	r3, #4
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	601a      	str	r2, [r3, #0]
    dps[2] = gyro[2];
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	3308      	adds	r3, #8
 80048ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ae:	601a      	str	r2, [r3, #0]
    ut[0] = mag[0];
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
    ut[1] = mag[1];
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	601a      	str	r2, [r3, #0]
    ut[2] = mag[2];
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3308      	adds	r3, #8
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	601a      	str	r2, [r3, #0]
    
    return 0;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3750      	adds	r7, #80	; 0x50
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000028 	.word	0x20000028

080048d4 <mpu9250_basic_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t mpu9250_basic_deinit(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
    mpu9250_interface_t interface;
    
    /* get the interface */
    if (mpu9250_get_interface(&gs_handle, &interface) != 0)
 80048da:	1dfb      	adds	r3, r7, #7
 80048dc:	4619      	mov	r1, r3
 80048de:	4810      	ldr	r0, [pc, #64]	; (8004920 <mpu9250_basic_deinit+0x4c>)
 80048e0:	f7fb fecb 	bl	800067a <mpu9250_get_interface>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <mpu9250_basic_deinit+0x1a>
    {
        return 1;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e013      	b.n	8004916 <mpu9250_basic_deinit+0x42>
    }
    
    /* if interface iic*/
    if (interface == MPU9250_INTERFACE_IIC)
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d107      	bne.n	8004904 <mpu9250_basic_deinit+0x30>
    {
        /* mag deinit */
        if (mpu9250_mag_deinit(&gs_handle) != 0)
 80048f4:	480a      	ldr	r0, [pc, #40]	; (8004920 <mpu9250_basic_deinit+0x4c>)
 80048f6:	f7fd ff6b 	bl	80027d0 <mpu9250_mag_deinit>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <mpu9250_basic_deinit+0x30>
        {
            return 1;
 8004900:	2301      	movs	r3, #1
 8004902:	e008      	b.n	8004916 <mpu9250_basic_deinit+0x42>
        }
    }
    
    /* deinit */
    if (mpu9250_deinit(&gs_handle) != 0)
 8004904:	4806      	ldr	r0, [pc, #24]	; (8004920 <mpu9250_basic_deinit+0x4c>)
 8004906:	f7fc f80f 	bl	8000928 <mpu9250_deinit>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <mpu9250_basic_deinit+0x40>
    {
        return 1;
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <mpu9250_basic_deinit+0x42>
    }
    
    return 0;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000028 	.word	0x20000028

08004924 <mpu9250_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu9250_interface_iic_init(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
    return 0;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <mpu9250_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu9250_interface_iic_deinit(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
    return 0;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <mpu9250_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af04      	add	r7, sp, #16
 800494a:	603a      	str	r2, [r7, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
 8004952:	460b      	mov	r3, r1
 8004954:	71bb      	strb	r3, [r7, #6]
 8004956:	4613      	mov	r3, r2
 8004958:	80bb      	strh	r3, [r7, #4]
	return not (HAL_I2C_Mem_Read(&hi2c1, addr, reg, 1, buf, len, HAL_MAX_DELAY) == HAL_OK);
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	b299      	uxth	r1, r3
 800495e:	79bb      	ldrb	r3, [r7, #6]
 8004960:	b29a      	uxth	r2, r3
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	9302      	str	r3, [sp, #8]
 8004968:	88bb      	ldrh	r3, [r7, #4]
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2301      	movs	r3, #1
 8004972:	4806      	ldr	r0, [pc, #24]	; (800498c <mpu9250_interface_iic_read+0x48>)
 8004974:	f001 fb1e 	bl	8005fb4 <HAL_I2C_Mem_Read>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	2000046c 	.word	0x2000046c

08004990 <mpu9250_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu9250_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af04      	add	r7, sp, #16
 8004996:	603a      	str	r2, [r7, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	4603      	mov	r3, r0
 800499c:	71fb      	strb	r3, [r7, #7]
 800499e:	460b      	mov	r3, r1
 80049a0:	71bb      	strb	r3, [r7, #6]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80bb      	strh	r3, [r7, #4]
	return not (HAL_I2C_Mem_Write(&hi2c1, addr, reg, 1, buf, len, HAL_MAX_DELAY) == HAL_OK);
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	b299      	uxth	r1, r3
 80049aa:	79bb      	ldrb	r3, [r7, #6]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
 80049b2:	9302      	str	r3, [sp, #8]
 80049b4:	88bb      	ldrh	r3, [r7, #4]
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2301      	movs	r3, #1
 80049be:	4806      	ldr	r0, [pc, #24]	; (80049d8 <mpu9250_interface_iic_write+0x48>)
 80049c0:	f001 f9d6 	bl	8005d70 <HAL_I2C_Mem_Write>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	2000046c 	.word	0x2000046c

080049dc <mpu9250_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu9250_interface_spi_init(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
	Error_Handler();
 80049e0:	f000 fa12 	bl	8004e08 <Error_Handler>
    return 0;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	bd80      	pop	{r7, pc}

080049ea <mpu9250_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu9250_interface_spi_deinit(void)
{
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0
    return 0;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <mpu9250_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	6039      	str	r1, [r7, #0]
 8004a04:	71fb      	strb	r3, [r7, #7]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80bb      	strh	r3, [r7, #4]
	Error_Handler();
 8004a0a:	f000 f9fd 	bl	8004e08 <Error_Handler>
    return 0;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <mpu9250_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu9250_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	71fb      	strb	r3, [r7, #7]
 8004a24:	4613      	mov	r3, r2
 8004a26:	80bb      	strh	r3, [r7, #4]
	Error_Handler();
 8004a28:	f000 f9ee 	bl	8004e08 <Error_Handler>
    return 0;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <mpu9250_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mpu9250_interface_delay_ms(uint32_t ms)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fcbe 	bl	80053c0 <HAL_Delay>
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <mpu9250_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mpu9250_interface_debug_print(const char *const fmt, ...)
{
 8004a4c:	b40f      	push	{r0, r1, r2, r3}
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	af00      	add	r7, sp, #0
	Error_Handler();
 8004a52:	f000 f9d9 	bl	8004e08 <Error_Handler>
}
 8004a56:	bf00      	nop
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5e:	b004      	add	sp, #16
 8004a60:	4770      	bx	lr
	...

08004a64 <mpu9250_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the irq type
 * @note      none
 */
void mpu9250_interface_receive_callback(uint8_t type)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
    switch (type)
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	d825      	bhi.n	8004ac0 <mpu9250_interface_receive_callback+0x5c>
 8004a74:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <mpu9250_interface_receive_callback+0x18>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004ab9 	.word	0x08004ab9
 8004a80:	08004ab1 	.word	0x08004ab1
 8004a84:	08004ac1 	.word	0x08004ac1
 8004a88:	08004aa9 	.word	0x08004aa9
 8004a8c:	08004aa1 	.word	0x08004aa1
 8004a90:	08004ac1 	.word	0x08004ac1
 8004a94:	08004a99 	.word	0x08004a99
    {
        case MPU9250_INTERRUPT_MOTION :
        {
            mpu9250_interface_debug_print("mpu9250: irq motion.\n");
 8004a98:	480d      	ldr	r0, [pc, #52]	; (8004ad0 <mpu9250_interface_receive_callback+0x6c>)
 8004a9a:	f7ff ffd7 	bl	8004a4c <mpu9250_interface_debug_print>
            
            break;
 8004a9e:	e013      	b.n	8004ac8 <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu9250_interface_debug_print("mpu9250: irq fifo overflow.\n");
 8004aa0:	480c      	ldr	r0, [pc, #48]	; (8004ad4 <mpu9250_interface_receive_callback+0x70>)
 8004aa2:	f7ff ffd3 	bl	8004a4c <mpu9250_interface_debug_print>
            
            break;
 8004aa6:	e00f      	b.n	8004ac8 <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_FSYNC_INT :
        {
            mpu9250_interface_debug_print("mpu9250: irq fsync int.\n");
 8004aa8:	480b      	ldr	r0, [pc, #44]	; (8004ad8 <mpu9250_interface_receive_callback+0x74>)
 8004aaa:	f7ff ffcf 	bl	8004a4c <mpu9250_interface_debug_print>
            
            break;
 8004aae:	e00b      	b.n	8004ac8 <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_DMP :
        {
            mpu9250_interface_debug_print("mpu9250: irq dmp\n");
 8004ab0:	480a      	ldr	r0, [pc, #40]	; (8004adc <mpu9250_interface_receive_callback+0x78>)
 8004ab2:	f7ff ffcb 	bl	8004a4c <mpu9250_interface_debug_print>
            
            break;
 8004ab6:	e007      	b.n	8004ac8 <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_DATA_READY :
        {
            mpu9250_interface_debug_print("mpu9250: irq data ready\n");
 8004ab8:	4809      	ldr	r0, [pc, #36]	; (8004ae0 <mpu9250_interface_receive_callback+0x7c>)
 8004aba:	f7ff ffc7 	bl	8004a4c <mpu9250_interface_debug_print>
            
            break;
 8004abe:	e003      	b.n	8004ac8 <mpu9250_interface_receive_callback+0x64>
        }
        default :
        {
            mpu9250_interface_debug_print("mpu9250: irq unknown code.\n");
 8004ac0:	4808      	ldr	r0, [pc, #32]	; (8004ae4 <mpu9250_interface_receive_callback+0x80>)
 8004ac2:	f7ff ffc3 	bl	8004a4c <mpu9250_interface_debug_print>
            
            break;
 8004ac6:	bf00      	nop
        }
    }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	0800bd98 	.word	0x0800bd98
 8004ad4:	0800bdb0 	.word	0x0800bdb0
 8004ad8:	0800bdd0 	.word	0x0800bdd0
 8004adc:	0800bdec 	.word	0x0800bdec
 8004ae0:	0800be00 	.word	0x0800be00
 8004ae4:	0800be1c 	.word	0x0800be1c

08004ae8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	609a      	str	r2, [r3, #8]
 8004afa:	60da      	str	r2, [r3, #12]
 8004afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004afe:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b04:	f043 0304 	orr.w	r3, r3, #4
 8004b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b22:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b2e:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b3a:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <MX_GPIO_Init+0x8c>)
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004b46:	2200      	movs	r2, #0
 8004b48:	2108      	movs	r1, #8
 8004b4a:	480b      	ldr	r0, [pc, #44]	; (8004b78 <MX_GPIO_Init+0x90>)
 8004b4c:	f000 ffc0 	bl	8005ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004b50:	2308      	movs	r3, #8
 8004b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b54:	2301      	movs	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004b60:	f107 030c 	add.w	r3, r7, #12
 8004b64:	4619      	mov	r1, r3
 8004b66:	4804      	ldr	r0, [pc, #16]	; (8004b78 <MX_GPIO_Init+0x90>)
 8004b68:	f000 fd8e 	bl	8005688 <HAL_GPIO_Init>

}
 8004b6c:	bf00      	nop
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	48000400 	.word	0x48000400

08004b7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004b82:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <MX_I2C1_Init+0x78>)
 8004b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <MX_I2C1_Init+0x7c>)
 8004b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004b8c:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b92:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004b9e:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004bb6:	480e      	ldr	r0, [pc, #56]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004bb8:	f000 ffba 	bl	8005b30 <HAL_I2C_Init>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004bc2:	f000 f921 	bl	8004e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4809      	ldr	r0, [pc, #36]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004bca:	f001 fe0f 	bl	80067ec <HAL_I2CEx_ConfigAnalogFilter>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004bd4:	f000 f918 	bl	8004e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <MX_I2C1_Init+0x74>)
 8004bdc:	f001 fe6e 	bl	80068bc <HAL_I2CEx_ConfigDigitalFilter>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004be6:	f000 f90f 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	2000046c 	.word	0x2000046c
 8004bf4:	40005400 	.word	0x40005400
 8004bf8:	00702991 	.word	0x00702991

08004bfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b09e      	sub	sp, #120	; 0x78
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c14:	f107 0310 	add.w	r3, r7, #16
 8004c18:	2254      	movs	r2, #84	; 0x54
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f005 f8e0 	bl	8009de2 <memset>
  if(i2cHandle->Instance==I2C1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_I2C_MspInit+0xa8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d137      	bne.n	8004c9c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c2c:	2340      	movs	r3, #64	; 0x40
 8004c2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c30:	2300      	movs	r3, #0
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c34:	f107 0310 	add.w	r3, r7, #16
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f002 ff35 	bl	8007aa8 <HAL_RCCEx_PeriphCLKConfig>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004c44:	f000 f8e0 	bl	8004e08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <HAL_I2C_MspInit+0xac>)
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4c:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <HAL_I2C_MspInit+0xac>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c54:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <HAL_I2C_MspInit+0xac>)
 8004c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c64:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c66:	2312      	movs	r3, #18
 8004c68:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c72:	2304      	movs	r3, #4
 8004c74:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c80:	f000 fd02 	bl	8005688 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <HAL_I2C_MspInit+0xac>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	4a07      	ldr	r2, [pc, #28]	; (8004ca8 <HAL_I2C_MspInit+0xac>)
 8004c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_I2C_MspInit+0xac>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	3778      	adds	r7, #120	; 0x78
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40005400 	.word	0x40005400
 8004ca8:	40021000 	.word	0x40021000

08004cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08c      	sub	sp, #48	; 0x30
 8004cb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cb2:	f000 fb10 	bl	80052d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cb6:	f000 f83b 	bl	8004d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cba:	f7ff ff15 	bl	8004ae8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004cbe:	f000 fa47 	bl	8005150 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004cc2:	f7ff ff5b 	bl	8004b7c <MX_I2C1_Init>
  MX_TIM2_Init();
 8004cc6:	f000 f92d 	bl	8004f24 <MX_TIM2_Init>
  MX_TIM6_Init();
 8004cca:	f000 f979 	bl	8004fc0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004cce:	f000 f9ad 	bl	800502c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  mpu9250_address_t addr = MPU9250_ADDRESS_AD0_LOW;
 8004cd2:	23d0      	movs	r3, #208	; 0xd0
 8004cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t res = mpu9250_basic_init(MPU9250_INTERFACE_IIC, addr);
 8004cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cdc:	4619      	mov	r1, r3
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f7ff f91e 	bl	8003f20 <mpu9250_basic_init>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (mpu9250_basic_read(g, dps, ut) != 0)
 8004cea:	f107 0208 	add.w	r2, r7, #8
 8004cee:	f107 0114 	add.w	r1, r7, #20
 8004cf2:	f107 0320 	add.w	r3, r7, #32
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fda0 	bl	800483c <mpu9250_basic_read>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <main+0x5e>
    {
        (void)mpu9250_basic_deinit();
 8004d02:	f7ff fde7 	bl	80048d4 <mpu9250_basic_deinit>
        return 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e00e      	b.n	8004d28 <main+0x7c>
    }
    if (mpu9250_basic_read_temperature(&degrees) != 0)
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fd7d 	bl	800480c <mpu9250_basic_read_temperature>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <main+0x74>
    {
        (void)mpu9250_basic_deinit();
 8004d18:	f7ff fddc 	bl	80048d4 <mpu9250_basic_deinit>
        return 1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e003      	b.n	8004d28 <main+0x7c>
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    HAL_Delay(100);
 8004d20:	2064      	movs	r0, #100	; 0x64
 8004d22:	f000 fb4d 	bl	80053c0 <HAL_Delay>
    if (mpu9250_basic_read(g, dps, ut) != 0)
 8004d26:	e7e0      	b.n	8004cea <main+0x3e>
  }
  /* USER CODE END 3 */
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3730      	adds	r7, #48	; 0x30
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b096      	sub	sp, #88	; 0x58
 8004d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	2244      	movs	r2, #68	; 0x44
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f005 f84f 	bl	8009de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d44:	463b      	mov	r3, r7
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	605a      	str	r2, [r3, #4]
 8004d4c:	609a      	str	r2, [r3, #8]
 8004d4e:	60da      	str	r2, [r3, #12]
 8004d50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004d52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004d56:	f001 fe35 	bl	80069c4 <HAL_PWREx_ControlVoltageScaling>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004d60:	f000 f852 	bl	8004e08 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004d64:	f001 fe10 	bl	8006988 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <SystemClock_Config+0xc0>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	4a20      	ldr	r2, [pc, #128]	; (8004df0 <SystemClock_Config+0xc0>)
 8004d70:	f023 0318 	bic.w	r3, r3, #24
 8004d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004d78:	2314      	movs	r3, #20
 8004d7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004d80:	2301      	movs	r3, #1
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004d88:	2360      	movs	r3, #96	; 0x60
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004d90:	2301      	movs	r3, #1
 8004d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004d94:	2301      	movs	r3, #1
 8004d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004d98:	2328      	movs	r3, #40	; 0x28
 8004d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004d9c:	2307      	movs	r3, #7
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004da0:	2302      	movs	r3, #2
 8004da2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004da4:	2302      	movs	r3, #2
 8004da6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fe6b 	bl	8006a88 <HAL_RCC_OscConfig>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004db8:	f000 f826 	bl	8004e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dbc:	230f      	movs	r3, #15
 8004dbe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	2104      	movs	r1, #4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f002 fba3 	bl	8007520 <HAL_RCC_ClockConfig>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004de0:	f000 f812 	bl	8004e08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004de4:	f003 f986 	bl	80080f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004de8:	bf00      	nop
 8004dea:	3758      	adds	r7, #88	; 0x58
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000

08004df4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	} else if (htim == TIM6) {

	} else { // TIM7

	}
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e0c:	b672      	cpsid	i
}
 8004e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e10:	e7fe      	b.n	8004e10 <Error_Handler+0x8>

08004e12 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <HAL_MspInit+0x44>)
 8004e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <HAL_MspInit+0x44>)
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	6613      	str	r3, [r2, #96]	; 0x60
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <HAL_MspInit+0x44>)
 8004e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_MspInit+0x44>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <HAL_MspInit+0x44>)
 8004e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e50:	6593      	str	r3, [r2, #88]	; 0x58
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_MspInit+0x44>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000

08004e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e74:	e7fe      	b.n	8004e74 <NMI_Handler+0x4>

08004e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e76:	b480      	push	{r7}
 8004e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e7a:	e7fe      	b.n	8004e7a <HardFault_Handler+0x4>

08004e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e80:	e7fe      	b.n	8004e80 <MemManage_Handler+0x4>

08004e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e82:	b480      	push	{r7}
 8004e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e86:	e7fe      	b.n	8004e86 <BusFault_Handler+0x4>

08004e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e8c:	e7fe      	b.n	8004e8c <UsageFault_Handler+0x4>

08004e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e92:	bf00      	nop
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ebc:	f000 fa60 	bl	8005380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ec0:	bf00      	nop
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ec8:	4802      	ldr	r0, [pc, #8]	; (8004ed4 <TIM2_IRQHandler+0x10>)
 8004eca:	f003 fb85 	bl	80085d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200004c0 	.word	0x200004c0

08004ed8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <TIM6_DAC_IRQHandler+0x10>)
 8004ede:	f003 fb7b 	bl	80085d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2000050c 	.word	0x2000050c

08004eec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004ef0:	4802      	ldr	r0, [pc, #8]	; (8004efc <TIM7_IRQHandler+0x10>)
 8004ef2:	f003 fb71 	bl	80085d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000558 	.word	0x20000558

08004f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <SystemInit+0x20>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <SystemInit+0x20>)
 8004f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f2a:	f107 0310 	add.w	r3, r7, #16
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f38:	1d3b      	adds	r3, r7, #4
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f42:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80 - 1;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004f4c:	224f      	movs	r2, #79	; 0x4f
 8004f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8004f56:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004f58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f6a:	4814      	ldr	r0, [pc, #80]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004f6c:	f003 fa52 	bl	8008414 <HAL_TIM_Base_Init>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004f76:	f7ff ff47 	bl	8004e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f80:	f107 0310 	add.w	r3, r7, #16
 8004f84:	4619      	mov	r1, r3
 8004f86:	480d      	ldr	r0, [pc, #52]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004f88:	f003 fc28 	bl	80087dc <HAL_TIM_ConfigClockSource>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004f92:	f7ff ff39 	bl	8004e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4806      	ldr	r0, [pc, #24]	; (8004fbc <MX_TIM2_Init+0x98>)
 8004fa4:	f003 ffdc 	bl	8008f60 <HAL_TIMEx_MasterConfigSynchronization>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004fae:	f7ff ff2b 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004fb2:	bf00      	nop
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	200004c0 	.word	0x200004c0

08004fc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc6:	1d3b      	adds	r3, r7, #4
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <MX_TIM6_Init+0x64>)
 8004fd2:	4a15      	ldr	r2, [pc, #84]	; (8005028 <MX_TIM6_Init+0x68>)
 8004fd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80 - 1;
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <MX_TIM6_Init+0x64>)
 8004fd8:	224f      	movs	r2, #79	; 0x4f
 8004fda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <MX_TIM6_Init+0x64>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <MX_TIM6_Init+0x64>)
 8004fe4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fe8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fea:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <MX_TIM6_Init+0x64>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ff0:	480c      	ldr	r0, [pc, #48]	; (8005024 <MX_TIM6_Init+0x64>)
 8004ff2:	f003 fa0f 	bl	8008414 <HAL_TIM_Base_Init>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004ffc:	f7ff ff04 	bl	8004e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005000:	2300      	movs	r3, #0
 8005002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005008:	1d3b      	adds	r3, r7, #4
 800500a:	4619      	mov	r1, r3
 800500c:	4805      	ldr	r0, [pc, #20]	; (8005024 <MX_TIM6_Init+0x64>)
 800500e:	f003 ffa7 	bl	8008f60 <HAL_TIMEx_MasterConfigSynchronization>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005018:	f7ff fef6 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	2000050c 	.word	0x2000050c
 8005028:	40001000 	.word	0x40001000

0800502c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005032:	1d3b      	adds	r3, r7, #4
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <MX_TIM7_Init+0x64>)
 800503e:	4a15      	ldr	r2, [pc, #84]	; (8005094 <MX_TIM7_Init+0x68>)
 8005040:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80 - 1;
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <MX_TIM7_Init+0x64>)
 8005044:	224f      	movs	r2, #79	; 0x4f
 8005046:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <MX_TIM7_Init+0x64>)
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000 - 1;
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <MX_TIM7_Init+0x64>)
 8005050:	f242 720f 	movw	r2, #9999	; 0x270f
 8005054:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <MX_TIM7_Init+0x64>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800505c:	480c      	ldr	r0, [pc, #48]	; (8005090 <MX_TIM7_Init+0x64>)
 800505e:	f003 f9d9 	bl	8008414 <HAL_TIM_Base_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005068:	f7ff fece 	bl	8004e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800506c:	2300      	movs	r3, #0
 800506e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4805      	ldr	r0, [pc, #20]	; (8005090 <MX_TIM7_Init+0x64>)
 800507a:	f003 ff71 	bl	8008f60 <HAL_TIMEx_MasterConfigSynchronization>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005084:	f7ff fec0 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000558 	.word	0x20000558
 8005094:	40001400 	.word	0x40001400

08005098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d114      	bne.n	80050d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050aa:	4b26      	ldr	r3, [pc, #152]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	4a25      	ldr	r2, [pc, #148]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6593      	str	r3, [r2, #88]	; 0x58
 80050b6:	4b23      	ldr	r3, [pc, #140]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2100      	movs	r1, #0
 80050c6:	201c      	movs	r0, #28
 80050c8:	f000 fa8e 	bl	80055e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050cc:	201c      	movs	r0, #28
 80050ce:	f000 fab7 	bl	8005640 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80050d2:	e032      	b.n	800513a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <HAL_TIM_Base_MspInit+0xb0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d114      	bne.n	8005108 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80050de:	4b19      	ldr	r3, [pc, #100]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 80050e4:	f043 0310 	orr.w	r3, r3, #16
 80050e8:	6593      	str	r3, [r2, #88]	; 0x58
 80050ea:	4b16      	ldr	r3, [pc, #88]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80050f6:	2200      	movs	r2, #0
 80050f8:	2100      	movs	r1, #0
 80050fa:	2036      	movs	r0, #54	; 0x36
 80050fc:	f000 fa74 	bl	80055e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005100:	2036      	movs	r0, #54	; 0x36
 8005102:	f000 fa9d 	bl	8005640 <HAL_NVIC_EnableIRQ>
}
 8005106:	e018      	b.n	800513a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a0f      	ldr	r2, [pc, #60]	; (800514c <HAL_TIM_Base_MspInit+0xb4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d113      	bne.n	800513a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	4a0b      	ldr	r2, [pc, #44]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 8005118:	f043 0320 	orr.w	r3, r3, #32
 800511c:	6593      	str	r3, [r2, #88]	; 0x58
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <HAL_TIM_Base_MspInit+0xac>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	2037      	movs	r0, #55	; 0x37
 8005130:	f000 fa5a 	bl	80055e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005134:	2037      	movs	r0, #55	; 0x37
 8005136:	f000 fa83 	bl	8005640 <HAL_NVIC_EnableIRQ>
}
 800513a:	bf00      	nop
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40021000 	.word	0x40021000
 8005148:	40001000 	.word	0x40001000
 800514c:	40001400 	.word	0x40001400

08005150 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005154:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <MX_USART2_UART_Init+0x58>)
 8005158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 800515c:	4a13      	ldr	r2, [pc, #76]	; (80051ac <MX_USART2_UART_Init+0x5c>)
 800515e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005160:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005166:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 8005168:	2200      	movs	r2, #0
 800516a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 8005174:	220c      	movs	r2, #12
 8005176:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 8005180:	2200      	movs	r2, #0
 8005182:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005184:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 8005186:	2200      	movs	r2, #0
 8005188:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 800518c:	2200      	movs	r2, #0
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005190:	4804      	ldr	r0, [pc, #16]	; (80051a4 <MX_USART2_UART_Init+0x54>)
 8005192:	f004 f817 	bl	80091c4 <HAL_UART_Init>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 800519c:	f7ff fe34 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80051a0:	bf00      	nop
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	200005a4 	.word	0x200005a4
 80051a8:	40004400 	.word	0x40004400
 80051ac:	0007a120 	.word	0x0007a120

080051b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b09e      	sub	sp, #120	; 0x78
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051c8:	f107 0310 	add.w	r3, r7, #16
 80051cc:	2254      	movs	r2, #84	; 0x54
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f004 fe06 	bl	8009de2 <memset>
  if(uartHandle->Instance==USART2)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a28      	ldr	r2, [pc, #160]	; (800527c <HAL_UART_MspInit+0xcc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d148      	bne.n	8005272 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051e0:	2302      	movs	r3, #2
 80051e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80051e4:	2300      	movs	r3, #0
 80051e6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051e8:	f107 0310 	add.w	r3, r7, #16
 80051ec:	4618      	mov	r0, r3
 80051ee:	f002 fc5b 	bl	8007aa8 <HAL_RCCEx_PeriphCLKConfig>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80051f8:	f7ff fe06 	bl	8004e08 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051fc:	4b20      	ldr	r3, [pc, #128]	; (8005280 <HAL_UART_MspInit+0xd0>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005200:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <HAL_UART_MspInit+0xd0>)
 8005202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005206:	6593      	str	r3, [r2, #88]	; 0x58
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <HAL_UART_MspInit+0xd0>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005214:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <HAL_UART_MspInit+0xd0>)
 8005216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <HAL_UART_MspInit+0xd0>)
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005220:	4b17      	ldr	r3, [pc, #92]	; (8005280 <HAL_UART_MspInit+0xd0>)
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800522c:	2304      	movs	r3, #4
 800522e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005230:	2302      	movs	r3, #2
 8005232:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005234:	2300      	movs	r3, #0
 8005236:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005238:	2303      	movs	r3, #3
 800523a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800523c:	2307      	movs	r3, #7
 800523e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005240:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005244:	4619      	mov	r1, r3
 8005246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800524a:	f000 fa1d 	bl	8005688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800524e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005252:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005254:	2302      	movs	r3, #2
 8005256:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	2300      	movs	r3, #0
 800525a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800525c:	2303      	movs	r3, #3
 800525e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8005260:	2303      	movs	r3, #3
 8005262:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005264:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005268:	4619      	mov	r1, r3
 800526a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800526e:	f000 fa0b 	bl	8005688 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005272:	bf00      	nop
 8005274:	3778      	adds	r7, #120	; 0x78
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40004400 	.word	0x40004400
 8005280:	40021000 	.word	0x40021000

08005284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005288:	f7ff fe3a 	bl	8004f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800528c:	480c      	ldr	r0, [pc, #48]	; (80052c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800528e:	490d      	ldr	r1, [pc, #52]	; (80052c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005290:	4a0d      	ldr	r2, [pc, #52]	; (80052c8 <LoopForever+0xe>)
  movs r3, #0
 8005292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005294:	e002      	b.n	800529c <LoopCopyDataInit>

08005296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800529a:	3304      	adds	r3, #4

0800529c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800529c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800529e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052a0:	d3f9      	bcc.n	8005296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052a2:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80052a4:	4c0a      	ldr	r4, [pc, #40]	; (80052d0 <LoopForever+0x16>)
  movs r3, #0
 80052a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052a8:	e001      	b.n	80052ae <LoopFillZerobss>

080052aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052ac:	3204      	adds	r2, #4

080052ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052b0:	d3fb      	bcc.n	80052aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80052b2:	f004 fd9f 	bl	8009df4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052b6:	f7ff fcf9 	bl	8004cac <main>

080052ba <LoopForever>:

LoopForever:
    b LoopForever
 80052ba:	e7fe      	b.n	80052ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80052bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80052c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80052c8:	0800c27c 	.word	0x0800c27c
  ldr r2, =_sbss
 80052cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80052d0:	20000630 	.word	0x20000630

080052d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80052d4:	e7fe      	b.n	80052d4 <ADC1_IRQHandler>

080052d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052e0:	2003      	movs	r0, #3
 80052e2:	f000 f961 	bl	80055a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052e6:	2000      	movs	r0, #0
 80052e8:	f000 f80e 	bl	8005308 <HAL_InitTick>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	71fb      	strb	r3, [r7, #7]
 80052f6:	e001      	b.n	80052fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80052f8:	f7ff fd96 	bl	8004e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80052fc:	79fb      	ldrb	r3, [r7, #7]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005314:	4b17      	ldr	r3, [pc, #92]	; (8005374 <HAL_InitTick+0x6c>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d023      	beq.n	8005364 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800531c:	4b16      	ldr	r3, [pc, #88]	; (8005378 <HAL_InitTick+0x70>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b14      	ldr	r3, [pc, #80]	; (8005374 <HAL_InitTick+0x6c>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	4619      	mov	r1, r3
 8005326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800532a:	fbb3 f3f1 	udiv	r3, r3, r1
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f99c 	bl	8005670 <HAL_SYSTICK_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b0f      	cmp	r3, #15
 8005342:	d809      	bhi.n	8005358 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005344:	2200      	movs	r2, #0
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	f000 f94c 	bl	80055e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <HAL_InitTick+0x74>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e007      	b.n	8005368 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
 800535c:	e004      	b.n	8005368 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
 8005362:	e001      	b.n	8005368 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000008 	.word	0x20000008
 8005378:	20000000 	.word	0x20000000
 800537c:	20000004 	.word	0x20000004

08005380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_IncTick+0x20>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_IncTick+0x24>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4413      	add	r3, r2
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <HAL_IncTick+0x24>)
 8005392:	6013      	str	r3, [r2, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000008 	.word	0x20000008
 80053a4:	2000062c 	.word	0x2000062c

080053a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return uwTick;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_GetTick+0x14>)
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2000062c 	.word	0x2000062c

080053c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053c8:	f7ff ffee 	bl	80053a8 <HAL_GetTick>
 80053cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d005      	beq.n	80053e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <HAL_Delay+0x44>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053e6:	bf00      	nop
 80053e8:	f7ff ffde 	bl	80053a8 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d8f7      	bhi.n	80053e8 <HAL_Delay+0x28>
  {
  }
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000008 	.word	0x20000008

08005408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <__NVIC_SetPriorityGrouping+0x44>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005424:	4013      	ands	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800543a:	4a04      	ldr	r2, [pc, #16]	; (800544c <__NVIC_SetPriorityGrouping+0x44>)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	60d3      	str	r3, [r2, #12]
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	e000ed00 	.word	0xe000ed00

08005450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005454:	4b04      	ldr	r3, [pc, #16]	; (8005468 <__NVIC_GetPriorityGrouping+0x18>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	f003 0307 	and.w	r3, r3, #7
}
 800545e:	4618      	mov	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547a:	2b00      	cmp	r3, #0
 800547c:	db0b      	blt.n	8005496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	f003 021f 	and.w	r2, r3, #31
 8005484:	4907      	ldr	r1, [pc, #28]	; (80054a4 <__NVIC_EnableIRQ+0x38>)
 8005486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	2001      	movs	r0, #1
 800548e:	fa00 f202 	lsl.w	r2, r0, r2
 8005492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	e000e100 	.word	0xe000e100

080054a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	6039      	str	r1, [r7, #0]
 80054b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	db0a      	blt.n	80054d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	490c      	ldr	r1, [pc, #48]	; (80054f4 <__NVIC_SetPriority+0x4c>)
 80054c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c6:	0112      	lsls	r2, r2, #4
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	440b      	add	r3, r1
 80054cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054d0:	e00a      	b.n	80054e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4908      	ldr	r1, [pc, #32]	; (80054f8 <__NVIC_SetPriority+0x50>)
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	3b04      	subs	r3, #4
 80054e0:	0112      	lsls	r2, r2, #4
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	440b      	add	r3, r1
 80054e6:	761a      	strb	r2, [r3, #24]
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	e000e100 	.word	0xe000e100
 80054f8:	e000ed00 	.word	0xe000ed00

080054fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b089      	sub	sp, #36	; 0x24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f1c3 0307 	rsb	r3, r3, #7
 8005516:	2b04      	cmp	r3, #4
 8005518:	bf28      	it	cs
 800551a:	2304      	movcs	r3, #4
 800551c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3304      	adds	r3, #4
 8005522:	2b06      	cmp	r3, #6
 8005524:	d902      	bls.n	800552c <NVIC_EncodePriority+0x30>
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	3b03      	subs	r3, #3
 800552a:	e000      	b.n	800552e <NVIC_EncodePriority+0x32>
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005530:	f04f 32ff 	mov.w	r2, #4294967295
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43da      	mvns	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	401a      	ands	r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005544:	f04f 31ff 	mov.w	r1, #4294967295
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	fa01 f303 	lsl.w	r3, r1, r3
 800554e:	43d9      	mvns	r1, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005554:	4313      	orrs	r3, r2
         );
}
 8005556:	4618      	mov	r0, r3
 8005558:	3724      	adds	r7, #36	; 0x24
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3b01      	subs	r3, #1
 8005570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005574:	d301      	bcc.n	800557a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005576:	2301      	movs	r3, #1
 8005578:	e00f      	b.n	800559a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800557a:	4a0a      	ldr	r2, [pc, #40]	; (80055a4 <SysTick_Config+0x40>)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3b01      	subs	r3, #1
 8005580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005582:	210f      	movs	r1, #15
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	f7ff ff8e 	bl	80054a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <SysTick_Config+0x40>)
 800558e:	2200      	movs	r2, #0
 8005590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005592:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <SysTick_Config+0x40>)
 8005594:	2207      	movs	r2, #7
 8005596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	e000e010 	.word	0xe000e010

080055a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b07      	cmp	r3, #7
 80055b4:	d00f      	beq.n	80055d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d00c      	beq.n	80055d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d009      	beq.n	80055d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d006      	beq.n	80055d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d003      	beq.n	80055d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80055ce:	21a6      	movs	r1, #166	; 0xa6
 80055d0:	4804      	ldr	r0, [pc, #16]	; (80055e4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80055d2:	f7ff fc1e 	bl	8004e12 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ff16 	bl	8005408 <__NVIC_SetPriorityGrouping>
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	0800bfd8 	.word	0x0800bfd8

080055e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d903      	bls.n	8005608 <HAL_NVIC_SetPriority+0x20>
 8005600:	21be      	movs	r1, #190	; 0xbe
 8005602:	480e      	ldr	r0, [pc, #56]	; (800563c <HAL_NVIC_SetPriority+0x54>)
 8005604:	f7ff fc05 	bl	8004e12 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b0f      	cmp	r3, #15
 800560c:	d903      	bls.n	8005616 <HAL_NVIC_SetPriority+0x2e>
 800560e:	21bf      	movs	r1, #191	; 0xbf
 8005610:	480a      	ldr	r0, [pc, #40]	; (800563c <HAL_NVIC_SetPriority+0x54>)
 8005612:	f7ff fbfe 	bl	8004e12 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8005616:	f7ff ff1b 	bl	8005450 <__NVIC_GetPriorityGrouping>
 800561a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f7ff ff6b 	bl	80054fc <NVIC_EncodePriority>
 8005626:	4602      	mov	r2, r0
 8005628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff ff3a 	bl	80054a8 <__NVIC_SetPriority>
}
 8005634:	bf00      	nop
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	0800bfd8 	.word	0x0800bfd8

08005640 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800564a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564e:	2b00      	cmp	r3, #0
 8005650:	da03      	bge.n	800565a <HAL_NVIC_EnableIRQ+0x1a>
 8005652:	21d2      	movs	r1, #210	; 0xd2
 8005654:	4805      	ldr	r0, [pc, #20]	; (800566c <HAL_NVIC_EnableIRQ+0x2c>)
 8005656:	f7ff fbdc 	bl	8004e12 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ff04 	bl	800546c <__NVIC_EnableIRQ>
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	0800bfd8 	.word	0x0800bfd8

08005670 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ff73 	bl	8005564 <SysTick_Config>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800569c:	d00f      	beq.n	80056be <HAL_GPIO_Init+0x36>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a34      	ldr	r2, [pc, #208]	; (8005774 <HAL_GPIO_Init+0xec>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <HAL_GPIO_Init+0x36>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a33      	ldr	r2, [pc, #204]	; (8005778 <HAL_GPIO_Init+0xf0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <HAL_GPIO_Init+0x36>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a32      	ldr	r2, [pc, #200]	; (800577c <HAL_GPIO_Init+0xf4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_Init+0x36>
 80056b6:	21aa      	movs	r1, #170	; 0xaa
 80056b8:	4831      	ldr	r0, [pc, #196]	; (8005780 <HAL_GPIO_Init+0xf8>)
 80056ba:	f7ff fbaa 	bl	8004e12 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_GPIO_Init+0x4c>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	0c1b      	lsrs	r3, r3, #16
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_GPIO_Init+0x54>
 80056d4:	21ab      	movs	r1, #171	; 0xab
 80056d6:	482a      	ldr	r0, [pc, #168]	; (8005780 <HAL_GPIO_Init+0xf8>)
 80056d8:	f7ff fb9b 	bl	8004e12 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 81e4 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	f000 81df 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b11      	cmp	r3, #17
 80056f6:	f000 81da 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	f000 81d5 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b12      	cmp	r3, #18
 800570a:	f000 81d0 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005716:	f000 81ca 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005722:	f000 81c4 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800572e:	f000 81be 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800573a:	f000 81b8 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005746:	f000 81b2 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005752:	f000 81ac 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b03      	cmp	r3, #3
 800575c:	f000 81a7 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b0b      	cmp	r3, #11
 8005766:	f000 81a2 	beq.w	8005aae <HAL_GPIO_Init+0x426>
 800576a:	21ac      	movs	r1, #172	; 0xac
 800576c:	4804      	ldr	r0, [pc, #16]	; (8005780 <HAL_GPIO_Init+0xf8>)
 800576e:	f7ff fb50 	bl	8004e12 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005772:	e19c      	b.n	8005aae <HAL_GPIO_Init+0x426>
 8005774:	48000400 	.word	0x48000400
 8005778:	48000800 	.word	0x48000800
 800577c:	48001c00 	.word	0x48001c00
 8005780:	0800c014 	.word	0x0800c014
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2101      	movs	r1, #1
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8186 	beq.w	8005aa8 <HAL_GPIO_Init+0x420>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d005      	beq.n	80057b4 <HAL_GPIO_Init+0x12c>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d144      	bne.n	800583e <HAL_GPIO_Init+0x1b6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00f      	beq.n	80057dc <HAL_GPIO_Init+0x154>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d00b      	beq.n	80057dc <HAL_GPIO_Init+0x154>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d007      	beq.n	80057dc <HAL_GPIO_Init+0x154>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d003      	beq.n	80057dc <HAL_GPIO_Init+0x154>
 80057d4:	21bb      	movs	r1, #187	; 0xbb
 80057d6:	487c      	ldr	r0, [pc, #496]	; (80059c8 <HAL_GPIO_Init+0x340>)
 80057d8:	f7ff fb1b 	bl	8004e12 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	2203      	movs	r2, #3
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4013      	ands	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005812:	2201      	movs	r2, #1
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4013      	ands	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 0201 	and.w	r2, r3, #1
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d027      	beq.n	800589a <HAL_GPIO_Init+0x212>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <HAL_GPIO_Init+0x1e2>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d007      	beq.n	800586a <HAL_GPIO_Init+0x1e2>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d003      	beq.n	800586a <HAL_GPIO_Init+0x1e2>
 8005862:	21dc      	movs	r1, #220	; 0xdc
 8005864:	4858      	ldr	r0, [pc, #352]	; (80059c8 <HAL_GPIO_Init+0x340>)
 8005866:	f7ff fad4 	bl	8004e12 <assert_failed>

        temp = GPIOx->PUPDR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	2203      	movs	r2, #3
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4013      	ands	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d13f      	bne.n	8005926 <HAL_GPIO_Init+0x29e>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058ac:	d00f      	beq.n	80058ce <HAL_GPIO_Init+0x246>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a46      	ldr	r2, [pc, #280]	; (80059cc <HAL_GPIO_Init+0x344>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <HAL_GPIO_Init+0x246>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a45      	ldr	r2, [pc, #276]	; (80059d0 <HAL_GPIO_Init+0x348>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <HAL_GPIO_Init+0x246>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a44      	ldr	r2, [pc, #272]	; (80059d4 <HAL_GPIO_Init+0x34c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <HAL_GPIO_Init+0x246>
 80058c6:	21e8      	movs	r1, #232	; 0xe8
 80058c8:	483f      	ldr	r0, [pc, #252]	; (80059c8 <HAL_GPIO_Init+0x340>)
 80058ca:	f7ff faa2 	bl	8004e12 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d903      	bls.n	80058de <HAL_GPIO_Init+0x256>
 80058d6:	21e9      	movs	r1, #233	; 0xe9
 80058d8:	483b      	ldr	r0, [pc, #236]	; (80059c8 <HAL_GPIO_Init+0x340>)
 80058da:	f7ff fa9a 	bl	8004e12 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	08da      	lsrs	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3208      	adds	r2, #8
 80058e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	220f      	movs	r2, #15
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	08da      	lsrs	r2, r3, #3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3208      	adds	r2, #8
 8005920:	6939      	ldr	r1, [r7, #16]
 8005922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	2203      	movs	r2, #3
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4013      	ands	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 0203 	and.w	r2, r3, #3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80a0 	beq.w	8005aa8 <HAL_GPIO_Init+0x420>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005968:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <HAL_GPIO_Init+0x350>)
 800596a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596c:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <HAL_GPIO_Init+0x350>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	6613      	str	r3, [r2, #96]	; 0x60
 8005974:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <HAL_GPIO_Init+0x350>)
 8005976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005980:	4a16      	ldr	r2, [pc, #88]	; (80059dc <HAL_GPIO_Init+0x354>)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	089b      	lsrs	r3, r3, #2
 8005986:	3302      	adds	r3, #2
 8005988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	220f      	movs	r2, #15
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43db      	mvns	r3, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059aa:	d019      	beq.n	80059e0 <HAL_GPIO_Init+0x358>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a07      	ldr	r2, [pc, #28]	; (80059cc <HAL_GPIO_Init+0x344>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <HAL_GPIO_Init+0x33c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a06      	ldr	r2, [pc, #24]	; (80059d0 <HAL_GPIO_Init+0x348>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d101      	bne.n	80059c0 <HAL_GPIO_Init+0x338>
 80059bc:	2302      	movs	r3, #2
 80059be:	e010      	b.n	80059e2 <HAL_GPIO_Init+0x35a>
 80059c0:	2307      	movs	r3, #7
 80059c2:	e00e      	b.n	80059e2 <HAL_GPIO_Init+0x35a>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e00c      	b.n	80059e2 <HAL_GPIO_Init+0x35a>
 80059c8:	0800c014 	.word	0x0800c014
 80059cc:	48000400 	.word	0x48000400
 80059d0:	48000800 	.word	0x48000800
 80059d4:	48001c00 	.word	0x48001c00
 80059d8:	40021000 	.word	0x40021000
 80059dc:	40010000 	.word	0x40010000
 80059e0:	2300      	movs	r3, #0
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	f002 0203 	and.w	r2, r2, #3
 80059e8:	0092      	lsls	r2, r2, #2
 80059ea:	4093      	lsls	r3, r2
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059f2:	4935      	ldr	r1, [pc, #212]	; (8005ac8 <HAL_GPIO_Init+0x440>)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	089b      	lsrs	r3, r3, #2
 80059f8:	3302      	adds	r3, #2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <HAL_GPIO_Init+0x444>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_GPIO_Init+0x39c>
        {
          temp |= iocurrent;
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a24:	4a29      	ldr	r2, [pc, #164]	; (8005acc <HAL_GPIO_Init+0x444>)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a2a:	4b28      	ldr	r3, [pc, #160]	; (8005acc <HAL_GPIO_Init+0x444>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4013      	ands	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_GPIO_Init+0x3c6>
        {
          temp |= iocurrent;
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <HAL_GPIO_Init+0x444>)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005a54:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <HAL_GPIO_Init+0x444>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4013      	ands	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_GPIO_Init+0x3f0>
        {
          temp |= iocurrent;
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <HAL_GPIO_Init+0x444>)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_GPIO_Init+0x444>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_Init+0x41a>
        {
          temp |= iocurrent;
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005aa2:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <HAL_GPIO_Init+0x444>)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f ae63 	bne.w	8005784 <HAL_GPIO_Init+0xfc>
  }
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40010400 	.word	0x40010400

08005ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	807b      	strh	r3, [r7, #2]
 8005adc:	4613      	mov	r3, r2
 8005ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005ae0:	887b      	ldrh	r3, [r7, #2]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_GPIO_WritePin+0x20>
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <HAL_GPIO_WritePin+0x2a>
 8005af0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005af4:	480d      	ldr	r0, [pc, #52]	; (8005b2c <HAL_GPIO_WritePin+0x5c>)
 8005af6:	f7ff f98c 	bl	8004e12 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005afa:	787b      	ldrb	r3, [r7, #1]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <HAL_GPIO_WritePin+0x40>
 8005b00:	787b      	ldrb	r3, [r7, #1]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d004      	beq.n	8005b10 <HAL_GPIO_WritePin+0x40>
 8005b06:	f240 11af 	movw	r1, #431	; 0x1af
 8005b0a:	4808      	ldr	r0, [pc, #32]	; (8005b2c <HAL_GPIO_WritePin+0x5c>)
 8005b0c:	f7ff f981 	bl	8004e12 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005b10:	787b      	ldrb	r3, [r7, #1]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b1c:	e002      	b.n	8005b24 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b1e:	887a      	ldrh	r2, [r7, #2]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	0800c014 	.word	0x0800c014

08005b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e10b      	b.n	8005d5a <HAL_I2C_Init+0x22a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a87      	ldr	r2, [pc, #540]	; (8005d64 <HAL_I2C_Init+0x234>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_I2C_Init+0x30>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a85      	ldr	r2, [pc, #532]	; (8005d68 <HAL_I2C_Init+0x238>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_I2C_Init+0x30>
 8005b56:	f44f 7108 	mov.w	r1, #544	; 0x220
 8005b5a:	4884      	ldr	r0, [pc, #528]	; (8005d6c <HAL_I2C_Init+0x23c>)
 8005b5c:	f7ff f959 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b68:	d304      	bcc.n	8005b74 <HAL_I2C_Init+0x44>
 8005b6a:	f240 2121 	movw	r1, #545	; 0x221
 8005b6e:	487f      	ldr	r0, [pc, #508]	; (8005d6c <HAL_I2C_Init+0x23c>)
 8005b70:	f7ff f94f 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d008      	beq.n	8005b8e <HAL_I2C_Init+0x5e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d004      	beq.n	8005b8e <HAL_I2C_Init+0x5e>
 8005b84:	f240 2122 	movw	r1, #546	; 0x222
 8005b88:	4878      	ldr	r0, [pc, #480]	; (8005d6c <HAL_I2C_Init+0x23c>)
 8005b8a:	f7ff f942 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <HAL_I2C_Init+0x7a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9e:	d004      	beq.n	8005baa <HAL_I2C_Init+0x7a>
 8005ba0:	f240 2123 	movw	r1, #547	; 0x223
 8005ba4:	4871      	ldr	r0, [pc, #452]	; (8005d6c <HAL_I2C_Init+0x23c>)
 8005ba6:	f7ff f934 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	2bff      	cmp	r3, #255	; 0xff
 8005bb0:	d904      	bls.n	8005bbc <HAL_I2C_Init+0x8c>
 8005bb2:	f44f 7109 	mov.w	r1, #548	; 0x224
 8005bb6:	486d      	ldr	r0, [pc, #436]	; (8005d6c <HAL_I2C_Init+0x23c>)
 8005bb8:	f7ff f92b 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d020      	beq.n	8005c06 <HAL_I2C_Init+0xd6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d01c      	beq.n	8005c06 <HAL_I2C_Init+0xd6>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d018      	beq.n	8005c06 <HAL_I2C_Init+0xd6>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d014      	beq.n	8005c06 <HAL_I2C_Init+0xd6>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d010      	beq.n	8005c06 <HAL_I2C_Init+0xd6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	d00c      	beq.n	8005c06 <HAL_I2C_Init+0xd6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b06      	cmp	r3, #6
 8005bf2:	d008      	beq.n	8005c06 <HAL_I2C_Init+0xd6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	2b07      	cmp	r3, #7
 8005bfa:	d004      	beq.n	8005c06 <HAL_I2C_Init+0xd6>
 8005bfc:	f240 2125 	movw	r1, #549	; 0x225
 8005c00:	485a      	ldr	r0, [pc, #360]	; (8005d6c <HAL_I2C_Init+0x23c>)
 8005c02:	f7ff f906 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_I2C_Init+0xf2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c16:	d004      	beq.n	8005c22 <HAL_I2C_Init+0xf2>
 8005c18:	f240 2126 	movw	r1, #550	; 0x226
 8005c1c:	4853      	ldr	r0, [pc, #332]	; (8005d6c <HAL_I2C_Init+0x23c>)
 8005c1e:	f7ff f8f8 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_I2C_Init+0x10e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c32:	d004      	beq.n	8005c3e <HAL_I2C_Init+0x10e>
 8005c34:	f240 2127 	movw	r1, #551	; 0x227
 8005c38:	484c      	ldr	r0, [pc, #304]	; (8005d6c <HAL_I2C_Init+0x23c>)
 8005c3a:	f7ff f8ea 	bl	8004e12 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fe ffd2 	bl	8004bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2224      	movs	r2, #36	; 0x24
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d107      	bne.n	8005ca6 <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	e006      	b.n	8005cb4 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d108      	bne.n	8005cce <HAL_I2C_Init+0x19e>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	e007      	b.n	8005cde <HAL_I2C_Init+0x1ae>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69d9      	ldr	r1, [r3, #28]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40005400 	.word	0x40005400
 8005d68:	40005c00 	.word	0x40005c00
 8005d6c:	0800c050 	.word	0x0800c050

08005d70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	4608      	mov	r0, r1
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4603      	mov	r3, r0
 8005d80:	817b      	strh	r3, [r7, #10]
 8005d82:	460b      	mov	r3, r1
 8005d84:	813b      	strh	r3, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d007      	beq.n	8005da0 <HAL_I2C_Mem_Write+0x30>
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d004      	beq.n	8005da0 <HAL_I2C_Mem_Write+0x30>
 8005d96:	f640 11c2 	movw	r1, #2498	; 0x9c2
 8005d9a:	4884      	ldr	r0, [pc, #528]	; (8005fac <HAL_I2C_Mem_Write+0x23c>)
 8005d9c:	f7ff f839 	bl	8004e12 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	f040 80f9 	bne.w	8005fa0 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <HAL_I2C_Mem_Write+0x4a>
 8005db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0ed      	b.n	8005fa2 <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_I2C_Mem_Write+0x64>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0e6      	b.n	8005fa2 <HAL_I2C_Mem_Write+0x232>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ddc:	f7ff fae4 	bl	80053a8 <HAL_GetTick>
 8005de0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2319      	movs	r3, #25
 8005de8:	2201      	movs	r2, #1
 8005dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fad4 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e0d1      	b.n	8005fa2 <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2221      	movs	r2, #33	; 0x21
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2240      	movs	r2, #64	; 0x40
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a3a      	ldr	r2, [r7, #32]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e26:	88f8      	ldrh	r0, [r7, #6]
 8005e28:	893a      	ldrh	r2, [r7, #8]
 8005e2a:	8979      	ldrh	r1, [r7, #10]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	4603      	mov	r3, r0
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f9e4 	bl	8006204 <I2C_RequestMemoryWrite>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e0a9      	b.n	8005fa2 <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2bff      	cmp	r3, #255	; 0xff
 8005e56:	d90e      	bls.n	8005e76 <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	22ff      	movs	r2, #255	; 0xff
 8005e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	8979      	ldrh	r1, [r7, #10]
 8005e66:	2300      	movs	r3, #0
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fc4e 	bl	8006710 <I2C_TransferConfig>
 8005e74:	e00f      	b.n	8005e96 <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	8979      	ldrh	r1, [r7, #10]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fc3d 	bl	8006710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 facd 	bl	800643a <I2C_WaitOnTXISFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e07b      	b.n	8005fa2 <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	781a      	ldrb	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d034      	beq.n	8005f4e <HAL_I2C_Mem_Write+0x1de>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d130      	bne.n	8005f4e <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fa50 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e04d      	b.n	8005fa2 <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2bff      	cmp	r3, #255	; 0xff
 8005f0e:	d90e      	bls.n	8005f2e <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	22ff      	movs	r2, #255	; 0xff
 8005f14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	8979      	ldrh	r1, [r7, #10]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fbf2 	bl	8006710 <I2C_TransferConfig>
 8005f2c:	e00f      	b.n	8005f4e <HAL_I2C_Mem_Write+0x1de>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	8979      	ldrh	r1, [r7, #10]
 8005f40:	2300      	movs	r3, #0
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fbe1 	bl	8006710 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d19e      	bne.n	8005e96 <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fab3 	bl	80064c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e01a      	b.n	8005fa2 <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2220      	movs	r2, #32
 8005f72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <HAL_I2C_Mem_Write+0x240>)
 8005f80:	400b      	ands	r3, r1
 8005f82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e000      	b.n	8005fa2 <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 8005fa0:	2302      	movs	r3, #2
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	0800c050 	.word	0x0800c050
 8005fb0:	fe00e800 	.word	0xfe00e800

08005fb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	813b      	strh	r3, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d007      	beq.n	8005fe4 <HAL_I2C_Mem_Read+0x30>
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_I2C_Mem_Read+0x30>
 8005fda:	f640 214b 	movw	r1, #2635	; 0xa4b
 8005fde:	4886      	ldr	r0, [pc, #536]	; (80061f8 <HAL_I2C_Mem_Read+0x244>)
 8005fe0:	f7fe ff17 	bl	8004e12 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	f040 80fd 	bne.w	80061ec <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_I2C_Mem_Read+0x4a>
 8005ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d105      	bne.n	800600a <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006004:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e0f1      	b.n	80061ee <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_I2C_Mem_Read+0x64>
 8006014:	2302      	movs	r3, #2
 8006016:	e0ea      	b.n	80061ee <HAL_I2C_Mem_Read+0x23a>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006020:	f7ff f9c2 	bl	80053a8 <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	2319      	movs	r3, #25
 800602c:	2201      	movs	r2, #1
 800602e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f9b2 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e0d5      	b.n	80061ee <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2222      	movs	r2, #34	; 0x22
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2240      	movs	r2, #64	; 0x40
 800604e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a3a      	ldr	r2, [r7, #32]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800606a:	88f8      	ldrh	r0, [r7, #6]
 800606c:	893a      	ldrh	r2, [r7, #8]
 800606e:	8979      	ldrh	r1, [r7, #10]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	4603      	mov	r3, r0
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f916 	bl	80062ac <I2C_RequestMemoryRead>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0ad      	b.n	80061ee <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006096:	b29b      	uxth	r3, r3
 8006098:	2bff      	cmp	r3, #255	; 0xff
 800609a:	d90e      	bls.n	80060ba <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	22ff      	movs	r2, #255	; 0xff
 80060a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	8979      	ldrh	r1, [r7, #10]
 80060aa:	4b54      	ldr	r3, [pc, #336]	; (80061fc <HAL_I2C_Mem_Read+0x248>)
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fb2c 	bl	8006710 <I2C_TransferConfig>
 80060b8:	e00f      	b.n	80060da <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	8979      	ldrh	r1, [r7, #10]
 80060cc:	4b4b      	ldr	r3, [pc, #300]	; (80061fc <HAL_I2C_Mem_Read+0x248>)
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fb1b 	bl	8006710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	2200      	movs	r2, #0
 80060e2:	2104      	movs	r1, #4
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f959 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e07c      	b.n	80061ee <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d034      	beq.n	800619a <HAL_I2C_Mem_Read+0x1e6>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d130      	bne.n	800619a <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	2200      	movs	r2, #0
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f92a 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e04d      	b.n	80061ee <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	2bff      	cmp	r3, #255	; 0xff
 800615a:	d90e      	bls.n	800617a <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	22ff      	movs	r2, #255	; 0xff
 8006160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006166:	b2da      	uxtb	r2, r3
 8006168:	8979      	ldrh	r1, [r7, #10]
 800616a:	2300      	movs	r3, #0
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 facc 	bl	8006710 <I2C_TransferConfig>
 8006178:	e00f      	b.n	800619a <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006188:	b2da      	uxtb	r2, r3
 800618a:	8979      	ldrh	r1, [r7, #10]
 800618c:	2300      	movs	r3, #0
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fabb 	bl	8006710 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d19a      	bne.n	80060da <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f98d 	bl	80064c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e01a      	b.n	80061ee <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2220      	movs	r2, #32
 80061be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6859      	ldr	r1, [r3, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <HAL_I2C_Mem_Read+0x24c>)
 80061cc:	400b      	ands	r3, r1
 80061ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	e000      	b.n	80061ee <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80061ec:	2302      	movs	r3, #2
  }
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	0800c050 	.word	0x0800c050
 80061fc:	80002400 	.word	0x80002400
 8006200:	fe00e800 	.word	0xfe00e800

08006204 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	8979      	ldrh	r1, [r7, #10]
 8006224:	4b20      	ldr	r3, [pc, #128]	; (80062a8 <I2C_RequestMemoryWrite+0xa4>)
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fa6f 	bl	8006710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	69b9      	ldr	r1, [r7, #24]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f8ff 	bl	800643a <I2C_WaitOnTXISFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e02c      	b.n	80062a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d105      	bne.n	8006258 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800624c:	893b      	ldrh	r3, [r7, #8]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
 8006256:	e015      	b.n	8006284 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006258:	893b      	ldrh	r3, [r7, #8]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	b29b      	uxth	r3, r3
 800625e:	b2da      	uxtb	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f8e5 	bl	800643a <I2C_WaitOnTXISFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e012      	b.n	80062a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800627a:	893b      	ldrh	r3, [r7, #8]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2200      	movs	r2, #0
 800628c:	2180      	movs	r1, #128	; 0x80
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f884 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	80002000 	.word	0x80002000

080062ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	4608      	mov	r0, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	817b      	strh	r3, [r7, #10]
 80062be:	460b      	mov	r3, r1
 80062c0:	813b      	strh	r3, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	8979      	ldrh	r1, [r7, #10]
 80062cc:	4b20      	ldr	r3, [pc, #128]	; (8006350 <I2C_RequestMemoryRead+0xa4>)
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa1c 	bl	8006710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	69b9      	ldr	r1, [r7, #24]
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f8ac 	bl	800643a <I2C_WaitOnTXISFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e02c      	b.n	8006346 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d105      	bne.n	80062fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062f2:	893b      	ldrh	r3, [r7, #8]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
 80062fc:	e015      	b.n	800632a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062fe:	893b      	ldrh	r3, [r7, #8]
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	b29b      	uxth	r3, r3
 8006304:	b2da      	uxtb	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	69b9      	ldr	r1, [r7, #24]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f892 	bl	800643a <I2C_WaitOnTXISFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e012      	b.n	8006346 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006320:	893b      	ldrh	r3, [r7, #8]
 8006322:	b2da      	uxtb	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2200      	movs	r2, #0
 8006332:	2140      	movs	r1, #64	; 0x40
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f831 	bl	800639c <I2C_WaitOnFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	80002000 	.word	0x80002000

08006354 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d103      	bne.n	8006372 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2200      	movs	r2, #0
 8006370:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b01      	cmp	r3, #1
 800637e:	d007      	beq.n	8006390 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	619a      	str	r2, [r3, #24]
  }
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063ac:	e031      	b.n	8006412 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d02d      	beq.n	8006412 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b6:	f7fe fff7 	bl	80053a8 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d122      	bne.n	8006412 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d113      	bne.n	8006412 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e00f      	b.n	8006432 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4013      	ands	r3, r2
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	429a      	cmp	r2, r3
 8006420:	bf0c      	ite	eq
 8006422:	2301      	moveq	r3, #1
 8006424:	2300      	movne	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	429a      	cmp	r2, r3
 800642e:	d0be      	beq.n	80063ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006446:	e033      	b.n	80064b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f87f 	bl	8006550 <I2C_IsErrorOccurred>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e031      	b.n	80064c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d025      	beq.n	80064b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006464:	f7fe ffa0 	bl	80053a8 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	429a      	cmp	r2, r3
 8006472:	d302      	bcc.n	800647a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d11a      	bne.n	80064b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b02      	cmp	r3, #2
 8006486:	d013      	beq.n	80064b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e007      	b.n	80064c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d1c4      	bne.n	8006448 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064d4:	e02f      	b.n	8006536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f838 	bl	8006550 <I2C_IsErrorOccurred>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e02d      	b.n	8006546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ea:	f7fe ff5d 	bl	80053a8 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11a      	bne.n	8006536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b20      	cmp	r3, #32
 800650c:	d013      	beq.n	8006536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006512:	f043 0220 	orr.w	r2, r3, #32
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e007      	b.n	8006546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b20      	cmp	r3, #32
 8006542:	d1c8      	bne.n	80064d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	d068      	beq.n	800664e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2210      	movs	r2, #16
 8006582:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006584:	e049      	b.n	800661a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d045      	beq.n	800661a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800658e:	f7fe ff0b 	bl	80053a8 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	429a      	cmp	r2, r3
 800659c:	d302      	bcc.n	80065a4 <I2C_IsErrorOccurred+0x54>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d13a      	bne.n	800661a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c6:	d121      	bne.n	800660c <I2C_IsErrorOccurred+0xbc>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ce:	d01d      	beq.n	800660c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065d0:	7cfb      	ldrb	r3, [r7, #19]
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d01a      	beq.n	800660c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065e6:	f7fe fedf 	bl	80053a8 <HAL_GetTick>
 80065ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065ec:	e00e      	b.n	800660c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065ee:	f7fe fedb 	bl	80053a8 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b19      	cmp	r3, #25
 80065fa:	d907      	bls.n	800660c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	f043 0320 	orr.w	r3, r3, #32
 8006602:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800660a:	e006      	b.n	800661a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b20      	cmp	r3, #32
 8006618:	d1e9      	bne.n	80065ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b20      	cmp	r3, #32
 8006626:	d003      	beq.n	8006630 <I2C_IsErrorOccurred+0xe0>
 8006628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0aa      	beq.n	8006586 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2220      	movs	r2, #32
 800663e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	f043 0304 	orr.w	r3, r3, #4
 8006646:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006670:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	f043 0308 	orr.w	r3, r3, #8
 8006688:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006692:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f043 0302 	orr.w	r3, r3, #2
 80066aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80066bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01c      	beq.n	80066fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fe45 	bl	8006354 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6859      	ldr	r1, [r3, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b0d      	ldr	r3, [pc, #52]	; (800670c <I2C_IsErrorOccurred+0x1bc>)
 80066d6:	400b      	ands	r3, r1
 80066d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80066fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006702:	4618      	mov	r0, r3
 8006704:	3728      	adds	r7, #40	; 0x28
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	fe00e800 	.word	0xfe00e800

08006710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607b      	str	r3, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	817b      	strh	r3, [r7, #10]
 800671e:	4613      	mov	r3, r2
 8006720:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2a      	ldr	r2, [pc, #168]	; (80067d0 <I2C_TransferConfig+0xc0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d009      	beq.n	8006740 <I2C_TransferConfig+0x30>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a28      	ldr	r2, [pc, #160]	; (80067d4 <I2C_TransferConfig+0xc4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <I2C_TransferConfig+0x30>
 8006736:	f641 4127 	movw	r1, #7207	; 0x1c27
 800673a:	4827      	ldr	r0, [pc, #156]	; (80067d8 <I2C_TransferConfig+0xc8>)
 800673c:	f7fe fb69 	bl	8004e12 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006746:	d00b      	beq.n	8006760 <I2C_TransferConfig+0x50>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800674e:	d007      	beq.n	8006760 <I2C_TransferConfig+0x50>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <I2C_TransferConfig+0x50>
 8006756:	f641 4128 	movw	r1, #7208	; 0x1c28
 800675a:	481f      	ldr	r0, [pc, #124]	; (80067d8 <I2C_TransferConfig+0xc8>)
 800675c:	f7fe fb59 	bl	8004e12 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <I2C_TransferConfig+0xcc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00f      	beq.n	8006788 <I2C_TransferConfig+0x78>
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <I2C_TransferConfig+0xd0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00b      	beq.n	8006788 <I2C_TransferConfig+0x78>
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <I2C_TransferConfig+0xd4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d007      	beq.n	8006788 <I2C_TransferConfig+0x78>
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <I2C_TransferConfig+0x78>
 800677e:	f641 4129 	movw	r1, #7209	; 0x1c29
 8006782:	4815      	ldr	r0, [pc, #84]	; (80067d8 <I2C_TransferConfig+0xc8>)
 8006784:	f7fe fb45 	bl	8004e12 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006788:	897b      	ldrh	r3, [r7, #10]
 800678a:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800678e:	7a7b      	ldrb	r3, [r7, #9]
 8006790:	041b      	lsls	r3, r3, #16
 8006792:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006796:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	4313      	orrs	r3, r2
 80067a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	0d5b      	lsrs	r3, r3, #21
 80067b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <I2C_TransferConfig+0xd8>)
 80067b6:	430b      	orrs	r3, r1
 80067b8:	43db      	mvns	r3, r3
 80067ba:	ea02 0103 	and.w	r1, r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067c8:	bf00      	nop
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40005400 	.word	0x40005400
 80067d4:	40005c00 	.word	0x40005c00
 80067d8:	0800c050 	.word	0x0800c050
 80067dc:	80004000 	.word	0x80004000
 80067e0:	80002400 	.word	0x80002400
 80067e4:	80002000 	.word	0x80002000
 80067e8:	03ff63ff 	.word	0x03ff63ff

080067ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a2d      	ldr	r2, [pc, #180]	; (80068b0 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d008      	beq.n	8006812 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a2b      	ldr	r2, [pc, #172]	; (80068b4 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800680a:	2163      	movs	r1, #99	; 0x63
 800680c:	482a      	ldr	r0, [pc, #168]	; (80068b8 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800680e:	f7fe fb00 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681e:	d003      	beq.n	8006828 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8006820:	2164      	movs	r1, #100	; 0x64
 8006822:	4825      	ldr	r0, [pc, #148]	; (80068b8 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 8006824:	f7fe faf5 	bl	8004e12 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b20      	cmp	r3, #32
 8006832:	d138      	bne.n	80068a6 <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800683e:	2302      	movs	r3, #2
 8006840:	e032      	b.n	80068a8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2224      	movs	r2, #36	; 0x24
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006870:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6819      	ldr	r1, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 80068a6:	2302      	movs	r3, #2
  }
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40005400 	.word	0x40005400
 80068b4:	40005c00 	.word	0x40005c00
 80068b8:	0800c088 	.word	0x0800c088

080068bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a2c      	ldr	r2, [pc, #176]	; (800697c <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d008      	beq.n	80068e2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2a      	ldr	r2, [pc, #168]	; (8006980 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80068da:	2191      	movs	r1, #145	; 0x91
 80068dc:	4829      	ldr	r0, [pc, #164]	; (8006984 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80068de:	f7fe fa98 	bl	8004e12 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b0f      	cmp	r3, #15
 80068e6:	d903      	bls.n	80068f0 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 80068e8:	2192      	movs	r1, #146	; 0x92
 80068ea:	4826      	ldr	r0, [pc, #152]	; (8006984 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80068ec:	f7fe fa91 	bl	8004e12 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d139      	bne.n	8006970 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8006906:	2302      	movs	r3, #2
 8006908:	e033      	b.n	8006972 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2224      	movs	r2, #36	; 0x24
 8006916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006938:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40005400 	.word	0x40005400
 8006980:	40005c00 	.word	0x40005c00
 8006984:	0800c088 	.word	0x0800c088

08006988 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006996:	6013      	str	r3, [r2, #0]
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40007000 	.word	0x40007000

080069a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40007000 	.word	0x40007000

080069c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d2:	d007      	beq.n	80069e4 <HAL_PWREx_ControlVoltageScaling+0x20>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069da:	d003      	beq.n	80069e4 <HAL_PWREx_ControlVoltageScaling+0x20>
 80069dc:	21a7      	movs	r1, #167	; 0xa7
 80069de:	4826      	ldr	r0, [pc, #152]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80069e0:	f7fe fa17 	bl	8004e12 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ea:	d130      	bne.n	8006a4e <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80069ec:	4b23      	ldr	r3, [pc, #140]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f8:	d038      	beq.n	8006a6c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069fa:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a02:	4a1e      	ldr	r2, [pc, #120]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2232      	movs	r2, #50	; 0x32
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	4a1b      	ldr	r2, [pc, #108]	; (8006a84 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	0c9b      	lsrs	r3, r3, #18
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a20:	e002      	b.n	8006a28 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a28:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a34:	d102      	bne.n	8006a3c <HAL_PWREx_ControlVoltageScaling+0x78>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f2      	bne.n	8006a22 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a3c:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a48:	d110      	bne.n	8006a6c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e00f      	b.n	8006a6e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5a:	d007      	beq.n	8006a6c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a64:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	0800c0c4 	.word	0x0800c0c4
 8006a7c:	40007000 	.word	0x40007000
 8006a80:	20000000 	.word	0x20000000
 8006a84:	431bde83 	.word	0x431bde83

08006a88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f000 bd3a 	b.w	8007510 <HAL_RCC_OscConfig+0xa88>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <HAL_RCC_OscConfig+0x32>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <HAL_RCC_OscConfig+0x32>
 8006ab0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8006ab4:	489b      	ldr	r0, [pc, #620]	; (8006d24 <HAL_RCC_OscConfig+0x29c>)
 8006ab6:	f7fe f9ac 	bl	8004e12 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aba:	4b9b      	ldr	r3, [pc, #620]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ac4:	4b98      	ldr	r3, [pc, #608]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0303 	and.w	r3, r3, #3
 8006acc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 813f 	beq.w	8006d5a <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_RCC_OscConfig+0x6e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d004      	beq.n	8006af6 <HAL_RCC_OscConfig+0x6e>
 8006aec:	f240 11ab 	movw	r1, #427	; 0x1ab
 8006af0:	488c      	ldr	r0, [pc, #560]	; (8006d24 <HAL_RCC_OscConfig+0x29c>)
 8006af2:	f7fe f98e 	bl	8004e12 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	2bff      	cmp	r3, #255	; 0xff
 8006afc:	d904      	bls.n	8006b08 <HAL_RCC_OscConfig+0x80>
 8006afe:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8006b02:	4888      	ldr	r0, [pc, #544]	; (8006d24 <HAL_RCC_OscConfig+0x29c>)
 8006b04:	f7fe f985 	bl	8004e12 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d030      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	2b10      	cmp	r3, #16
 8006b16:	d02c      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d028      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	2b30      	cmp	r3, #48	; 0x30
 8006b26:	d024      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d020      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	2b50      	cmp	r3, #80	; 0x50
 8006b36:	d01c      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	2b60      	cmp	r3, #96	; 0x60
 8006b3e:	d018      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	2b70      	cmp	r3, #112	; 0x70
 8006b46:	d014      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d010      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	2b90      	cmp	r3, #144	; 0x90
 8006b56:	d00c      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	2ba0      	cmp	r3, #160	; 0xa0
 8006b5e:	d008      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	2bb0      	cmp	r3, #176	; 0xb0
 8006b66:	d004      	beq.n	8006b72 <HAL_RCC_OscConfig+0xea>
 8006b68:	f240 11ad 	movw	r1, #429	; 0x1ad
 8006b6c:	486d      	ldr	r0, [pc, #436]	; (8006d24 <HAL_RCC_OscConfig+0x29c>)
 8006b6e:	f7fe f950 	bl	8004e12 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <HAL_RCC_OscConfig+0x100>
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b0c      	cmp	r3, #12
 8006b7c:	f040 808f 	bne.w	8006c9e <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	f040 808b 	bne.w	8006c9e <HAL_RCC_OscConfig+0x216>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b88:	4b67      	ldr	r3, [pc, #412]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d006      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x11a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f000 bcb7 	b.w	8007510 <HAL_RCC_OscConfig+0xa88>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1a      	ldr	r2, [r3, #32]
 8006ba6:	4b60      	ldr	r3, [pc, #384]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <HAL_RCC_OscConfig+0x134>
 8006bb2:	4b5d      	ldr	r3, [pc, #372]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bba:	e005      	b.n	8006bc8 <HAL_RCC_OscConfig+0x140>
 8006bbc:	4b5a      	ldr	r3, [pc, #360]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc2:	091b      	lsrs	r3, r3, #4
 8006bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d224      	bcs.n	8006c16 <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 ff09 	bl	80079e8 <RCC_SetFlashLatencyFromMSIRange>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f000 bc97 	b.w	8007510 <HAL_RCC_OscConfig+0xa88>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006be2:	4b51      	ldr	r3, [pc, #324]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a50      	ldr	r2, [pc, #320]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006be8:	f043 0308 	orr.w	r3, r3, #8
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	4b4e      	ldr	r3, [pc, #312]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	494b      	ldr	r1, [pc, #300]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c00:	4b49      	ldr	r3, [pc, #292]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	4946      	ldr	r1, [pc, #280]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	604b      	str	r3, [r1, #4]
 8006c14:	e026      	b.n	8006c64 <HAL_RCC_OscConfig+0x1dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c16:	4b44      	ldr	r3, [pc, #272]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a43      	ldr	r2, [pc, #268]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c1c:	f043 0308 	orr.w	r3, r3, #8
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4b41      	ldr	r3, [pc, #260]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	493e      	ldr	r1, [pc, #248]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c34:	4b3c      	ldr	r3, [pc, #240]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	4939      	ldr	r1, [pc, #228]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCC_OscConfig+0x1dc>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fec8 	bl	80079e8 <RCC_SetFlashLatencyFromMSIRange>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_RCC_OscConfig+0x1dc>
            {
              return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	f000 bc56 	b.w	8007510 <HAL_RCC_OscConfig+0xa88>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c64:	f000 fdfc 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	091b      	lsrs	r3, r3, #4
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	492d      	ldr	r1, [pc, #180]	; (8006d2c <HAL_RCC_OscConfig+0x2a4>)
 8006c76:	5ccb      	ldrb	r3, [r1, r3]
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c80:	4a2b      	ldr	r2, [pc, #172]	; (8006d30 <HAL_RCC_OscConfig+0x2a8>)
 8006c82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c84:	4b2b      	ldr	r3, [pc, #172]	; (8006d34 <HAL_RCC_OscConfig+0x2ac>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe fb3d 	bl	8005308 <HAL_InitTick>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d05f      	beq.n	8006d58 <HAL_RCC_OscConfig+0x2d0>
        {
          return status;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	f000 bc39 	b.w	8007510 <HAL_RCC_OscConfig+0xa88>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d033      	beq.n	8006d0e <HAL_RCC_OscConfig+0x286>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ca6:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1f      	ldr	r2, [pc, #124]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cb2:	f7fe fb79 	bl	80053a8 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cb8:	e009      	b.n	8006cce <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cba:	f7fe fb75 	bl	80053a8 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d902      	bls.n	8006cce <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	f000 bc21 	b.w	8007510 <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0ef      	beq.n	8006cba <HAL_RCC_OscConfig+0x232>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a12      	ldr	r2, [pc, #72]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006ce0:	f043 0308 	orr.w	r3, r3, #8
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	490d      	ldr	r1, [pc, #52]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	4908      	ldr	r1, [pc, #32]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	604b      	str	r3, [r1, #4]
 8006d0c:	e025      	b.n	8006d5a <HAL_RCC_OscConfig+0x2d2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a05      	ldr	r2, [pc, #20]	; (8006d28 <HAL_RCC_OscConfig+0x2a0>)
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d1a:	f7fe fb45 	bl	80053a8 <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d20:	e013      	b.n	8006d4a <HAL_RCC_OscConfig+0x2c2>
 8006d22:	bf00      	nop
 8006d24:	0800c100 	.word	0x0800c100
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	0800c224 	.word	0x0800c224
 8006d30:	20000000 	.word	0x20000000
 8006d34:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d38:	f7fe fb36 	bl	80053a8 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e3e2      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d4a:	4b97      	ldr	r3, [pc, #604]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f0      	bne.n	8006d38 <HAL_RCC_OscConfig+0x2b0>
 8006d56:	e000      	b.n	8006d5a <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d07e      	beq.n	8006e64 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00e      	beq.n	8006d8c <HAL_RCC_OscConfig+0x304>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d76:	d009      	beq.n	8006d8c <HAL_RCC_OscConfig+0x304>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d80:	d004      	beq.n	8006d8c <HAL_RCC_OscConfig+0x304>
 8006d82:	f240 2119 	movw	r1, #537	; 0x219
 8006d86:	4889      	ldr	r0, [pc, #548]	; (8006fac <HAL_RCC_OscConfig+0x524>)
 8006d88:	f7fe f843 	bl	8004e12 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d005      	beq.n	8006d9e <HAL_RCC_OscConfig+0x316>
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b0c      	cmp	r3, #12
 8006d96:	d10e      	bne.n	8006db6 <HAL_RCC_OscConfig+0x32e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d10b      	bne.n	8006db6 <HAL_RCC_OscConfig+0x32e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d9e:	4b82      	ldr	r3, [pc, #520]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d05b      	beq.n	8006e62 <HAL_RCC_OscConfig+0x3da>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d157      	bne.n	8006e62 <HAL_RCC_OscConfig+0x3da>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e3ac      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbe:	d106      	bne.n	8006dce <HAL_RCC_OscConfig+0x346>
 8006dc0:	4b79      	ldr	r3, [pc, #484]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a78      	ldr	r2, [pc, #480]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	e01d      	b.n	8006e0a <HAL_RCC_OscConfig+0x382>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dd6:	d10c      	bne.n	8006df2 <HAL_RCC_OscConfig+0x36a>
 8006dd8:	4b73      	ldr	r3, [pc, #460]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a72      	ldr	r2, [pc, #456]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	4b70      	ldr	r3, [pc, #448]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a6f      	ldr	r2, [pc, #444]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	e00b      	b.n	8006e0a <HAL_RCC_OscConfig+0x382>
 8006df2:	4b6d      	ldr	r3, [pc, #436]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a6c      	ldr	r2, [pc, #432]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	4b6a      	ldr	r3, [pc, #424]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a69      	ldr	r2, [pc, #420]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d013      	beq.n	8006e3a <HAL_RCC_OscConfig+0x3b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e12:	f7fe fac9 	bl	80053a8 <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e18:	e008      	b.n	8006e2c <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e1a:	f7fe fac5 	bl	80053a8 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b64      	cmp	r3, #100	; 0x64
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e371      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e2c:	4b5e      	ldr	r3, [pc, #376]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0f0      	beq.n	8006e1a <HAL_RCC_OscConfig+0x392>
 8006e38:	e014      	b.n	8006e64 <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3a:	f7fe fab5 	bl	80053a8 <HAL_GetTick>
 8006e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e40:	e008      	b.n	8006e54 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e42:	f7fe fab1 	bl	80053a8 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b64      	cmp	r3, #100	; 0x64
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e35d      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e54:	4b54      	ldr	r3, [pc, #336]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f0      	bne.n	8006e42 <HAL_RCC_OscConfig+0x3ba>
 8006e60:	e000      	b.n	8006e64 <HAL_RCC_OscConfig+0x3dc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d077      	beq.n	8006f60 <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <HAL_RCC_OscConfig+0x404>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e80:	d004      	beq.n	8006e8c <HAL_RCC_OscConfig+0x404>
 8006e82:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8006e86:	4849      	ldr	r0, [pc, #292]	; (8006fac <HAL_RCC_OscConfig+0x524>)
 8006e88:	f7fd ffc3 	bl	8004e12 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b1f      	cmp	r3, #31
 8006e92:	d904      	bls.n	8006e9e <HAL_RCC_OscConfig+0x416>
 8006e94:	f240 214d 	movw	r1, #589	; 0x24d
 8006e98:	4844      	ldr	r0, [pc, #272]	; (8006fac <HAL_RCC_OscConfig+0x524>)
 8006e9a:	f7fd ffba 	bl	8004e12 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d005      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x428>
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d119      	bne.n	8006ede <HAL_RCC_OscConfig+0x456>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d116      	bne.n	8006ede <HAL_RCC_OscConfig+0x456>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eb0:	4b3d      	ldr	r3, [pc, #244]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x440>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e323      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec8:	4b37      	ldr	r3, [pc, #220]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	061b      	lsls	r3, r3, #24
 8006ed6:	4934      	ldr	r1, [pc, #208]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006edc:	e040      	b.n	8006f60 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d023      	beq.n	8006f2e <HAL_RCC_OscConfig+0x4a6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ee6:	4b30      	ldr	r3, [pc, #192]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a2f      	ldr	r2, [pc, #188]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef2:	f7fe fa59 	bl	80053a8 <HAL_GetTick>
 8006ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006efa:	f7fe fa55 	bl	80053a8 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e301      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f0c:	4b26      	ldr	r3, [pc, #152]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0f0      	beq.n	8006efa <HAL_RCC_OscConfig+0x472>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f18:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	061b      	lsls	r3, r3, #24
 8006f26:	4920      	ldr	r1, [pc, #128]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	604b      	str	r3, [r1, #4]
 8006f2c:	e018      	b.n	8006f60 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f2e:	4b1e      	ldr	r3, [pc, #120]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3a:	f7fe fa35 	bl	80053a8 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x4cc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f42:	f7fe fa31 	bl	80053a8 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x4cc>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e2dd      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f54:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f0      	bne.n	8006f42 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d04e      	beq.n	800700a <HAL_RCC_OscConfig+0x582>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d008      	beq.n	8006f86 <HAL_RCC_OscConfig+0x4fe>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d004      	beq.n	8006f86 <HAL_RCC_OscConfig+0x4fe>
 8006f7c:	f240 218d 	movw	r1, #653	; 0x28d
 8006f80:	480a      	ldr	r0, [pc, #40]	; (8006fac <HAL_RCC_OscConfig+0x524>)
 8006f82:	f7fd ff46 	bl	8004e12 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d021      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x54a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f94:	4a04      	ldr	r2, [pc, #16]	; (8006fa8 <HAL_RCC_OscConfig+0x520>)
 8006f96:	f043 0301 	orr.w	r3, r3, #1
 8006f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f9e:	f7fe fa03 	bl	80053a8 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fa4:	e00d      	b.n	8006fc2 <HAL_RCC_OscConfig+0x53a>
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	0800c100 	.word	0x0800c100
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fb0:	f7fe f9fa 	bl	80053a8 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e2a6      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fc2:	4b93      	ldr	r3, [pc, #588]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8006fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0ef      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x528>
 8006fd0:	e01b      	b.n	800700a <HAL_RCC_OscConfig+0x582>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fd2:	4b8f      	ldr	r3, [pc, #572]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8006fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd8:	4a8d      	ldr	r2, [pc, #564]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe2:	f7fe f9e1 	bl	80053a8 <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x574>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fea:	f7fe f9dd 	bl	80053a8 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x574>
        {
          return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e289      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ffc:	4b84      	ldr	r3, [pc, #528]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8006ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1ef      	bne.n	8006fea <HAL_RCC_OscConfig+0x562>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80b2 	beq.w	800717c <HAL_RCC_OscConfig+0x6f4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007018:	2300      	movs	r3, #0
 800701a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00c      	beq.n	800703e <HAL_RCC_OscConfig+0x5b6>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d008      	beq.n	800703e <HAL_RCC_OscConfig+0x5b6>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2b05      	cmp	r3, #5
 8007032:	d004      	beq.n	800703e <HAL_RCC_OscConfig+0x5b6>
 8007034:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8007038:	4876      	ldr	r0, [pc, #472]	; (8007214 <HAL_RCC_OscConfig+0x78c>)
 800703a:	f7fd feea 	bl	8004e12 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800703e:	4b74      	ldr	r3, [pc, #464]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10d      	bne.n	8007066 <HAL_RCC_OscConfig+0x5de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800704a:	4b71      	ldr	r3, [pc, #452]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 800704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704e:	4a70      	ldr	r2, [pc, #448]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8007050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007054:	6593      	str	r3, [r2, #88]	; 0x58
 8007056:	4b6e      	ldr	r3, [pc, #440]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8007058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800705e:	60bb      	str	r3, [r7, #8]
 8007060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007062:	2301      	movs	r3, #1
 8007064:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007066:	4b6c      	ldr	r3, [pc, #432]	; (8007218 <HAL_RCC_OscConfig+0x790>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706e:	2b00      	cmp	r3, #0
 8007070:	d118      	bne.n	80070a4 <HAL_RCC_OscConfig+0x61c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007072:	4b69      	ldr	r3, [pc, #420]	; (8007218 <HAL_RCC_OscConfig+0x790>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a68      	ldr	r2, [pc, #416]	; (8007218 <HAL_RCC_OscConfig+0x790>)
 8007078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800707c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800707e:	f7fe f993 	bl	80053a8 <HAL_GetTick>
 8007082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007084:	e008      	b.n	8007098 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007086:	f7fe f98f 	bl	80053a8 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e23b      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007098:	4b5f      	ldr	r3, [pc, #380]	; (8007218 <HAL_RCC_OscConfig+0x790>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f0      	beq.n	8007086 <HAL_RCC_OscConfig+0x5fe>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d108      	bne.n	80070be <HAL_RCC_OscConfig+0x636>
 80070ac:	4b58      	ldr	r3, [pc, #352]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b2:	4a57      	ldr	r2, [pc, #348]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070bc:	e024      	b.n	8007108 <HAL_RCC_OscConfig+0x680>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	d110      	bne.n	80070e8 <HAL_RCC_OscConfig+0x660>
 80070c6:	4b52      	ldr	r3, [pc, #328]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	4a50      	ldr	r2, [pc, #320]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070ce:	f043 0304 	orr.w	r3, r3, #4
 80070d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070d6:	4b4e      	ldr	r3, [pc, #312]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070dc:	4a4c      	ldr	r2, [pc, #304]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070e6:	e00f      	b.n	8007108 <HAL_RCC_OscConfig+0x680>
 80070e8:	4b49      	ldr	r3, [pc, #292]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	4a48      	ldr	r2, [pc, #288]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070f8:	4b45      	ldr	r3, [pc, #276]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80070fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fe:	4a44      	ldr	r2, [pc, #272]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8007100:	f023 0304 	bic.w	r3, r3, #4
 8007104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d016      	beq.n	800713e <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007110:	f7fe f94a 	bl	80053a8 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007116:	e00a      	b.n	800712e <HAL_RCC_OscConfig+0x6a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007118:	f7fe f946 	bl	80053a8 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	f241 3288 	movw	r2, #5000	; 0x1388
 8007126:	4293      	cmp	r3, r2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e1f0      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800712e:	4b38      	ldr	r3, [pc, #224]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d0ed      	beq.n	8007118 <HAL_RCC_OscConfig+0x690>
 800713c:	e015      	b.n	800716a <HAL_RCC_OscConfig+0x6e2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713e:	f7fe f933 	bl	80053a8 <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007144:	e00a      	b.n	800715c <HAL_RCC_OscConfig+0x6d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007146:	f7fe f92f 	bl	80053a8 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	f241 3288 	movw	r2, #5000	; 0x1388
 8007154:	4293      	cmp	r3, r2
 8007156:	d901      	bls.n	800715c <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e1d9      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800715c:	4b2c      	ldr	r3, [pc, #176]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1ed      	bne.n	8007146 <HAL_RCC_OscConfig+0x6be>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800716a:	7ffb      	ldrb	r3, [r7, #31]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d105      	bne.n	800717c <HAL_RCC_OscConfig+0x6f4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007170:	4b27      	ldr	r3, [pc, #156]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8007172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007174:	4a26      	ldr	r2, [pc, #152]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 8007176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800717a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d050      	beq.n	800722a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <HAL_RCC_OscConfig+0x71a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	2b01      	cmp	r3, #1
 8007196:	d004      	beq.n	80071a2 <HAL_RCC_OscConfig+0x71a>
 8007198:	f240 3145 	movw	r1, #837	; 0x345
 800719c:	481d      	ldr	r0, [pc, #116]	; (8007214 <HAL_RCC_OscConfig+0x78c>)
 800719e:	f7fd fe38 	bl	8004e12 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01c      	beq.n	80071e4 <HAL_RCC_OscConfig+0x75c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071aa:	4b19      	ldr	r3, [pc, #100]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80071ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071b0:	4a17      	ldr	r2, [pc, #92]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ba:	f7fe f8f5 	bl	80053a8 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x74c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071c2:	f7fe f8f1 	bl	80053a8 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e19d      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80071d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0ef      	beq.n	80071c2 <HAL_RCC_OscConfig+0x73a>
 80071e2:	e022      	b.n	800722a <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80071e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ea:	4a09      	ldr	r2, [pc, #36]	; (8007210 <HAL_RCC_OscConfig+0x788>)
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f4:	f7fe f8d8 	bl	80053a8 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071fa:	e00f      	b.n	800721c <HAL_RCC_OscConfig+0x794>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071fc:	f7fe f8d4 	bl	80053a8 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d908      	bls.n	800721c <HAL_RCC_OscConfig+0x794>
        {
          return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e180      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
 800720e:	bf00      	nop
 8007210:	40021000 	.word	0x40021000
 8007214:	0800c100 	.word	0x0800c100
 8007218:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800721c:	4b93      	ldr	r3, [pc, #588]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 800721e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e8      	bne.n	80071fc <HAL_RCC_OscConfig+0x774>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <HAL_RCC_OscConfig+0x7c4>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	2b01      	cmp	r3, #1
 8007238:	d008      	beq.n	800724c <HAL_RCC_OscConfig+0x7c4>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	2b02      	cmp	r3, #2
 8007240:	d004      	beq.n	800724c <HAL_RCC_OscConfig+0x7c4>
 8007242:	f240 316e 	movw	r1, #878	; 0x36e
 8007246:	488a      	ldr	r0, [pc, #552]	; (8007470 <HAL_RCC_OscConfig+0x9e8>)
 8007248:	f7fd fde3 	bl	8004e12 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 815c 	beq.w	800750e <HAL_RCC_OscConfig+0xa86>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	2b02      	cmp	r3, #2
 800725c:	f040 8132 	bne.w	80074c4 <HAL_RCC_OscConfig+0xa3c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d010      	beq.n	800728a <HAL_RCC_OscConfig+0x802>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d00c      	beq.n	800728a <HAL_RCC_OscConfig+0x802>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	2b02      	cmp	r3, #2
 8007276:	d008      	beq.n	800728a <HAL_RCC_OscConfig+0x802>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	2b03      	cmp	r3, #3
 800727e:	d004      	beq.n	800728a <HAL_RCC_OscConfig+0x802>
 8007280:	f240 3176 	movw	r1, #886	; 0x376
 8007284:	487a      	ldr	r0, [pc, #488]	; (8007470 <HAL_RCC_OscConfig+0x9e8>)
 8007286:	f7fd fdc4 	bl	8004e12 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_RCC_OscConfig+0x812>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	2b08      	cmp	r3, #8
 8007298:	d904      	bls.n	80072a4 <HAL_RCC_OscConfig+0x81c>
 800729a:	f240 3177 	movw	r1, #887	; 0x377
 800729e:	4874      	ldr	r0, [pc, #464]	; (8007470 <HAL_RCC_OscConfig+0x9e8>)
 80072a0:	f7fd fdb7 	bl	8004e12 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	d903      	bls.n	80072b4 <HAL_RCC_OscConfig+0x82c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b0:	2b56      	cmp	r3, #86	; 0x56
 80072b2:	d904      	bls.n	80072be <HAL_RCC_OscConfig+0x836>
 80072b4:	f44f 715e 	mov.w	r1, #888	; 0x378
 80072b8:	486d      	ldr	r0, [pc, #436]	; (8007470 <HAL_RCC_OscConfig+0x9e8>)
 80072ba:	f7fd fdaa 	bl	8004e12 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d903      	bls.n	80072ce <HAL_RCC_OscConfig+0x846>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	2b1f      	cmp	r3, #31
 80072cc:	d904      	bls.n	80072d8 <HAL_RCC_OscConfig+0x850>
 80072ce:	f240 317a 	movw	r1, #890	; 0x37a
 80072d2:	4867      	ldr	r0, [pc, #412]	; (8007470 <HAL_RCC_OscConfig+0x9e8>)
 80072d4:	f7fd fd9d 	bl	8004e12 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d010      	beq.n	8007302 <HAL_RCC_OscConfig+0x87a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d00c      	beq.n	8007302 <HAL_RCC_OscConfig+0x87a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ec:	2b06      	cmp	r3, #6
 80072ee:	d008      	beq.n	8007302 <HAL_RCC_OscConfig+0x87a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d004      	beq.n	8007302 <HAL_RCC_OscConfig+0x87a>
 80072f8:	f44f 715f 	mov.w	r1, #892	; 0x37c
 80072fc:	485c      	ldr	r0, [pc, #368]	; (8007470 <HAL_RCC_OscConfig+0x9e8>)
 80072fe:	f7fd fd88 	bl	8004e12 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	2b02      	cmp	r3, #2
 8007308:	d010      	beq.n	800732c <HAL_RCC_OscConfig+0x8a4>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	2b04      	cmp	r3, #4
 8007310:	d00c      	beq.n	800732c <HAL_RCC_OscConfig+0x8a4>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	2b06      	cmp	r3, #6
 8007318:	d008      	beq.n	800732c <HAL_RCC_OscConfig+0x8a4>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	2b08      	cmp	r3, #8
 8007320:	d004      	beq.n	800732c <HAL_RCC_OscConfig+0x8a4>
 8007322:	f240 317d 	movw	r1, #893	; 0x37d
 8007326:	4852      	ldr	r0, [pc, #328]	; (8007470 <HAL_RCC_OscConfig+0x9e8>)
 8007328:	f7fd fd73 	bl	8004e12 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800732c:	4b4f      	ldr	r3, [pc, #316]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f003 0203 	and.w	r2, r3, #3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	429a      	cmp	r2, r3
 800733e:	d12c      	bne.n	800739a <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	3b01      	subs	r3, #1
 800734c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800734e:	429a      	cmp	r2, r3
 8007350:	d123      	bne.n	800739a <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800735e:	429a      	cmp	r2, r3
 8007360:	d11b      	bne.n	800739a <HAL_RCC_OscConfig+0x912>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800736e:	429a      	cmp	r2, r3
 8007370:	d113      	bne.n	800739a <HAL_RCC_OscConfig+0x912>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	3b01      	subs	r3, #1
 8007380:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007382:	429a      	cmp	r2, r3
 8007384:	d109      	bne.n	800739a <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	3b01      	subs	r3, #1
 8007394:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007396:	429a      	cmp	r2, r3
 8007398:	d06e      	beq.n	8007478 <HAL_RCC_OscConfig+0x9f0>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d062      	beq.n	8007466 <HAL_RCC_OscConfig+0x9de>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80073a0:	4b32      	ldr	r3, [pc, #200]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <HAL_RCC_OscConfig+0x928>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e0af      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80073b0:	4b2e      	ldr	r3, [pc, #184]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a2d      	ldr	r2, [pc, #180]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 80073b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073bc:	f7fd fff4 	bl	80053a8 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x94e>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073c4:	f7fd fff0 	bl	80053a8 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x94e>
              {
                return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e09c      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073d6:	4b25      	ldr	r3, [pc, #148]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f0      	bne.n	80073c4 <HAL_RCC_OscConfig+0x93c>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073e2:	4b22      	ldr	r3, [pc, #136]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	4b23      	ldr	r3, [pc, #140]	; (8007474 <HAL_RCC_OscConfig+0x9ec>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073f2:	3a01      	subs	r2, #1
 80073f4:	0112      	lsls	r2, r2, #4
 80073f6:	4311      	orrs	r1, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073fc:	0212      	lsls	r2, r2, #8
 80073fe:	4311      	orrs	r1, r2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007404:	0852      	lsrs	r2, r2, #1
 8007406:	3a01      	subs	r2, #1
 8007408:	0552      	lsls	r2, r2, #21
 800740a:	4311      	orrs	r1, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007410:	0852      	lsrs	r2, r2, #1
 8007412:	3a01      	subs	r2, #1
 8007414:	0652      	lsls	r2, r2, #25
 8007416:	4311      	orrs	r1, r2
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800741c:	06d2      	lsls	r2, r2, #27
 800741e:	430a      	orrs	r2, r1
 8007420:	4912      	ldr	r1, [pc, #72]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 8007422:	4313      	orrs	r3, r2
 8007424:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007426:	4b11      	ldr	r3, [pc, #68]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a10      	ldr	r2, [pc, #64]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 800742c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007430:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007432:	4b0e      	ldr	r3, [pc, #56]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	4a0d      	ldr	r2, [pc, #52]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 8007438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800743c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800743e:	f7fd ffb3 	bl	80053a8 <HAL_GetTick>
 8007442:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x9d0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007446:	f7fd ffaf 	bl	80053a8 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x9d0>
              {
                return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e05b      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <HAL_RCC_OscConfig+0x9e4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_RCC_OscConfig+0x9be>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007464:	e053      	b.n	800750e <HAL_RCC_OscConfig+0xa86>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e052      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
 800746a:	bf00      	nop
 800746c:	40021000 	.word	0x40021000
 8007470:	0800c100 	.word	0x0800c100
 8007474:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007478:	4b27      	ldr	r3, [pc, #156]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d144      	bne.n	800750e <HAL_RCC_OscConfig+0xa86>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a23      	ldr	r2, [pc, #140]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 800748a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800748e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007490:	4b21      	ldr	r3, [pc, #132]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	4a20      	ldr	r2, [pc, #128]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 8007496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800749a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800749c:	f7fd ff84 	bl	80053a8 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_OscConfig+0xa2e>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a4:	f7fd ff80 	bl	80053a8 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0xa2e>
            {
              return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e02c      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074b6:	4b18      	ldr	r3, [pc, #96]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0f0      	beq.n	80074a4 <HAL_RCC_OscConfig+0xa1c>
 80074c2:	e024      	b.n	800750e <HAL_RCC_OscConfig+0xa86>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b0c      	cmp	r3, #12
 80074c8:	d01f      	beq.n	800750a <HAL_RCC_OscConfig+0xa82>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a12      	ldr	r2, [pc, #72]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 80074d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d6:	f7fd ff67 	bl	80053a8 <HAL_GetTick>
 80074da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074dc:	e008      	b.n	80074f0 <HAL_RCC_OscConfig+0xa68>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074de:	f7fd ff63 	bl	80053a8 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d901      	bls.n	80074f0 <HAL_RCC_OscConfig+0xa68>
          {
            return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e00f      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074f0:	4b09      	ldr	r3, [pc, #36]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f0      	bne.n	80074de <HAL_RCC_OscConfig+0xa56>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	4905      	ldr	r1, [pc, #20]	; (8007518 <HAL_RCC_OscConfig+0xa90>)
 8007502:	4b06      	ldr	r3, [pc, #24]	; (800751c <HAL_RCC_OscConfig+0xa94>)
 8007504:	4013      	ands	r3, r2
 8007506:	60cb      	str	r3, [r1, #12]
 8007508:	e001      	b.n	800750e <HAL_RCC_OscConfig+0xa86>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <HAL_RCC_OscConfig+0xa88>
      }
    }
  }
  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3720      	adds	r7, #32
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	40021000 	.word	0x40021000
 800751c:	feeefffc 	.word	0xfeeefffc

08007520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e186      	b.n	8007842 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_RCC_ClockConfig+0x24>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b0f      	cmp	r3, #15
 8007542:	d904      	bls.n	800754e <HAL_RCC_ClockConfig+0x2e>
 8007544:	f240 4159 	movw	r1, #1113	; 0x459
 8007548:	4882      	ldr	r0, [pc, #520]	; (8007754 <HAL_RCC_ClockConfig+0x234>)
 800754a:	f7fd fc62 	bl	8004e12 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <HAL_RCC_ClockConfig+0x56>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d00d      	beq.n	8007576 <HAL_RCC_ClockConfig+0x56>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d00a      	beq.n	8007576 <HAL_RCC_ClockConfig+0x56>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b03      	cmp	r3, #3
 8007564:	d007      	beq.n	8007576 <HAL_RCC_ClockConfig+0x56>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b04      	cmp	r3, #4
 800756a:	d004      	beq.n	8007576 <HAL_RCC_ClockConfig+0x56>
 800756c:	f240 415a 	movw	r1, #1114	; 0x45a
 8007570:	4878      	ldr	r0, [pc, #480]	; (8007754 <HAL_RCC_ClockConfig+0x234>)
 8007572:	f7fd fc4e 	bl	8004e12 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007576:	4b78      	ldr	r3, [pc, #480]	; (8007758 <HAL_RCC_ClockConfig+0x238>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d910      	bls.n	80075a6 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007584:	4b74      	ldr	r3, [pc, #464]	; (8007758 <HAL_RCC_ClockConfig+0x238>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f023 0207 	bic.w	r2, r3, #7
 800758c:	4972      	ldr	r1, [pc, #456]	; (8007758 <HAL_RCC_ClockConfig+0x238>)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	4313      	orrs	r3, r2
 8007592:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007594:	4b70      	ldr	r3, [pc, #448]	; (8007758 <HAL_RCC_ClockConfig+0x238>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d001      	beq.n	80075a6 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e14d      	b.n	8007842 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d039      	beq.n	8007626 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d024      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	2b80      	cmp	r3, #128	; 0x80
 80075c0:	d020      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b90      	cmp	r3, #144	; 0x90
 80075c8:	d01c      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2ba0      	cmp	r3, #160	; 0xa0
 80075d0:	d018      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2bb0      	cmp	r3, #176	; 0xb0
 80075d8:	d014      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2bc0      	cmp	r3, #192	; 0xc0
 80075e0:	d010      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2bd0      	cmp	r3, #208	; 0xd0
 80075e8:	d00c      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2be0      	cmp	r3, #224	; 0xe0
 80075f0:	d008      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2bf0      	cmp	r3, #240	; 0xf0
 80075f8:	d004      	beq.n	8007604 <HAL_RCC_ClockConfig+0xe4>
 80075fa:	f240 4172 	movw	r1, #1138	; 0x472
 80075fe:	4855      	ldr	r0, [pc, #340]	; (8007754 <HAL_RCC_ClockConfig+0x234>)
 8007600:	f7fd fc07 	bl	8004e12 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	4b54      	ldr	r3, [pc, #336]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007610:	429a      	cmp	r2, r3
 8007612:	d908      	bls.n	8007626 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007614:	4b51      	ldr	r3, [pc, #324]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	494e      	ldr	r1, [pc, #312]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 8007622:	4313      	orrs	r3, r2
 8007624:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d061      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <HAL_RCC_ClockConfig+0x13c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d00c      	beq.n	800765c <HAL_RCC_ClockConfig+0x13c>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b02      	cmp	r3, #2
 8007648:	d008      	beq.n	800765c <HAL_RCC_ClockConfig+0x13c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d004      	beq.n	800765c <HAL_RCC_ClockConfig+0x13c>
 8007652:	f240 417d 	movw	r1, #1149	; 0x47d
 8007656:	483f      	ldr	r0, [pc, #252]	; (8007754 <HAL_RCC_ClockConfig+0x234>)
 8007658:	f7fd fbdb 	bl	8004e12 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d107      	bne.n	8007674 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007664:	4b3d      	ldr	r3, [pc, #244]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d121      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0e6      	b.n	8007842 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d107      	bne.n	800768c <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800767c:	4b37      	ldr	r3, [pc, #220]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d115      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0da      	b.n	8007842 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d107      	bne.n	80076a4 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007694:	4b31      	ldr	r3, [pc, #196]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d109      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e0ce      	b.n	8007842 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076a4:	4b2d      	ldr	r3, [pc, #180]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0c6      	b.n	8007842 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076b4:	4b29      	ldr	r3, [pc, #164]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f023 0203 	bic.w	r2, r3, #3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4926      	ldr	r1, [pc, #152]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c6:	f7fd fe6f 	bl	80053a8 <HAL_GetTick>
 80076ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076cc:	e00a      	b.n	80076e4 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076ce:	f7fd fe6b 	bl	80053a8 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076dc:	4293      	cmp	r3, r2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e0ae      	b.n	8007842 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e4:	4b1d      	ldr	r3, [pc, #116]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f003 020c 	and.w	r2, r3, #12
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d1eb      	bne.n	80076ce <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d010      	beq.n	8007724 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	4b15      	ldr	r3, [pc, #84]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800770e:	429a      	cmp	r2, r3
 8007710:	d208      	bcs.n	8007724 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007712:	4b12      	ldr	r3, [pc, #72]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	490f      	ldr	r1, [pc, #60]	; (800775c <HAL_RCC_ClockConfig+0x23c>)
 8007720:	4313      	orrs	r3, r2
 8007722:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007724:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <HAL_RCC_ClockConfig+0x238>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d216      	bcs.n	8007760 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <HAL_RCC_ClockConfig+0x238>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f023 0207 	bic.w	r2, r3, #7
 800773a:	4907      	ldr	r1, [pc, #28]	; (8007758 <HAL_RCC_ClockConfig+0x238>)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	4313      	orrs	r3, r2
 8007740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <HAL_RCC_ClockConfig+0x238>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d007      	beq.n	8007760 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e076      	b.n	8007842 <HAL_RCC_ClockConfig+0x322>
 8007754:	0800c100 	.word	0x0800c100
 8007758:	40022000 	.word	0x40022000
 800775c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d025      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d018      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x286>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777c:	d013      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x286>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007786:	d00e      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x286>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007790:	d009      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x286>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800779a:	d004      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x286>
 800779c:	f240 41f5 	movw	r1, #1269	; 0x4f5
 80077a0:	482a      	ldr	r0, [pc, #168]	; (800784c <HAL_RCC_ClockConfig+0x32c>)
 80077a2:	f7fd fb36 	bl	8004e12 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a6:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <HAL_RCC_ClockConfig+0x330>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	4927      	ldr	r1, [pc, #156]	; (8007850 <HAL_RCC_ClockConfig+0x330>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d026      	beq.n	8007812 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d018      	beq.n	80077fe <HAL_RCC_ClockConfig+0x2de>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d4:	d013      	beq.n	80077fe <HAL_RCC_ClockConfig+0x2de>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80077de:	d00e      	beq.n	80077fe <HAL_RCC_ClockConfig+0x2de>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80077e8:	d009      	beq.n	80077fe <HAL_RCC_ClockConfig+0x2de>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077f2:	d004      	beq.n	80077fe <HAL_RCC_ClockConfig+0x2de>
 80077f4:	f240 41fc 	movw	r1, #1276	; 0x4fc
 80077f8:	4814      	ldr	r0, [pc, #80]	; (800784c <HAL_RCC_ClockConfig+0x32c>)
 80077fa:	f7fd fb0a 	bl	8004e12 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077fe:	4b14      	ldr	r3, [pc, #80]	; (8007850 <HAL_RCC_ClockConfig+0x330>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	4910      	ldr	r1, [pc, #64]	; (8007850 <HAL_RCC_ClockConfig+0x330>)
 800780e:	4313      	orrs	r3, r2
 8007810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007812:	f000 f825 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8007816:	4602      	mov	r2, r0
 8007818:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <HAL_RCC_ClockConfig+0x330>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	091b      	lsrs	r3, r3, #4
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	490c      	ldr	r1, [pc, #48]	; (8007854 <HAL_RCC_ClockConfig+0x334>)
 8007824:	5ccb      	ldrb	r3, [r1, r3]
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	fa22 f303 	lsr.w	r3, r2, r3
 800782e:	4a0a      	ldr	r2, [pc, #40]	; (8007858 <HAL_RCC_ClockConfig+0x338>)
 8007830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007832:	4b0a      	ldr	r3, [pc, #40]	; (800785c <HAL_RCC_ClockConfig+0x33c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f7fd fd66 	bl	8005308 <HAL_InitTick>
 800783c:	4603      	mov	r3, r0
 800783e:	72fb      	strb	r3, [r7, #11]

  return status;
 8007840:	7afb      	ldrb	r3, [r7, #11]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	0800c100 	.word	0x0800c100
 8007850:	40021000 	.word	0x40021000
 8007854:	0800c224 	.word	0x0800c224
 8007858:	20000000 	.word	0x20000000
 800785c:	20000004 	.word	0x20000004

08007860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007860:	b480      	push	{r7}
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	2300      	movs	r3, #0
 800786c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800786e:	4b3e      	ldr	r3, [pc, #248]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 030c 	and.w	r3, r3, #12
 8007876:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007878:	4b3b      	ldr	r3, [pc, #236]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <HAL_RCC_GetSysClockFreq+0x34>
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b0c      	cmp	r3, #12
 800788c:	d121      	bne.n	80078d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d11e      	bne.n	80078d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007894:	4b34      	ldr	r3, [pc, #208]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0308 	and.w	r3, r3, #8
 800789c:	2b00      	cmp	r3, #0
 800789e:	d107      	bne.n	80078b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80078a0:	4b31      	ldr	r3, [pc, #196]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 80078a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	61fb      	str	r3, [r7, #28]
 80078ae:	e005      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078b0:	4b2d      	ldr	r3, [pc, #180]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	091b      	lsrs	r3, r3, #4
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078bc:	4a2b      	ldr	r2, [pc, #172]	; (800796c <HAL_RCC_GetSysClockFreq+0x10c>)
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10d      	bne.n	80078e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078d0:	e00a      	b.n	80078e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d102      	bne.n	80078de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078d8:	4b25      	ldr	r3, [pc, #148]	; (8007970 <HAL_RCC_GetSysClockFreq+0x110>)
 80078da:	61bb      	str	r3, [r7, #24]
 80078dc:	e004      	b.n	80078e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d101      	bne.n	80078e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078e4:	4b23      	ldr	r3, [pc, #140]	; (8007974 <HAL_RCC_GetSysClockFreq+0x114>)
 80078e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b0c      	cmp	r3, #12
 80078ec:	d134      	bne.n	8007958 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078ee:	4b1e      	ldr	r3, [pc, #120]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d003      	beq.n	8007906 <HAL_RCC_GetSysClockFreq+0xa6>
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d003      	beq.n	800790c <HAL_RCC_GetSysClockFreq+0xac>
 8007904:	e005      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007906:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <HAL_RCC_GetSysClockFreq+0x110>)
 8007908:	617b      	str	r3, [r7, #20]
      break;
 800790a:	e005      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <HAL_RCC_GetSysClockFreq+0x114>)
 800790e:	617b      	str	r3, [r7, #20]
      break;
 8007910:	e002      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	617b      	str	r3, [r7, #20]
      break;
 8007916:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007918:	4b13      	ldr	r3, [pc, #76]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	091b      	lsrs	r3, r3, #4
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	3301      	adds	r3, #1
 8007924:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007926:	4b10      	ldr	r3, [pc, #64]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	0a1b      	lsrs	r3, r3, #8
 800792c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	fb03 f202 	mul.w	r2, r3, r2
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800793e:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <HAL_RCC_GetSysClockFreq+0x108>)
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	0e5b      	lsrs	r3, r3, #25
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	3301      	adds	r3, #1
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	fbb2 f3f3 	udiv	r3, r2, r3
 8007956:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007958:	69bb      	ldr	r3, [r7, #24]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3724      	adds	r7, #36	; 0x24
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40021000 	.word	0x40021000
 800796c:	0800c23c 	.word	0x0800c23c
 8007970:	00f42400 	.word	0x00f42400
 8007974:	007a1200 	.word	0x007a1200

08007978 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800797c:	4b03      	ldr	r3, [pc, #12]	; (800798c <HAL_RCC_GetHCLKFreq+0x14>)
 800797e:	681b      	ldr	r3, [r3, #0]
}
 8007980:	4618      	mov	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000000 	.word	0x20000000

08007990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007994:	f7ff fff0 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	4904      	ldr	r1, [pc, #16]	; (80079b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40021000 	.word	0x40021000
 80079b8:	0800c234 	.word	0x0800c234

080079bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079c0:	f7ff ffda 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 80079c4:	4602      	mov	r2, r0
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	0adb      	lsrs	r3, r3, #11
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	4904      	ldr	r1, [pc, #16]	; (80079e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079d2:	5ccb      	ldrb	r3, [r1, r3]
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40021000 	.word	0x40021000
 80079e4:	0800c234 	.word	0x0800c234

080079e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079f0:	2300      	movs	r3, #0
 80079f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079f4:	4b2a      	ldr	r3, [pc, #168]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a00:	f7fe ffd2 	bl	80069a8 <HAL_PWREx_GetVoltageRange>
 8007a04:	6178      	str	r0, [r7, #20]
 8007a06:	e014      	b.n	8007a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a08:	4b25      	ldr	r3, [pc, #148]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0c:	4a24      	ldr	r2, [pc, #144]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a12:	6593      	str	r3, [r2, #88]	; 0x58
 8007a14:	4b22      	ldr	r3, [pc, #136]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a20:	f7fe ffc2 	bl	80069a8 <HAL_PWREx_GetVoltageRange>
 8007a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a26:	4b1e      	ldr	r3, [pc, #120]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a38:	d10b      	bne.n	8007a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	d919      	bls.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2ba0      	cmp	r3, #160	; 0xa0
 8007a44:	d902      	bls.n	8007a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a46:	2302      	movs	r3, #2
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	e013      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	e010      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b80      	cmp	r3, #128	; 0x80
 8007a56:	d902      	bls.n	8007a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a58:	2303      	movs	r3, #3
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	e00a      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b80      	cmp	r3, #128	; 0x80
 8007a62:	d102      	bne.n	8007a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a64:	2302      	movs	r3, #2
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	e004      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b70      	cmp	r3, #112	; 0x70
 8007a6e:	d101      	bne.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a70:	2301      	movs	r3, #1
 8007a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a74:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f023 0207 	bic.w	r2, r3, #7
 8007a7c:	4909      	ldr	r1, [pc, #36]	; (8007aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a84:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d001      	beq.n	8007a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	40022000 	.word	0x40022000

08007aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b82      	ldr	r3, [pc, #520]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	4b80      	ldr	r3, [pc, #512]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8007ad0:	21c9      	movs	r1, #201	; 0xc9
 8007ad2:	487f      	ldr	r0, [pc, #508]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8007ad4:	f7fd f99d 	bl	8004e12 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d043      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00d      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007af4:	d008      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007afe:	d003      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007b00:	21d1      	movs	r1, #209	; 0xd1
 8007b02:	4873      	ldr	r0, [pc, #460]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8007b04:	f7fd f985 	bl	8004e12 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b10:	d01a      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8007b12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b16:	d814      	bhi.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d009      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b20:	d10f      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007b22:	4b6c      	ldr	r3, [pc, #432]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	4a6b      	ldr	r2, [pc, #428]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b2e:	e00c      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xa2>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3304      	adds	r3, #4
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 faec 	bl	8008114 <RCCEx_PLLSAI1_Config>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b40:	e003      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	74fb      	strb	r3, [r7, #19]
      break;
 8007b46:	e000      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      break;
 8007b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b4a:	7cfb      	ldrb	r3, [r7, #19]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10b      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b50:	4b60      	ldr	r3, [pc, #384]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5e:	495d      	ldr	r1, [pc, #372]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b66:	e001      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	7cfb      	ldrb	r3, [r7, #19]
 8007b6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80bc 	beq.w	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d013      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8e:	d00e      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b98:	d009      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba2:	d004      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ba4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007ba8:	4849      	ldr	r0, [pc, #292]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8007baa:	f7fd f932 	bl	8004e12 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007bae:	4b49      	ldr	r3, [pc, #292]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00d      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bc4:	4b43      	ldr	r3, [pc, #268]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc8:	4a42      	ldr	r2, [pc, #264]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bce:	6593      	str	r3, [r2, #88]	; 0x58
 8007bd0:	4b40      	ldr	r3, [pc, #256]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd8:	60bb      	str	r3, [r7, #8]
 8007bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007be0:	4b3d      	ldr	r3, [pc, #244]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a3c      	ldr	r2, [pc, #240]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bec:	f7fd fbdc 	bl	80053a8 <HAL_GetTick>
 8007bf0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bf2:	e009      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bf4:	f7fd fbd8 	bl	80053a8 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d902      	bls.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        ret = HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	74fb      	strb	r3, [r7, #19]
        break;
 8007c06:	e005      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c08:	4b33      	ldr	r3, [pc, #204]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0ef      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    if(ret == HAL_OK)
 8007c14:	7cfb      	ldrb	r3, [r7, #19]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d160      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x234>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c1a:	4b2e      	ldr	r3, [pc, #184]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01e      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d019      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c36:	4b27      	ldr	r3, [pc, #156]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c42:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	4a22      	ldr	r2, [pc, #136]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c52:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	4a1e      	ldr	r2, [pc, #120]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c62:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d016      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7fd fb98 	bl	80053a8 <HAL_GetTick>
 8007c78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c7a:	e00b      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c7c:	f7fd fb94 	bl	80053a8 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d902      	bls.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
          {
            ret = HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	74fb      	strb	r3, [r7, #19]
            break;
 8007c92:	e006      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c94:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0ec      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
          }
        }
      }

      if(ret == HAL_OK)
 8007ca2:	7cfb      	ldrb	r3, [r7, #19]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x218>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ca8:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb6:	4907      	ldr	r1, [pc, #28]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007cbe:	e00f      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cc0:	7cfb      	ldrb	r3, [r7, #19]
 8007cc2:	74bb      	strb	r3, [r7, #18]
 8007cc4:	e00c      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8007cc6:	bf00      	nop
 8007cc8:	0006ef63 	.word	0x0006ef63
 8007ccc:	fff9109c 	.word	0xfff9109c
 8007cd0:	0800c138 	.word	0x0800c138
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cdc:	7cfb      	ldrb	r3, [r7, #19]
 8007cde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ce0:	7c7b      	ldrb	r3, [r7, #17]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d105      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ce6:	4b9d      	ldr	r3, [pc, #628]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cea:	4a9c      	ldr	r2, [pc, #624]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d01f      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d010      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d00c      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d008      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d004      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007d1e:	f240 1199 	movw	r1, #409	; 0x199
 8007d22:	488f      	ldr	r0, [pc, #572]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007d24:	f7fd f875 	bl	8004e12 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d28:	4b8c      	ldr	r3, [pc, #560]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2e:	f023 0203 	bic.w	r2, r3, #3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	4989      	ldr	r1, [pc, #548]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d01f      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d010      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d00c      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2b0c      	cmp	r3, #12
 8007d60:	d008      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d004      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007d6a:	f240 11a3 	movw	r1, #419	; 0x1a3
 8007d6e:	487c      	ldr	r0, [pc, #496]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007d70:	f7fd f84f 	bl	8004e12 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d74:	4b79      	ldr	r3, [pc, #484]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7a:	f023 020c 	bic.w	r2, r3, #12
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	4976      	ldr	r1, [pc, #472]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d022      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d013      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da6:	d00e      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007db0:	d009      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dba:	d004      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007dbc:	f240 11d7 	movw	r1, #471	; 0x1d7
 8007dc0:	4867      	ldr	r0, [pc, #412]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007dc2:	f7fd f826 	bl	8004e12 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dc6:	4b65      	ldr	r3, [pc, #404]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	4961      	ldr	r1, [pc, #388]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d022      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d013      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007df8:	d00e      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e02:	d009      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e0c:	d004      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007e0e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007e12:	4853      	ldr	r0, [pc, #332]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007e14:	f7fc fffd 	bl	8004e12 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e18:	4b50      	ldr	r3, [pc, #320]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e26:	494d      	ldr	r1, [pc, #308]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d022      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d013      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e4a:	d00e      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e54:	d009      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e5e:	d004      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007e60:	f240 11e7 	movw	r1, #487	; 0x1e7
 8007e64:	483e      	ldr	r0, [pc, #248]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007e66:	f7fc ffd4 	bl	8004e12 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e6a:	4b3c      	ldr	r3, [pc, #240]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	4938      	ldr	r1, [pc, #224]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01d      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00e      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9c:	d009      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea6:	d004      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007ea8:	f240 11ef 	movw	r1, #495	; 0x1ef
 8007eac:	482c      	ldr	r0, [pc, #176]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007eae:	f7fc ffb0 	bl	8004e12 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007eb2:	4b2a      	ldr	r3, [pc, #168]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	4926      	ldr	r1, [pc, #152]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d01d      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee4:	d009      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eee:	d004      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007ef0:	f240 2107 	movw	r1, #519	; 0x207
 8007ef4:	481a      	ldr	r0, [pc, #104]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007ef6:	f7fc ff8c 	bl	8004e12 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007efa:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	4914      	ldr	r1, [pc, #80]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d046      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x502>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d013      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f2c:	d00e      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f36:	d009      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f40:	d004      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007f42:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007f46:	4806      	ldr	r0, [pc, #24]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007f48:	f7fc ff63 	bl	8004e12 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f4c:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	e004      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007f5a:	bf00      	nop
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	0800c138 	.word	0x0800c138
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	4961      	ldr	r1, [pc, #388]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f76:	d106      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f78:	4b5c      	ldr	r3, [pc, #368]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	4a5b      	ldr	r2, [pc, #364]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f82:	60d3      	str	r3, [r2, #12]
 8007f84:	e011      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x502>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f8e:	d10c      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	2101      	movs	r1, #1
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f8bc 	bl	8008114 <RCCEx_PLLSAI1_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007fa0:	7cfb      	ldrb	r3, [r7, #19]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x502>
        {
          /* set overall return value */
          status = ret;
 8007fa6:	7cfb      	ldrb	r3, [r7, #19]
 8007fa8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d040      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d013      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd0:	d009      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007fda:	d004      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007fdc:	f240 2166 	movw	r1, #614	; 0x266
 8007fe0:	4843      	ldr	r0, [pc, #268]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007fe2:	f7fc ff16 	bl	8004e12 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fe6:	4b41      	ldr	r3, [pc, #260]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff4:	493d      	ldr	r1, [pc, #244]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008004:	d106      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008006:	4b39      	ldr	r3, [pc, #228]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	4a38      	ldr	r2, [pc, #224]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800800c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008010:	60d3      	str	r3, [r2, #12]
 8008012:	e011      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800801c:	d10c      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3304      	adds	r3, #4
 8008022:	2101      	movs	r1, #1
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f875 	bl	8008114 <RCCEx_PLLSAI1_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800802e:	7cfb      	ldrb	r3, [r7, #19]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x590>
      {
        /* set overall return value */
        status = ret;
 8008034:	7cfb      	ldrb	r3, [r7, #19]
 8008036:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d02f      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00e      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008054:	d009      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800805a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800805e:	d004      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8008060:	f240 2186 	movw	r1, #646	; 0x286
 8008064:	4822      	ldr	r0, [pc, #136]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8008066:	f7fc fed4 	bl	8004e12 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800806a:	4b20      	ldr	r3, [pc, #128]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800806c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008070:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008078:	491c      	ldr	r1, [pc, #112]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800807a:	4313      	orrs	r3, r2
 800807c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008088:	d10c      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3304      	adds	r3, #4
 800808e:	2102      	movs	r1, #2
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f83f 	bl	8008114 <RCCEx_PLLSAI1_Config>
 8008096:	4603      	mov	r3, r0
 8008098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800809a:	7cfb      	ldrb	r3, [r7, #19]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      {
        /* set overall return value */
        status = ret;
 80080a0:	7cfb      	ldrb	r3, [r7, #19]
 80080a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d018      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d009      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x624>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c0:	d004      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x624>
 80080c2:	f240 21b2 	movw	r1, #690	; 0x2b2
 80080c6:	480a      	ldr	r0, [pc, #40]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 80080c8:	f7fc fea3 	bl	8004e12 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080cc:	4b07      	ldr	r3, [pc, #28]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80080ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080da:	4904      	ldr	r1, [pc, #16]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80080e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	40021000 	.word	0x40021000
 80080f0:	0800c138 	.word	0x0800c138

080080f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a04      	ldr	r2, [pc, #16]	; (8008110 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80080fe:	f043 0304 	orr.w	r3, r3, #4
 8008102:	6013      	str	r3, [r2, #0]
}
 8008104:	bf00      	nop
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	40021000 	.word	0x40021000

08008114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d010      	beq.n	800814c <RCCEx_PLLSAI1_Config+0x38>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d00c      	beq.n	800814c <RCCEx_PLLSAI1_Config+0x38>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d008      	beq.n	800814c <RCCEx_PLLSAI1_Config+0x38>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d004      	beq.n	800814c <RCCEx_PLLSAI1_Config+0x38>
 8008142:	f640 315e 	movw	r1, #2910	; 0xb5e
 8008146:	4887      	ldr	r0, [pc, #540]	; (8008364 <RCCEx_PLLSAI1_Config+0x250>)
 8008148:	f7fc fe63 	bl	8004e12 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <RCCEx_PLLSAI1_Config+0x48>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b08      	cmp	r3, #8
 800815a:	d904      	bls.n	8008166 <RCCEx_PLLSAI1_Config+0x52>
 800815c:	f640 315f 	movw	r1, #2911	; 0xb5f
 8008160:	4880      	ldr	r0, [pc, #512]	; (8008364 <RCCEx_PLLSAI1_Config+0x250>)
 8008162:	f7fc fe56 	bl	8004e12 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2b07      	cmp	r3, #7
 800816c:	d903      	bls.n	8008176 <RCCEx_PLLSAI1_Config+0x62>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b56      	cmp	r3, #86	; 0x56
 8008174:	d904      	bls.n	8008180 <RCCEx_PLLSAI1_Config+0x6c>
 8008176:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800817a:	487a      	ldr	r0, [pc, #488]	; (8008364 <RCCEx_PLLSAI1_Config+0x250>)
 800817c:	f7fc fe49 	bl	8004e12 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10b      	bne.n	80081a4 <RCCEx_PLLSAI1_Config+0x90>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d105      	bne.n	80081a4 <RCCEx_PLLSAI1_Config+0x90>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <RCCEx_PLLSAI1_Config+0xa0>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80081ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <RCCEx_PLLSAI1_Config+0xaa>
 80081b4:	f640 3161 	movw	r1, #2913	; 0xb61
 80081b8:	486a      	ldr	r0, [pc, #424]	; (8008364 <RCCEx_PLLSAI1_Config+0x250>)
 80081ba:	f7fc fe2a 	bl	8004e12 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80081be:	4b6a      	ldr	r3, [pc, #424]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d018      	beq.n	80081fc <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80081ca:	4b67      	ldr	r3, [pc, #412]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f003 0203 	and.w	r2, r3, #3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d10d      	bne.n	80081f6 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
       ||
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d009      	beq.n	80081f6 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80081e2:	4b61      	ldr	r3, [pc, #388]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	091b      	lsrs	r3, r3, #4
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
       ||
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d047      	beq.n	8008286 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
 80081fa:	e044      	b.n	8008286 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d018      	beq.n	8008236 <RCCEx_PLLSAI1_Config+0x122>
 8008204:	2b03      	cmp	r3, #3
 8008206:	d825      	bhi.n	8008254 <RCCEx_PLLSAI1_Config+0x140>
 8008208:	2b01      	cmp	r3, #1
 800820a:	d002      	beq.n	8008212 <RCCEx_PLLSAI1_Config+0xfe>
 800820c:	2b02      	cmp	r3, #2
 800820e:	d009      	beq.n	8008224 <RCCEx_PLLSAI1_Config+0x110>
 8008210:	e020      	b.n	8008254 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008212:	4b55      	ldr	r3, [pc, #340]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d11d      	bne.n	800825a <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008222:	e01a      	b.n	800825a <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008224:	4b50      	ldr	r3, [pc, #320]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800822c:	2b00      	cmp	r3, #0
 800822e:	d116      	bne.n	800825e <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008234:	e013      	b.n	800825e <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008236:	4b4c      	ldr	r3, [pc, #304]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10f      	bne.n	8008262 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008242:	4b49      	ldr	r3, [pc, #292]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008252:	e006      	b.n	8008262 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	73fb      	strb	r3, [r7, #15]
      break;
 8008258:	e004      	b.n	8008264 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800825a:	bf00      	nop
 800825c:	e002      	b.n	8008264 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800825e:	bf00      	nop
 8008260:	e000      	b.n	8008264 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008262:	bf00      	nop
    }

    if(status == HAL_OK)
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10d      	bne.n	8008286 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800826a:	4b3f      	ldr	r3, [pc, #252]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6819      	ldr	r1, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	3b01      	subs	r3, #1
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	430b      	orrs	r3, r1
 8008280:	4939      	ldr	r1, [pc, #228]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 8008282:	4313      	orrs	r3, r2
 8008284:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 80ba 	bne.w	8008402 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800828e:	4b36      	ldr	r3, [pc, #216]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a35      	ldr	r2, [pc, #212]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 8008294:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829a:	f7fd f885 	bl	80053a8 <HAL_GetTick>
 800829e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80082a0:	e009      	b.n	80082b6 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082a2:	f7fd f881 	bl	80053a8 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d902      	bls.n	80082b6 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	73fb      	strb	r3, [r7, #15]
        break;
 80082b4:	e005      	b.n	80082c2 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80082b6:	4b2c      	ldr	r3, [pc, #176]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1ef      	bne.n	80082a2 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f040 809c 	bne.w	8008402 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11d      	bne.n	800830c <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d903      	bls.n	80082e0 <RCCEx_PLLSAI1_Config+0x1cc>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	2b1f      	cmp	r3, #31
 80082de:	d904      	bls.n	80082ea <RCCEx_PLLSAI1_Config+0x1d6>
 80082e0:	f640 31b4 	movw	r1, #2996	; 0xbb4
 80082e4:	481f      	ldr	r0, [pc, #124]	; (8008364 <RCCEx_PLLSAI1_Config+0x250>)
 80082e6:	f7fc fd94 	bl	8004e12 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082ea:	4b1f      	ldr	r3, [pc, #124]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80082f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6892      	ldr	r2, [r2, #8]
 80082fa:	0211      	lsls	r1, r2, #8
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	68d2      	ldr	r2, [r2, #12]
 8008300:	06d2      	lsls	r2, r2, #27
 8008302:	430a      	orrs	r2, r1
 8008304:	4918      	ldr	r1, [pc, #96]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 8008306:	4313      	orrs	r3, r2
 8008308:	610b      	str	r3, [r1, #16]
 800830a:	e056      	b.n	80083ba <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d12c      	bne.n	800836c <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d010      	beq.n	800833c <RCCEx_PLLSAI1_Config+0x228>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	2b04      	cmp	r3, #4
 8008320:	d00c      	beq.n	800833c <RCCEx_PLLSAI1_Config+0x228>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b06      	cmp	r3, #6
 8008328:	d008      	beq.n	800833c <RCCEx_PLLSAI1_Config+0x228>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	2b08      	cmp	r3, #8
 8008330:	d004      	beq.n	800833c <RCCEx_PLLSAI1_Config+0x228>
 8008332:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8008336:	480b      	ldr	r0, [pc, #44]	; (8008364 <RCCEx_PLLSAI1_Config+0x250>)
 8008338:	f7fc fd6b 	bl	8004e12 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008344:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6892      	ldr	r2, [r2, #8]
 800834c:	0211      	lsls	r1, r2, #8
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6912      	ldr	r2, [r2, #16]
 8008352:	0852      	lsrs	r2, r2, #1
 8008354:	3a01      	subs	r2, #1
 8008356:	0552      	lsls	r2, r2, #21
 8008358:	430a      	orrs	r2, r1
 800835a:	4903      	ldr	r1, [pc, #12]	; (8008368 <RCCEx_PLLSAI1_Config+0x254>)
 800835c:	4313      	orrs	r3, r2
 800835e:	610b      	str	r3, [r1, #16]
 8008360:	e02b      	b.n	80083ba <RCCEx_PLLSAI1_Config+0x2a6>
 8008362:	bf00      	nop
 8008364:	0800c138 	.word	0x0800c138
 8008368:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d010      	beq.n	8008396 <RCCEx_PLLSAI1_Config+0x282>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	2b04      	cmp	r3, #4
 800837a:	d00c      	beq.n	8008396 <RCCEx_PLLSAI1_Config+0x282>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	2b06      	cmp	r3, #6
 8008382:	d008      	beq.n	8008396 <RCCEx_PLLSAI1_Config+0x282>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	2b08      	cmp	r3, #8
 800838a:	d004      	beq.n	8008396 <RCCEx_PLLSAI1_Config+0x282>
 800838c:	f640 31ea 	movw	r1, #3050	; 0xbea
 8008390:	481e      	ldr	r0, [pc, #120]	; (800840c <RCCEx_PLLSAI1_Config+0x2f8>)
 8008392:	f7fc fd3e 	bl	8004e12 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008396:	4b1e      	ldr	r3, [pc, #120]	; (8008410 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800839e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	6892      	ldr	r2, [r2, #8]
 80083a6:	0211      	lsls	r1, r2, #8
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6952      	ldr	r2, [r2, #20]
 80083ac:	0852      	lsrs	r2, r2, #1
 80083ae:	3a01      	subs	r2, #1
 80083b0:	0652      	lsls	r2, r2, #25
 80083b2:	430a      	orrs	r2, r1
 80083b4:	4916      	ldr	r1, [pc, #88]	; (8008410 <RCCEx_PLLSAI1_Config+0x2fc>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80083ba:	4b15      	ldr	r3, [pc, #84]	; (8008410 <RCCEx_PLLSAI1_Config+0x2fc>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a14      	ldr	r2, [pc, #80]	; (8008410 <RCCEx_PLLSAI1_Config+0x2fc>)
 80083c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c6:	f7fc ffef 	bl	80053a8 <HAL_GetTick>
 80083ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80083cc:	e009      	b.n	80083e2 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083ce:	f7fc ffeb 	bl	80053a8 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d902      	bls.n	80083e2 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	73fb      	strb	r3, [r7, #15]
          break;
 80083e0:	e005      	b.n	80083ee <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80083e2:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <RCCEx_PLLSAI1_Config+0x2fc>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0ef      	beq.n	80083ce <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80083f4:	4b06      	ldr	r3, [pc, #24]	; (8008410 <RCCEx_PLLSAI1_Config+0x2fc>)
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	4904      	ldr	r1, [pc, #16]	; (8008410 <RCCEx_PLLSAI1_Config+0x2fc>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	0800c138 	.word	0x0800c138
 8008410:	40021000 	.word	0x40021000

08008414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e0c8      	b.n	80085b8 <HAL_TIM_Base_Init+0x1a4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a65      	ldr	r2, [pc, #404]	; (80085c0 <HAL_TIM_Base_Init+0x1ac>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d01d      	beq.n	800846c <HAL_TIM_Base_Init+0x58>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008438:	d018      	beq.n	800846c <HAL_TIM_Base_Init+0x58>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a61      	ldr	r2, [pc, #388]	; (80085c4 <HAL_TIM_Base_Init+0x1b0>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d013      	beq.n	800846c <HAL_TIM_Base_Init+0x58>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a5f      	ldr	r2, [pc, #380]	; (80085c8 <HAL_TIM_Base_Init+0x1b4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00e      	beq.n	800846c <HAL_TIM_Base_Init+0x58>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a5e      	ldr	r2, [pc, #376]	; (80085cc <HAL_TIM_Base_Init+0x1b8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d009      	beq.n	800846c <HAL_TIM_Base_Init+0x58>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a5c      	ldr	r2, [pc, #368]	; (80085d0 <HAL_TIM_Base_Init+0x1bc>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d004      	beq.n	800846c <HAL_TIM_Base_Init+0x58>
 8008462:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008466:	485b      	ldr	r0, [pc, #364]	; (80085d4 <HAL_TIM_Base_Init+0x1c0>)
 8008468:	f7fc fcd3 	bl	8004e12 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d014      	beq.n	800849e <HAL_TIM_Base_Init+0x8a>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	2b10      	cmp	r3, #16
 800847a:	d010      	beq.n	800849e <HAL_TIM_Base_Init+0x8a>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	2b20      	cmp	r3, #32
 8008482:	d00c      	beq.n	800849e <HAL_TIM_Base_Init+0x8a>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	d008      	beq.n	800849e <HAL_TIM_Base_Init+0x8a>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	2b60      	cmp	r3, #96	; 0x60
 8008492:	d004      	beq.n	800849e <HAL_TIM_Base_Init+0x8a>
 8008494:	f240 1117 	movw	r1, #279	; 0x117
 8008498:	484e      	ldr	r0, [pc, #312]	; (80085d4 <HAL_TIM_Base_Init+0x1c0>)
 800849a:	f7fc fcba 	bl	8004e12 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00e      	beq.n	80084c4 <HAL_TIM_Base_Init+0xb0>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ae:	d009      	beq.n	80084c4 <HAL_TIM_Base_Init+0xb0>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084b8:	d004      	beq.n	80084c4 <HAL_TIM_Base_Init+0xb0>
 80084ba:	f44f 718c 	mov.w	r1, #280	; 0x118
 80084be:	4845      	ldr	r0, [pc, #276]	; (80085d4 <HAL_TIM_Base_Init+0x1c0>)
 80084c0:	f7fc fca7 	bl	8004e12 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084cc:	d00f      	beq.n	80084ee <HAL_TIM_Base_Init+0xda>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d006      	beq.n	80084e4 <HAL_TIM_Base_Init+0xd0>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084de:	d201      	bcs.n	80084e4 <HAL_TIM_Base_Init+0xd0>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e000      	b.n	80084e6 <HAL_TIM_Base_Init+0xd2>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	e006      	b.n	80084fc <HAL_TIM_Base_Init+0xe8>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bf14      	ite	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	2300      	moveq	r3, #0
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d104      	bne.n	800850a <HAL_TIM_Base_Init+0xf6>
 8008500:	f240 1119 	movw	r1, #281	; 0x119
 8008504:	4833      	ldr	r0, [pc, #204]	; (80085d4 <HAL_TIM_Base_Init+0x1c0>)
 8008506:	f7fc fc84 	bl	8004e12 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d008      	beq.n	8008524 <HAL_TIM_Base_Init+0x110>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b80      	cmp	r3, #128	; 0x80
 8008518:	d004      	beq.n	8008524 <HAL_TIM_Base_Init+0x110>
 800851a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800851e:	482d      	ldr	r0, [pc, #180]	; (80085d4 <HAL_TIM_Base_Init+0x1c0>)
 8008520:	f7fc fc77 	bl	8004e12 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d106      	bne.n	800853e <HAL_TIM_Base_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7fc fdad 	bl	8005098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	4619      	mov	r1, r3
 8008550:	4610      	mov	r0, r2
 8008552:	f000 fc07 	bl	8008d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40012c00 	.word	0x40012c00
 80085c4:	40001000 	.word	0x40001000
 80085c8:	40001400 	.word	0x40001400
 80085cc:	40014000 	.word	0x40014000
 80085d0:	40014400 	.word	0x40014400
 80085d4:	0800c174 	.word	0x0800c174

080085d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d020      	beq.n	800863c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01b      	beq.n	800863c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f06f 0202 	mvn.w	r2, #2
 800860c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fb80 	bl	8008d28 <HAL_TIM_IC_CaptureCallback>
 8008628:	e005      	b.n	8008636 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fb72 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fb83 	bl	8008d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	d020      	beq.n	8008688 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01b      	beq.n	8008688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0204 	mvn.w	r2, #4
 8008658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2202      	movs	r2, #2
 800865e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fb5a 	bl	8008d28 <HAL_TIM_IC_CaptureCallback>
 8008674:	e005      	b.n	8008682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fb4c 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fb5d 	bl	8008d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d020      	beq.n	80086d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01b      	beq.n	80086d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f06f 0208 	mvn.w	r2, #8
 80086a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2204      	movs	r2, #4
 80086aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fb34 	bl	8008d28 <HAL_TIM_IC_CaptureCallback>
 80086c0:	e005      	b.n	80086ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fb26 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb37 	bl	8008d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d020      	beq.n	8008720 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f003 0310 	and.w	r3, r3, #16
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01b      	beq.n	8008720 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f06f 0210 	mvn.w	r2, #16
 80086f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2208      	movs	r2, #8
 80086f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fb0e 	bl	8008d28 <HAL_TIM_IC_CaptureCallback>
 800870c:	e005      	b.n	800871a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fb00 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fb11 	bl	8008d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00c      	beq.n	8008744 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0201 	mvn.w	r2, #1
 800873c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fc fb58 	bl	8004df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00c      	beq.n	8008768 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008754:	2b00      	cmp	r3, #0
 8008756:	d007      	beq.n	8008768 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fd1a 	bl	800919c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00c      	beq.n	800878c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008778:	2b00      	cmp	r3, #0
 800877a:	d007      	beq.n	800878c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fd12 	bl	80091b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00c      	beq.n	80087b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fad0 	bl	8008d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00c      	beq.n	80087d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d007      	beq.n	80087d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f06f 0220 	mvn.w	r2, #32
 80087cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fcda 	bl	8009188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087d4:	bf00      	nop
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIM_ConfigClockSource+0x1c>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e282      	b.n	8008cfe <HAL_TIM_ConfigClockSource+0x522>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008810:	d029      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b70      	cmp	r3, #112	; 0x70
 8008818:	d025      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008822:	d020      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d01c      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b50      	cmp	r3, #80	; 0x50
 8008832:	d018      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b60      	cmp	r3, #96	; 0x60
 800883a:	d014      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d010      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b10      	cmp	r3, #16
 800884a:	d00c      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b20      	cmp	r3, #32
 8008852:	d008      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b30      	cmp	r3, #48	; 0x30
 800885a:	d004      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x8a>
 800885c:	f241 5154 	movw	r1, #5460	; 0x1554
 8008860:	486f      	ldr	r0, [pc, #444]	; (8008a20 <HAL_TIM_ConfigClockSource+0x244>)
 8008862:	f7fc fad6 	bl	8004e12 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008874:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008878:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008880:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008892:	f000 80d1 	beq.w	8008a38 <HAL_TIM_ConfigClockSource+0x25c>
 8008896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800889a:	f200 8223 	bhi.w	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
 800889e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a2:	d02d      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x124>
 80088a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a8:	f200 821c 	bhi.w	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
 80088ac:	2b70      	cmp	r3, #112	; 0x70
 80088ae:	d051      	beq.n	8008954 <HAL_TIM_ConfigClockSource+0x178>
 80088b0:	2b70      	cmp	r3, #112	; 0x70
 80088b2:	f200 8217 	bhi.w	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
 80088b6:	2b60      	cmp	r3, #96	; 0x60
 80088b8:	f000 8162 	beq.w	8008b80 <HAL_TIM_ConfigClockSource+0x3a4>
 80088bc:	2b60      	cmp	r3, #96	; 0x60
 80088be:	f200 8211 	bhi.w	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
 80088c2:	2b50      	cmp	r3, #80	; 0x50
 80088c4:	f000 8115 	beq.w	8008af2 <HAL_TIM_ConfigClockSource+0x316>
 80088c8:	2b50      	cmp	r3, #80	; 0x50
 80088ca:	f200 820b 	bhi.w	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	f000 81a4 	beq.w	8008c1c <HAL_TIM_ConfigClockSource+0x440>
 80088d4:	2b40      	cmp	r3, #64	; 0x40
 80088d6:	f200 8205 	bhi.w	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
 80088da:	2b30      	cmp	r3, #48	; 0x30
 80088dc:	f000 81e5 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x4ce>
 80088e0:	2b30      	cmp	r3, #48	; 0x30
 80088e2:	f200 81ff 	bhi.w	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	f000 81df 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x4ce>
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	f200 81f9 	bhi.w	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 81d9 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x4ce>
 80088f8:	2b10      	cmp	r3, #16
 80088fa:	f000 81d6 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x4ce>
 80088fe:	e1f1      	b.n	8008ce4 <HAL_TIM_ConfigClockSource+0x508>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a47      	ldr	r2, [pc, #284]	; (8008a24 <HAL_TIM_ConfigClockSource+0x248>)
 8008906:	4293      	cmp	r3, r2
 8008908:	f000 81ef 	beq.w	8008cea <HAL_TIM_ConfigClockSource+0x50e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008914:	f000 81e9 	beq.w	8008cea <HAL_TIM_ConfigClockSource+0x50e>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a42      	ldr	r2, [pc, #264]	; (8008a28 <HAL_TIM_ConfigClockSource+0x24c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	f000 81e3 	beq.w	8008cea <HAL_TIM_ConfigClockSource+0x50e>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a40      	ldr	r2, [pc, #256]	; (8008a2c <HAL_TIM_ConfigClockSource+0x250>)
 800892a:	4293      	cmp	r3, r2
 800892c:	f000 81dd 	beq.w	8008cea <HAL_TIM_ConfigClockSource+0x50e>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a3e      	ldr	r2, [pc, #248]	; (8008a30 <HAL_TIM_ConfigClockSource+0x254>)
 8008936:	4293      	cmp	r3, r2
 8008938:	f000 81d7 	beq.w	8008cea <HAL_TIM_ConfigClockSource+0x50e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a3c      	ldr	r2, [pc, #240]	; (8008a34 <HAL_TIM_ConfigClockSource+0x258>)
 8008942:	4293      	cmp	r3, r2
 8008944:	f000 81d1 	beq.w	8008cea <HAL_TIM_ConfigClockSource+0x50e>
 8008948:	f44f 51ab 	mov.w	r1, #5472	; 0x1560
 800894c:	4834      	ldr	r0, [pc, #208]	; (8008a20 <HAL_TIM_ConfigClockSource+0x244>)
 800894e:	f7fc fa60 	bl	8004e12 <assert_failed>
      break;
 8008952:	e1ca      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x50e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a32      	ldr	r2, [pc, #200]	; (8008a24 <HAL_TIM_ConfigClockSource+0x248>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00e      	beq.n	800897c <HAL_TIM_ConfigClockSource+0x1a0>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008966:	d009      	beq.n	800897c <HAL_TIM_ConfigClockSource+0x1a0>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a30      	ldr	r2, [pc, #192]	; (8008a30 <HAL_TIM_ConfigClockSource+0x254>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <HAL_TIM_ConfigClockSource+0x1a0>
 8008972:	f241 5167 	movw	r1, #5479	; 0x1567
 8008976:	482a      	ldr	r0, [pc, #168]	; (8008a20 <HAL_TIM_ConfigClockSource+0x244>)
 8008978:	f7fc fa4b 	bl	8004e12 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d013      	beq.n	80089ac <HAL_TIM_ConfigClockSource+0x1d0>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898c:	d00e      	beq.n	80089ac <HAL_TIM_ConfigClockSource+0x1d0>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008996:	d009      	beq.n	80089ac <HAL_TIM_ConfigClockSource+0x1d0>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089a0:	d004      	beq.n	80089ac <HAL_TIM_ConfigClockSource+0x1d0>
 80089a2:	f241 516a 	movw	r1, #5482	; 0x156a
 80089a6:	481e      	ldr	r0, [pc, #120]	; (8008a20 <HAL_TIM_ConfigClockSource+0x244>)
 80089a8:	f7fc fa33 	bl	8004e12 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b4:	d014      	beq.n	80089e0 <HAL_TIM_ConfigClockSource+0x204>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d010      	beq.n	80089e0 <HAL_TIM_ConfigClockSource+0x204>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00c      	beq.n	80089e0 <HAL_TIM_ConfigClockSource+0x204>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d008      	beq.n	80089e0 <HAL_TIM_ConfigClockSource+0x204>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2b0a      	cmp	r3, #10
 80089d4:	d004      	beq.n	80089e0 <HAL_TIM_ConfigClockSource+0x204>
 80089d6:	f241 516b 	movw	r1, #5483	; 0x156b
 80089da:	4811      	ldr	r0, [pc, #68]	; (8008a20 <HAL_TIM_ConfigClockSource+0x244>)
 80089dc:	f7fc fa19 	bl	8004e12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b0f      	cmp	r3, #15
 80089e6:	d904      	bls.n	80089f2 <HAL_TIM_ConfigClockSource+0x216>
 80089e8:	f241 516c 	movw	r1, #5484	; 0x156c
 80089ec:	480c      	ldr	r0, [pc, #48]	; (8008a20 <HAL_TIM_ConfigClockSource+0x244>)
 80089ee:	f7fc fa10 	bl	8004e12 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a02:	f000 fa8d 	bl	8008f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	609a      	str	r2, [r3, #8]
      break;
 8008a1e:	e165      	b.n	8008cec <HAL_TIM_ConfigClockSource+0x510>
 8008a20:	0800c174 	.word	0x0800c174
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40001000 	.word	0x40001000
 8008a2c:	40001400 	.word	0x40001400
 8008a30:	40014000 	.word	0x40014000
 8008a34:	40014400 	.word	0x40014400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a74      	ldr	r2, [pc, #464]	; (8008c10 <HAL_TIM_ConfigClockSource+0x434>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d009      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x27a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a4a:	d004      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x27a>
 8008a4c:	f241 517f 	movw	r1, #5503	; 0x157f
 8008a50:	4870      	ldr	r0, [pc, #448]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008a52:	f7fc f9de 	bl	8004e12 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d013      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x2aa>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a66:	d00e      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x2aa>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a70:	d009      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x2aa>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a7a:	d004      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x2aa>
 8008a7c:	f241 5182 	movw	r1, #5506	; 0x1582
 8008a80:	4864      	ldr	r0, [pc, #400]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008a82:	f7fc f9c6 	bl	8004e12 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a8e:	d014      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0x2de>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d010      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0x2de>
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00c      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0x2de>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d008      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0x2de>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b0a      	cmp	r3, #10
 8008aae:	d004      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0x2de>
 8008ab0:	f241 5183 	movw	r1, #5507	; 0x1583
 8008ab4:	4857      	ldr	r0, [pc, #348]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008ab6:	f7fc f9ac 	bl	8004e12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d904      	bls.n	8008acc <HAL_TIM_ConfigClockSource+0x2f0>
 8008ac2:	f241 5184 	movw	r1, #5508	; 0x1584
 8008ac6:	4853      	ldr	r0, [pc, #332]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008ac8:	f7fc f9a3 	bl	8004e12 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008adc:	f000 fa20 	bl	8008f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aee:	609a      	str	r2, [r3, #8]
      break;
 8008af0:	e0fc      	b.n	8008cec <HAL_TIM_ConfigClockSource+0x510>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a46      	ldr	r2, [pc, #280]	; (8008c10 <HAL_TIM_ConfigClockSource+0x434>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00e      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x33e>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b04:	d009      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x33e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a43      	ldr	r2, [pc, #268]	; (8008c18 <HAL_TIM_ConfigClockSource+0x43c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d004      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x33e>
 8008b10:	f241 5193 	movw	r1, #5523	; 0x1593
 8008b14:	483f      	ldr	r0, [pc, #252]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008b16:	f7fc f97c 	bl	8004e12 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b22:	d014      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x372>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d010      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x372>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00c      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x372>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d008      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x372>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	2b0a      	cmp	r3, #10
 8008b42:	d004      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x372>
 8008b44:	f241 5196 	movw	r1, #5526	; 0x1596
 8008b48:	4832      	ldr	r0, [pc, #200]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008b4a:	f7fc f962 	bl	8004e12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	2b0f      	cmp	r3, #15
 8008b54:	d904      	bls.n	8008b60 <HAL_TIM_ConfigClockSource+0x384>
 8008b56:	f241 5197 	movw	r1, #5527	; 0x1597
 8008b5a:	482e      	ldr	r0, [pc, #184]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008b5c:	f7fc f959 	bl	8004e12 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f000 f95d 	bl	8008e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2150      	movs	r1, #80	; 0x50
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f9b6 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 8008b7e:	e0b5      	b.n	8008cec <HAL_TIM_ConfigClockSource+0x510>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a22      	ldr	r2, [pc, #136]	; (8008c10 <HAL_TIM_ConfigClockSource+0x434>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00e      	beq.n	8008ba8 <HAL_TIM_ConfigClockSource+0x3cc>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b92:	d009      	beq.n	8008ba8 <HAL_TIM_ConfigClockSource+0x3cc>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a1f      	ldr	r2, [pc, #124]	; (8008c18 <HAL_TIM_ConfigClockSource+0x43c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d004      	beq.n	8008ba8 <HAL_TIM_ConfigClockSource+0x3cc>
 8008b9e:	f241 51a3 	movw	r1, #5539	; 0x15a3
 8008ba2:	481c      	ldr	r0, [pc, #112]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008ba4:	f7fc f935 	bl	8004e12 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb0:	d014      	beq.n	8008bdc <HAL_TIM_ConfigClockSource+0x400>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d010      	beq.n	8008bdc <HAL_TIM_ConfigClockSource+0x400>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00c      	beq.n	8008bdc <HAL_TIM_ConfigClockSource+0x400>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d008      	beq.n	8008bdc <HAL_TIM_ConfigClockSource+0x400>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2b0a      	cmp	r3, #10
 8008bd0:	d004      	beq.n	8008bdc <HAL_TIM_ConfigClockSource+0x400>
 8008bd2:	f241 51a6 	movw	r1, #5542	; 0x15a6
 8008bd6:	480f      	ldr	r0, [pc, #60]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008bd8:	f7fc f91b 	bl	8004e12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	2b0f      	cmp	r3, #15
 8008be2:	d904      	bls.n	8008bee <HAL_TIM_ConfigClockSource+0x412>
 8008be4:	f241 51a7 	movw	r1, #5543	; 0x15a7
 8008be8:	480a      	ldr	r0, [pc, #40]	; (8008c14 <HAL_TIM_ConfigClockSource+0x438>)
 8008bea:	f7fc f912 	bl	8004e12 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f000 f945 	bl	8008e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2160      	movs	r1, #96	; 0x60
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 f96f 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 8008c0c:	e06e      	b.n	8008cec <HAL_TIM_ConfigClockSource+0x510>
 8008c0e:	bf00      	nop
 8008c10:	40012c00 	.word	0x40012c00
 8008c14:	0800c174 	.word	0x0800c174
 8008c18:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a39      	ldr	r2, [pc, #228]	; (8008d08 <HAL_TIM_ConfigClockSource+0x52c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00e      	beq.n	8008c44 <HAL_TIM_ConfigClockSource+0x468>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2e:	d009      	beq.n	8008c44 <HAL_TIM_ConfigClockSource+0x468>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a35      	ldr	r2, [pc, #212]	; (8008d0c <HAL_TIM_ConfigClockSource+0x530>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d004      	beq.n	8008c44 <HAL_TIM_ConfigClockSource+0x468>
 8008c3a:	f241 51b3 	movw	r1, #5555	; 0x15b3
 8008c3e:	4834      	ldr	r0, [pc, #208]	; (8008d10 <HAL_TIM_ConfigClockSource+0x534>)
 8008c40:	f7fc f8e7 	bl	8004e12 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c4c:	d014      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x49c>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d010      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x49c>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x49c>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d008      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x49c>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b0a      	cmp	r3, #10
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x49c>
 8008c6e:	f241 51b6 	movw	r1, #5558	; 0x15b6
 8008c72:	4827      	ldr	r0, [pc, #156]	; (8008d10 <HAL_TIM_ConfigClockSource+0x534>)
 8008c74:	f7fc f8cd 	bl	8004e12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	2b0f      	cmp	r3, #15
 8008c7e:	d904      	bls.n	8008c8a <HAL_TIM_ConfigClockSource+0x4ae>
 8008c80:	f241 51b7 	movw	r1, #5559	; 0x15b7
 8008c84:	4822      	ldr	r0, [pc, #136]	; (8008d10 <HAL_TIM_ConfigClockSource+0x534>)
 8008c86:	f7fc f8c4 	bl	8004e12 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c96:	461a      	mov	r2, r3
 8008c98:	f000 f8c8 	bl	8008e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2140      	movs	r1, #64	; 0x40
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f921 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 8008ca8:	e020      	b.n	8008cec <HAL_TIM_ConfigClockSource+0x510>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a16      	ldr	r2, [pc, #88]	; (8008d08 <HAL_TIM_ConfigClockSource+0x52c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00e      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x4f6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cbc:	d009      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x4f6>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a12      	ldr	r2, [pc, #72]	; (8008d0c <HAL_TIM_ConfigClockSource+0x530>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d004      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x4f6>
 8008cc8:	f241 51c6 	movw	r1, #5574	; 0x15c6
 8008ccc:	4810      	ldr	r0, [pc, #64]	; (8008d10 <HAL_TIM_ConfigClockSource+0x534>)
 8008cce:	f7fc f8a0 	bl	8004e12 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f000 f904 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 8008ce2:	e003      	b.n	8008cec <HAL_TIM_ConfigClockSource+0x510>
    }

    default:
      status = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce8:	e000      	b.n	8008cec <HAL_TIM_ConfigClockSource+0x510>
      break;
 8008cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	40012c00 	.word	0x40012c00
 8008d0c:	40014000 	.word	0x40014000
 8008d10:	0800c174 	.word	0x0800c174

08008d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a2a      	ldr	r2, [pc, #168]	; (8008e20 <TIM_Base_SetConfig+0xbc>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_Base_SetConfig+0x20>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d82:	d108      	bne.n	8008d96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a21      	ldr	r2, [pc, #132]	; (8008e20 <TIM_Base_SetConfig+0xbc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00b      	beq.n	8008db6 <TIM_Base_SetConfig+0x52>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da4:	d007      	beq.n	8008db6 <TIM_Base_SetConfig+0x52>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a1e      	ldr	r2, [pc, #120]	; (8008e24 <TIM_Base_SetConfig+0xc0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d003      	beq.n	8008db6 <TIM_Base_SetConfig+0x52>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a1d      	ldr	r2, [pc, #116]	; (8008e28 <TIM_Base_SetConfig+0xc4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d108      	bne.n	8008dc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a0c      	ldr	r2, [pc, #48]	; (8008e20 <TIM_Base_SetConfig+0xbc>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_Base_SetConfig+0xa0>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a0b      	ldr	r2, [pc, #44]	; (8008e24 <TIM_Base_SetConfig+0xc0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_Base_SetConfig+0xa0>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a0a      	ldr	r2, [pc, #40]	; (8008e28 <TIM_Base_SetConfig+0xc4>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d103      	bne.n	8008e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	691a      	ldr	r2, [r3, #16]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	615a      	str	r2, [r3, #20]
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	40012c00 	.word	0x40012c00
 8008e24:	40014000 	.word	0x40014000
 8008e28:	40014400 	.word	0x40014400

08008e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f023 0201 	bic.w	r2, r3, #1
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f023 030a 	bic.w	r3, r3, #10
 8008e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	621a      	str	r2, [r3, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b087      	sub	sp, #28
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	f023 0210 	bic.w	r2, r3, #16
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	031b      	lsls	r3, r3, #12
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	621a      	str	r2, [r3, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	f043 0307 	orr.w	r3, r3, #7
 8008f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	609a      	str	r2, [r3, #8]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	021a      	lsls	r2, r3, #8
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	609a      	str	r2, [r3, #8]
}
 8008f54:	bf00      	nop
 8008f56:	371c      	adds	r7, #28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a81      	ldr	r2, [pc, #516]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d018      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f7c:	d013      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a7d      	ldr	r2, [pc, #500]	; (8009178 <HAL_TIMEx_MasterConfigSynchronization+0x218>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00e      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a7b      	ldr	r2, [pc, #492]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d009      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a7a      	ldr	r2, [pc, #488]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d004      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f9c:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8008fa0:	4878      	ldr	r0, [pc, #480]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8008fa2:	f7fb ff36 	bl	8004e12 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d020      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b10      	cmp	r3, #16
 8008fb4:	d01c      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d018      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b30      	cmp	r3, #48	; 0x30
 8008fc4:	d014      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b40      	cmp	r3, #64	; 0x40
 8008fcc:	d010      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b50      	cmp	r3, #80	; 0x50
 8008fd4:	d00c      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b60      	cmp	r3, #96	; 0x60
 8008fdc:	d008      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b70      	cmp	r3, #112	; 0x70
 8008fe4:	d004      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fe6:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8008fea:	4866      	ldr	r0, [pc, #408]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8008fec:	f7fb ff11 	bl	8004e12 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	2b80      	cmp	r3, #128	; 0x80
 8008ff6:	d008      	beq.n	800900a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009000:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8009004:	485f      	ldr	r0, [pc, #380]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8009006:	f7fb ff04 	bl	8004e12 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009014:	2302      	movs	r3, #2
 8009016:	e0a8      	b.n	800916a <HAL_TIMEx_MasterConfigSynchronization+0x20a>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a4d      	ldr	r2, [pc, #308]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d161      	bne.n	8009106 <HAL_TIMEx_MasterConfigSynchronization+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d054      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009052:	d04f      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800905c:	d04a      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009066:	d045      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009070:	d040      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800907a:	d03b      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009084:	d036      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800908e:	d031      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8009098:	d02c      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090a2:	d027      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80090ac:	d022      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80090b6:	d01d      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80090c0:	d018      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80090ca:	d013      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80090d4:	d00e      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80090de:	d009      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80090e8:	d004      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090ea:	f240 71cb 	movw	r1, #1995	; 0x7cb
 80090ee:	4825      	ldr	r0, [pc, #148]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 80090f0:	f7fb fe8f 	bl	8004e12 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800910c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4313      	orrs	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a13      	ldr	r2, [pc, #76]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d009      	beq.n	800913e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009132:	d004      	beq.n	800913e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a11      	ldr	r2, [pc, #68]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d10c      	bne.n	8009158 <HAL_TIMEx_MasterConfigSynchronization+0x1f8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	4313      	orrs	r3, r2
 800914e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	40012c00 	.word	0x40012c00
 8009178:	40001000 	.word	0x40001000
 800917c:	40001400 	.word	0x40001400
 8009180:	40014000 	.word	0x40014000
 8009184:	0800c1ac 	.word	0x0800c1ac

08009188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e06d      	b.n	80092b2 <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d014      	beq.n	8009208 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a36      	ldr	r2, [pc, #216]	; (80092bc <HAL_UART_Init+0xf8>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d023      	beq.n	8009230 <HAL_UART_Init+0x6c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a34      	ldr	r2, [pc, #208]	; (80092c0 <HAL_UART_Init+0xfc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d01e      	beq.n	8009230 <HAL_UART_Init+0x6c>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a33      	ldr	r2, [pc, #204]	; (80092c4 <HAL_UART_Init+0x100>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d019      	beq.n	8009230 <HAL_UART_Init+0x6c>
 80091fc:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8009200:	4831      	ldr	r0, [pc, #196]	; (80092c8 <HAL_UART_Init+0x104>)
 8009202:	f7fb fe06 	bl	8004e12 <assert_failed>
 8009206:	e013      	b.n	8009230 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a2b      	ldr	r2, [pc, #172]	; (80092bc <HAL_UART_Init+0xf8>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00e      	beq.n	8009230 <HAL_UART_Init+0x6c>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a2a      	ldr	r2, [pc, #168]	; (80092c0 <HAL_UART_Init+0xfc>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d009      	beq.n	8009230 <HAL_UART_Init+0x6c>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a28      	ldr	r2, [pc, #160]	; (80092c4 <HAL_UART_Init+0x100>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d004      	beq.n	8009230 <HAL_UART_Init+0x6c>
 8009226:	f240 1157 	movw	r1, #343	; 0x157
 800922a:	4827      	ldr	r0, [pc, #156]	; (80092c8 <HAL_UART_Init+0x104>)
 800922c:	f7fb fdf1 	bl	8004e12 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d106      	bne.n	8009246 <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7fb ffb5 	bl	80051b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2224      	movs	r2, #36	; 0x24
 800924a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 0201 	bic.w	r2, r2, #1
 800925a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <HAL_UART_Init+0xa6>
  {
    UART_AdvFeatureConfig(huart);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fb01 	bl	800986c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f82e 	bl	80092cc <UART_SetConfig>
 8009270:	4603      	mov	r3, r0
 8009272:	2b01      	cmp	r3, #1
 8009274:	d101      	bne.n	800927a <HAL_UART_Init+0xb6>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e01b      	b.n	80092b2 <HAL_UART_Init+0xee>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009288:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009298:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0201 	orr.w	r2, r2, #1
 80092a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fc26 	bl	8009afc <UART_CheckIdleState>
 80092b0:	4603      	mov	r3, r0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	40013800 	.word	0x40013800
 80092c0:	40004400 	.word	0x40004400
 80092c4:	40008000 	.word	0x40008000
 80092c8:	0800c1e8 	.word	0x0800c1e8

080092cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092d0:	b08a      	sub	sp, #40	; 0x28
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	4a9e      	ldr	r2, [pc, #632]	; (800955c <UART_SetConfig+0x290>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d904      	bls.n	80092f0 <UART_SetConfig+0x24>
 80092e6:	f640 414d 	movw	r1, #3149	; 0xc4d
 80092ea:	489d      	ldr	r0, [pc, #628]	; (8009560 <UART_SetConfig+0x294>)
 80092ec:	f7fb fd91 	bl	8004e12 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092f8:	d00d      	beq.n	8009316 <UART_SetConfig+0x4a>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d009      	beq.n	8009316 <UART_SetConfig+0x4a>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930a:	d004      	beq.n	8009316 <UART_SetConfig+0x4a>
 800930c:	f640 414e 	movw	r1, #3150	; 0xc4e
 8009310:	4893      	ldr	r0, [pc, #588]	; (8009560 <UART_SetConfig+0x294>)
 8009312:	f7fb fd7e 	bl	8004e12 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a92      	ldr	r2, [pc, #584]	; (8009564 <UART_SetConfig+0x298>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d10e      	bne.n	800933e <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d030      	beq.n	800938a <UART_SetConfig+0xbe>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009330:	d02b      	beq.n	800938a <UART_SetConfig+0xbe>
 8009332:	f640 4151 	movw	r1, #3153	; 0xc51
 8009336:	488a      	ldr	r0, [pc, #552]	; (8009560 <UART_SetConfig+0x294>)
 8009338:	f7fb fd6b 	bl	8004e12 <assert_failed>
 800933c:	e025      	b.n	800938a <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009346:	d012      	beq.n	800936e <UART_SetConfig+0xa2>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00e      	beq.n	800936e <UART_SetConfig+0xa2>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009358:	d009      	beq.n	800936e <UART_SetConfig+0xa2>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009362:	d004      	beq.n	800936e <UART_SetConfig+0xa2>
 8009364:	f640 4155 	movw	r1, #3157	; 0xc55
 8009368:	487d      	ldr	r0, [pc, #500]	; (8009560 <UART_SetConfig+0x294>)
 800936a:	f7fb fd52 	bl	8004e12 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d009      	beq.n	800938a <UART_SetConfig+0xbe>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800937e:	d004      	beq.n	800938a <UART_SetConfig+0xbe>
 8009380:	f640 4156 	movw	r1, #3158	; 0xc56
 8009384:	4876      	ldr	r0, [pc, #472]	; (8009560 <UART_SetConfig+0x294>)
 8009386:	f7fb fd44 	bl	8004e12 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00e      	beq.n	80093b0 <UART_SetConfig+0xe4>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800939a:	d009      	beq.n	80093b0 <UART_SetConfig+0xe4>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80093a4:	d004      	beq.n	80093b0 <UART_SetConfig+0xe4>
 80093a6:	f640 4159 	movw	r1, #3161	; 0xc59
 80093aa:	486d      	ldr	r0, [pc, #436]	; (8009560 <UART_SetConfig+0x294>)
 80093ac:	f7fb fd31 	bl	8004e12 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	f023 030c 	bic.w	r3, r3, #12
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d103      	bne.n	80093c4 <UART_SetConfig+0xf8>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d104      	bne.n	80093ce <UART_SetConfig+0x102>
 80093c4:	f640 415a 	movw	r1, #3162	; 0xc5a
 80093c8:	4865      	ldr	r0, [pc, #404]	; (8009560 <UART_SetConfig+0x294>)
 80093ca:	f7fb fd22 	bl	8004e12 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d013      	beq.n	80093fe <UART_SetConfig+0x132>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093de:	d00e      	beq.n	80093fe <UART_SetConfig+0x132>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e8:	d009      	beq.n	80093fe <UART_SetConfig+0x132>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093f2:	d004      	beq.n	80093fe <UART_SetConfig+0x132>
 80093f4:	f640 415b 	movw	r1, #3163	; 0xc5b
 80093f8:	4859      	ldr	r0, [pc, #356]	; (8009560 <UART_SetConfig+0x294>)
 80093fa:	f7fb fd0a 	bl	8004e12 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <UART_SetConfig+0x14e>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800940e:	d004      	beq.n	800941a <UART_SetConfig+0x14e>
 8009410:	f640 415c 	movw	r1, #3164	; 0xc5c
 8009414:	4852      	ldr	r0, [pc, #328]	; (8009560 <UART_SetConfig+0x294>)
 8009416:	f7fb fcfc 	bl	8004e12 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	431a      	orrs	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	431a      	orrs	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	4313      	orrs	r3, r2
 8009430:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b4b      	ldr	r3, [pc, #300]	; (8009568 <UART_SetConfig+0x29c>)
 800943a:	4013      	ands	r3, r2
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	6812      	ldr	r2, [r2, #0]
 8009440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009442:	430b      	orrs	r3, r1
 8009444:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a3f      	ldr	r2, [pc, #252]	; (8009564 <UART_SetConfig+0x298>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d004      	beq.n	8009476 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009472:	4313      	orrs	r3, r2
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009486:	430a      	orrs	r2, r1
 8009488:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a37      	ldr	r2, [pc, #220]	; (800956c <UART_SetConfig+0x2a0>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d125      	bne.n	80094e0 <UART_SetConfig+0x214>
 8009494:	4b36      	ldr	r3, [pc, #216]	; (8009570 <UART_SetConfig+0x2a4>)
 8009496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949a:	f003 0303 	and.w	r3, r3, #3
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d81a      	bhi.n	80094d8 <UART_SetConfig+0x20c>
 80094a2:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <UART_SetConfig+0x1dc>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	080094b9 	.word	0x080094b9
 80094ac:	080094c9 	.word	0x080094c9
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094d1 	.word	0x080094d1
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094be:	e08e      	b.n	80095de <UART_SetConfig+0x312>
 80094c0:	2302      	movs	r3, #2
 80094c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094c6:	e08a      	b.n	80095de <UART_SetConfig+0x312>
 80094c8:	2304      	movs	r3, #4
 80094ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ce:	e086      	b.n	80095de <UART_SetConfig+0x312>
 80094d0:	2308      	movs	r3, #8
 80094d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094d6:	e082      	b.n	80095de <UART_SetConfig+0x312>
 80094d8:	2310      	movs	r3, #16
 80094da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094de:	e07e      	b.n	80095de <UART_SetConfig+0x312>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a23      	ldr	r2, [pc, #140]	; (8009574 <UART_SetConfig+0x2a8>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d146      	bne.n	8009578 <UART_SetConfig+0x2ac>
 80094ea:	4b21      	ldr	r3, [pc, #132]	; (8009570 <UART_SetConfig+0x2a4>)
 80094ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f0:	f003 030c 	and.w	r3, r3, #12
 80094f4:	2b0c      	cmp	r3, #12
 80094f6:	d82d      	bhi.n	8009554 <UART_SetConfig+0x288>
 80094f8:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <UART_SetConfig+0x234>)
 80094fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fe:	bf00      	nop
 8009500:	08009535 	.word	0x08009535
 8009504:	08009555 	.word	0x08009555
 8009508:	08009555 	.word	0x08009555
 800950c:	08009555 	.word	0x08009555
 8009510:	08009545 	.word	0x08009545
 8009514:	08009555 	.word	0x08009555
 8009518:	08009555 	.word	0x08009555
 800951c:	08009555 	.word	0x08009555
 8009520:	0800953d 	.word	0x0800953d
 8009524:	08009555 	.word	0x08009555
 8009528:	08009555 	.word	0x08009555
 800952c:	08009555 	.word	0x08009555
 8009530:	0800954d 	.word	0x0800954d
 8009534:	2300      	movs	r3, #0
 8009536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800953a:	e050      	b.n	80095de <UART_SetConfig+0x312>
 800953c:	2302      	movs	r3, #2
 800953e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009542:	e04c      	b.n	80095de <UART_SetConfig+0x312>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800954a:	e048      	b.n	80095de <UART_SetConfig+0x312>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009552:	e044      	b.n	80095de <UART_SetConfig+0x312>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800955a:	e040      	b.n	80095de <UART_SetConfig+0x312>
 800955c:	00989680 	.word	0x00989680
 8009560:	0800c1e8 	.word	0x0800c1e8
 8009564:	40008000 	.word	0x40008000
 8009568:	efff69f3 	.word	0xefff69f3
 800956c:	40013800 	.word	0x40013800
 8009570:	40021000 	.word	0x40021000
 8009574:	40004400 	.word	0x40004400
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4aa0      	ldr	r2, [pc, #640]	; (8009800 <UART_SetConfig+0x534>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d12a      	bne.n	80095d8 <UART_SetConfig+0x30c>
 8009582:	4ba0      	ldr	r3, [pc, #640]	; (8009804 <UART_SetConfig+0x538>)
 8009584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800958c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009590:	d01a      	beq.n	80095c8 <UART_SetConfig+0x2fc>
 8009592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009596:	d81b      	bhi.n	80095d0 <UART_SetConfig+0x304>
 8009598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800959c:	d00c      	beq.n	80095b8 <UART_SetConfig+0x2ec>
 800959e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095a2:	d815      	bhi.n	80095d0 <UART_SetConfig+0x304>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <UART_SetConfig+0x2e4>
 80095a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ac:	d008      	beq.n	80095c0 <UART_SetConfig+0x2f4>
 80095ae:	e00f      	b.n	80095d0 <UART_SetConfig+0x304>
 80095b0:	2300      	movs	r3, #0
 80095b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095b6:	e012      	b.n	80095de <UART_SetConfig+0x312>
 80095b8:	2302      	movs	r3, #2
 80095ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095be:	e00e      	b.n	80095de <UART_SetConfig+0x312>
 80095c0:	2304      	movs	r3, #4
 80095c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095c6:	e00a      	b.n	80095de <UART_SetConfig+0x312>
 80095c8:	2308      	movs	r3, #8
 80095ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095ce:	e006      	b.n	80095de <UART_SetConfig+0x312>
 80095d0:	2310      	movs	r3, #16
 80095d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095d6:	e002      	b.n	80095de <UART_SetConfig+0x312>
 80095d8:	2310      	movs	r3, #16
 80095da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a87      	ldr	r2, [pc, #540]	; (8009800 <UART_SetConfig+0x534>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d17a      	bne.n	80096de <UART_SetConfig+0x412>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095ec:	2b08      	cmp	r3, #8
 80095ee:	d824      	bhi.n	800963a <UART_SetConfig+0x36e>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <UART_SetConfig+0x32c>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	0800963b 	.word	0x0800963b
 8009600:	08009625 	.word	0x08009625
 8009604:	0800963b 	.word	0x0800963b
 8009608:	0800962b 	.word	0x0800962b
 800960c:	0800963b 	.word	0x0800963b
 8009610:	0800963b 	.word	0x0800963b
 8009614:	0800963b 	.word	0x0800963b
 8009618:	08009633 	.word	0x08009633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800961c:	f7fe f9b8 	bl	8007990 <HAL_RCC_GetPCLK1Freq>
 8009620:	61f8      	str	r0, [r7, #28]
        break;
 8009622:	e010      	b.n	8009646 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009624:	4b78      	ldr	r3, [pc, #480]	; (8009808 <UART_SetConfig+0x53c>)
 8009626:	61fb      	str	r3, [r7, #28]
        break;
 8009628:	e00d      	b.n	8009646 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800962a:	f7fe f919 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800962e:	61f8      	str	r0, [r7, #28]
        break;
 8009630:	e009      	b.n	8009646 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009636:	61fb      	str	r3, [r7, #28]
        break;
 8009638:	e005      	b.n	8009646 <UART_SetConfig+0x37a>
      default:
        pclk = 0U;
 800963a:	2300      	movs	r3, #0
 800963c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 8102 	beq.w	8009852 <UART_SetConfig+0x586>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	4613      	mov	r3, r2
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	4413      	add	r3, r2
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	429a      	cmp	r2, r3
 800965c:	d305      	bcc.n	800966a <UART_SetConfig+0x39e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	429a      	cmp	r2, r3
 8009668:	d903      	bls.n	8009672 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009670:	e0ef      	b.n	8009852 <UART_SetConfig+0x586>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	2200      	movs	r2, #0
 8009676:	461c      	mov	r4, r3
 8009678:	4615      	mov	r5, r2
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	f04f 0300 	mov.w	r3, #0
 8009682:	022b      	lsls	r3, r5, #8
 8009684:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009688:	0222      	lsls	r2, r4, #8
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	6849      	ldr	r1, [r1, #4]
 800968e:	0849      	lsrs	r1, r1, #1
 8009690:	2000      	movs	r0, #0
 8009692:	4688      	mov	r8, r1
 8009694:	4681      	mov	r9, r0
 8009696:	eb12 0a08 	adds.w	sl, r2, r8
 800969a:	eb43 0b09 	adc.w	fp, r3, r9
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ac:	4650      	mov	r0, sl
 80096ae:	4659      	mov	r1, fp
 80096b0:	f7f6 fd8c 	bl	80001cc <__aeabi_uldivmod>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4613      	mov	r3, r2
 80096ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096c2:	d308      	bcc.n	80096d6 <UART_SetConfig+0x40a>
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ca:	d204      	bcs.n	80096d6 <UART_SetConfig+0x40a>
        {
          huart->Instance->BRR = usartdiv;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	60da      	str	r2, [r3, #12]
 80096d4:	e0bd      	b.n	8009852 <UART_SetConfig+0x586>
        }
        else
        {
          ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80096dc:	e0b9      	b.n	8009852 <UART_SetConfig+0x586>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e6:	d15e      	bne.n	80097a6 <UART_SetConfig+0x4da>
  {
    switch (clocksource)
 80096e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d828      	bhi.n	8009742 <UART_SetConfig+0x476>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <UART_SetConfig+0x42c>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	0800971d 	.word	0x0800971d
 80096fc:	08009725 	.word	0x08009725
 8009700:	0800972d 	.word	0x0800972d
 8009704:	08009743 	.word	0x08009743
 8009708:	08009733 	.word	0x08009733
 800970c:	08009743 	.word	0x08009743
 8009710:	08009743 	.word	0x08009743
 8009714:	08009743 	.word	0x08009743
 8009718:	0800973b 	.word	0x0800973b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800971c:	f7fe f938 	bl	8007990 <HAL_RCC_GetPCLK1Freq>
 8009720:	61f8      	str	r0, [r7, #28]
        break;
 8009722:	e014      	b.n	800974e <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009724:	f7fe f94a 	bl	80079bc <HAL_RCC_GetPCLK2Freq>
 8009728:	61f8      	str	r0, [r7, #28]
        break;
 800972a:	e010      	b.n	800974e <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800972c:	4b36      	ldr	r3, [pc, #216]	; (8009808 <UART_SetConfig+0x53c>)
 800972e:	61fb      	str	r3, [r7, #28]
        break;
 8009730:	e00d      	b.n	800974e <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009732:	f7fe f895 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 8009736:	61f8      	str	r0, [r7, #28]
        break;
 8009738:	e009      	b.n	800974e <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800973a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800973e:	61fb      	str	r3, [r7, #28]
        break;
 8009740:	e005      	b.n	800974e <UART_SetConfig+0x482>
      default:
        pclk = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800974c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d07e      	beq.n	8009852 <UART_SetConfig+0x586>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	005a      	lsls	r2, r3, #1
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	085b      	lsrs	r3, r3, #1
 800975e:	441a      	add	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	fbb2 f3f3 	udiv	r3, r2, r3
 8009768:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	2b0f      	cmp	r3, #15
 800976e:	d916      	bls.n	800979e <UART_SetConfig+0x4d2>
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009776:	d212      	bcs.n	800979e <UART_SetConfig+0x4d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	b29b      	uxth	r3, r3
 800977c:	f023 030f 	bic.w	r3, r3, #15
 8009780:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	085b      	lsrs	r3, r3, #1
 8009786:	b29b      	uxth	r3, r3
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	b29a      	uxth	r2, r3
 800978e:	8afb      	ldrh	r3, [r7, #22]
 8009790:	4313      	orrs	r3, r2
 8009792:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	8afa      	ldrh	r2, [r7, #22]
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	e059      	b.n	8009852 <UART_SetConfig+0x586>
      }
      else
      {
        ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80097a4:	e055      	b.n	8009852 <UART_SetConfig+0x586>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097aa:	2b08      	cmp	r3, #8
 80097ac:	d82e      	bhi.n	800980c <UART_SetConfig+0x540>
 80097ae:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <UART_SetConfig+0x4e8>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	080097d9 	.word	0x080097d9
 80097b8:	080097e1 	.word	0x080097e1
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	0800980d 	.word	0x0800980d
 80097c4:	080097ef 	.word	0x080097ef
 80097c8:	0800980d 	.word	0x0800980d
 80097cc:	0800980d 	.word	0x0800980d
 80097d0:	0800980d 	.word	0x0800980d
 80097d4:	080097f7 	.word	0x080097f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097d8:	f7fe f8da 	bl	8007990 <HAL_RCC_GetPCLK1Freq>
 80097dc:	61f8      	str	r0, [r7, #28]
        break;
 80097de:	e01b      	b.n	8009818 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097e0:	f7fe f8ec 	bl	80079bc <HAL_RCC_GetPCLK2Freq>
 80097e4:	61f8      	str	r0, [r7, #28]
        break;
 80097e6:	e017      	b.n	8009818 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097e8:	4b07      	ldr	r3, [pc, #28]	; (8009808 <UART_SetConfig+0x53c>)
 80097ea:	61fb      	str	r3, [r7, #28]
        break;
 80097ec:	e014      	b.n	8009818 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097ee:	f7fe f837 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 80097f2:	61f8      	str	r0, [r7, #28]
        break;
 80097f4:	e010      	b.n	8009818 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097fa:	61fb      	str	r3, [r7, #28]
        break;
 80097fc:	e00c      	b.n	8009818 <UART_SetConfig+0x54c>
 80097fe:	bf00      	nop
 8009800:	40008000 	.word	0x40008000
 8009804:	40021000 	.word	0x40021000
 8009808:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009816:	bf00      	nop
    }

    if (pclk != 0U)
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d019      	beq.n	8009852 <UART_SetConfig+0x586>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	085a      	lsrs	r2, r3, #1
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	441a      	add	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009830:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b0f      	cmp	r3, #15
 8009836:	d909      	bls.n	800984c <UART_SetConfig+0x580>
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800983e:	d205      	bcs.n	800984c <UART_SetConfig+0x580>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60da      	str	r2, [r3, #12]
 800984a:	e002      	b.n	8009852 <UART_SetConfig+0x586>
      }
      else
      {
        ret = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800985e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009862:	4618      	mov	r0, r3
 8009864:	3728      	adds	r7, #40	; 0x28
 8009866:	46bd      	mov	sp, r7
 8009868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800986c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	2bff      	cmp	r3, #255	; 0xff
 800987a:	d904      	bls.n	8009886 <UART_AdvFeatureConfig+0x1a>
 800987c:	f640 5142 	movw	r1, #3394	; 0xd42
 8009880:	4893      	ldr	r0, [pc, #588]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 8009882:	f7fb fac6 	bl	8004e12 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	f003 0308 	and.w	r3, r3, #8
 800988e:	2b00      	cmp	r3, #0
 8009890:	d018      	beq.n	80098c4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <UART_AdvFeatureConfig+0x42>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a2:	d004      	beq.n	80098ae <UART_AdvFeatureConfig+0x42>
 80098a4:	f640 5147 	movw	r1, #3399	; 0xd47
 80098a8:	4889      	ldr	r0, [pc, #548]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 80098aa:	f7fb fab2 	bl	8004e12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d018      	beq.n	8009902 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d009      	beq.n	80098ec <UART_AdvFeatureConfig+0x80>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098e0:	d004      	beq.n	80098ec <UART_AdvFeatureConfig+0x80>
 80098e2:	f640 514e 	movw	r1, #3406	; 0xd4e
 80098e6:	487a      	ldr	r0, [pc, #488]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 80098e8:	f7fb fa93 	bl	8004e12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d018      	beq.n	8009940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	2b00      	cmp	r3, #0
 8009914:	d009      	beq.n	800992a <UART_AdvFeatureConfig+0xbe>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800991e:	d004      	beq.n	800992a <UART_AdvFeatureConfig+0xbe>
 8009920:	f640 5155 	movw	r1, #3413	; 0xd55
 8009924:	486a      	ldr	r0, [pc, #424]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 8009926:	f7fb fa74 	bl	8004e12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d018      	beq.n	800997e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009950:	2b00      	cmp	r3, #0
 8009952:	d009      	beq.n	8009968 <UART_AdvFeatureConfig+0xfc>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009958:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800995c:	d004      	beq.n	8009968 <UART_AdvFeatureConfig+0xfc>
 800995e:	f640 515c 	movw	r1, #3420	; 0xd5c
 8009962:	485b      	ldr	r0, [pc, #364]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 8009964:	f7fb fa55 	bl	8004e12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	f003 0310 	and.w	r3, r3, #16
 8009986:	2b00      	cmp	r3, #0
 8009988:	d018      	beq.n	80099bc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998e:	2b00      	cmp	r3, #0
 8009990:	d009      	beq.n	80099a6 <UART_AdvFeatureConfig+0x13a>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999a:	d004      	beq.n	80099a6 <UART_AdvFeatureConfig+0x13a>
 800999c:	f640 5163 	movw	r1, #3427	; 0xd63
 80099a0:	484b      	ldr	r0, [pc, #300]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 80099a2:	f7fb fa36 	bl	8004e12 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d018      	beq.n	80099fa <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d009      	beq.n	80099e4 <UART_AdvFeatureConfig+0x178>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d8:	d004      	beq.n	80099e4 <UART_AdvFeatureConfig+0x178>
 80099da:	f640 516a 	movw	r1, #3434	; 0xd6a
 80099de:	483c      	ldr	r0, [pc, #240]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 80099e0:	f7fb fa17 	bl	8004e12 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	430a      	orrs	r2, r1
 80099f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d04f      	beq.n	8009aa6 <UART_AdvFeatureConfig+0x23a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a32      	ldr	r2, [pc, #200]	; (8009ad4 <UART_AdvFeatureConfig+0x268>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d009      	beq.n	8009a24 <UART_AdvFeatureConfig+0x1b8>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a30      	ldr	r2, [pc, #192]	; (8009ad8 <UART_AdvFeatureConfig+0x26c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d004      	beq.n	8009a24 <UART_AdvFeatureConfig+0x1b8>
 8009a1a:	f640 5171 	movw	r1, #3441	; 0xd71
 8009a1e:	482c      	ldr	r0, [pc, #176]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 8009a20:	f7fb f9f7 	bl	8004e12 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d009      	beq.n	8009a40 <UART_AdvFeatureConfig+0x1d4>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a34:	d004      	beq.n	8009a40 <UART_AdvFeatureConfig+0x1d4>
 8009a36:	f640 5172 	movw	r1, #3442	; 0xd72
 8009a3a:	4825      	ldr	r0, [pc, #148]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 8009a3c:	f7fb f9e9 	bl	8004e12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	430a      	orrs	r2, r1
 8009a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a5e:	d122      	bne.n	8009aa6 <UART_AdvFeatureConfig+0x23a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d013      	beq.n	8009a90 <UART_AdvFeatureConfig+0x224>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a70:	d00e      	beq.n	8009a90 <UART_AdvFeatureConfig+0x224>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a7a:	d009      	beq.n	8009a90 <UART_AdvFeatureConfig+0x224>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a84:	d004      	beq.n	8009a90 <UART_AdvFeatureConfig+0x224>
 8009a86:	f640 5177 	movw	r1, #3447	; 0xd77
 8009a8a:	4811      	ldr	r0, [pc, #68]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 8009a8c:	f7fb f9c1 	bl	8004e12 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d01f      	beq.n	8009af2 <UART_AdvFeatureConfig+0x286>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d010      	beq.n	8009adc <UART_AdvFeatureConfig+0x270>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009abe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ac2:	d00b      	beq.n	8009adc <UART_AdvFeatureConfig+0x270>
 8009ac4:	f640 517f 	movw	r1, #3455	; 0xd7f
 8009ac8:	4801      	ldr	r0, [pc, #4]	; (8009ad0 <UART_AdvFeatureConfig+0x264>)
 8009aca:	f7fb f9a2 	bl	8004e12 <assert_failed>
 8009ace:	e005      	b.n	8009adc <UART_AdvFeatureConfig+0x270>
 8009ad0:	0800c1e8 	.word	0x0800c1e8
 8009ad4:	40013800 	.word	0x40013800
 8009ad8:	40004400 	.word	0x40004400
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	430a      	orrs	r2, r1
 8009af0:	605a      	str	r2, [r3, #4]
  }
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop

08009afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b098      	sub	sp, #96	; 0x60
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b0c:	f7fb fc4c 	bl	80053a8 <HAL_GetTick>
 8009b10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0308 	and.w	r3, r3, #8
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d12e      	bne.n	8009b7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f88c 	bl	8009c4c <UART_WaitOnFlagUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d021      	beq.n	8009b7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b58:	647b      	str	r3, [r7, #68]	; 0x44
 8009b5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e6      	bne.n	8009b3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e062      	b.n	8009c44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0304 	and.w	r3, r3, #4
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d149      	bne.n	8009c20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b94:	2200      	movs	r2, #0
 8009b96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f856 	bl	8009c4c <UART_WaitOnFlagUntilTimeout>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d03c      	beq.n	8009c20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	e853 3f00 	ldrex	r3, [r3]
 8009bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8009bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bcc:	e841 2300 	strex	r3, r2, [r1]
 8009bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e6      	bne.n	8009ba6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3308      	adds	r3, #8
 8009bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 0301 	bic.w	r3, r3, #1
 8009bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bf8:	61fa      	str	r2, [r7, #28]
 8009bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfc:	69b9      	ldr	r1, [r7, #24]
 8009bfe:	69fa      	ldr	r2, [r7, #28]
 8009c00:	e841 2300 	strex	r3, r2, [r1]
 8009c04:	617b      	str	r3, [r7, #20]
   return(result);
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e5      	bne.n	8009bd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e011      	b.n	8009c44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2220      	movs	r2, #32
 8009c24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2220      	movs	r2, #32
 8009c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3758      	adds	r7, #88	; 0x58
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c5c:	e049      	b.n	8009cf2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c64:	d045      	beq.n	8009cf2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c66:	f7fb fb9f 	bl	80053a8 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d302      	bcc.n	8009c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e048      	b.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0304 	and.w	r3, r3, #4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d031      	beq.n	8009cf2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f003 0308 	and.w	r3, r3, #8
 8009c98:	2b08      	cmp	r3, #8
 8009c9a:	d110      	bne.n	8009cbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f838 	bl	8009d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2208      	movs	r2, #8
 8009cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e029      	b.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ccc:	d111      	bne.n	8009cf2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 f81e 	bl	8009d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e00f      	b.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	69da      	ldr	r2, [r3, #28]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	bf0c      	ite	eq
 8009d02:	2301      	moveq	r3, #1
 8009d04:	2300      	movne	r3, #0
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	461a      	mov	r2, r3
 8009d0a:	79fb      	ldrb	r3, [r7, #7]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d0a6      	beq.n	8009c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b095      	sub	sp, #84	; 0x54
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2a:	e853 3f00 	ldrex	r3, [r3]
 8009d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d40:	643b      	str	r3, [r7, #64]	; 0x40
 8009d42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d48:	e841 2300 	strex	r3, r2, [r1]
 8009d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e6      	bne.n	8009d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	f023 0301 	bic.w	r3, r3, #1
 8009d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3308      	adds	r3, #8
 8009d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e5      	bne.n	8009d54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d118      	bne.n	8009dc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f023 0310 	bic.w	r3, r3, #16
 8009da4:	647b      	str	r3, [r7, #68]	; 0x44
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dae:	61bb      	str	r3, [r7, #24]
 8009db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	6979      	ldr	r1, [r7, #20]
 8009db4:	69ba      	ldr	r2, [r7, #24]
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	613b      	str	r3, [r7, #16]
   return(result);
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e6      	bne.n	8009d90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009dd6:	bf00      	nop
 8009dd8:	3754      	adds	r7, #84	; 0x54
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <memset>:
 8009de2:	4402      	add	r2, r0
 8009de4:	4603      	mov	r3, r0
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d100      	bne.n	8009dec <memset+0xa>
 8009dea:	4770      	bx	lr
 8009dec:	f803 1b01 	strb.w	r1, [r3], #1
 8009df0:	e7f9      	b.n	8009de6 <memset+0x4>
	...

08009df4 <__libc_init_array>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4d0d      	ldr	r5, [pc, #52]	; (8009e2c <__libc_init_array+0x38>)
 8009df8:	4c0d      	ldr	r4, [pc, #52]	; (8009e30 <__libc_init_array+0x3c>)
 8009dfa:	1b64      	subs	r4, r4, r5
 8009dfc:	10a4      	asrs	r4, r4, #2
 8009dfe:	2600      	movs	r6, #0
 8009e00:	42a6      	cmp	r6, r4
 8009e02:	d109      	bne.n	8009e18 <__libc_init_array+0x24>
 8009e04:	4d0b      	ldr	r5, [pc, #44]	; (8009e34 <__libc_init_array+0x40>)
 8009e06:	4c0c      	ldr	r4, [pc, #48]	; (8009e38 <__libc_init_array+0x44>)
 8009e08:	f000 f818 	bl	8009e3c <_init>
 8009e0c:	1b64      	subs	r4, r4, r5
 8009e0e:	10a4      	asrs	r4, r4, #2
 8009e10:	2600      	movs	r6, #0
 8009e12:	42a6      	cmp	r6, r4
 8009e14:	d105      	bne.n	8009e22 <__libc_init_array+0x2e>
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e1c:	4798      	blx	r3
 8009e1e:	3601      	adds	r6, #1
 8009e20:	e7ee      	b.n	8009e00 <__libc_init_array+0xc>
 8009e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e26:	4798      	blx	r3
 8009e28:	3601      	adds	r6, #1
 8009e2a:	e7f2      	b.n	8009e12 <__libc_init_array+0x1e>
 8009e2c:	0800c274 	.word	0x0800c274
 8009e30:	0800c274 	.word	0x0800c274
 8009e34:	0800c274 	.word	0x0800c274
 8009e38:	0800c278 	.word	0x0800c278

08009e3c <_init>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	bf00      	nop
 8009e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e42:	bc08      	pop	{r3}
 8009e44:	469e      	mov	lr, r3
 8009e46:	4770      	bx	lr

08009e48 <_fini>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr
