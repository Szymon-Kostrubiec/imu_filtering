
imu_bridge_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e04  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023dc  08009f90  08009f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c36c  0800c36c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c36c  0800c36c  0001c36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c374  0800c374  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c374  0800c374  0001c374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c378  0800c378  0001c378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800c37c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  2000000c  0800c388  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  0800c388  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b65f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003101  00000000  00000000  0003b6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  0003e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ca  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a09  00000000  00000000  000416e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022085  00000000  00000000  000640eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d19c0  00000000  00000000  00086170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f64  00000000  00000000  00157b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0015ea94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009f78 	.word	0x08009f78

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08009f78 	.word	0x08009f78

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <a_mpu9250_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu9250_read(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	607a      	str	r2, [r7, #4]
 80004d2:	461a      	mov	r2, r3
 80004d4:	460b      	mov	r3, r1
 80004d6:	72fb      	strb	r3, [r7, #11]
 80004d8:	4613      	mov	r3, r2
 80004da:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                     /* if iic interface */
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10e      	bne.n	8000504 <a_mpu9250_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	68dc      	ldr	r4, [r3, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	7818      	ldrb	r0, [r3, #0]
 80004ee:	893b      	ldrh	r3, [r7, #8]
 80004f0:	7af9      	ldrb	r1, [r7, #11]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	47a0      	blx	r4
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <a_mpu9250_read+0x38>
        {
            return 1;                                                                 /* return error */
 80004fc:	2301      	movs	r3, #1
 80004fe:	e010      	b.n	8000522 <a_mpu9250_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8000500:	2300      	movs	r3, #0
 8000502:	e00e      	b.n	8000522 <a_mpu9250_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	7afa      	ldrb	r2, [r7, #11]
 800050a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800050e:	b2d0      	uxtb	r0, r2
 8000510:	893a      	ldrh	r2, [r7, #8]
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	4798      	blx	r3
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <a_mpu9250_read+0x58>
        {
            return 1;                                                                 /* return error */
 800051c:	2301      	movs	r3, #1
 800051e:	e000      	b.n	8000522 <a_mpu9250_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8000520:	2300      	movs	r3, #0
        }
    }
}
 8000522:	4618      	mov	r0, r3
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	bd90      	pop	{r4, r7, pc}

0800052a <a_mpu9250_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu9250_write(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 800052a:	b590      	push	{r4, r7, lr}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	461a      	mov	r2, r3
 8000536:	460b      	mov	r3, r1
 8000538:	72fb      	strb	r3, [r7, #11]
 800053a:	4613      	mov	r3, r2
 800053c:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                      /* if iic interface */
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000544:	2b00      	cmp	r3, #0
 8000546:	d10e      	bne.n	8000566 <a_mpu9250_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	691c      	ldr	r4, [r3, #16]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	7818      	ldrb	r0, [r3, #0]
 8000550:	893b      	ldrh	r3, [r7, #8]
 8000552:	7af9      	ldrb	r1, [r7, #11]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	47a0      	blx	r4
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <a_mpu9250_write+0x38>
        {
            return 1;                                                                  /* return error */
 800055e:	2301      	movs	r3, #1
 8000560:	e010      	b.n	8000584 <a_mpu9250_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8000562:	2300      	movs	r3, #0
 8000564:	e00e      	b.n	8000584 <a_mpu9250_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6a1b      	ldr	r3, [r3, #32]
 800056a:	7afa      	ldrb	r2, [r7, #11]
 800056c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000570:	b2d0      	uxtb	r0, r2
 8000572:	893a      	ldrh	r2, [r7, #8]
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	4798      	blx	r3
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <a_mpu9250_write+0x58>
        {
            return 1;                                                                  /* return error */
 800057e:	2301      	movs	r3, #1
 8000580:	e000      	b.n	8000584 <a_mpu9250_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8000582:	2300      	movs	r3, #0
        }
    }
}
 8000584:	4618      	mov	r0, r3
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}

0800058c <a_mpu9250_mag_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu9250_mag_write(mpu9250_handle_t *handle, uint8_t reg, uint8_t *data)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	460b      	mov	r3, r1
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	72fb      	strb	r3, [r7, #11]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                            /* if iic interface */
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10d      	bne.n	80005c0 <a_mpu9250_mag_write+0x34>
    {
        if (handle->iic_write(AK8963_IIC_ADDRESS << 1, reg, (uint8_t *)data, 1) != 0)        /* write data */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	691c      	ldr	r4, [r3, #16]
 80005a8:	7af9      	ldrb	r1, [r7, #11]
 80005aa:	2301      	movs	r3, #1
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	2018      	movs	r0, #24
 80005b0:	47a0      	blx	r4
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <a_mpu9250_mag_write+0x30>
        {
            return 1;                                                                        /* return error */
 80005b8:	2301      	movs	r3, #1
 80005ba:	e002      	b.n	80005c2 <a_mpu9250_mag_write+0x36>
        }
        else
        {
            return 0;                                                                        /* success return 0 */
 80005bc:	2300      	movs	r3, #0
 80005be:	e000      	b.n	80005c2 <a_mpu9250_mag_write+0x36>
        }
    }
    else                                                                                     /* spi interface */
    {
        return 1;
 80005c0:	2301      	movs	r3, #1
    }
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd90      	pop	{r4, r7, pc}

080005ca <a_mpu9250_mag_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu9250_mag_read(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80005ca:	b590      	push	{r4, r7, lr}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	461a      	mov	r2, r3
 80005d6:	460b      	mov	r3, r1
 80005d8:	72fb      	strb	r3, [r7, #11]
 80005da:	4613      	mov	r3, r2
 80005dc:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                            /* if iic interface */
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10d      	bne.n	8000604 <a_mpu9250_mag_read+0x3a>
    {
        if (handle->iic_read(AK8963_IIC_ADDRESS << 1, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	68dc      	ldr	r4, [r3, #12]
 80005ec:	893b      	ldrh	r3, [r7, #8]
 80005ee:	7af9      	ldrb	r1, [r7, #11]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	2018      	movs	r0, #24
 80005f4:	47a0      	blx	r4
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <a_mpu9250_mag_read+0x36>
        {
            return 1;                                                                        /* return error */
 80005fc:	2301      	movs	r3, #1
 80005fe:	e002      	b.n	8000606 <a_mpu9250_mag_read+0x3c>
        }
        else
        {
            return 0;                                                                        /* success return 0 */
 8000600:	2300      	movs	r3, #0
 8000602:	e000      	b.n	8000606 <a_mpu9250_mag_read+0x3c>
        }
    }
    else                                                                                     /* spi interface */
    {
        return 1;
 8000604:	2301      	movs	r3, #1
    }
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bd90      	pop	{r4, r7, pc}

0800060e <a_mpu9250_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu9250_deinit(mpu9250_handle_t *handle)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)        /* if iic interface */
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800061c:	2b00      	cmp	r3, #0
 800061e:	d109      	bne.n	8000634 <a_mpu9250_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	4798      	blx	r3
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <a_mpu9250_deinit+0x22>
        {
            return 1;                                    /* return error */
 800062c:	2301      	movs	r3, #1
 800062e:	e00a      	b.n	8000646 <a_mpu9250_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8000630:	2300      	movs	r3, #0
 8000632:	e008      	b.n	8000646 <a_mpu9250_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <a_mpu9250_deinit+0x36>
        {
            return 1;                                    /* return error */
 8000640:	2301      	movs	r3, #1
 8000642:	e000      	b.n	8000646 <a_mpu9250_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8000644:	2300      	movs	r3, #0
        }
    }
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <mpu9250_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu9250_set_interface(mpu9250_handle_t *handle, mpu9250_interface_t interface)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <mpu9250_set_interface+0x16>
    {
        return 2;                                /* return error */
 8000660:	2302      	movs	r3, #2
 8000662:	e004      	b.n	800066e <mpu9250_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	78fa      	ldrb	r2, [r7, #3]
 8000668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return 0;                                    /* success return 0 */
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <mpu9250_get_interface>:
 *             - 0 success
 *             - 2 handle is NULL
 * @note       none
 */
uint8_t mpu9250_get_interface(mpu9250_handle_t *handle, mpu9250_interface_t *interface)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	6039      	str	r1, [r7, #0]
    if (handle == NULL)                                         /* check handle */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <mpu9250_get_interface+0x14>
    {
        return 2;                                               /* return error */
 800068a:	2302      	movs	r3, #2
 800068c:	e005      	b.n	800069a <mpu9250_get_interface+0x20>
    }
    
    *interface = (mpu9250_interface_t)(handle->iic_spi);        /* get interface */
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	701a      	strb	r2, [r3, #0]
    
    return 0;                                                   /* success return 0 */
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <mpu9250_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu9250_set_addr_pin(mpu9250_handle_t *handle, mpu9250_address_t addr_pin)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	460b      	mov	r3, r1
 80006b0:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d101      	bne.n	80006bc <mpu9250_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 80006b8:	2302      	movs	r3, #2
 80006ba:	e003      	b.n	80006c4 <mpu9250_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	78fa      	ldrb	r2, [r7, #3]
 80006c0:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <mpu9250_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu9250_init(mpu9250_handle_t *handle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <mpu9250_init+0x12>
    {
        return 2;                                                                   /* return error */
 80006de:	2302      	movs	r3, #2
 80006e0:	e0da      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <mpu9250_init+0x1e>
    {
        return 3;                                                                   /* return error */
 80006ea:	2303      	movs	r3, #3
 80006ec:	e0d4      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d105      	bne.n	8000702 <mpu9250_init+0x32>
    {
        handle->debug_print("mpu9250: iic_init is null.\n");                        /* iic_init is null */
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006fa:	4869      	ldr	r0, [pc, #420]	; (80008a0 <mpu9250_init+0x1d0>)
 80006fc:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80006fe:	2303      	movs	r3, #3
 8000700:	e0ca      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d105      	bne.n	8000716 <mpu9250_init+0x46>
    {
        handle->debug_print("mpu9250: iic_deinit is null.\n");                      /* iic_deinit is null */
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070e:	4865      	ldr	r0, [pc, #404]	; (80008a4 <mpu9250_init+0x1d4>)
 8000710:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000712:	2303      	movs	r3, #3
 8000714:	e0c0      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d105      	bne.n	800072a <mpu9250_init+0x5a>
    {
        handle->debug_print("mpu9250: iic_read is null.\n");                        /* iic_read is null */
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000722:	4861      	ldr	r0, [pc, #388]	; (80008a8 <mpu9250_init+0x1d8>)
 8000724:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000726:	2303      	movs	r3, #3
 8000728:	e0b6      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <mpu9250_init+0x6e>
    {
        handle->debug_print("mpu9250: iic_write is null.\n");                       /* iic_write is null */
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000736:	485d      	ldr	r0, [pc, #372]	; (80008ac <mpu9250_init+0x1dc>)
 8000738:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800073a:	2303      	movs	r3, #3
 800073c:	e0ac      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d105      	bne.n	8000752 <mpu9250_init+0x82>
    {
        handle->debug_print("mpu9250: spi_init is null.\n");                        /* spi_init is null */
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074a:	4859      	ldr	r0, [pc, #356]	; (80008b0 <mpu9250_init+0x1e0>)
 800074c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800074e:	2303      	movs	r3, #3
 8000750:	e0a2      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d105      	bne.n	8000766 <mpu9250_init+0x96>
    {
        handle->debug_print("mpu9250: spi_deinit is null.\n");                      /* spi_deinit is null */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075e:	4855      	ldr	r0, [pc, #340]	; (80008b4 <mpu9250_init+0x1e4>)
 8000760:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000762:	2303      	movs	r3, #3
 8000764:	e098      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d105      	bne.n	800077a <mpu9250_init+0xaa>
    {
        handle->debug_print("mpu9250: spi_read is null.\n");                        /* spi_read is null */
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000772:	4851      	ldr	r0, [pc, #324]	; (80008b8 <mpu9250_init+0x1e8>)
 8000774:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000776:	2303      	movs	r3, #3
 8000778:	e08e      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d105      	bne.n	800078e <mpu9250_init+0xbe>
    {
        handle->debug_print("mpu9250: spi_write is null.\n");                       /* spi_write is null */
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	484d      	ldr	r0, [pc, #308]	; (80008bc <mpu9250_init+0x1ec>)
 8000788:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800078a:	2303      	movs	r3, #3
 800078c:	e084      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000792:	2b00      	cmp	r3, #0
 8000794:	d105      	bne.n	80007a2 <mpu9250_init+0xd2>
    {
        handle->debug_print("mpu9250: delay_ms is null.\n");                        /* delay_ms is null */
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079a:	4849      	ldr	r0, [pc, #292]	; (80008c0 <mpu9250_init+0x1f0>)
 800079c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800079e:	2303      	movs	r3, #3
 80007a0:	e07a      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d105      	bne.n	80007b6 <mpu9250_init+0xe6>
    {
        handle->debug_print("mpu9250: receive_callback is null.\n");                /* receive_callback is null */
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ae:	4845      	ldr	r0, [pc, #276]	; (80008c4 <mpu9250_init+0x1f4>)
 80007b0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80007b2:	2303      	movs	r3, #3
 80007b4:	e070      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                   /* if iic interface */
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10d      	bne.n	80007dc <mpu9250_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4798      	blx	r3
 80007c6:	4603      	mov	r3, r0
 80007c8:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80007ca:	7afb      	ldrb	r3, [r7, #11]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d013      	beq.n	80007f8 <mpu9250_init+0x128>
        {
            handle->debug_print("mpu9250: iic init failed.\n");                     /* iic init failed */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d4:	483c      	ldr	r0, [pc, #240]	; (80008c8 <mpu9250_init+0x1f8>)
 80007d6:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80007d8:	2301      	movs	r3, #1
 80007da:	e05d      	b.n	8000898 <mpu9250_init+0x1c8>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	4798      	blx	r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d005      	beq.n	80007f8 <mpu9250_init+0x128>
        {
            handle->debug_print("mpu9250: spi init failed.\n");                     /* spi init failed */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	4836      	ldr	r0, [pc, #216]	; (80008cc <mpu9250_init+0x1fc>)
 80007f2:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80007f4:	2301      	movs	r3, #1
 80007f6:	e04f      	b.n	8000898 <mpu9250_init+0x1c8>
//        (void)a_mpu9250_deinit(handle);                                             /* iic or spi deinit */
//
//        return 5;                                                                   /* return error */
//    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	72bb      	strb	r3, [r7, #10]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 80007fc:	f107 020a 	add.w	r2, r7, #10
 8000800:	2301      	movs	r3, #1
 8000802:	216b      	movs	r1, #107	; 0x6b
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fe90 	bl	800052a <a_mpu9250_write>
 800080a:	4603      	mov	r3, r0
 800080c:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800080e:	7afb      	ldrb	r3, [r7, #11]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <mpu9250_init+0x156>
    {
        handle->debug_print("mpu9250: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000818:	482d      	ldr	r0, [pc, #180]	; (80008d0 <mpu9250_init+0x200>)
 800081a:	4798      	blx	r3
        (void)a_mpu9250_deinit(handle);                                             /* iic or spi deinit */
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fef6 	bl	800060e <a_mpu9250_deinit>
        
        return 4;                                                                   /* return error */
 8000822:	2304      	movs	r3, #4
 8000824:	e038      	b.n	8000898 <mpu9250_init+0x1c8>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082a:	200a      	movs	r0, #10
 800082c:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 800082e:	2364      	movs	r3, #100	; 0x64
 8000830:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8000832:	e029      	b.n	8000888 <mpu9250_init+0x1b8>
    {
        res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 8000834:	f107 020a 	add.w	r2, r7, #10
 8000838:	2301      	movs	r3, #1
 800083a:	216b      	movs	r1, #107	; 0x6b
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff fe43 	bl	80004c8 <a_mpu9250_read>
 8000842:	4603      	mov	r3, r0
 8000844:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8000846:	7afb      	ldrb	r3, [r7, #11]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d008      	beq.n	800085e <mpu9250_init+0x18e>
        {
            handle->debug_print("mpu9250: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	4820      	ldr	r0, [pc, #128]	; (80008d4 <mpu9250_init+0x204>)
 8000852:	4798      	blx	r3
            (void)a_mpu9250_deinit(handle);                                         /* iic or spi deinit */
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff feda 	bl	800060e <a_mpu9250_deinit>
            
            return 4;                                                               /* return error */
 800085a:	2304      	movs	r3, #4
 800085c:	e01c      	b.n	8000898 <mpu9250_init+0x1c8>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 800085e:	7abb      	ldrb	r3, [r7, #10]
 8000860:	b25b      	sxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	db09      	blt.n	800087a <mpu9250_init+0x1aa>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            
            return 0;                                                               /* success return 0 */
 8000876:	2300      	movs	r3, #0
 8000878:	e00e      	b.n	8000898 <mpu9250_init+0x1c8>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087e:	200a      	movs	r0, #10
 8000880:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3b01      	subs	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1d2      	bne.n	8000834 <mpu9250_init+0x164>
    }
    
    handle->debug_print("mpu9250: reset failed.\n");                                /* reset failed */
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <mpu9250_init+0x208>)
 8000894:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 8000896:	2304      	movs	r3, #4
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	0800a3ac 	.word	0x0800a3ac
 80008a4:	0800a3c8 	.word	0x0800a3c8
 80008a8:	0800a3e8 	.word	0x0800a3e8
 80008ac:	0800a404 	.word	0x0800a404
 80008b0:	0800a424 	.word	0x0800a424
 80008b4:	0800a440 	.word	0x0800a440
 80008b8:	0800a460 	.word	0x0800a460
 80008bc:	0800a47c 	.word	0x0800a47c
 80008c0:	0800a49c 	.word	0x0800a49c
 80008c4:	0800a4b8 	.word	0x0800a4b8
 80008c8:	0800a4dc 	.word	0x0800a4dc
 80008cc:	0800a4f8 	.word	0x0800a4f8
 80008d0:	0800a514 	.word	0x0800a514
 80008d4:	0800a538 	.word	0x0800a538
 80008d8:	0800a55c 	.word	0x0800a55c

080008dc <mpu9250_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu9250_deinit(mpu9250_handle_t *handle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d101      	bne.n	80008ee <mpu9250_deinit+0x12>
    {
        return 2;                                                               /* return error */
 80008ea:	2302      	movs	r3, #2
 80008ec:	e031      	b.n	8000952 <mpu9250_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d001      	beq.n	80008fc <mpu9250_deinit+0x20>
    {
        return 3;                                                               /* return error */
 80008f8:	2303      	movs	r3, #3
 80008fa:	e02a      	b.n	8000952 <mpu9250_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 80008fc:	234f      	movs	r3, #79	; 0x4f
 80008fe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8000900:	f107 020e 	add.w	r2, r7, #14
 8000904:	2301      	movs	r3, #1
 8000906:	216b      	movs	r1, #107	; 0x6b
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fe0e 	bl	800052a <a_mpu9250_write>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <mpu9250_deinit+0x48>
    {
        handle->debug_print("mpu9250: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	480f      	ldr	r0, [pc, #60]	; (800095c <mpu9250_deinit+0x80>)
 800091e:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 8000920:	2304      	movs	r3, #4
 8000922:	e016      	b.n	8000952 <mpu9250_deinit+0x76>
    }
    res = a_mpu9250_deinit(handle);                                             /* deinit */
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fe72 	bl	800060e <a_mpu9250_deinit>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <mpu9250_deinit+0x64>
    {
        handle->debug_print("mpu9250: deinit failed.\n");                       /* deinit failed */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <mpu9250_deinit+0x84>)
 800093a:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 800093c:	2301      	movs	r3, #1
 800093e:	e008      	b.n	8000952 <mpu9250_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    return 0;                                                                   /* success return 0 */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	0800a514 	.word	0x0800a514
 8000960:	0800a574 	.word	0x0800a574

08000964 <mpu9250_read>:
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     int16_t (*mag_raw)[3], float (*mag_ut)[3],
                     uint16_t *len
                    )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <mpu9250_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8000978:	2302      	movs	r3, #2
 800097a:	f001 bd65 	b.w	8002448 <mpu9250_read+0x1ae4>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000984:	2b01      	cmp	r3, #1
 8000986:	d002      	beq.n	800098e <mpu9250_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8000988:	2303      	movs	r3, #3
 800098a:	f001 bd5d 	b.w	8002448 <mpu9250_read+0x1ae4>
    }
    if ((*len) == 0)                                                                               /* check length */
 800098e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d106      	bne.n	80009a4 <mpu9250_read+0x40>
    {
        handle->debug_print("mpu9250: length is zero.\n");                                         /* length is zero */
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099a:	4873      	ldr	r0, [pc, #460]	; (8000b68 <mpu9250_read+0x204>)
 800099c:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 800099e:	2304      	movs	r3, #4
 80009a0:	f001 bd52 	b.w	8002448 <mpu9250_read+0x1ae4>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d006      	beq.n	80009bc <mpu9250_read+0x58>
    {
        handle->debug_print("mpu9250: dmp is running.\n");                                         /* dmp is running */
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	486e      	ldr	r0, [pc, #440]	; (8000b6c <mpu9250_read+0x208>)
 80009b4:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 80009b6:	2305      	movs	r3, #5
 80009b8:	f001 bd46 	b.w	8002448 <mpu9250_read+0x1ae4>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 80009bc:	f107 0217 	add.w	r2, r7, #23
 80009c0:	2301      	movs	r3, #1
 80009c2:	216a      	movs	r1, #106	; 0x6a
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff fd7f 	bl	80004c8 <a_mpu9250_read>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 80009d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d006      	beq.n	80009e6 <mpu9250_read+0x82>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                                  /* read user ctrl failed */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009dc:	4864      	ldr	r0, [pc, #400]	; (8000b70 <mpu9250_read+0x20c>)
 80009de:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 80009e0:	2301      	movs	r3, #1
 80009e2:	f001 bd31 	b.w	8002448 <mpu9250_read+0x1ae4>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 80009e6:	f107 0216 	add.w	r2, r7, #22
 80009ea:	2301      	movs	r3, #1
 80009ec:	211c      	movs	r1, #28
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff fd6a 	bl	80004c8 <a_mpu9250_read>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 80009fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d006      	beq.n	8000a10 <mpu9250_read+0xac>
    {
        handle->debug_print("mpu9250: read accel config failed.\n");                               /* read accel config failed */
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	485b      	ldr	r0, [pc, #364]	; (8000b74 <mpu9250_read+0x210>)
 8000a08:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f001 bd1c 	b.w	8002448 <mpu9250_read+0x1ae4>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 8000a10:	f107 0215 	add.w	r2, r7, #21
 8000a14:	2301      	movs	r3, #1
 8000a16:	211b      	movs	r1, #27
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff fd55 	bl	80004c8 <a_mpu9250_read>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 8000a24:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <mpu9250_read+0xd6>
    {
        handle->debug_print("mpu9250: read gyro config failed.\n");                                /* read gyro config failed */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a30:	4851      	ldr	r0, [pc, #324]	; (8000b78 <mpu9250_read+0x214>)
 8000a32:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8000a34:	2301      	movs	r3, #1
 8000a36:	f001 bd07 	b.w	8002448 <mpu9250_read+0x1ae4>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 8000a3a:	7dbb      	ldrb	r3, [r7, #22]
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	75bb      	strb	r3, [r7, #22]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 8000a48:	7d7b      	ldrb	r3, [r7, #21]
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	757b      	strb	r3, [r7, #21]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f001 81fb 	beq.w	8001e58 <mpu9250_read+0x14f4>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu9250_read(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 8000a62:	f107 0214 	add.w	r2, r7, #20
 8000a66:	2301      	movs	r3, #1
 8000a68:	2123      	movs	r1, #35	; 0x23
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff fd2c 	bl	80004c8 <a_mpu9250_read>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8000a76:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d006      	beq.n	8000a8c <mpu9250_read+0x128>
        {
            handle->debug_print("mpu9250: read fifo enable failed.\n");                            /* read fifo enable failed */
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	483e      	ldr	r0, [pc, #248]	; (8000b7c <mpu9250_read+0x218>)
 8000a84:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8000a86:	2301      	movs	r3, #1
 8000a88:	f001 bcde 	b.w	8002448 <mpu9250_read+0x1ae4>
        }
        if ((conf != 0x78) && (conf != 0x79))                                                      /* check the conf */
 8000a8c:	7d3b      	ldrb	r3, [r7, #20]
 8000a8e:	2b78      	cmp	r3, #120	; 0x78
 8000a90:	d009      	beq.n	8000aa6 <mpu9250_read+0x142>
 8000a92:	7d3b      	ldrb	r3, [r7, #20]
 8000a94:	2b79      	cmp	r3, #121	; 0x79
 8000a96:	d006      	beq.n	8000aa6 <mpu9250_read+0x142>
        {
            handle->debug_print("mpu9250: fifo conf is error.\n");                                 /* fifo conf is error */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	4838      	ldr	r0, [pc, #224]	; (8000b80 <mpu9250_read+0x21c>)
 8000a9e:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	f001 bcd1 	b.w	8002448 <mpu9250_read+0x1ae4>
        }
        
        res = a_mpu9250_read(handle, MPU9250_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 8000aa6:	f107 0210 	add.w	r2, r7, #16
 8000aaa:	2302      	movs	r3, #2
 8000aac:	2172      	movs	r1, #114	; 0x72
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fd0a 	bl	80004c8 <a_mpu9250_read>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8000aba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <mpu9250_read+0x16c>
        {
            handle->debug_print("mpu9250: read fifo count failed.\n");                             /* read fifo count failed */
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	482f      	ldr	r0, [pc, #188]	; (8000b84 <mpu9250_read+0x220>)
 8000ac8:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8000aca:	2301      	movs	r3, #1
 8000acc:	f001 bcbc 	b.w	8002448 <mpu9250_read+0x1ae4>
        }
        
        if (conf == 0x78)                                                                          /* only acc and gyro */
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	2b78      	cmp	r3, #120	; 0x78
 8000ad4:	f040 8443 	bne.w	800135e <mpu9250_read+0x9fa>
        {
            count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                  /* set count */
 8000ad8:	7c3b      	ldrb	r3, [r7, #16]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	7c7b      	ldrb	r3, [r7, #17]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < 1024) ? count : 1024;                                                 /* just the counter */
 8000ae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aee:	bf28      	it	cs
 8000af0:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8000af4:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < ((*len) * 12)) ? count : ((*len) * 12);                               /* just outer buffer size */
 8000af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	461a      	mov	r2, r3
 8000b06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	bfa8      	it	ge
 8000b0c:	4613      	movge	r3, r2
 8000b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count / 12) * 12;                                                             /* 12 times */
 8000b10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b12:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <mpu9250_read+0x224>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	0052      	lsls	r2, r2, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	84fb      	strh	r3, [r7, #38]	; 0x26
            *len = count / 12;                                                                     /* set the output length */
 8000b26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <mpu9250_read+0x224>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	08db      	lsrs	r3, r3, #3
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b34:	801a      	strh	r2, [r3, #0]
            res = a_mpu9250_read(handle, MPU9250_REG_R_W, handle->buf, count);                     /* read data */
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8000b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b3e:	2174      	movs	r1, #116	; 0x74
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f7ff fcc1 	bl	80004c8 <a_mpu9250_read>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 8000b4c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <mpu9250_read+0x1fe>
            {
                handle->debug_print("mpu9250: read failed.\n");                                    /* read failed */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <mpu9250_read+0x228>)
 8000b5a:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	f001 bc73 	b.w	8002448 <mpu9250_read+0x1ae4>
            }
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8000b62:	2300      	movs	r3, #0
 8000b64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000b66:	e3f1      	b.n	800134c <mpu9250_read+0x9e8>
 8000b68:	0800a590 	.word	0x0800a590
 8000b6c:	0800a09c 	.word	0x0800a09c
 8000b70:	0800a364 	.word	0x0800a364
 8000b74:	0800a31c 	.word	0x0800a31c
 8000b78:	0800a340 	.word	0x0800a340
 8000b7c:	0800a5ac 	.word	0x0800a5ac
 8000b80:	0800a5d0 	.word	0x0800a5d0
 8000b84:	0800a2a0 	.word	0x0800a2a0
 8000b88:	aaaaaaab 	.word	0xaaaaaaab
 8000b8c:	0800a2c4 	.word	0x0800a2c4
 8000b90:	46800000 	.word	0x46800000
 8000b94:	46000000 	.word	0x46000000
            {
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8000b98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 1];                              /* set raw accel x */
 8000bb0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	3301      	adds	r3, #1
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bc4:	b219      	sxth	r1, r3
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8000bc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	ea40 0201 	orr.w	r2, r0, r1
 8000bda:	b212      	sxth	r2, r2
 8000bdc:	801a      	strh	r2, [r3, #0]
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8000bde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	3302      	adds	r3, #2
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4413      	add	r3, r2
 8000bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 3];                              /* set raw accel y */
 8000bf6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	3303      	adds	r3, #3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c0a:	b219      	sxth	r1, r3
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8000c0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	461a      	mov	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	ea40 0201 	orr.w	r2, r0, r1
 8000c20:	b212      	sxth	r2, r2
 8000c22:	805a      	strh	r2, [r3, #2]
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8000c24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	3304      	adds	r3, #4
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 5];                              /* set raw accel z */
 8000c3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	3305      	adds	r3, #5
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c50:	b219      	sxth	r1, r3
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8000c52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	4413      	add	r3, r2
 8000c62:	ea40 0201 	orr.w	r2, r0, r1
 8000c66:	b212      	sxth	r2, r2
 8000c68:	809a      	strh	r2, [r3, #4]
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8000c6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	3306      	adds	r3, #6
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4413      	add	r3, r2
 8000c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 7];                               /* set raw gyro x */
 8000c82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	3307      	adds	r3, #7
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c96:	b219      	sxth	r1, r3
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8000c98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	ea40 0201 	orr.w	r2, r0, r1
 8000cac:	b212      	sxth	r2, r2
 8000cae:	801a      	strh	r2, [r3, #0]
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8000cb0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	3308      	adds	r3, #8
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 9];                               /* set raw gyro y */
 8000cc8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	3309      	adds	r3, #9
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cdc:	b219      	sxth	r1, r3
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8000cde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	461a      	mov	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	ea40 0201 	orr.w	r2, r0, r1
 8000cf2:	b212      	sxth	r2, r2
 8000cf4:	805a      	strh	r2, [r3, #2]
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8000cf6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	330a      	adds	r3, #10
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 11];                              /* set raw gyro z */
 8000d0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	330b      	adds	r3, #11
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d22:	b219      	sxth	r1, r3
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8000d24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	461a      	mov	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	ea40 0201 	orr.w	r2, r0, r1
 8000d38:	b212      	sxth	r2, r2
 8000d3a:	809a      	strh	r2, [r3, #4]
                mag_raw[i][0] = 0;                                                                 /* set 0 */
 8000d3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d3e:	4613      	mov	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	461a      	mov	r2, r3
 8000d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d4a:	4413      	add	r3, r2
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	801a      	strh	r2, [r3, #0]
                mag_raw[i][1] = 0;                                                                 /* set 0 */
 8000d50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d5e:	4413      	add	r3, r2
 8000d60:	2200      	movs	r2, #0
 8000d62:	805a      	strh	r2, [r3, #2]
                mag_raw[i][2] = 0;                                                                 /* set 0 */
 8000d64:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	461a      	mov	r2, r3
 8000d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d72:	4413      	add	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	809a      	strh	r2, [r3, #4]
                
                if (accel_conf == 0)                                                               /* ±2g */
 8000d78:	7dbb      	ldrb	r3, [r7, #22]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d154      	bne.n	8000e28 <mpu9250_read+0x4c4>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                           /* set accel x */
 8000d7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	461a      	mov	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	ed5f 6a87 	vldr	s13, [pc, #-540]	; 8000b90 <mpu9250_read+0x22c>
 8000dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db2:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                           /* set accel y */
 8000db6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dca:	ee07 3a90 	vmov	s15, r3
 8000dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	ed5f 6a95 	vldr	s13, [pc, #-596]	; 8000b90 <mpu9250_read+0x22c>
 8000de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dea:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                           /* set accel z */
 8000dee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e02:	ee07 3a90 	vmov	s15, r3
 8000e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	461a      	mov	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	ed5f 6aa3 	vldr	s13, [pc, #-652]	; 8000b90 <mpu9250_read+0x22c>
 8000e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e22:	edc3 7a02 	vstr	s15, [r3, #8]
 8000e26:	e103      	b.n	8001030 <mpu9250_read+0x6cc>
                }
                else if (accel_conf == 1)                                                          /* ±4g */
 8000e28:	7dbb      	ldrb	r3, [r7, #22]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d154      	bne.n	8000ed8 <mpu9250_read+0x574>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                            /* set accel x */
 8000e2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	461a      	mov	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	ed5f 6ab2 	vldr	s13, [pc, #-712]	; 8000b94 <mpu9250_read+0x230>
 8000e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e62:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                            /* set accel y */
 8000e66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	461a      	mov	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	ed5f 6ac0 	vldr	s13, [pc, #-768]	; 8000b94 <mpu9250_read+0x230>
 8000e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e9a:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                            /* set accel z */
 8000e9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4413      	add	r3, r2
 8000eae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001190 <mpu9250_read+0x82c>
 8000ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ed6:	e0ab      	b.n	8001030 <mpu9250_read+0x6cc>
                }
                else if (accel_conf == 2)                                                          /* ±8g */
 8000ed8:	7dbb      	ldrb	r3, [r7, #22]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d154      	bne.n	8000f88 <mpu9250_read+0x624>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                            /* set accel x */
 8000ede:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4413      	add	r3, r2
 8000eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	461a      	mov	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8001194 <mpu9250_read+0x830>
 8000f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f12:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                            /* set accel y */
 8000f16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	461a      	mov	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	4413      	add	r3, r2
 8000f26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001194 <mpu9250_read+0x830>
 8000f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4a:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                            /* set accel z */
 8000f4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	461a      	mov	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	eddf 6a86 	vldr	s13, [pc, #536]	; 8001194 <mpu9250_read+0x830>
 8000f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f82:	edc3 7a02 	vstr	s15, [r3, #8]
 8000f86:	e053      	b.n	8001030 <mpu9250_read+0x6cc>
                }
                else                                                                               /* ±16g */
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                            /* set accel x */
 8000f88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4413      	add	r3, r2
 8000f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001198 <mpu9250_read+0x834>
 8000fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbc:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                            /* set accel y */
 8000fc0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fdc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001198 <mpu9250_read+0x834>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                            /* set accel z */
 8000ff8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	461a      	mov	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4413      	add	r3, r2
 8001008:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001014:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001198 <mpu9250_read+0x834>
 8001028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102c:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                
                if (gyro_conf == 0)                                                                /* ±250dps */
 8001030:	7d7b      	ldrb	r3, [r7, #21]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d154      	bne.n	80010e0 <mpu9250_read+0x77c>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                             /* set gyro x */
 8001036:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	461a      	mov	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001052:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	461a      	mov	r2, r3
 800105e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001060:	4413      	add	r3, r2
 8001062:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800119c <mpu9250_read+0x838>
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                             /* set gyro y */
 800106e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	461a      	mov	r2, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	461a      	mov	r2, r3
 8001096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001098:	4413      	add	r3, r2
 800109a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800119c <mpu9250_read+0x838>
 800109e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a2:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                             /* set gyro z */
 80010a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	461a      	mov	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	461a      	mov	r2, r3
 80010ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d0:	4413      	add	r3, r2
 80010d2:	eddf 6a32 	vldr	s13, [pc, #200]	; 800119c <mpu9250_read+0x838>
 80010d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010da:	edc3 7a02 	vstr	s15, [r3, #8]
 80010de:	e111      	b.n	8001304 <mpu9250_read+0x9a0>
                }
                else if (gyro_conf == 1)                                                           /* ±500dps */
 80010e0:	7d7b      	ldrb	r3, [r7, #21]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d162      	bne.n	80011ac <mpu9250_read+0x848>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                              /* set gyro x */
 80010e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	461a      	mov	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001102:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	461a      	mov	r2, r3
 800110e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001110:	4413      	add	r3, r2
 8001112:	eddf 6a23 	vldr	s13, [pc, #140]	; 80011a0 <mpu9250_read+0x83c>
 8001116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111a:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                              /* set gyro y */
 800111e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	461a      	mov	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	4413      	add	r3, r2
 800112e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	461a      	mov	r2, r3
 8001146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001148:	4413      	add	r3, r2
 800114a:	eddf 6a15 	vldr	s13, [pc, #84]	; 80011a0 <mpu9250_read+0x83c>
 800114e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001152:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                              /* set gyro z */
 8001156:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	461a      	mov	r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001172:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	461a      	mov	r2, r3
 800117e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001180:	4413      	add	r3, r2
 8001182:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011a0 <mpu9250_read+0x83c>
 8001186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118a:	edc3 7a02 	vstr	s15, [r3, #8]
 800118e:	e0b9      	b.n	8001304 <mpu9250_read+0x9a0>
 8001190:	46000000 	.word	0x46000000
 8001194:	45800000 	.word	0x45800000
 8001198:	45000000 	.word	0x45000000
 800119c:	43030000 	.word	0x43030000
 80011a0:	42830000 	.word	0x42830000
 80011a4:	42033333 	.word	0x42033333
 80011a8:	41833333 	.word	0x41833333
                }
                else if (gyro_conf == 2)                                                           /* ±1000dps */
 80011ac:	7d7b      	ldrb	r3, [r7, #21]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d154      	bne.n	800125c <mpu9250_read+0x8f8>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                              /* set gyro x */
 80011b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	461a      	mov	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	461a      	mov	r2, r3
 80011da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011dc:	4413      	add	r3, r2
 80011de:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 80011a4 <mpu9250_read+0x840>
 80011e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e6:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                              /* set gyro y */
 80011ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	461a      	mov	r2, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001206:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	461a      	mov	r2, r3
 8001212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001214:	4413      	add	r3, r2
 8001216:	ed5f 6a1d 	vldr	s13, [pc, #-116]	; 80011a4 <mpu9250_read+0x840>
 800121a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121e:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                              /* set gyro z */
 8001222:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	461a      	mov	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	461a      	mov	r2, r3
 800124a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800124c:	4413      	add	r3, r2
 800124e:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 80011a4 <mpu9250_read+0x840>
 8001252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001256:	edc3 7a02 	vstr	s15, [r3, #8]
 800125a:	e053      	b.n	8001304 <mpu9250_read+0x9a0>
                }
                else                                                                               /* ±2000dps */
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                              /* set gyro x */
 800125c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	461a      	mov	r2, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	4413      	add	r3, r2
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001278:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	461a      	mov	r2, r3
 8001284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001286:	4413      	add	r3, r2
 8001288:	ed5f 6a39 	vldr	s13, [pc, #-228]	; 80011a8 <mpu9250_read+0x844>
 800128c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001290:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                              /* set gyro y */
 8001294:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	461a      	mov	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	461a      	mov	r2, r3
 80012bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012be:	4413      	add	r3, r2
 80012c0:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80011a8 <mpu9250_read+0x844>
 80012c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c8:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                              /* set gyro z */
 80012cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	461a      	mov	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	461a      	mov	r2, r3
 80012f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f6:	4413      	add	r3, r2
 80012f8:	ed5f 6a55 	vldr	s13, [pc, #-340]	; 80011a8 <mpu9250_read+0x844>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                mag_ut[i][0] = 0.0f;                                                               /* set 0.0f */
 8001304:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	461a      	mov	r2, r3
 8001310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001312:	4413      	add	r3, r2
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
                mag_ut[i][1] = 0.0f;                                                               /* set 0.0f */
 800131a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	461a      	mov	r2, r3
 8001326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001328:	4413      	add	r3, r2
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
                mag_ut[i][2] = 0.0f;                                                               /* set 0.0f */
 8001330:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	461a      	mov	r2, r3
 800133c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800133e:	4413      	add	r3, r2
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8001346:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001348:	3301      	adds	r3, #1
 800134a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800134c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001352:	429a      	cmp	r2, r3
 8001354:	f4ff ac20 	bcc.w	8000b98 <mpu9250_read+0x234>
            }
            
            return 0;                                                                              /* success return 0 */
 8001358:	2300      	movs	r3, #0
 800135a:	f001 b875 	b.w	8002448 <mpu9250_read+0x1ae4>
        {
            float mag_k_x;
            float mag_k_y;
            float mag_k_z;
            
            count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                  /* set count */
 800135e:	7c3b      	ldrb	r3, [r7, #16]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b21a      	sxth	r2, r3
 8001364:	7c7b      	ldrb	r3, [r7, #17]
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21b      	sxth	r3, r3
 800136c:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < 1024) ? count : 1024;                                                 /* just the counter */
 800136e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001374:	bf28      	it	cs
 8001376:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800137a:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < ((*len) * 20)) ? count : ((*len) * 20);                               /* just outer buffer size */
 800137c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	461a      	mov	r2, r3
 800138c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800138e:	4293      	cmp	r3, r2
 8001390:	bfa8      	it	ge
 8001392:	4613      	movge	r3, r2
 8001394:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count / 20) * 20;                                                             /* 20 times */
 8001396:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001398:	4a3b      	ldr	r2, [pc, #236]	; (8001488 <mpu9250_read+0xb24>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	84fb      	strh	r3, [r7, #38]	; 0x26
            *len = count / 20;                                                                     /* set the output length */
 80013ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ae:	4a36      	ldr	r2, [pc, #216]	; (8001488 <mpu9250_read+0xb24>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ba:	801a      	strh	r2, [r3, #0]
            res = a_mpu9250_read(handle, MPU9250_REG_R_W, handle->buf, count);                     /* read data */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80013c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013c4:	2174      	movs	r1, #116	; 0x74
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff f87e 	bl	80004c8 <a_mpu9250_read>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 80013d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <mpu9250_read+0xa84>
            {
                handle->debug_print("mpu9250: read failed.\n");                                    /* read failed */
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	482b      	ldr	r0, [pc, #172]	; (800148c <mpu9250_read+0xb28>)
 80013e0:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 80013e2:	2301      	movs	r3, #1
 80013e4:	f001 b830 	b.w	8002448 <mpu9250_read+0x1ae4>
            }
            
            mag_k_x = ((float)handle->mag_asa[0] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the x sensitivity adjustment */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001490 <mpu9250_read+0xb2c>
 80013fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001402:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001406:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001490 <mpu9250_read+0xb2c>
 800140a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001416:	edc7 7a08 	vstr	s15, [r7, #32]
            mag_k_y = ((float)handle->mag_asa[1] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the y sensitivity adjustment */
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001490 <mpu9250_read+0xb2c>
 800142c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001430:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001434:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001438:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001490 <mpu9250_read+0xb2c>
 800143c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001448:	edc7 7a07 	vstr	s15, [r7, #28]
            mag_k_z = ((float)handle->mag_asa[2] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the z sensitivity adjustment */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800145a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001490 <mpu9250_read+0xb2c>
 800145e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001462:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001466:	ee27 7a87 	vmul.f32	s14, s15, s14
 800146a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001490 <mpu9250_read+0xb2c>
 800146e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001476:	ee77 7a87 	vadd.f32	s15, s15, s14
 800147a:	edc7 7a06 	vstr	s15, [r7, #24]
            
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 800147e:	2300      	movs	r3, #0
 8001480:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001482:	f000 bce1 	b.w	8001e48 <mpu9250_read+0x14e4>
 8001486:	bf00      	nop
 8001488:	cccccccd 	.word	0xcccccccd
 800148c:	0800a2c4 	.word	0x0800a2c4
 8001490:	43000000 	.word	0x43000000
 8001494:	46800000 	.word	0x46800000
            {
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 0] << 8) | 
 8001498:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 1];                              /* set raw accel x */
 80014b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	3301      	adds	r3, #1
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014c4:	b219      	sxth	r1, r3
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 0] << 8) | 
 80014c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	461a      	mov	r2, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	ea40 0201 	orr.w	r2, r0, r1
 80014da:	b212      	sxth	r2, r2
 80014dc:	801a      	strh	r2, [r3, #0]
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 2] << 8) | 
 80014de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 3];                              /* set raw accel y */
 80014f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	3303      	adds	r3, #3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800150a:	b219      	sxth	r1, r3
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 2] << 8) | 
 800150c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	461a      	mov	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4413      	add	r3, r2
 800151c:	ea40 0201 	orr.w	r2, r0, r1
 8001520:	b212      	sxth	r2, r2
 8001522:	805a      	strh	r2, [r3, #2]
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 4] << 8) | 
 8001524:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	3304      	adds	r3, #4
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 5];                              /* set raw accel z */
 800153c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	3305      	adds	r3, #5
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001550:	b219      	sxth	r1, r3
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 4] << 8) | 
 8001552:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	461a      	mov	r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4413      	add	r3, r2
 8001562:	ea40 0201 	orr.w	r2, r0, r1
 8001566:	b212      	sxth	r2, r2
 8001568:	809a      	strh	r2, [r3, #4]
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 6] << 8) | 
 800156a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	3306      	adds	r3, #6
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 7];                               /* set raw gyro x */
 8001582:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	3307      	adds	r3, #7
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001596:	b219      	sxth	r1, r3
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 6] << 8) | 
 8001598:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	461a      	mov	r2, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	ea40 0201 	orr.w	r2, r0, r1
 80015ac:	b212      	sxth	r2, r2
 80015ae:	801a      	strh	r2, [r3, #0]
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 8] << 8) | 
 80015b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3308      	adds	r3, #8
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 9];                               /* set raw gyro y */
 80015c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	3309      	adds	r3, #9
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015dc:	b219      	sxth	r1, r3
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 8] << 8) | 
 80015de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	461a      	mov	r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	ea40 0201 	orr.w	r2, r0, r1
 80015f2:	b212      	sxth	r2, r2
 80015f4:	805a      	strh	r2, [r3, #2]
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 10] << 8) | 
 80015f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	330a      	adds	r3, #10
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 11];                              /* set raw gyro z */
 800160e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	330b      	adds	r3, #11
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001622:	b219      	sxth	r1, r3
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 10] << 8) | 
 8001624:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	461a      	mov	r2, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	ea40 0201 	orr.w	r2, r0, r1
 8001638:	b212      	sxth	r2, r2
 800163a:	809a      	strh	r2, [r3, #4]
                mag_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 14] << 8) | 
 800163c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	330e      	adds	r3, #14
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 13];                               /* set raw mag x */
 8001654:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	330d      	adds	r3, #13
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001668:	b219      	sxth	r1, r3
                mag_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 14] << 8) | 
 800166a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	461a      	mov	r2, r3
 8001676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001678:	4413      	add	r3, r2
 800167a:	ea40 0201 	orr.w	r2, r0, r1
 800167e:	b212      	sxth	r2, r2
 8001680:	801a      	strh	r2, [r3, #0]
                mag_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 16] << 8) | 
 8001682:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	3310      	adds	r3, #16
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 15];                               /* set raw mag y */
 800169a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	330f      	adds	r3, #15
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016ae:	b219      	sxth	r1, r3
                mag_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 16] << 8) | 
 80016b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	461a      	mov	r2, r3
 80016bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016be:	4413      	add	r3, r2
 80016c0:	ea40 0201 	orr.w	r2, r0, r1
 80016c4:	b212      	sxth	r2, r2
 80016c6:	805a      	strh	r2, [r3, #2]
                mag_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 18] << 8) | 
 80016c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	3312      	adds	r3, #18
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 17];                               /* set raw mag z */
 80016e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	3311      	adds	r3, #17
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016f4:	b219      	sxth	r1, r3
                mag_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 18] << 8) | 
 80016f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	461a      	mov	r2, r3
 8001702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001704:	4413      	add	r3, r2
 8001706:	ea40 0201 	orr.w	r2, r0, r1
 800170a:	b212      	sxth	r2, r2
 800170c:	809a      	strh	r2, [r3, #4]
                
                if (accel_conf == 0)                                                               /* ±2g */
 800170e:	7dbb      	ldrb	r3, [r7, #22]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d154      	bne.n	80017be <mpu9250_read+0xe5a>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                           /* set accel x */
 8001714:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	461a      	mov	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4413      	add	r3, r2
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 8001494 <mpu9250_read+0xb30>
 8001744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001748:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                           /* set accel y */
 800174c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001768:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	ed5f 6aba 	vldr	s13, [pc, #-744]	; 8001494 <mpu9250_read+0xb30>
 800177c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001780:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                           /* set accel z */
 8001784:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	461a      	mov	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4413      	add	r3, r2
 8001794:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 8001494 <mpu9250_read+0xb30>
 80017b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b8:	edc3 7a02 	vstr	s15, [r3, #8]
 80017bc:	e103      	b.n	80019c6 <mpu9250_read+0x1062>
                }
                else if (accel_conf == 1)                                                          /* ±4g */
 80017be:	7dbb      	ldrb	r3, [r7, #22]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d154      	bne.n	800186e <mpu9250_read+0xf0a>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                            /* set accel x */
 80017c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4413      	add	r3, r2
 80017d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	eddf 6acd 	vldr	s13, [pc, #820]	; 8001b28 <mpu9250_read+0x11c4>
 80017f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f8:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                            /* set accel y */
 80017fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001818:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	eddf 6abf 	vldr	s13, [pc, #764]	; 8001b28 <mpu9250_read+0x11c4>
 800182c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001830:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                            /* set accel z */
 8001834:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	461a      	mov	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001850:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	461a      	mov	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001b28 <mpu9250_read+0x11c4>
 8001864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001868:	edc3 7a02 	vstr	s15, [r3, #8]
 800186c:	e0ab      	b.n	80019c6 <mpu9250_read+0x1062>
                }
                else if (accel_conf == 2)                                                          /* ±8g */
 800186e:	7dbb      	ldrb	r3, [r7, #22]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d154      	bne.n	800191e <mpu9250_read+0xfba>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                            /* set accel x */
 8001874:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	461a      	mov	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001890:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8001b2c <mpu9250_read+0x11c8>
 80018a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a8:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                            /* set accel y */
 80018ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	461a      	mov	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4413      	add	r3, r2
 80018bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001b2c <mpu9250_read+0x11c8>
 80018dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e0:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                            /* set accel z */
 80018e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	461a      	mov	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4413      	add	r3, r2
 80018f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001900:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	eddf 6a86 	vldr	s13, [pc, #536]	; 8001b2c <mpu9250_read+0x11c8>
 8001914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001918:	edc3 7a02 	vstr	s15, [r3, #8]
 800191c:	e053      	b.n	80019c6 <mpu9250_read+0x1062>
                }
                else                                                                               /* ±16g */
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                            /* set accel x */
 800191e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	4413      	add	r3, r2
 800192e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	461a      	mov	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001b30 <mpu9250_read+0x11cc>
 800194e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001952:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                            /* set accel y */
 8001956:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	4413      	add	r3, r2
 8001966:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001972:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	461a      	mov	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001b30 <mpu9250_read+0x11cc>
 8001986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198a:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                            /* set accel z */
 800198e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4413      	add	r3, r2
 800199e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001b30 <mpu9250_read+0x11cc>
 80019be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c2:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                
                if (gyro_conf == 0)                                                                /* ±250dps */
 80019c6:	7d7b      	ldrb	r3, [r7, #21]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d154      	bne.n	8001a76 <mpu9250_read+0x1112>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                             /* set gyro x */
 80019cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	461a      	mov	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	461a      	mov	r2, r3
 80019f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f6:	4413      	add	r3, r2
 80019f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001b34 <mpu9250_read+0x11d0>
 80019fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a00:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                             /* set gyro y */
 8001a04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	461a      	mov	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a20:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a2e:	4413      	add	r3, r2
 8001a30:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001b34 <mpu9250_read+0x11d0>
 8001a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a38:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                             /* set gyro z */
 8001a3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	461a      	mov	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a58:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a66:	4413      	add	r3, r2
 8001a68:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001b34 <mpu9250_read+0x11d0>
 8001a6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a70:	edc3 7a02 	vstr	s15, [r3, #8]
 8001a74:	e116      	b.n	8001ca4 <mpu9250_read+0x1340>
                }
                else if (gyro_conf == 1)                                                           /* ±500dps */
 8001a76:	7d7b      	ldrb	r3, [r7, #21]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d167      	bne.n	8001b4c <mpu9250_read+0x11e8>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                              /* set gyro x */
 8001a7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	461a      	mov	r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa6:	4413      	add	r3, r2
 8001aa8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001b38 <mpu9250_read+0x11d4>
 8001aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab0:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                              /* set gyro y */
 8001ab4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	461a      	mov	r2, r3
 8001adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ade:	4413      	add	r3, r2
 8001ae0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001b38 <mpu9250_read+0x11d4>
 8001ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae8:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                              /* set gyro z */
 8001aec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	461a      	mov	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	461a      	mov	r2, r3
 8001b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b16:	4413      	add	r3, r2
 8001b18:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001b38 <mpu9250_read+0x11d4>
 8001b1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b20:	edc3 7a02 	vstr	s15, [r3, #8]
 8001b24:	e0be      	b.n	8001ca4 <mpu9250_read+0x1340>
 8001b26:	bf00      	nop
 8001b28:	46000000 	.word	0x46000000
 8001b2c:	45800000 	.word	0x45800000
 8001b30:	45000000 	.word	0x45000000
 8001b34:	43030000 	.word	0x43030000
 8001b38:	42830000 	.word	0x42830000
 8001b3c:	42033333 	.word	0x42033333
 8001b40:	41833333 	.word	0x41833333
 8001b44:	3e19999a 	.word	0x3e19999a
 8001b48:	3f19999a 	.word	0x3f19999a
                }
                else if (gyro_conf == 2)                                                           /* ±1000dps */
 8001b4c:	7d7b      	ldrb	r3, [r7, #21]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d154      	bne.n	8001bfc <mpu9250_read+0x1298>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                              /* set gyro x */
 8001b52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	4413      	add	r3, r2
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7c:	4413      	add	r3, r2
 8001b7e:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8001b3c <mpu9250_read+0x11d8>
 8001b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b86:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                              /* set gyro y */
 8001b8a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	461a      	mov	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb4:	4413      	add	r3, r2
 8001bb6:	ed5f 6a1f 	vldr	s13, [pc, #-124]	; 8001b3c <mpu9250_read+0x11d8>
 8001bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbe:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                              /* set gyro z */
 8001bc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	461a      	mov	r2, r3
 8001bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bec:	4413      	add	r3, r2
 8001bee:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 8001b3c <mpu9250_read+0x11d8>
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	edc3 7a02 	vstr	s15, [r3, #8]
 8001bfa:	e053      	b.n	8001ca4 <mpu9250_read+0x1340>
                }
                else                                                                               /* ±2000dps */
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                              /* set gyro x */
 8001bfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	461a      	mov	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	461a      	mov	r2, r3
 8001c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c26:	4413      	add	r3, r2
 8001c28:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8001b40 <mpu9250_read+0x11dc>
 8001c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c30:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                              /* set gyro y */
 8001c34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	461a      	mov	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed5f 6a49 	vldr	s13, [pc, #-292]	; 8001b40 <mpu9250_read+0x11dc>
 8001c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c68:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                              /* set gyro z */
 8001c6c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	461a      	mov	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	461a      	mov	r2, r3
 8001c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c96:	4413      	add	r3, r2
 8001c98:	ed5f 6a57 	vldr	s13, [pc, #-348]	; 8001b40 <mpu9250_read+0x11dc>
 8001c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca0:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                if ((handle->buf[i * 20 + 19] & (1 << 4)) != 0)                                    /* if 16 bits */
 8001ca4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	3313      	adds	r3, #19
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d060      	beq.n	8001d82 <mpu9250_read+0x141e>
                {
                    mag_ut[i][0] = (float)mag_raw[i][0] * mag_k_x * 0.15f;                         /* set the mag x */
 8001cc0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	461a      	mov	r2, r3
 8001ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cce:	4413      	add	r3, r2
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cdc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf2:	4413      	add	r3, r2
 8001cf4:	ed1f 7a6d 	vldr	s14, [pc, #-436]	; 8001b44 <mpu9250_read+0x11e0>
 8001cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
                    mag_ut[i][1] = (float)mag_raw[i][1] * mag_k_y * 0.15f;                         /* set the mag y */
 8001d00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0e:	4413      	add	r3, r2
 8001d10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d32:	4413      	add	r3, r2
 8001d34:	ed1f 7a7d 	vldr	s14, [pc, #-500]	; 8001b44 <mpu9250_read+0x11e0>
 8001d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3c:	edc3 7a01 	vstr	s15, [r3, #4]
                    mag_ut[i][2] = (float)mag_raw[i][2] * mag_k_z * 0.15f;                         /* set the mag z */
 8001d40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d4e:	4413      	add	r3, r2
 8001d50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d64:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d72:	4413      	add	r3, r2
 8001d74:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 8001b44 <mpu9250_read+0x11e0>
 8001d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d80:	e05f      	b.n	8001e42 <mpu9250_read+0x14de>
                }
                else                                                                               /* if 14 bits */
                {
                    mag_ut[i][0] = (float)mag_raw[i][0] * mag_k_x * 0.6f;                          /* set the mag x */
 8001d82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d90:	4413      	add	r3, r2
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	461a      	mov	r2, r3
 8001db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db4:	4413      	add	r3, r2
 8001db6:	ed1f 7a9c 	vldr	s14, [pc, #-624]	; 8001b48 <mpu9250_read+0x11e4>
 8001dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbe:	edc3 7a00 	vstr	s15, [r3]
                    mag_ut[i][1] = (float)mag_raw[i][1] * mag_k_y * 0.6f;                          /* set the mag y */
 8001dc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dde:	edd7 7a07 	vldr	s15, [r7, #28]
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	461a      	mov	r2, r3
 8001df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df4:	4413      	add	r3, r2
 8001df6:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 8001b48 <mpu9250_read+0x11e4>
 8001dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfe:	edc3 7a01 	vstr	s15, [r3, #4]
                    mag_ut[i][2] = (float)mag_raw[i][2] * mag_k_z * 0.6f;                          /* set the mag z */
 8001e02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e10:	4413      	add	r3, r2
 8001e12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	461a      	mov	r2, r3
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e34:	4413      	add	r3, r2
 8001e36:	ed1f 7abc 	vldr	s14, [pc, #-752]	; 8001b48 <mpu9250_read+0x11e4>
 8001e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3e:	edc3 7a02 	vstr	s15, [r3, #8]
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8001e42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e44:	3301      	adds	r3, #1
 8001e46:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	f4ff ab22 	bcc.w	8001498 <mpu9250_read+0xb34>
                }
            }
            
            return 0;                                                                              /* success return 0 */
 8001e54:	2300      	movs	r3, #0
 8001e56:	e2f7      	b.n	8002448 <mpu9250_read+0x1ae4>
        }
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8001e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	801a      	strh	r2, [r3, #0]
        res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001e64:	230e      	movs	r3, #14
 8001e66:	213b      	movs	r1, #59	; 0x3b
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7fe fb2d 	bl	80004c8 <a_mpu9250_read>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8001e74:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <mpu9250_read+0x1524>
        {
            handle->debug_print("mpu9250: read failed.\n");                                        /* read failed */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	48b0      	ldr	r0, [pc, #704]	; (8002144 <mpu9250_read+0x17e0>)
 8001e82:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8001e84:	2301      	movs	r3, #1
 8001e86:	e2df      	b.n	8002448 <mpu9250_read+0x1ae4>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 8001f24:	7dbb      	ldrb	r3, [r7, #22]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d12a      	bne.n	8001f80 <mpu9250_read+0x161c>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f38:	eddf 6a83 	vldr	s13, [pc, #524]	; 8002148 <mpu9250_read+0x17e4>
 8001f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f54:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8002148 <mpu9250_read+0x17e4>
 8001f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002148 <mpu9250_read+0x17e4>
 8001f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	edc3 7a02 	vstr	s15, [r3, #8]
 8001f7e:	e085      	b.n	800208c <mpu9250_read+0x1728>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d12a      	bne.n	8001fdc <mpu9250_read+0x1678>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f94:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800214c <mpu9250_read+0x17e8>
 8001f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb0:	eddf 6a66 	vldr	s13, [pc, #408]	; 800214c <mpu9250_read+0x17e8>
 8001fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fcc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800214c <mpu9250_read+0x17e8>
 8001fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	edc3 7a02 	vstr	s15, [r3, #8]
 8001fda:	e057      	b.n	800208c <mpu9250_read+0x1728>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 8001fdc:	7dbb      	ldrb	r3, [r7, #22]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d12a      	bne.n	8002038 <mpu9250_read+0x16d4>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002150 <mpu9250_read+0x17ec>
 8001ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8002150 <mpu9250_read+0x17ec>
 8002010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002028:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002150 <mpu9250_read+0x17ec>
 800202c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edc3 7a02 	vstr	s15, [r3, #8]
 8002036:	e029      	b.n	800208c <mpu9250_read+0x1728>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002046:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002154 <mpu9250_read+0x17f0>
 800204a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002062:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002154 <mpu9250_read+0x17f0>
 8002066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207e:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002154 <mpu9250_read+0x17f0>
 8002082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 800208c:	7d7b      	ldrb	r3, [r7, #21]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d12a      	bne.n	80020e8 <mpu9250_read+0x1784>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002158 <mpu9250_read+0x17f4>
 80020a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020aa:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020bc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002158 <mpu9250_read+0x17f4>
 80020c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c6:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002158 <mpu9250_read+0x17f4>
 80020dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80020e6:	e097      	b.n	8002218 <mpu9250_read+0x18b4>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 80020e8:	7d7b      	ldrb	r3, [r7, #21]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d13c      	bne.n	8002168 <mpu9250_read+0x1804>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020fc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800215c <mpu9250_read+0x17f8>
 8002100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002106:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002118:	eddf 6a10 	vldr	s13, [pc, #64]	; 800215c <mpu9250_read+0x17f8>
 800211c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002122:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002134:	eddf 6a09 	vldr	s13, [pc, #36]	; 800215c <mpu9250_read+0x17f8>
 8002138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800213c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002142:	e069      	b.n	8002218 <mpu9250_read+0x18b4>
 8002144:	0800a2c4 	.word	0x0800a2c4
 8002148:	46800000 	.word	0x46800000
 800214c:	46000000 	.word	0x46000000
 8002150:	45800000 	.word	0x45800000
 8002154:	45000000 	.word	0x45000000
 8002158:	43030000 	.word	0x43030000
 800215c:	42830000 	.word	0x42830000
 8002160:	42033333 	.word	0x42033333
 8002164:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 8002168:	7d7b      	ldrb	r3, [r7, #21]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d12a      	bne.n	80021c4 <mpu9250_read+0x1860>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800217c:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 8002160 <mpu9250_read+0x17fc>
 8002180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002186:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002198:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8002160 <mpu9250_read+0x17fc>
 800219c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a2:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b4:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8002160 <mpu9250_read+0x17fc>
 80021b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021be:	edc3 7a02 	vstr	s15, [r3, #8]
 80021c2:	e029      	b.n	8002218 <mpu9250_read+0x18b4>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d2:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8002164 <mpu9250_read+0x1800>
 80021d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021dc:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 8002164 <mpu9250_read+0x1800>
 80021f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f8:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220a:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8002164 <mpu9250_read+0x1800>
 800220e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002214:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        if (handle->mag_inited == 1)                                                               /* if mag is inited */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800221e:	2b01      	cmp	r3, #1
 8002220:	f040 80fc 	bne.w	800241c <mpu9250_read+0x1ab8>
        {
            float mag_k_x;
            float mag_k_y;
            float mag_k_z;
            
            res = a_mpu9250_mag_read(handle, AK8963_REG_ST1, handle->buf, 8);                      /* read the mag data */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800222a:	2308      	movs	r3, #8
 800222c:	2102      	movs	r1, #2
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7fe f9cb 	bl	80005ca <a_mpu9250_mag_read>
 8002234:	4603      	mov	r3, r0
 8002236:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 800223a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <mpu9250_read+0x18ea>
            {
                handle->debug_print("mpu9250: mag read failed.\n");                                /* mag read failed */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4882      	ldr	r0, [pc, #520]	; (8002450 <mpu9250_read+0x1aec>)
 8002248:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 800224a:	2301      	movs	r3, #1
 800224c:	e0fc      	b.n	8002448 <mpu9250_read+0x1ae4>
            }
            mag_raw[0][0] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[1];             /* set raw mag x */
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21a      	sxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800225e:	b21b      	sxth	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b21a      	sxth	r2, r3
 8002264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002266:	801a      	strh	r2, [r3, #0]
            mag_raw[0][1] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[3];             /* set raw mag y */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	b21a      	sxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21a      	sxth	r2, r3
 800227e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002280:	805a      	strh	r2, [r3, #2]
            mag_raw[0][2] = (int16_t)((uint16_t)handle->buf[6] << 8) | handle->buf[5];             /* set raw mag z */
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21a      	sxth	r2, r3
 8002298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800229a:	809a      	strh	r2, [r3, #4]

            mag_k_x = ((float)handle->mag_asa[0] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the x sensitivity adjustment */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022aa:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002454 <mpu9250_read+0x1af0>
 80022ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022ba:	eddf 6a66 	vldr	s13, [pc, #408]	; 8002454 <mpu9250_read+0x1af0>
 80022be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            mag_k_y = ((float)handle->mag_asa[1] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the y sensitivity adjustment */
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80022d4:	ee07 3a90 	vmov	s15, r3
 80022d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022dc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002454 <mpu9250_read+0x1af0>
 80022e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022ec:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002454 <mpu9250_read+0x1af0>
 80022f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            mag_k_z = ((float)handle->mag_asa[2] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the z sensitivity adjustment */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002454 <mpu9250_read+0x1af0>
 8002312:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002316:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800231a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800231e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002454 <mpu9250_read+0x1af0>
 8002322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800232a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800232e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            if ((handle->buf[7] & (1 << 4)) != 0)                                                  /* if 16 bits */
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d036      	beq.n	80023ae <mpu9250_read+0x1a4a>
            {
                mag_ut[0][0] = (float)mag_raw[0][0] * mag_k_x * 0.15f;                             /* set the mag x */
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800234e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002356:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002458 <mpu9250_read+0x1af4>
 800235a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002360:	edc3 7a00 	vstr	s15, [r3]
                mag_ut[0][1] = (float)mag_raw[0][1] * mag_k_y * 0.15f;                             /* set the mag y */
 8002364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002366:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002372:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002458 <mpu9250_read+0x1af4>
 800237e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002384:	edc3 7a01 	vstr	s15, [r3, #4]
                mag_ut[0][2] = (float)mag_raw[0][2] * mag_k_z * 0.15f;                             /* set the mag z */
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002396:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002458 <mpu9250_read+0x1af4>
 80023a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a8:	edc3 7a02 	vstr	s15, [r3, #8]
 80023ac:	e04b      	b.n	8002446 <mpu9250_read+0x1ae2>
            }
            else                                                                                   /* if 14 bits */
            {
                mag_ut[0][0] = (float)mag_raw[0][0] * mag_k_x * 0.6f;                              /* set the mag x */
 80023ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800245c <mpu9250_read+0x1af8>
 80023c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ce:	edc3 7a00 	vstr	s15, [r3]
                mag_ut[0][1] = (float)mag_raw[0][1] * mag_k_y * 0.6f;                              /* set the mag y */
 80023d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800245c <mpu9250_read+0x1af8>
 80023ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f2:	edc3 7a01 	vstr	s15, [r3, #4]
                mag_ut[0][2] = (float)mag_raw[0][2] * mag_k_z * 0.6f;                              /* set the mag z */
 80023f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002404:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800245c <mpu9250_read+0x1af8>
 8002410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002416:	edc3 7a02 	vstr	s15, [r3, #8]
 800241a:	e014      	b.n	8002446 <mpu9250_read+0x1ae2>
            }
        }
        else
        {
            mag_raw[0][0] = 0;                                                                     /* set raw mag x 0 */
 800241c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241e:	2200      	movs	r2, #0
 8002420:	801a      	strh	r2, [r3, #0]
            mag_raw[0][1] = 0;                                                                     /* set raw mag y 0 */
 8002422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002424:	2200      	movs	r2, #0
 8002426:	805a      	strh	r2, [r3, #2]
            mag_raw[0][2] = 0;                                                                     /* set raw mag z 0 */
 8002428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242a:	2200      	movs	r2, #0
 800242c:	809a      	strh	r2, [r3, #4]
            mag_ut[0][0] = 0.0f;                                                                   /* set mag x 0.0f */
 800242e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
            mag_ut[0][1] = 0.0f;                                                                   /* set mag y 0.0f */
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	605a      	str	r2, [r3, #4]
            mag_ut[0][2] = 0.0f;                                                                   /* set mag z 0.0f */
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 8002446:	2300      	movs	r3, #0
    }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3738      	adds	r7, #56	; 0x38
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	0800a5f0 	.word	0x0800a5f0
 8002454:	43000000 	.word	0x43000000
 8002458:	3e19999a 	.word	0x3e19999a
 800245c:	3f19999a 	.word	0x3f19999a

08002460 <mpu9250_mag_init>:
 *            - 5 mag id is invalid
 *            - 6 spi don't support
 * @note      none
 */
uint8_t mpu9250_mag_init(mpu9250_handle_t *handle)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    uint32_t timeout;
    
    if (handle == NULL)                                                                     /* check handle */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <mpu9250_mag_init+0x12>
    {
        return 2;                                                                           /* return error */
 800246e:	2302      	movs	r3, #2
 8002470:	e123      	b.n	80026ba <mpu9250_mag_init+0x25a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <mpu9250_mag_init+0x20>
    {
        return 3;                                                                           /* return error */
 800247c:	2303      	movs	r3, #3
 800247e:	e11c      	b.n	80026ba <mpu9250_mag_init+0x25a>
    }
    
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                           /* if iic interface */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 8112 	bne.w	80026b0 <mpu9250_mag_init+0x250>
    {
        res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);           /* read config */
 800248c:	f107 020a 	add.w	r2, r7, #10
 8002490:	2301      	movs	r3, #1
 8002492:	216a      	movs	r1, #106	; 0x6a
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7fe f817 	bl	80004c8 <a_mpu9250_read>
 800249a:	4603      	mov	r3, r0
 800249c:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800249e:	7afb      	ldrb	r3, [r7, #11]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <mpu9250_mag_init+0x50>
        {
            handle->debug_print("mpu9250: read user ctrl failed.\n");                       /* read user ctrl failed */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	4886      	ldr	r0, [pc, #536]	; (80026c4 <mpu9250_mag_init+0x264>)
 80024aa:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80024ac:	2301      	movs	r3, #1
 80024ae:	e104      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        prev &= ~(1 << 5);                                                                  /* disable iic master */
 80024b0:	7abb      	ldrb	r3, [r7, #10]
 80024b2:	f023 0320 	bic.w	r3, r3, #32
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);          /* write config */
 80024ba:	f107 020a 	add.w	r2, r7, #10
 80024be:	2301      	movs	r3, #1
 80024c0:	216a      	movs	r1, #106	; 0x6a
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe f831 	bl	800052a <a_mpu9250_write>
 80024c8:	4603      	mov	r3, r0
 80024ca:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80024cc:	7afb      	ldrb	r3, [r7, #11]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <mpu9250_mag_init+0x7e>
        {
            handle->debug_print("mpu9250: write user ctrl failed.\n");                      /* write user ctrl failed */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	487c      	ldr	r0, [pc, #496]	; (80026c8 <mpu9250_mag_init+0x268>)
 80024d8:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80024da:	2301      	movs	r3, #1
 80024dc:	e0ed      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read config */
 80024de:	f107 020a 	add.w	r2, r7, #10
 80024e2:	2301      	movs	r3, #1
 80024e4:	2137      	movs	r1, #55	; 0x37
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fd ffee 	bl	80004c8 <a_mpu9250_read>
 80024ec:	4603      	mov	r3, r0
 80024ee:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <mpu9250_mag_init+0xa2>
        {
            handle->debug_print("mpu9250: read int pin cfg failed.\n");                     /* read int pin cfg failed */
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	4874      	ldr	r0, [pc, #464]	; (80026cc <mpu9250_mag_init+0x26c>)
 80024fc:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80024fe:	2301      	movs	r3, #1
 8002500:	e0db      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        prev &= ~(1 << 1);                                                                  /* clear config */
 8002502:	7abb      	ldrb	r3, [r7, #10]
 8002504:	f023 0302 	bic.w	r3, r3, #2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	72bb      	strb	r3, [r7, #10]
        prev |= 1 << 1;                                                                     /* enable bypass */
 800250c:	7abb      	ldrb	r3, [r7, #10]
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	b2db      	uxtb	r3, r3
 8002514:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write config */
 8002516:	f107 020a 	add.w	r2, r7, #10
 800251a:	2301      	movs	r3, #1
 800251c:	2137      	movs	r1, #55	; 0x37
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe f803 	bl	800052a <a_mpu9250_write>
 8002524:	4603      	mov	r3, r0
 8002526:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <mpu9250_mag_init+0xda>
        {
            handle->debug_print("mpu9250: write int pin cfg failed.\n");                    /* write int pin cfg failed */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	4867      	ldr	r0, [pc, #412]	; (80026d0 <mpu9250_mag_init+0x270>)
 8002534:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002536:	2301      	movs	r3, #1
 8002538:	e0bf      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        
        res = a_mpu9250_mag_read(handle, AK8963_REG_WIA, (uint8_t *)&prev, 1);              /* read who am I */
 800253a:	f107 020a 	add.w	r2, r7, #10
 800253e:	2301      	movs	r3, #1
 8002540:	2100      	movs	r1, #0
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe f841 	bl	80005ca <a_mpu9250_mag_read>
 8002548:	4603      	mov	r3, r0
 800254a:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <mpu9250_mag_init+0xfe>
        {
            handle->debug_print("mpu9250: mag read who am i failed.\n");                    /* mag read who am I failed */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	485f      	ldr	r0, [pc, #380]	; (80026d4 <mpu9250_mag_init+0x274>)
 8002558:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 800255a:	2301      	movs	r3, #1
 800255c:	e0ad      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        if (prev != 0x48)                                                                   /* check the id */
 800255e:	7abb      	ldrb	r3, [r7, #10]
 8002560:	2b48      	cmp	r3, #72	; 0x48
 8002562:	d005      	beq.n	8002570 <mpu9250_mag_init+0x110>
        {
            handle->debug_print("mpu9250: mag id is invalid.\n");                           /* mag id is invalid */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	485b      	ldr	r0, [pc, #364]	; (80026d8 <mpu9250_mag_init+0x278>)
 800256a:	4798      	blx	r3
           
            return 5;                                                                       /* return error */
 800256c:	2305      	movs	r3, #5
 800256e:	e0a4      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        
        prev = 0x01;                                                                        /* set the reset command */
 8002570:	2301      	movs	r3, #1
 8002572:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL2, &prev);                         /* reset the magnetometer */
 8002574:	f107 030a 	add.w	r3, r7, #10
 8002578:	461a      	mov	r2, r3
 800257a:	210b      	movs	r1, #11
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe f805 	bl	800058c <a_mpu9250_mag_write>
 8002582:	4603      	mov	r3, r0
 8002584:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <mpu9250_mag_init+0x138>
        {
            handle->debug_print("mpu9250: mag write cntl2 failed.\n");                      /* mag write cntl2 failed */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	4852      	ldr	r0, [pc, #328]	; (80026dc <mpu9250_mag_init+0x27c>)
 8002592:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002594:	2301      	movs	r3, #1
 8002596:	e090      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        timeout = 100;                                                                      /* set timeout 1000ms */
 8002598:	2364      	movs	r3, #100	; 0x64
 800259a:	60fb      	str	r3, [r7, #12]
        while (timeout != 0)                                                                /* check the timeout */
 800259c:	e01d      	b.n	80025da <mpu9250_mag_init+0x17a>
        {
            res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL2, (uint8_t *)&prev, 1);        /* read cntl2 */
 800259e:	f107 020a 	add.w	r2, r7, #10
 80025a2:	2301      	movs	r3, #1
 80025a4:	210b      	movs	r1, #11
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe f80f 	bl	80005ca <a_mpu9250_mag_read>
 80025ac:	4603      	mov	r3, r0
 80025ae:	72fb      	strb	r3, [r7, #11]
            if (res != 0)                                                                   /* check result */
 80025b0:	7afb      	ldrb	r3, [r7, #11]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <mpu9250_mag_init+0x162>
            {
                handle->debug_print("mpu9250: mag read cntl2 failed.\n");                   /* mag read cntl2 failed */
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	4849      	ldr	r0, [pc, #292]	; (80026e0 <mpu9250_mag_init+0x280>)
 80025bc:	4798      	blx	r3
               
                return 1;                                                                   /* return error */
 80025be:	2301      	movs	r3, #1
 80025c0:	e07b      	b.n	80026ba <mpu9250_mag_init+0x25a>
            }
            if ((prev & 0x01) == 0x00)                                                      /* check finished */
 80025c2:	7abb      	ldrb	r3, [r7, #10]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <mpu9250_mag_init+0x182>
            {
                break;                                                                      /* break */
            }
            handle->delay_ms(10);                                                           /* delay 10ms */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	200a      	movs	r0, #10
 80025d2:	4798      	blx	r3
            timeout--;                                                                      /* timeout-- */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
        while (timeout != 0)                                                                /* check the timeout */
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1de      	bne.n	800259e <mpu9250_mag_init+0x13e>
 80025e0:	e000      	b.n	80025e4 <mpu9250_mag_init+0x184>
                break;                                                                      /* break */
 80025e2:	bf00      	nop
        }
        if (timeout == 0)                                                                   /* check the timeout */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <mpu9250_mag_init+0x196>
        {
            handle->debug_print("mpu9250: reset failed.\n");                                /* reset failed */
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	483d      	ldr	r0, [pc, #244]	; (80026e4 <mpu9250_mag_init+0x284>)
 80025f0:	4798      	blx	r3
           
            return 4;                                                                       /* return error */
 80025f2:	2304      	movs	r3, #4
 80025f4:	e061      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        
        prev = 0x00;                                                                        /* power down */
 80025f6:	2300      	movs	r3, #0
 80025f8:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 80025fa:	f107 030a 	add.w	r3, r7, #10
 80025fe:	461a      	mov	r2, r3
 8002600:	210a      	movs	r1, #10
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fd ffc2 	bl	800058c <a_mpu9250_mag_write>
 8002608:	4603      	mov	r3, r0
 800260a:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800260c:	7afb      	ldrb	r3, [r7, #11]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <mpu9250_mag_init+0x1be>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	4834      	ldr	r0, [pc, #208]	; (80026e8 <mpu9250_mag_init+0x288>)
 8002618:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 800261a:	2301      	movs	r3, #1
 800261c:	e04d      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        handle->delay_ms(10);                                                               /* delay 10ms */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	200a      	movs	r0, #10
 8002624:	4798      	blx	r3
        prev = 0x0F;                                                                        /* fuse rom access mode */
 8002626:	230f      	movs	r3, #15
 8002628:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 800262a:	f107 030a 	add.w	r3, r7, #10
 800262e:	461a      	mov	r2, r3
 8002630:	210a      	movs	r1, #10
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fd ffaa 	bl	800058c <a_mpu9250_mag_write>
 8002638:	4603      	mov	r3, r0
 800263a:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800263c:	7afb      	ldrb	r3, [r7, #11]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <mpu9250_mag_init+0x1ee>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	4828      	ldr	r0, [pc, #160]	; (80026e8 <mpu9250_mag_init+0x288>)
 8002648:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 800264a:	2301      	movs	r3, #1
 800264c:	e035      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        res = a_mpu9250_mag_read(handle, AK8963_REG_ASAX, handle->mag_asa, 3);              /* read the asa */
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 8002654:	2303      	movs	r3, #3
 8002656:	2110      	movs	r1, #16
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fd ffb6 	bl	80005ca <a_mpu9250_mag_read>
 800265e:	4603      	mov	r3, r0
 8002660:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <mpu9250_mag_init+0x214>
        {
            handle->debug_print("mpu9250: mag read asa failed.\n");                         /* mag read asa failed */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	481f      	ldr	r0, [pc, #124]	; (80026ec <mpu9250_mag_init+0x28c>)
 800266e:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002670:	2301      	movs	r3, #1
 8002672:	e022      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        prev = 0x00;                                                                        /* power down */
 8002674:	2300      	movs	r3, #0
 8002676:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 8002678:	f107 030a 	add.w	r3, r7, #10
 800267c:	461a      	mov	r2, r3
 800267e:	210a      	movs	r1, #10
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fd ff83 	bl	800058c <a_mpu9250_mag_write>
 8002686:	4603      	mov	r3, r0
 8002688:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800268a:	7afb      	ldrb	r3, [r7, #11]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <mpu9250_mag_init+0x23c>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	4814      	ldr	r0, [pc, #80]	; (80026e8 <mpu9250_mag_init+0x288>)
 8002696:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002698:	2301      	movs	r3, #1
 800269a:	e00e      	b.n	80026ba <mpu9250_mag_init+0x25a>
        }
        handle->delay_ms(10);                                                               /* delay 10ms */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	200a      	movs	r0, #10
 80026a2:	4798      	blx	r3
        
        handle->mag_inited = 1;                                                             /* flag inited */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        return 0;                                                                           /* success return 0 */
 80026ac:	2300      	movs	r3, #0
 80026ae:	e004      	b.n	80026ba <mpu9250_mag_init+0x25a>
    }
    else
    {
        handle->debug_print("mpu9250: spi don't support.\n");                               /* spi don't support */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	480e      	ldr	r0, [pc, #56]	; (80026f0 <mpu9250_mag_init+0x290>)
 80026b6:	4798      	blx	r3
       
        return 6;                                                                           /* return error */
 80026b8:	2306      	movs	r3, #6
    }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	0800a364 	.word	0x0800a364
 80026c8:	0800a388 	.word	0x0800a388
 80026cc:	0800a60c 	.word	0x0800a60c
 80026d0:	0800a630 	.word	0x0800a630
 80026d4:	0800a654 	.word	0x0800a654
 80026d8:	0800a678 	.word	0x0800a678
 80026dc:	0800a698 	.word	0x0800a698
 80026e0:	0800a6bc 	.word	0x0800a6bc
 80026e4:	0800a55c 	.word	0x0800a55c
 80026e8:	0800a6e0 	.word	0x0800a6e0
 80026ec:	0800a704 	.word	0x0800a704
 80026f0:	0800a724 	.word	0x0800a724

080026f4 <mpu9250_mag_deinit>:
 *             - 3 handle is not initialized
 *             - 4 mag is not inited
 * @note       none
 */
uint8_t mpu9250_mag_deinit(mpu9250_handle_t *handle)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <mpu9250_mag_deinit+0x12>
    {
        return 2;                                                                   /* return error */
 8002702:	2302      	movs	r3, #2
 8002704:	e0b3      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800270c:	2b01      	cmp	r3, #1
 800270e:	d001      	beq.n	8002714 <mpu9250_mag_deinit+0x20>
    {
        return 3;                                                                   /* return error */
 8002710:	2303      	movs	r3, #3
 8002712:	e0ac      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800271a:	2b01      	cmp	r3, #1
 800271c:	d005      	beq.n	800272a <mpu9250_mag_deinit+0x36>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	4855      	ldr	r0, [pc, #340]	; (8002878 <mpu9250_mag_deinit+0x184>)
 8002724:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 8002726:	2304      	movs	r3, #4
 8002728:	e0a1      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* read config */
 800272a:	f107 020e 	add.w	r2, r7, #14
 800272e:	2301      	movs	r3, #1
 8002730:	216a      	movs	r1, #106	; 0x6a
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fd fec8 	bl	80004c8 <a_mpu9250_read>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <mpu9250_mag_deinit+0x5a>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                   /* read user ctrl failed */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	484d      	ldr	r0, [pc, #308]	; (800287c <mpu9250_mag_deinit+0x188>)
 8002748:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800274a:	2301      	movs	r3, #1
 800274c:	e08f      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(1 << 5);                                                              /* disable iic master */
 800274e:	7bbb      	ldrb	r3, [r7, #14]
 8002750:	f023 0320 	bic.w	r3, r3, #32
 8002754:	b2db      	uxtb	r3, r3
 8002756:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);      /* write config */
 8002758:	f107 020e 	add.w	r2, r7, #14
 800275c:	2301      	movs	r3, #1
 800275e:	216a      	movs	r1, #106	; 0x6a
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fd fee2 	bl	800052a <a_mpu9250_write>
 8002766:	4603      	mov	r3, r0
 8002768:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <mpu9250_mag_deinit+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                  /* write user ctrl failed */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	4842      	ldr	r0, [pc, #264]	; (8002880 <mpu9250_mag_deinit+0x18c>)
 8002776:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002778:	2301      	movs	r3, #1
 800277a:	e078      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);     /* read config */
 800277c:	f107 020e 	add.w	r2, r7, #14
 8002780:	2301      	movs	r3, #1
 8002782:	2137      	movs	r1, #55	; 0x37
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fd fe9f 	bl	80004c8 <a_mpu9250_read>
 800278a:	4603      	mov	r3, r0
 800278c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <mpu9250_mag_deinit+0xac>
    {
        handle->debug_print("mpu9250: read int pin cfg failed.\n");                 /* read int pin cfg failed */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	483a      	ldr	r0, [pc, #232]	; (8002884 <mpu9250_mag_deinit+0x190>)
 800279a:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800279c:	2301      	movs	r3, #1
 800279e:	e066      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(1 << 1);                                                              /* clear config */
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	f023 0302 	bic.w	r3, r3, #2
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 1;                                                                 /* enable bypass */
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);    /* write config */
 80027b4:	f107 020e 	add.w	r2, r7, #14
 80027b8:	2301      	movs	r3, #1
 80027ba:	2137      	movs	r1, #55	; 0x37
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fd feb4 	bl	800052a <a_mpu9250_write>
 80027c2:	4603      	mov	r3, r0
 80027c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <mpu9250_mag_deinit+0xe4>
    {
        handle->debug_print("mpu9250: write int pin cfg failed.\n");                /* write int pin cfg failed */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	482d      	ldr	r0, [pc, #180]	; (8002888 <mpu9250_mag_deinit+0x194>)
 80027d2:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80027d4:	2301      	movs	r3, #1
 80027d6:	e04a      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_WIA, (uint8_t *)&prev, 1);          /* read who am I */
 80027d8:	f107 020e 	add.w	r2, r7, #14
 80027dc:	2301      	movs	r3, #1
 80027de:	2100      	movs	r1, #0
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7fd fef2 	bl	80005ca <a_mpu9250_mag_read>
 80027e6:	4603      	mov	r3, r0
 80027e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <mpu9250_mag_deinit+0x108>
    {
        handle->debug_print("mpu9250: mag read who am i failed.\n");                /* mag read who am I failed */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	4825      	ldr	r0, [pc, #148]	; (800288c <mpu9250_mag_deinit+0x198>)
 80027f6:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80027f8:	2301      	movs	r3, #1
 80027fa:	e038      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    if (prev != 0x48)                                                               /* check the id */
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	2b48      	cmp	r3, #72	; 0x48
 8002800:	d005      	beq.n	800280e <mpu9250_mag_deinit+0x11a>
    {
        handle->debug_print("mpu9250: mag id is invalid.\n");                       /* mag id is invalid */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	4822      	ldr	r0, [pc, #136]	; (8002890 <mpu9250_mag_deinit+0x19c>)
 8002808:	4798      	blx	r3
       
        return 5;                                                                   /* return error */
 800280a:	2305      	movs	r3, #5
 800280c:	e02f      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 800280e:	f107 020e 	add.w	r2, r7, #14
 8002812:	2301      	movs	r3, #1
 8002814:	210a      	movs	r1, #10
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fd fed7 	bl	80005ca <a_mpu9250_mag_read>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <mpu9250_mag_deinit+0x13e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	481a      	ldr	r0, [pc, #104]	; (8002894 <mpu9250_mag_deinit+0x1a0>)
 800282c:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800282e:	2301      	movs	r3, #1
 8002830:	e01d      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(0xF << 0);                                                            /* clear config */
 8002832:	7bbb      	ldrb	r3, [r7, #14]
 8002834:	f023 030f 	bic.w	r3, r3, #15
 8002838:	b2db      	uxtb	r3, r3
 800283a:	73bb      	strb	r3, [r7, #14]
    prev |= 0x00 << 0;                                                              /* set the power mode */
 800283c:	7bbb      	ldrb	r3, [r7, #14]
 800283e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 8002840:	f107 030e 	add.w	r3, r7, #14
 8002844:	461a      	mov	r2, r3
 8002846:	210a      	movs	r1, #10
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7fd fe9f 	bl	800058c <a_mpu9250_mag_write>
 800284e:	4603      	mov	r3, r0
 8002850:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <mpu9250_mag_deinit+0x170>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	480e      	ldr	r0, [pc, #56]	; (8002898 <mpu9250_mag_deinit+0x1a4>)
 800285e:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002860:	2301      	movs	r3, #1
 8002862:	e004      	b.n	800286e <mpu9250_mag_deinit+0x17a>
    }
    
    handle->mag_inited = 0;                                                         /* flag closed */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    return 0;                                                                       /* success return 0 */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	0800a744 	.word	0x0800a744
 800287c:	0800a364 	.word	0x0800a364
 8002880:	0800a388 	.word	0x0800a388
 8002884:	0800a60c 	.word	0x0800a60c
 8002888:	0800a630 	.word	0x0800a630
 800288c:	0800a654 	.word	0x0800a654
 8002890:	0800a678 	.word	0x0800a678
 8002894:	0800a764 	.word	0x0800a764
 8002898:	0800a6e0 	.word	0x0800a6e0

0800289c <mpu9250_mag_set_mode>:
 *            - 3 handle is not initialized
 *            - 4 mag is not inited
 * @note      none
 */
uint8_t mpu9250_mag_set_mode(mpu9250_handle_t *handle, mpu9250_magnetometer_mode_t mode)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <mpu9250_mag_set_mode+0x16>
    {
        return 2;                                                                   /* return error */
 80028ae:	2302      	movs	r3, #2
 80028b0:	e040      	b.n	8002934 <mpu9250_mag_set_mode+0x98>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d001      	beq.n	80028c0 <mpu9250_mag_set_mode+0x24>
    {
        return 3;                                                                   /* return error */
 80028bc:	2303      	movs	r3, #3
 80028be:	e039      	b.n	8002934 <mpu9250_mag_set_mode+0x98>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d005      	beq.n	80028d6 <mpu9250_mag_set_mode+0x3a>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	481b      	ldr	r0, [pc, #108]	; (800293c <mpu9250_mag_set_mode+0xa0>)
 80028d0:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 80028d2:	2304      	movs	r3, #4
 80028d4:	e02e      	b.n	8002934 <mpu9250_mag_set_mode+0x98>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 80028d6:	f107 020e 	add.w	r2, r7, #14
 80028da:	2301      	movs	r3, #1
 80028dc:	210a      	movs	r1, #10
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fd fe73 	bl	80005ca <a_mpu9250_mag_read>
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <mpu9250_mag_set_mode+0x5e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	4813      	ldr	r0, [pc, #76]	; (8002940 <mpu9250_mag_set_mode+0xa4>)
 80028f4:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e01c      	b.n	8002934 <mpu9250_mag_set_mode+0x98>
    }
    prev &= ~(0xF << 0);                                                            /* clear config */
 80028fa:	7bbb      	ldrb	r3, [r7, #14]
 80028fc:	f023 030f 	bic.w	r3, r3, #15
 8002900:	b2db      	uxtb	r3, r3
 8002902:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 0;                                                              /* set the mode */
 8002904:	7bba      	ldrb	r2, [r7, #14]
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	4313      	orrs	r3, r2
 800290a:	b2db      	uxtb	r3, r3
 800290c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 800290e:	f107 030e 	add.w	r3, r7, #14
 8002912:	461a      	mov	r2, r3
 8002914:	210a      	movs	r1, #10
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fd fe38 	bl	800058c <a_mpu9250_mag_write>
 800291c:	4603      	mov	r3, r0
 800291e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <mpu9250_mag_set_mode+0x96>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	4806      	ldr	r0, [pc, #24]	; (8002944 <mpu9250_mag_set_mode+0xa8>)
 800292c:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <mpu9250_mag_set_mode+0x98>
    }
    
    return 0;                                                                       /* success return 0 */
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	0800a744 	.word	0x0800a744
 8002940:	0800a764 	.word	0x0800a764
 8002944:	0800a6e0 	.word	0x0800a6e0

08002948 <mpu9250_mag_set_bits>:
 *            - 3 handle is not initialized
 *            - 4 mag is not inited
 * @note      none
 */
uint8_t mpu9250_mag_set_bits(mpu9250_handle_t *handle, mpu9250_magnetometer_bits_t bits)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <mpu9250_mag_set_bits+0x16>
    {
        return 2;                                                                   /* return error */
 800295a:	2302      	movs	r3, #2
 800295c:	e044      	b.n	80029e8 <mpu9250_mag_set_bits+0xa0>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <mpu9250_mag_set_bits+0x24>
    {
        return 3;                                                                   /* return error */
 8002968:	2303      	movs	r3, #3
 800296a:	e03d      	b.n	80029e8 <mpu9250_mag_set_bits+0xa0>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002972:	2b01      	cmp	r3, #1
 8002974:	d005      	beq.n	8002982 <mpu9250_mag_set_bits+0x3a>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	481d      	ldr	r0, [pc, #116]	; (80029f0 <mpu9250_mag_set_bits+0xa8>)
 800297c:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 800297e:	2304      	movs	r3, #4
 8002980:	e032      	b.n	80029e8 <mpu9250_mag_set_bits+0xa0>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 8002982:	f107 020e 	add.w	r2, r7, #14
 8002986:	2301      	movs	r3, #1
 8002988:	210a      	movs	r1, #10
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fd fe1d 	bl	80005ca <a_mpu9250_mag_read>
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <mpu9250_mag_set_bits+0x5e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	4815      	ldr	r0, [pc, #84]	; (80029f4 <mpu9250_mag_set_bits+0xac>)
 80029a0:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80029a2:	2301      	movs	r3, #1
 80029a4:	e020      	b.n	80029e8 <mpu9250_mag_set_bits+0xa0>
    }
    prev &= ~(1 << 4);                                                              /* clear config */
 80029a6:	7bbb      	ldrb	r3, [r7, #14]
 80029a8:	f023 0310 	bic.w	r3, r3, #16
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	73bb      	strb	r3, [r7, #14]
    prev |= bits << 4;                                                              /* set the mode */
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	b25a      	sxtb	r2, r3
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 80029c2:	f107 030e 	add.w	r3, r7, #14
 80029c6:	461a      	mov	r2, r3
 80029c8:	210a      	movs	r1, #10
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fd fdde 	bl	800058c <a_mpu9250_mag_write>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <mpu9250_mag_set_bits+0x9e>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	4806      	ldr	r0, [pc, #24]	; (80029f8 <mpu9250_mag_set_bits+0xb0>)
 80029e0:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <mpu9250_mag_set_bits+0xa0>
    }
    
    return 0;                                                                       /* success return 0 */
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	0800a744 	.word	0x0800a744
 80029f4:	0800a764 	.word	0x0800a764
 80029f8:	0800a6e0 	.word	0x0800a6e0

080029fc <mpu9250_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <mpu9250_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e039      	b.n	8002a86 <mpu9250_set_fifo+0x8a>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d001      	beq.n	8002a20 <mpu9250_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e032      	b.n	8002a86 <mpu9250_set_fifo+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8002a20:	f107 020e 	add.w	r2, r7, #14
 8002a24:	2301      	movs	r3, #1
 8002a26:	216a      	movs	r1, #106	; 0x6a
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7fd fd4d 	bl	80004c8 <a_mpu9250_read>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <mpu9250_set_fifo+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                     /* read user ctrl failed */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	4814      	ldr	r0, [pc, #80]	; (8002a90 <mpu9250_set_fifo+0x94>)
 8002a3e:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8002a40:	2301      	movs	r3, #1
 8002a42:	e020      	b.n	8002a86 <mpu9250_set_fifo+0x8a>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	b25a      	sxtb	r2, r3
 8002a54:	7bbb      	ldrb	r3, [r7, #14]
 8002a56:	b25b      	sxtb	r3, r3
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	b25b      	sxtb	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8002a60:	f107 020e 	add.w	r2, r7, #14
 8002a64:	2301      	movs	r3, #1
 8002a66:	216a      	movs	r1, #106	; 0x6a
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fd fd5e 	bl	800052a <a_mpu9250_write>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <mpu9250_set_fifo+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                    /* write user ctrl failed */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <mpu9250_set_fifo+0x98>)
 8002a7e:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <mpu9250_set_fifo+0x8a>
    }
    
    return 0;                                                                         /* success return 0 */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	0800a364 	.word	0x0800a364
 8002a94:	0800a388 	.word	0x0800a388

08002a98 <mpu9250_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_iic_master(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <mpu9250_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e039      	b.n	8002b22 <mpu9250_set_iic_master+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d001      	beq.n	8002abc <mpu9250_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e032      	b.n	8002b22 <mpu9250_set_iic_master+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002abc:	f107 020e 	add.w	r2, r7, #14
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	216a      	movs	r1, #106	; 0x6a
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7fd fcff 	bl	80004c8 <a_mpu9250_read>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <mpu9250_set_iic_master+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                    /* read user ctrl failed */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	4814      	ldr	r0, [pc, #80]	; (8002b2c <mpu9250_set_iic_master+0x94>)
 8002ada:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002adc:	2301      	movs	r3, #1
 8002ade:	e020      	b.n	8002b22 <mpu9250_set_iic_master+0x8a>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8002ae0:	7bbb      	ldrb	r3, [r7, #14]
 8002ae2:	f023 0320 	bic.w	r3, r3, #32
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	015b      	lsls	r3, r3, #5
 8002aee:	b25a      	sxtb	r2, r3
 8002af0:	7bbb      	ldrb	r3, [r7, #14]
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	4313      	orrs	r3, r2
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002afc:	f107 020e 	add.w	r2, r7, #14
 8002b00:	2301      	movs	r3, #1
 8002b02:	216a      	movs	r1, #106	; 0x6a
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7fd fd10 	bl	800052a <a_mpu9250_write>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <mpu9250_set_iic_master+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                   /* write user ctrl failed */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	4805      	ldr	r0, [pc, #20]	; (8002b30 <mpu9250_set_iic_master+0x98>)
 8002b1a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <mpu9250_set_iic_master+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	0800a364 	.word	0x0800a364
 8002b30:	0800a388 	.word	0x0800a388

08002b34 <mpu9250_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_disable_iic_slave(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <mpu9250_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 8002b46:	2302      	movs	r3, #2
 8002b48:	e039      	b.n	8002bbe <mpu9250_set_disable_iic_slave+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d001      	beq.n	8002b58 <mpu9250_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 8002b54:	2303      	movs	r3, #3
 8002b56:	e032      	b.n	8002bbe <mpu9250_set_disable_iic_slave+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002b58:	f107 020e 	add.w	r2, r7, #14
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	216a      	movs	r1, #106	; 0x6a
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7fd fcb1 	bl	80004c8 <a_mpu9250_read>
 8002b66:	4603      	mov	r3, r0
 8002b68:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <mpu9250_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                    /* read user ctrl failed */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	4814      	ldr	r0, [pc, #80]	; (8002bc8 <mpu9250_set_disable_iic_slave+0x94>)
 8002b76:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e020      	b.n	8002bbe <mpu9250_set_disable_iic_slave+0x8a>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	b25a      	sxtb	r2, r3
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b25b      	sxtb	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002b98:	f107 020e 	add.w	r2, r7, #14
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	216a      	movs	r1, #106	; 0x6a
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fd fcc2 	bl	800052a <a_mpu9250_write>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <mpu9250_set_disable_iic_slave+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                   /* write user ctrl failed */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <mpu9250_set_disable_iic_slave+0x98>)
 8002bb6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <mpu9250_set_disable_iic_slave+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0800a364 	.word	0x0800a364
 8002bcc:	0800a388 	.word	0x0800a388

08002bd0 <mpu9250_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_clock_source(mpu9250_handle_t *handle, mpu9250_clock_source_t clock_source)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <mpu9250_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 8002be2:	2302      	movs	r3, #2
 8002be4:	e035      	b.n	8002c52 <mpu9250_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d001      	beq.n	8002bf4 <mpu9250_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e02e      	b.n	8002c52 <mpu9250_set_clock_source+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002bf4:	f107 020e 	add.w	r2, r7, #14
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	216b      	movs	r1, #107	; 0x6b
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fd fc63 	bl	80004c8 <a_mpu9250_read>
 8002c02:	4603      	mov	r3, r0
 8002c04:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <mpu9250_set_clock_source+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	4812      	ldr	r0, [pc, #72]	; (8002c5c <mpu9250_set_clock_source+0x8c>)
 8002c12:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002c14:	2301      	movs	r3, #1
 8002c16:	e01c      	b.n	8002c52 <mpu9250_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 8002c18:	7bbb      	ldrb	r3, [r7, #14]
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 8002c22:	7bba      	ldrb	r2, [r7, #14]
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002c2c:	f107 020e 	add.w	r2, r7, #14
 8002c30:	2301      	movs	r3, #1
 8002c32:	216b      	movs	r1, #107	; 0x6b
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fd fc78 	bl	800052a <a_mpu9250_write>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <mpu9250_set_clock_source+0x80>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	4805      	ldr	r0, [pc, #20]	; (8002c60 <mpu9250_set_clock_source+0x90>)
 8002c4a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <mpu9250_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	0800a918 	.word	0x0800a918
 8002c60:	0800a944 	.word	0x0800a944

08002c64 <mpu9250_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_ptat(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <mpu9250_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 8002c76:	2302      	movs	r3, #2
 8002c78:	e03c      	b.n	8002cf4 <mpu9250_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d001      	beq.n	8002c88 <mpu9250_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 8002c84:	2303      	movs	r3, #3
 8002c86:	e035      	b.n	8002cf4 <mpu9250_set_ptat+0x90>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002c88:	f107 020e 	add.w	r2, r7, #14
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	216b      	movs	r1, #107	; 0x6b
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fd fc19 	bl	80004c8 <a_mpu9250_read>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <mpu9250_set_ptat+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	4815      	ldr	r0, [pc, #84]	; (8002cfc <mpu9250_set_ptat+0x98>)
 8002ca6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e023      	b.n	8002cf4 <mpu9250_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	f023 0308 	bic.w	r3, r3, #8
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <mpu9250_set_ptat+0x5c>
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	e000      	b.n	8002cc2 <mpu9250_set_ptat+0x5e>
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	7bbb      	ldrb	r3, [r7, #14]
 8002cc4:	b25b      	sxtb	r3, r3
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002cce:	f107 020e 	add.w	r2, r7, #14
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	216b      	movs	r1, #107	; 0x6b
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fc27 	bl	800052a <a_mpu9250_write>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <mpu9250_set_ptat+0x8e>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <mpu9250_set_ptat+0x9c>)
 8002cec:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <mpu9250_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	0800a918 	.word	0x0800a918
 8002d00:	0800a944 	.word	0x0800a944

08002d04 <mpu9250_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_cycle_wake_up(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <mpu9250_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 8002d16:	2302      	movs	r3, #2
 8002d18:	e039      	b.n	8002d8e <mpu9250_set_cycle_wake_up+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d001      	beq.n	8002d28 <mpu9250_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 8002d24:	2303      	movs	r3, #3
 8002d26:	e032      	b.n	8002d8e <mpu9250_set_cycle_wake_up+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002d28:	f107 020e 	add.w	r2, r7, #14
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	216b      	movs	r1, #107	; 0x6b
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fd fbc9 	bl	80004c8 <a_mpu9250_read>
 8002d36:	4603      	mov	r3, r0
 8002d38:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <mpu9250_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	4814      	ldr	r0, [pc, #80]	; (8002d98 <mpu9250_set_cycle_wake_up+0x94>)
 8002d46:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e020      	b.n	8002d8e <mpu9250_set_cycle_wake_up+0x8a>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8002d4c:	7bbb      	ldrb	r3, [r7, #14]
 8002d4e:	f023 0320 	bic.w	r3, r3, #32
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	015b      	lsls	r3, r3, #5
 8002d5a:	b25a      	sxtb	r2, r3
 8002d5c:	7bbb      	ldrb	r3, [r7, #14]
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	4313      	orrs	r3, r2
 8002d62:	b25b      	sxtb	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002d68:	f107 020e 	add.w	r2, r7, #14
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	216b      	movs	r1, #107	; 0x6b
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fd fbda 	bl	800052a <a_mpu9250_write>
 8002d76:	4603      	mov	r3, r0
 8002d78:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <mpu9250_set_cycle_wake_up+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	4805      	ldr	r0, [pc, #20]	; (8002d9c <mpu9250_set_cycle_wake_up+0x98>)
 8002d86:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <mpu9250_set_cycle_wake_up+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	0800a918 	.word	0x0800a918
 8002d9c:	0800a944 	.word	0x0800a944

08002da0 <mpu9250_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_sleep(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <mpu9250_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 8002db2:	2302      	movs	r3, #2
 8002db4:	e039      	b.n	8002e2a <mpu9250_set_sleep+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d001      	beq.n	8002dc4 <mpu9250_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e032      	b.n	8002e2a <mpu9250_set_sleep+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002dc4:	f107 020e 	add.w	r2, r7, #14
 8002dc8:	2301      	movs	r3, #1
 8002dca:	216b      	movs	r1, #107	; 0x6b
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fd fb7b 	bl	80004c8 <a_mpu9250_read>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <mpu9250_set_sleep+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	4814      	ldr	r0, [pc, #80]	; (8002e34 <mpu9250_set_sleep+0x94>)
 8002de2:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002de4:	2301      	movs	r3, #1
 8002de6:	e020      	b.n	8002e2a <mpu9250_set_sleep+0x8a>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	b25a      	sxtb	r2, r3
 8002df8:	7bbb      	ldrb	r3, [r7, #14]
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002e04:	f107 020e 	add.w	r2, r7, #14
 8002e08:	2301      	movs	r3, #1
 8002e0a:	216b      	movs	r1, #107	; 0x6b
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fd fb8c 	bl	800052a <a_mpu9250_write>
 8002e12:	4603      	mov	r3, r0
 8002e14:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <mpu9250_set_sleep+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	4805      	ldr	r0, [pc, #20]	; (8002e38 <mpu9250_set_sleep+0x98>)
 8002e22:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <mpu9250_set_sleep+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	0800a918 	.word	0x0800a918
 8002e38:	0800a944 	.word	0x0800a944

08002e3c <mpu9250_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyro_standby(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <mpu9250_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e039      	b.n	8002ec6 <mpu9250_set_gyro_standby+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d001      	beq.n	8002e60 <mpu9250_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e032      	b.n	8002ec6 <mpu9250_set_gyro_standby+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002e60:	f107 020e 	add.w	r2, r7, #14
 8002e64:	2301      	movs	r3, #1
 8002e66:	216b      	movs	r1, #107	; 0x6b
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fb2d 	bl	80004c8 <a_mpu9250_read>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <mpu9250_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	4814      	ldr	r0, [pc, #80]	; (8002ed0 <mpu9250_set_gyro_standby+0x94>)
 8002e7e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002e80:	2301      	movs	r3, #1
 8002e82:	e020      	b.n	8002ec6 <mpu9250_set_gyro_standby+0x8a>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8002e84:	7bbb      	ldrb	r3, [r7, #14]
 8002e86:	f023 0310 	bic.w	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	b25a      	sxtb	r2, r3
 8002e94:	7bbb      	ldrb	r3, [r7, #14]
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002ea0:	f107 020e 	add.w	r2, r7, #14
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	216b      	movs	r1, #107	; 0x6b
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7fd fb3e 	bl	800052a <a_mpu9250_write>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <mpu9250_set_gyro_standby+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <mpu9250_set_gyro_standby+0x98>)
 8002ebe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <mpu9250_set_gyro_standby+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	0800a918 	.word	0x0800a918
 8002ed4:	0800a944 	.word	0x0800a944

08002ed8 <mpu9250_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_standby_mode(mpu9250_handle_t *handle, mpu9250_source_t source, mpu9250_bool_t enable)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <mpu9250_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e043      	b.n	8002f7a <mpu9250_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d001      	beq.n	8002f00 <mpu9250_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 8002efc:	2303      	movs	r3, #3
 8002efe:	e03c      	b.n	8002f7a <mpu9250_set_standby_mode+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8002f00:	f107 020e 	add.w	r2, r7, #14
 8002f04:	2301      	movs	r3, #1
 8002f06:	216c      	movs	r1, #108	; 0x6c
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd fadd 	bl	80004c8 <a_mpu9250_read>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <mpu9250_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu9250: read power management 2 failed.\n");           /* read power management 2 failed */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	4819      	ldr	r0, [pc, #100]	; (8002f84 <mpu9250_set_standby_mode+0xac>)
 8002f1e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002f20:	2301      	movs	r3, #1
 8002f22:	e02a      	b.n	8002f7a <mpu9250_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	2201      	movs	r2, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	7bbb      	ldrb	r3, [r7, #14]
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	4013      	ands	r3, r2
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 8002f3e:	78ba      	ldrb	r2, [r7, #2]
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	b25a      	sxtb	r2, r3
 8002f48:	7bbb      	ldrb	r3, [r7, #14]
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8002f54:	f107 020e 	add.w	r2, r7, #14
 8002f58:	2301      	movs	r3, #1
 8002f5a:	216c      	movs	r1, #108	; 0x6c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fd fae4 	bl	800052a <a_mpu9250_write>
 8002f62:	4603      	mov	r3, r0
 8002f64:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <mpu9250_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu9250: write power management 2 failed.\n");          /* write power management 2 failed */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <mpu9250_set_standby_mode+0xb0>)
 8002f72:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <mpu9250_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	0800a970 	.word	0x0800a970
 8002f88:	0800a99c 	.word	0x0800a99c

08002f8c <mpu9250_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_sample_rate_divider(mpu9250_handle_t *handle, uint8_t d)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <mpu9250_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e018      	b.n	8002fd4 <mpu9250_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d001      	beq.n	8002fb0 <mpu9250_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 8002fac:	2303      	movs	r3, #3
 8002fae:	e011      	b.n	8002fd4 <mpu9250_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu9250_write(handle, MPU9250_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8002fb0:	1cfa      	adds	r2, r7, #3
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	2119      	movs	r1, #25
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd fab7 	bl	800052a <a_mpu9250_write>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <mpu9250_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu9250: write smprt div failed.\n");                   /* write smprt div failed */
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	4804      	ldr	r0, [pc, #16]	; (8002fdc <mpu9250_set_sample_rate_divider+0x50>)
 8002fcc:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <mpu9250_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	0800aa5c 	.word	0x0800aa5c

08002fe0 <mpu9250_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_extern_sync(mpu9250_handle_t *handle, mpu9250_extern_sync_t sync)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <mpu9250_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e039      	b.n	800306a <mpu9250_set_extern_sync+0x8a>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d001      	beq.n	8003004 <mpu9250_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 8003000:	2303      	movs	r3, #3
 8003002:	e032      	b.n	800306a <mpu9250_set_extern_sync+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8003004:	f107 020e 	add.w	r2, r7, #14
 8003008:	2301      	movs	r3, #1
 800300a:	211a      	movs	r1, #26
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fd fa5b 	bl	80004c8 <a_mpu9250_read>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <mpu9250_set_extern_sync+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	4814      	ldr	r0, [pc, #80]	; (8003074 <mpu9250_set_extern_sync+0x94>)
 8003022:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003024:	2301      	movs	r3, #1
 8003026:	e020      	b.n	800306a <mpu9250_set_extern_sync+0x8a>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 8003028:	7bbb      	ldrb	r3, [r7, #14]
 800302a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800302e:	b2db      	uxtb	r3, r3
 8003030:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	b25a      	sxtb	r2, r3
 8003038:	7bbb      	ldrb	r3, [r7, #14]
 800303a:	b25b      	sxtb	r3, r3
 800303c:	4313      	orrs	r3, r2
 800303e:	b25b      	sxtb	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8003044:	f107 020e 	add.w	r2, r7, #14
 8003048:	2301      	movs	r3, #1
 800304a:	211a      	movs	r1, #26
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd fa6c 	bl	800052a <a_mpu9250_write>
 8003052:	4603      	mov	r3, r0
 8003054:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <mpu9250_set_extern_sync+0x88>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	4805      	ldr	r0, [pc, #20]	; (8003078 <mpu9250_set_extern_sync+0x98>)
 8003062:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <mpu9250_set_extern_sync+0x8a>
    }
    
    return 0;                                                                      /* success return 0 */
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	0800aaa4 	.word	0x0800aaa4
 8003078:	0800aac4 	.word	0x0800aac4

0800307c <mpu9250_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_low_pass_filter(mpu9250_handle_t *handle, mpu9250_low_pass_filter_t filter)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <mpu9250_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 800308e:	2302      	movs	r3, #2
 8003090:	e035      	b.n	80030fe <mpu9250_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <mpu9250_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 800309c:	2303      	movs	r3, #3
 800309e:	e02e      	b.n	80030fe <mpu9250_set_low_pass_filter+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80030a0:	f107 020e 	add.w	r2, r7, #14
 80030a4:	2301      	movs	r3, #1
 80030a6:	211a      	movs	r1, #26
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fd fa0d 	bl	80004c8 <a_mpu9250_read>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <mpu9250_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	4812      	ldr	r0, [pc, #72]	; (8003108 <mpu9250_set_low_pass_filter+0x8c>)
 80030be:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 80030c0:	2301      	movs	r3, #1
 80030c2:	e01c      	b.n	80030fe <mpu9250_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 80030c4:	7bbb      	ldrb	r3, [r7, #14]
 80030c6:	f023 0307 	bic.w	r3, r3, #7
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 80030ce:	7bba      	ldrb	r2, [r7, #14]
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 80030d8:	f107 020e 	add.w	r2, r7, #14
 80030dc:	2301      	movs	r3, #1
 80030de:	211a      	movs	r1, #26
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fd fa22 	bl	800052a <a_mpu9250_write>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <mpu9250_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	4805      	ldr	r0, [pc, #20]	; (800310c <mpu9250_set_low_pass_filter+0x90>)
 80030f6:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <mpu9250_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	0800aaa4 	.word	0x0800aaa4
 800310c:	0800aac4 	.word	0x0800aac4

08003110 <mpu9250_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_mode(mpu9250_handle_t *handle, mpu9250_fifo_mode mode)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <mpu9250_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 8003122:	2302      	movs	r3, #2
 8003124:	e039      	b.n	800319a <mpu9250_set_fifo_mode+0x8a>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <mpu9250_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 8003130:	2303      	movs	r3, #3
 8003132:	e032      	b.n	800319a <mpu9250_set_fifo_mode+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8003134:	f107 020e 	add.w	r2, r7, #14
 8003138:	2301      	movs	r3, #1
 800313a:	211a      	movs	r1, #26
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fd f9c3 	bl	80004c8 <a_mpu9250_read>
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <mpu9250_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	4814      	ldr	r0, [pc, #80]	; (80031a4 <mpu9250_set_fifo_mode+0x94>)
 8003152:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003154:	2301      	movs	r3, #1
 8003156:	e020      	b.n	800319a <mpu9250_set_fifo_mode+0x8a>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8003158:	7bbb      	ldrb	r3, [r7, #14]
 800315a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315e:	b2db      	uxtb	r3, r3
 8003160:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	b25a      	sxtb	r2, r3
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	b25b      	sxtb	r3, r3
 800316c:	4313      	orrs	r3, r2
 800316e:	b25b      	sxtb	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8003174:	f107 020e 	add.w	r2, r7, #14
 8003178:	2301      	movs	r3, #1
 800317a:	211a      	movs	r1, #26
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fd f9d4 	bl	800052a <a_mpu9250_write>
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <mpu9250_set_fifo_mode+0x88>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	4805      	ldr	r0, [pc, #20]	; (80031a8 <mpu9250_set_fifo_mode+0x98>)
 8003192:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <mpu9250_set_fifo_mode+0x8a>
    }
    
    return 0;                                                                      /* success return 0 */
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	0800aaa4 	.word	0x0800aaa4
 80031a8:	0800aac4 	.word	0x0800aac4

080031ac <mpu9250_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_test(mpu9250_handle_t *handle, mpu9250_axis_t axis, mpu9250_bool_t enable)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
 80031b8:	4613      	mov	r3, r2
 80031ba:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <mpu9250_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 80031c2:	2302      	movs	r3, #2
 80031c4:	e043      	b.n	800324e <mpu9250_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d001      	beq.n	80031d4 <mpu9250_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 80031d0:	2303      	movs	r3, #3
 80031d2:	e03c      	b.n	800324e <mpu9250_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 80031d4:	f107 020e 	add.w	r2, r7, #14
 80031d8:	2301      	movs	r3, #1
 80031da:	211b      	movs	r1, #27
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd f973 	bl	80004c8 <a_mpu9250_read>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <mpu9250_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	4819      	ldr	r0, [pc, #100]	; (8003258 <mpu9250_set_gyroscope_test+0xac>)
 80031f2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80031f4:	2301      	movs	r3, #1
 80031f6:	e02a      	b.n	800324e <mpu9250_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	2201      	movs	r2, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	b25b      	sxtb	r3, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	b25a      	sxtb	r2, r3
 8003206:	7bbb      	ldrb	r3, [r7, #14]
 8003208:	b25b      	sxtb	r3, r3
 800320a:	4013      	ands	r3, r2
 800320c:	b25b      	sxtb	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8003212:	78ba      	ldrb	r2, [r7, #2]
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	b25a      	sxtb	r2, r3
 800321c:	7bbb      	ldrb	r3, [r7, #14]
 800321e:	b25b      	sxtb	r3, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	b25b      	sxtb	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8003228:	f107 020e 	add.w	r2, r7, #14
 800322c:	2301      	movs	r3, #1
 800322e:	211b      	movs	r1, #27
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd f97a 	bl	800052a <a_mpu9250_write>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <mpu9250_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	4805      	ldr	r0, [pc, #20]	; (800325c <mpu9250_set_gyroscope_test+0xb0>)
 8003246:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <mpu9250_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	0800aae4 	.word	0x0800aae4
 800325c:	0800ab0c 	.word	0x0800ab0c

08003260 <mpu9250_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_range(mpu9250_handle_t *handle, mpu9250_gyroscope_range_t range)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <mpu9250_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 8003272:	2302      	movs	r3, #2
 8003274:	e039      	b.n	80032ea <mpu9250_set_gyroscope_range+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800327c:	2b01      	cmp	r3, #1
 800327e:	d001      	beq.n	8003284 <mpu9250_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 8003280:	2303      	movs	r3, #3
 8003282:	e032      	b.n	80032ea <mpu9250_set_gyroscope_range+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8003284:	f107 020e 	add.w	r2, r7, #14
 8003288:	2301      	movs	r3, #1
 800328a:	211b      	movs	r1, #27
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd f91b 	bl	80004c8 <a_mpu9250_read>
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <mpu9250_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	4814      	ldr	r0, [pc, #80]	; (80032f4 <mpu9250_set_gyroscope_range+0x94>)
 80032a2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80032a4:	2301      	movs	r3, #1
 80032a6:	e020      	b.n	80032ea <mpu9250_set_gyroscope_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	f023 0318 	bic.w	r3, r3, #24
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	b25a      	sxtb	r2, r3
 80032b8:	7bbb      	ldrb	r3, [r7, #14]
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	4313      	orrs	r3, r2
 80032be:	b25b      	sxtb	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80032c4:	f107 020e 	add.w	r2, r7, #14
 80032c8:	2301      	movs	r3, #1
 80032ca:	211b      	movs	r1, #27
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd f92c 	bl	800052a <a_mpu9250_write>
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <mpu9250_set_gyroscope_range+0x88>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	4805      	ldr	r0, [pc, #20]	; (80032f8 <mpu9250_set_gyroscope_range+0x98>)
 80032e2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <mpu9250_set_gyroscope_range+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	0800aae4 	.word	0x0800aae4
 80032f8:	0800ab0c 	.word	0x0800ab0c

080032fc <mpu9250_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_choice(mpu9250_handle_t *handle, uint8_t choice)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <mpu9250_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 800330e:	2302      	movs	r3, #2
 8003310:	e03e      	b.n	8003390 <mpu9250_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <mpu9250_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 800331c:	2303      	movs	r3, #3
 800331e:	e037      	b.n	8003390 <mpu9250_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d905      	bls.n	8003332 <mpu9250_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu9250: choice > 3.\n");                                  /* choice > 3 */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	481b      	ldr	r0, [pc, #108]	; (8003398 <mpu9250_set_gyroscope_choice+0x9c>)
 800332c:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 800332e:	2304      	movs	r3, #4
 8003330:	e02e      	b.n	8003390 <mpu9250_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8003332:	f107 020e 	add.w	r2, r7, #14
 8003336:	2301      	movs	r3, #1
 8003338:	211b      	movs	r1, #27
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd f8c4 	bl	80004c8 <a_mpu9250_read>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <mpu9250_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	4813      	ldr	r0, [pc, #76]	; (800339c <mpu9250_set_gyroscope_choice+0xa0>)
 8003350:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003352:	2301      	movs	r3, #1
 8003354:	e01c      	b.n	8003390 <mpu9250_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 8003356:	7bbb      	ldrb	r3, [r7, #14]
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 8003360:	7bba      	ldrb	r2, [r7, #14]
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	4313      	orrs	r3, r2
 8003366:	b2db      	uxtb	r3, r3
 8003368:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 800336a:	f107 020e 	add.w	r2, r7, #14
 800336e:	2301      	movs	r3, #1
 8003370:	211b      	movs	r1, #27
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd f8d9 	bl	800052a <a_mpu9250_write>
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <mpu9250_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	4806      	ldr	r0, [pc, #24]	; (80033a0 <mpu9250_set_gyroscope_choice+0xa4>)
 8003388:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <mpu9250_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	0800ab38 	.word	0x0800ab38
 800339c:	0800aae4 	.word	0x0800aae4
 80033a0:	0800ab0c 	.word	0x0800ab0c

080033a4 <mpu9250_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_test(mpu9250_handle_t *handle, mpu9250_axis_t axis, mpu9250_bool_t enable)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
 80033b0:	4613      	mov	r3, r2
 80033b2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <mpu9250_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 80033ba:	2302      	movs	r3, #2
 80033bc:	e043      	b.n	8003446 <mpu9250_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <mpu9250_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 80033c8:	2303      	movs	r3, #3
 80033ca:	e03c      	b.n	8003446 <mpu9250_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 80033cc:	f107 020e 	add.w	r2, r7, #14
 80033d0:	2301      	movs	r3, #1
 80033d2:	211c      	movs	r1, #28
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7fd f877 	bl	80004c8 <a_mpu9250_read>
 80033da:	4603      	mov	r3, r0
 80033dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <mpu9250_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu9250: read accelerometer config failed.\n");            /* read accelerometer config failed */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	4819      	ldr	r0, [pc, #100]	; (8003450 <mpu9250_set_accelerometer_test+0xac>)
 80033ea:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80033ec:	2301      	movs	r3, #1
 80033ee:	e02a      	b.n	8003446 <mpu9250_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	2201      	movs	r2, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	b25a      	sxtb	r2, r3
 80033fe:	7bbb      	ldrb	r3, [r7, #14]
 8003400:	b25b      	sxtb	r3, r3
 8003402:	4013      	ands	r3, r2
 8003404:	b25b      	sxtb	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 800340a:	78ba      	ldrb	r2, [r7, #2]
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	b25a      	sxtb	r2, r3
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	b25b      	sxtb	r3, r3
 8003418:	4313      	orrs	r3, r2
 800341a:	b25b      	sxtb	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8003420:	f107 020e 	add.w	r2, r7, #14
 8003424:	2301      	movs	r3, #1
 8003426:	211c      	movs	r1, #28
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd f87e 	bl	800052a <a_mpu9250_write>
 800342e:	4603      	mov	r3, r0
 8003430:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <mpu9250_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu9250: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <mpu9250_set_accelerometer_test+0xb0>)
 800343e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <mpu9250_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	0800a1cc 	.word	0x0800a1cc
 8003454:	0800ab50 	.word	0x0800ab50

08003458 <mpu9250_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_range(mpu9250_handle_t *handle, mpu9250_accelerometer_range_t range)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <mpu9250_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 800346a:	2302      	movs	r3, #2
 800346c:	e039      	b.n	80034e2 <mpu9250_set_accelerometer_range+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <mpu9250_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8003478:	2303      	movs	r3, #3
 800347a:	e032      	b.n	80034e2 <mpu9250_set_accelerometer_range+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 800347c:	f107 020e 	add.w	r2, r7, #14
 8003480:	2301      	movs	r3, #1
 8003482:	211c      	movs	r1, #28
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fd f81f 	bl	80004c8 <a_mpu9250_read>
 800348a:	4603      	mov	r3, r0
 800348c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <mpu9250_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu9250: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	4814      	ldr	r0, [pc, #80]	; (80034ec <mpu9250_set_accelerometer_range+0x94>)
 800349a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800349c:	2301      	movs	r3, #1
 800349e:	e020      	b.n	80034e2 <mpu9250_set_accelerometer_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 80034a0:	7bbb      	ldrb	r3, [r7, #14]
 80034a2:	f023 0318 	bic.w	r3, r3, #24
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	b25a      	sxtb	r2, r3
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 80034bc:	f107 020e 	add.w	r2, r7, #14
 80034c0:	2301      	movs	r3, #1
 80034c2:	211c      	movs	r1, #28
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fd f830 	bl	800052a <a_mpu9250_write>
 80034ca:	4603      	mov	r3, r0
 80034cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <mpu9250_set_accelerometer_range+0x88>
    {
        handle->debug_print("mpu9250: write accelerometer config failed.\n");           /* write accelerometer config failed */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <mpu9250_set_accelerometer_range+0x98>)
 80034da:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <mpu9250_set_accelerometer_range+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	0800a1cc 	.word	0x0800a1cc
 80034f0:	0800ab50 	.word	0x0800ab50

080034f4 <mpu9250_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_1024kb(mpu9250_handle_t *handle)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <mpu9250_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 8003502:	2302      	movs	r3, #2
 8003504:	e035      	b.n	8003572 <mpu9250_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800350c:	2b01      	cmp	r3, #1
 800350e:	d001      	beq.n	8003514 <mpu9250_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 8003510:	2303      	movs	r3, #3
 8003512:	e02e      	b.n	8003572 <mpu9250_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8003514:	f107 020e 	add.w	r2, r7, #14
 8003518:	2301      	movs	r3, #1
 800351a:	211d      	movs	r1, #29
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fc ffd3 	bl	80004c8 <a_mpu9250_read>
 8003522:	4603      	mov	r3, r0
 8003524:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <mpu9250_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	4812      	ldr	r0, [pc, #72]	; (800357c <mpu9250_set_fifo_1024kb+0x88>)
 8003532:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003534:	2301      	movs	r3, #1
 8003536:	e01c      	b.n	8003572 <mpu9250_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8003538:	7bbb      	ldrb	r3, [r7, #14]
 800353a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353e:	b2db      	uxtb	r3, r3
 8003540:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 8003542:	7bbb      	ldrb	r3, [r7, #14]
 8003544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003548:	b2db      	uxtb	r3, r3
 800354a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 800354c:	f107 020e 	add.w	r2, r7, #14
 8003550:	2301      	movs	r3, #1
 8003552:	211d      	movs	r1, #29
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7fc ffe8 	bl	800052a <a_mpu9250_write>
 800355a:	4603      	mov	r3, r0
 800355c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <mpu9250_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	4805      	ldr	r0, [pc, #20]	; (8003580 <mpu9250_set_fifo_1024kb+0x8c>)
 800356a:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <mpu9250_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	0800ab80 	.word	0x0800ab80
 8003580:	0800abb0 	.word	0x0800abb0

08003584 <mpu9250_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_choice(mpu9250_handle_t *handle, uint8_t choice)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <mpu9250_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8003596:	2302      	movs	r3, #2
 8003598:	e042      	b.n	8003620 <mpu9250_set_accelerometer_choice+0x9c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d001      	beq.n	80035a8 <mpu9250_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 80035a4:	2303      	movs	r3, #3
 80035a6:	e03b      	b.n	8003620 <mpu9250_set_accelerometer_choice+0x9c>
    }
    if (choice > 1)                                                                     /* check the choice */
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d905      	bls.n	80035ba <mpu9250_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu9250: choice > 1.\n");                                  /* choice > 1 */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	481d      	ldr	r0, [pc, #116]	; (8003628 <mpu9250_set_accelerometer_choice+0xa4>)
 80035b4:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 80035b6:	2304      	movs	r3, #4
 80035b8:	e032      	b.n	8003620 <mpu9250_set_accelerometer_choice+0x9c>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 80035ba:	f107 020e 	add.w	r2, r7, #14
 80035be:	2301      	movs	r3, #1
 80035c0:	211d      	movs	r1, #29
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fc ff80 	bl	80004c8 <a_mpu9250_read>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <mpu9250_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	4815      	ldr	r0, [pc, #84]	; (800362c <mpu9250_set_accelerometer_choice+0xa8>)
 80035d8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80035da:	2301      	movs	r3, #1
 80035dc:	e020      	b.n	8003620 <mpu9250_set_accelerometer_choice+0x9c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 80035de:	7bbb      	ldrb	r3, [r7, #14]
 80035e0:	f023 0308 	bic.w	r3, r3, #8
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	b25a      	sxtb	r2, r3
 80035ee:	7bbb      	ldrb	r3, [r7, #14]
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 80035fa:	f107 020e 	add.w	r2, r7, #14
 80035fe:	2301      	movs	r3, #1
 8003600:	211d      	movs	r1, #29
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fc ff91 	bl	800052a <a_mpu9250_write>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <mpu9250_set_accelerometer_choice+0x9a>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	4806      	ldr	r0, [pc, #24]	; (8003630 <mpu9250_set_accelerometer_choice+0xac>)
 8003618:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <mpu9250_set_accelerometer_choice+0x9c>
    }
    
    return 0;                                                                           /* success return 0 */
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	0800abe0 	.word	0x0800abe0
 800362c:	0800ab80 	.word	0x0800ab80
 8003630:	0800abb0 	.word	0x0800abb0

08003634 <mpu9250_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_low_pass_filter(mpu9250_handle_t *handle, mpu9250_accelerometer_low_pass_filter_t filter)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <mpu9250_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 8003646:	2302      	movs	r3, #2
 8003648:	e035      	b.n	80036b6 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <mpu9250_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 8003654:	2303      	movs	r3, #3
 8003656:	e02e      	b.n	80036b6 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8003658:	f107 020e 	add.w	r2, r7, #14
 800365c:	2301      	movs	r3, #1
 800365e:	211d      	movs	r1, #29
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fc ff31 	bl	80004c8 <a_mpu9250_read>
 8003666:	4603      	mov	r3, r0
 8003668:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <mpu9250_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	4812      	ldr	r0, [pc, #72]	; (80036c0 <mpu9250_set_accelerometer_low_pass_filter+0x8c>)
 8003676:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003678:	2301      	movs	r3, #1
 800367a:	e01c      	b.n	80036b6 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 800367c:	7bbb      	ldrb	r3, [r7, #14]
 800367e:	f023 0307 	bic.w	r3, r3, #7
 8003682:	b2db      	uxtb	r3, r3
 8003684:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 8003686:	7bba      	ldrb	r2, [r7, #14]
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	4313      	orrs	r3, r2
 800368c:	b2db      	uxtb	r3, r3
 800368e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8003690:	f107 020e 	add.w	r2, r7, #14
 8003694:	2301      	movs	r3, #1
 8003696:	211d      	movs	r1, #29
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fc ff46 	bl	800052a <a_mpu9250_write>
 800369e:	4603      	mov	r3, r0
 80036a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <mpu9250_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	4805      	ldr	r0, [pc, #20]	; (80036c4 <mpu9250_set_accelerometer_low_pass_filter+0x90>)
 80036ae:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	0800ab80 	.word	0x0800ab80
 80036c4:	0800abb0 	.word	0x0800abb0

080036c8 <mpu9250_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_low_power_accel_output_rate(mpu9250_handle_t *handle, mpu9250_low_power_accel_output_rate_t rate)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <mpu9250_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 80036da:	2302      	movs	r3, #2
 80036dc:	e035      	b.n	800374a <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d001      	beq.n	80036ec <mpu9250_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 80036e8:	2303      	movs	r3, #3
 80036ea:	e02e      	b.n	800374a <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 80036ec:	f107 020e 	add.w	r2, r7, #14
 80036f0:	2301      	movs	r3, #1
 80036f2:	211e      	movs	r1, #30
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fc fee7 	bl	80004c8 <a_mpu9250_read>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <mpu9250_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu9250: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	4812      	ldr	r0, [pc, #72]	; (8003754 <mpu9250_set_low_power_accel_output_rate+0x8c>)
 800370a:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 800370c:	2301      	movs	r3, #1
 800370e:	e01c      	b.n	800374a <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	f023 030f 	bic.w	r3, r3, #15
 8003716:	b2db      	uxtb	r3, r3
 8003718:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 800371a:	7bba      	ldrb	r2, [r7, #14]
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	4313      	orrs	r3, r2
 8003720:	b2db      	uxtb	r3, r3
 8003722:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 8003724:	f107 020e 	add.w	r2, r7, #14
 8003728:	2301      	movs	r3, #1
 800372a:	211e      	movs	r1, #30
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7fc fefc 	bl	800052a <a_mpu9250_write>
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <mpu9250_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu9250: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	4805      	ldr	r0, [pc, #20]	; (8003758 <mpu9250_set_low_power_accel_output_rate+0x90>)
 8003742:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	0800abf8 	.word	0x0800abf8
 8003758:	0800ac24 	.word	0x0800ac24

0800375c <mpu9250_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_wake_on_motion(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <mpu9250_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 800376e:	2302      	movs	r3, #2
 8003770:	e039      	b.n	80037e6 <mpu9250_set_wake_on_motion+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003778:	2b01      	cmp	r3, #1
 800377a:	d001      	beq.n	8003780 <mpu9250_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 800377c:	2303      	movs	r3, #3
 800377e:	e032      	b.n	80037e6 <mpu9250_set_wake_on_motion+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8003780:	f107 020e 	add.w	r2, r7, #14
 8003784:	2301      	movs	r3, #1
 8003786:	2169      	movs	r1, #105	; 0x69
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fc fe9d 	bl	80004c8 <a_mpu9250_read>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <mpu9250_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu9250: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	4814      	ldr	r0, [pc, #80]	; (80037f0 <mpu9250_set_wake_on_motion+0x94>)
 800379e:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80037a0:	2301      	movs	r3, #1
 80037a2:	e020      	b.n	80037e6 <mpu9250_set_wake_on_motion+0x8a>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 80037a4:	7bbb      	ldrb	r3, [r7, #14]
 80037a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	01db      	lsls	r3, r3, #7
 80037b2:	b25a      	sxtb	r2, r3
 80037b4:	7bbb      	ldrb	r3, [r7, #14]
 80037b6:	b25b      	sxtb	r3, r3
 80037b8:	4313      	orrs	r3, r2
 80037ba:	b25b      	sxtb	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80037c0:	f107 020e 	add.w	r2, r7, #14
 80037c4:	2301      	movs	r3, #1
 80037c6:	2169      	movs	r1, #105	; 0x69
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fc feae 	bl	800052a <a_mpu9250_write>
 80037ce:	4603      	mov	r3, r0
 80037d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <mpu9250_set_wake_on_motion+0x88>
    {
        handle->debug_print("mpu9250: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <mpu9250_set_wake_on_motion+0x98>)
 80037de:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <mpu9250_set_wake_on_motion+0x8a>
    }
    
    return 0;                                                                               /* success return 0 */
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	0800ac54 	.word	0x0800ac54
 80037f4:	0800ac80 	.word	0x0800ac80

080037f8 <mpu9250_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accel_compare_with_previous_sample(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <mpu9250_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 800380a:	2302      	movs	r3, #2
 800380c:	e039      	b.n	8003882 <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003814:	2b01      	cmp	r3, #1
 8003816:	d001      	beq.n	800381c <mpu9250_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 8003818:	2303      	movs	r3, #3
 800381a:	e032      	b.n	8003882 <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 800381c:	f107 020e 	add.w	r2, r7, #14
 8003820:	2301      	movs	r3, #1
 8003822:	2169      	movs	r1, #105	; 0x69
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fc fe4f 	bl	80004c8 <a_mpu9250_read>
 800382a:	4603      	mov	r3, r0
 800382c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <mpu9250_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu9250: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	4814      	ldr	r0, [pc, #80]	; (800388c <mpu9250_set_accel_compare_with_previous_sample+0x94>)
 800383a:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800383c:	2301      	movs	r3, #1
 800383e:	e020      	b.n	8003882 <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003846:	b2db      	uxtb	r3, r3
 8003848:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	019b      	lsls	r3, r3, #6
 800384e:	b25a      	sxtb	r2, r3
 8003850:	7bbb      	ldrb	r3, [r7, #14]
 8003852:	b25b      	sxtb	r3, r3
 8003854:	4313      	orrs	r3, r2
 8003856:	b25b      	sxtb	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800385c:	f107 020e 	add.w	r2, r7, #14
 8003860:	2301      	movs	r3, #1
 8003862:	2169      	movs	r1, #105	; 0x69
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7fc fe60 	bl	800052a <a_mpu9250_write>
 800386a:	4603      	mov	r3, r0
 800386c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <mpu9250_set_accel_compare_with_previous_sample+0x88>
    {
        handle->debug_print("mpu9250: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	4805      	ldr	r0, [pc, #20]	; (8003890 <mpu9250_set_accel_compare_with_previous_sample+0x98>)
 800387a:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    
    return 0;                                                                               /* success return 0 */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	0800ac54 	.word	0x0800ac54
 8003890:	0800ac80 	.word	0x0800ac80

08003894 <mpu9250_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_enable(mpu9250_handle_t *handle, mpu9250_fifo_t fifo, mpu9250_bool_t enable)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
 80038a0:	4613      	mov	r3, r2
 80038a2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <mpu9250_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 80038aa:	2302      	movs	r3, #2
 80038ac:	e043      	b.n	8003936 <mpu9250_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d001      	beq.n	80038bc <mpu9250_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 80038b8:	2303      	movs	r3, #3
 80038ba:	e03c      	b.n	8003936 <mpu9250_set_fifo_enable+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 80038bc:	f107 020e 	add.w	r2, r7, #14
 80038c0:	2301      	movs	r3, #1
 80038c2:	2123      	movs	r1, #35	; 0x23
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fc fdff 	bl	80004c8 <a_mpu9250_read>
 80038ca:	4603      	mov	r3, r0
 80038cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <mpu9250_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu9250: read fifo enable config failed.\n");          /* read fifo enable config failed */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	4819      	ldr	r0, [pc, #100]	; (8003940 <mpu9250_set_fifo_enable+0xac>)
 80038da:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80038dc:	2301      	movs	r3, #1
 80038de:	e02a      	b.n	8003936 <mpu9250_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	2201      	movs	r2, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	b25b      	sxtb	r3, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	b25a      	sxtb	r2, r3
 80038ee:	7bbb      	ldrb	r3, [r7, #14]
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	4013      	ands	r3, r2
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 80038fa:	78ba      	ldrb	r2, [r7, #2]
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	b25a      	sxtb	r2, r3
 8003904:	7bbb      	ldrb	r3, [r7, #14]
 8003906:	b25b      	sxtb	r3, r3
 8003908:	4313      	orrs	r3, r2
 800390a:	b25b      	sxtb	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8003910:	f107 020e 	add.w	r2, r7, #14
 8003914:	2301      	movs	r3, #1
 8003916:	2123      	movs	r1, #35	; 0x23
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fc fe06 	bl	800052a <a_mpu9250_write>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <mpu9250_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu9250: write fifo enable config failed.\n");         /* write fifo enable config failed */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	4805      	ldr	r0, [pc, #20]	; (8003944 <mpu9250_set_fifo_enable+0xb0>)
 800392e:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <mpu9250_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	0800acac 	.word	0x0800acac
 8003944:	0800acd8 	.word	0x0800acd8

08003948 <mpu9250_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_level(mpu9250_handle_t *handle, mpu9250_pin_level_t level)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <mpu9250_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 800395a:	2302      	movs	r3, #2
 800395c:	e039      	b.n	80039d2 <mpu9250_set_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003964:	2b01      	cmp	r3, #1
 8003966:	d001      	beq.n	800396c <mpu9250_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8003968:	2303      	movs	r3, #3
 800396a:	e032      	b.n	80039d2 <mpu9250_set_interrupt_level+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800396c:	f107 020e 	add.w	r2, r7, #14
 8003970:	2301      	movs	r3, #1
 8003972:	2137      	movs	r1, #55	; 0x37
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fc fda7 	bl	80004c8 <a_mpu9250_read>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <mpu9250_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	4814      	ldr	r0, [pc, #80]	; (80039dc <mpu9250_set_interrupt_level+0x94>)
 800398a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800398c:	2301      	movs	r3, #1
 800398e:	e020      	b.n	80039d2 <mpu9250_set_interrupt_level+0x8a>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003996:	b2db      	uxtb	r3, r3
 8003998:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	01db      	lsls	r3, r3, #7
 800399e:	b25a      	sxtb	r2, r3
 80039a0:	7bbb      	ldrb	r3, [r7, #14]
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80039ac:	f107 020e 	add.w	r2, r7, #14
 80039b0:	2301      	movs	r3, #1
 80039b2:	2137      	movs	r1, #55	; 0x37
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fc fdb8 	bl	800052a <a_mpu9250_write>
 80039ba:	4603      	mov	r3, r0
 80039bc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <mpu9250_set_interrupt_level+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	4805      	ldr	r0, [pc, #20]	; (80039e0 <mpu9250_set_interrupt_level+0x98>)
 80039ca:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <mpu9250_set_interrupt_level+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	0800ad04 	.word	0x0800ad04
 80039e0:	0800ad2c 	.word	0x0800ad2c

080039e4 <mpu9250_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_pin_type(mpu9250_handle_t *handle, mpu9250_pin_type_t type)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <mpu9250_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 80039f6:	2302      	movs	r3, #2
 80039f8:	e039      	b.n	8003a6e <mpu9250_set_interrupt_pin_type+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d001      	beq.n	8003a08 <mpu9250_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 8003a04:	2303      	movs	r3, #3
 8003a06:	e032      	b.n	8003a6e <mpu9250_set_interrupt_pin_type+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003a08:	f107 020e 	add.w	r2, r7, #14
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	2137      	movs	r1, #55	; 0x37
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fc fd59 	bl	80004c8 <a_mpu9250_read>
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <mpu9250_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	4814      	ldr	r0, [pc, #80]	; (8003a78 <mpu9250_set_interrupt_pin_type+0x94>)
 8003a26:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e020      	b.n	8003a6e <mpu9250_set_interrupt_pin_type+0x8a>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	b25a      	sxtb	r2, r3
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	b25b      	sxtb	r3, r3
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b25b      	sxtb	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003a48:	f107 020e 	add.w	r2, r7, #14
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	2137      	movs	r1, #55	; 0x37
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fc fd6a 	bl	800052a <a_mpu9250_write>
 8003a56:	4603      	mov	r3, r0
 8003a58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <mpu9250_set_interrupt_pin_type+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <mpu9250_set_interrupt_pin_type+0x98>)
 8003a66:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <mpu9250_set_interrupt_pin_type+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	0800ad04 	.word	0x0800ad04
 8003a7c:	0800ad2c 	.word	0x0800ad2c

08003a80 <mpu9250_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_latch(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <mpu9250_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 8003a92:	2302      	movs	r3, #2
 8003a94:	e03c      	b.n	8003b10 <mpu9250_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d001      	beq.n	8003aa4 <mpu9250_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e035      	b.n	8003b10 <mpu9250_set_interrupt_latch+0x90>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003aa4:	f107 020e 	add.w	r2, r7, #14
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	2137      	movs	r1, #55	; 0x37
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fc fd0b 	bl	80004c8 <a_mpu9250_read>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <mpu9250_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	4815      	ldr	r0, [pc, #84]	; (8003b18 <mpu9250_set_interrupt_latch+0x98>)
 8003ac2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e023      	b.n	8003b10 <mpu9250_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	f023 0320 	bic.w	r3, r3, #32
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <mpu9250_set_interrupt_latch+0x5c>
 8003ad8:	2220      	movs	r2, #32
 8003ada:	e000      	b.n	8003ade <mpu9250_set_interrupt_latch+0x5e>
 8003adc:	2200      	movs	r2, #0
 8003ade:	7bbb      	ldrb	r3, [r7, #14]
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003aea:	f107 020e 	add.w	r2, r7, #14
 8003aee:	2301      	movs	r3, #1
 8003af0:	2137      	movs	r1, #55	; 0x37
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fc fd19 	bl	800052a <a_mpu9250_write>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <mpu9250_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	4805      	ldr	r0, [pc, #20]	; (8003b1c <mpu9250_set_interrupt_latch+0x9c>)
 8003b08:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <mpu9250_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	0800ad04 	.word	0x0800ad04
 8003b1c:	0800ad2c 	.word	0x0800ad2c

08003b20 <mpu9250_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_read_clear(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <mpu9250_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 8003b32:	2302      	movs	r3, #2
 8003b34:	e039      	b.n	8003baa <mpu9250_set_interrupt_read_clear+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d001      	beq.n	8003b44 <mpu9250_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 8003b40:	2303      	movs	r3, #3
 8003b42:	e032      	b.n	8003baa <mpu9250_set_interrupt_read_clear+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003b44:	f107 020e 	add.w	r2, r7, #14
 8003b48:	2301      	movs	r3, #1
 8003b4a:	2137      	movs	r1, #55	; 0x37
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fc fcbb 	bl	80004c8 <a_mpu9250_read>
 8003b52:	4603      	mov	r3, r0
 8003b54:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <mpu9250_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	4814      	ldr	r0, [pc, #80]	; (8003bb4 <mpu9250_set_interrupt_read_clear+0x94>)
 8003b62:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003b64:	2301      	movs	r3, #1
 8003b66:	e020      	b.n	8003baa <mpu9250_set_interrupt_read_clear+0x8a>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 8003b68:	7bbb      	ldrb	r3, [r7, #14]
 8003b6a:	f023 0310 	bic.w	r3, r3, #16
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	b25a      	sxtb	r2, r3
 8003b78:	7bbb      	ldrb	r3, [r7, #14]
 8003b7a:	b25b      	sxtb	r3, r3
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003b84:	f107 020e 	add.w	r2, r7, #14
 8003b88:	2301      	movs	r3, #1
 8003b8a:	2137      	movs	r1, #55	; 0x37
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fc fccc 	bl	800052a <a_mpu9250_write>
 8003b92:	4603      	mov	r3, r0
 8003b94:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <mpu9250_set_interrupt_read_clear+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <mpu9250_set_interrupt_read_clear+0x98>)
 8003ba2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <mpu9250_set_interrupt_read_clear+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	0800ad04 	.word	0x0800ad04
 8003bb8:	0800ad2c 	.word	0x0800ad2c

08003bbc <mpu9250_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fsync_interrupt_level(mpu9250_handle_t *handle, mpu9250_pin_level_t level)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <mpu9250_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e039      	b.n	8003c46 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <mpu9250_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e032      	b.n	8003c46 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003be0:	f107 020e 	add.w	r2, r7, #14
 8003be4:	2301      	movs	r3, #1
 8003be6:	2137      	movs	r1, #55	; 0x37
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fc fc6d 	bl	80004c8 <a_mpu9250_read>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <mpu9250_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	4814      	ldr	r0, [pc, #80]	; (8003c50 <mpu9250_set_fsync_interrupt_level+0x94>)
 8003bfe:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003c00:	2301      	movs	r3, #1
 8003c02:	e020      	b.n	8003c46 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8003c04:	7bbb      	ldrb	r3, [r7, #14]
 8003c06:	f023 0308 	bic.w	r3, r3, #8
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	b25a      	sxtb	r2, r3
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	b25b      	sxtb	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003c20:	f107 020e 	add.w	r2, r7, #14
 8003c24:	2301      	movs	r3, #1
 8003c26:	2137      	movs	r1, #55	; 0x37
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7fc fc7e 	bl	800052a <a_mpu9250_write>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <mpu9250_set_fsync_interrupt_level+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	4805      	ldr	r0, [pc, #20]	; (8003c54 <mpu9250_set_fsync_interrupt_level+0x98>)
 8003c3e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	0800ad04 	.word	0x0800ad04
 8003c54:	0800ad2c 	.word	0x0800ad2c

08003c58 <mpu9250_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fsync_interrupt(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <mpu9250_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e039      	b.n	8003ce2 <mpu9250_set_fsync_interrupt+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <mpu9250_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e032      	b.n	8003ce2 <mpu9250_set_fsync_interrupt+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003c7c:	f107 020e 	add.w	r2, r7, #14
 8003c80:	2301      	movs	r3, #1
 8003c82:	2137      	movs	r1, #55	; 0x37
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fc fc1f 	bl	80004c8 <a_mpu9250_read>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <mpu9250_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	4814      	ldr	r0, [pc, #80]	; (8003cec <mpu9250_set_fsync_interrupt+0x94>)
 8003c9a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e020      	b.n	8003ce2 <mpu9250_set_fsync_interrupt+0x8a>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	f023 0304 	bic.w	r3, r3, #4
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	b25a      	sxtb	r2, r3
 8003cb0:	7bbb      	ldrb	r3, [r7, #14]
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003cbc:	f107 020e 	add.w	r2, r7, #14
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2137      	movs	r1, #55	; 0x37
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fc fc30 	bl	800052a <a_mpu9250_write>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <mpu9250_set_fsync_interrupt+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <mpu9250_set_fsync_interrupt+0x98>)
 8003cda:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <mpu9250_set_fsync_interrupt+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	0800ad04 	.word	0x0800ad04
 8003cf0:	0800ad2c 	.word	0x0800ad2c

08003cf4 <mpu9250_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_iic_bypass(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <mpu9250_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 8003d06:	2302      	movs	r3, #2
 8003d08:	e039      	b.n	8003d7e <mpu9250_set_iic_bypass+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d001      	beq.n	8003d18 <mpu9250_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 8003d14:	2303      	movs	r3, #3
 8003d16:	e032      	b.n	8003d7e <mpu9250_set_iic_bypass+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8003d18:	f107 020e 	add.w	r2, r7, #14
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	2137      	movs	r1, #55	; 0x37
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fc fbd1 	bl	80004c8 <a_mpu9250_read>
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <mpu9250_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	4814      	ldr	r0, [pc, #80]	; (8003d88 <mpu9250_set_iic_bypass+0x94>)
 8003d36:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e020      	b.n	8003d7e <mpu9250_set_iic_bypass+0x8a>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 8003d3c:	7bbb      	ldrb	r3, [r7, #14]
 8003d3e:	f023 0302 	bic.w	r3, r3, #2
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	b25a      	sxtb	r2, r3
 8003d4c:	7bbb      	ldrb	r3, [r7, #14]
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	4313      	orrs	r3, r2
 8003d52:	b25b      	sxtb	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003d58:	f107 020e 	add.w	r2, r7, #14
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	2137      	movs	r1, #55	; 0x37
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fc fbe2 	bl	800052a <a_mpu9250_write>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <mpu9250_set_iic_bypass+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	4805      	ldr	r0, [pc, #20]	; (8003d8c <mpu9250_set_iic_bypass+0x98>)
 8003d76:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <mpu9250_set_iic_bypass+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	0800ad04 	.word	0x0800ad04
 8003d8c:	0800ad2c 	.word	0x0800ad2c

08003d90 <mpu9250_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt(mpu9250_handle_t *handle, mpu9250_interrupt_t type, mpu9250_bool_t enable)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	70fb      	strb	r3, [r7, #3]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <mpu9250_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 8003da6:	2302      	movs	r3, #2
 8003da8:	e043      	b.n	8003e32 <mpu9250_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d001      	beq.n	8003db8 <mpu9250_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 8003db4:	2303      	movs	r3, #3
 8003db6:	e03c      	b.n	8003e32 <mpu9250_set_interrupt+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8003db8:	f107 020e 	add.w	r2, r7, #14
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	2138      	movs	r1, #56	; 0x38
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7fc fb81 	bl	80004c8 <a_mpu9250_read>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <mpu9250_set_interrupt+0x4c>
    {
        handle->debug_print("mpu9250: read interrupt enable failed.\n");                /* read interrupt enable failed */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	4819      	ldr	r0, [pc, #100]	; (8003e3c <mpu9250_set_interrupt+0xac>)
 8003dd6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e02a      	b.n	8003e32 <mpu9250_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	2201      	movs	r2, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	b25b      	sxtb	r3, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	b25a      	sxtb	r2, r3
 8003dea:	7bbb      	ldrb	r3, [r7, #14]
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	4013      	ands	r3, r2
 8003df0:	b25b      	sxtb	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 8003df6:	78ba      	ldrb	r2, [r7, #2]
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	b25a      	sxtb	r2, r3
 8003e00:	7bbb      	ldrb	r3, [r7, #14]
 8003e02:	b25b      	sxtb	r3, r3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8003e0c:	f107 020e 	add.w	r2, r7, #14
 8003e10:	2301      	movs	r3, #1
 8003e12:	2138      	movs	r1, #56	; 0x38
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fc fb88 	bl	800052a <a_mpu9250_write>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <mpu9250_set_interrupt+0xa0>
    {
        handle->debug_print("mpu9250: write interrupt enable failed.\n");               /* write interrupt enable failed */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	4805      	ldr	r0, [pc, #20]	; (8003e40 <mpu9250_set_interrupt+0xb0>)
 8003e2a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <mpu9250_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	0800ad54 	.word	0x0800ad54
 8003e40:	0800ad7c 	.word	0x0800ad7c

08003e44 <mpu9250_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu9250_basic_init(mpu9250_interface_t interface, mpu9250_address_t addr_pin)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	71fb      	strb	r3, [r7, #7]
 8003e50:	4613      	mov	r3, r2
 8003e52:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU9250_LINK_INIT(&gs_handle, mpu9250_handle_t);
 8003e54:	f240 4244 	movw	r2, #1092	; 0x444
 8003e58:	2100      	movs	r1, #0
 8003e5a:	48a5      	ldr	r0, [pc, #660]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e5c:	f006 f85f 	bl	8009f1e <memset>
    DRIVER_MPU9250_LINK_IIC_INIT(&gs_handle, mpu9250_interface_iic_init);
 8003e60:	4ba3      	ldr	r3, [pc, #652]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e62:	4aa4      	ldr	r2, [pc, #656]	; (80040f4 <mpu9250_basic_init+0x2b0>)
 8003e64:	605a      	str	r2, [r3, #4]
    DRIVER_MPU9250_LINK_IIC_DEINIT(&gs_handle, mpu9250_interface_iic_deinit);
 8003e66:	4ba2      	ldr	r3, [pc, #648]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e68:	4aa3      	ldr	r2, [pc, #652]	; (80040f8 <mpu9250_basic_init+0x2b4>)
 8003e6a:	609a      	str	r2, [r3, #8]
    DRIVER_MPU9250_LINK_IIC_READ(&gs_handle, mpu9250_interface_iic_read);
 8003e6c:	4ba0      	ldr	r3, [pc, #640]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e6e:	4aa3      	ldr	r2, [pc, #652]	; (80040fc <mpu9250_basic_init+0x2b8>)
 8003e70:	60da      	str	r2, [r3, #12]
    DRIVER_MPU9250_LINK_IIC_WRITE(&gs_handle, mpu9250_interface_iic_write);
 8003e72:	4b9f      	ldr	r3, [pc, #636]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e74:	4aa2      	ldr	r2, [pc, #648]	; (8004100 <mpu9250_basic_init+0x2bc>)
 8003e76:	611a      	str	r2, [r3, #16]
    DRIVER_MPU9250_LINK_SPI_INIT(&gs_handle, mpu9250_interface_spi_init);
 8003e78:	4b9d      	ldr	r3, [pc, #628]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e7a:	4aa2      	ldr	r2, [pc, #648]	; (8004104 <mpu9250_basic_init+0x2c0>)
 8003e7c:	615a      	str	r2, [r3, #20]
    DRIVER_MPU9250_LINK_SPI_DEINIT(&gs_handle, mpu9250_interface_spi_deinit);
 8003e7e:	4b9c      	ldr	r3, [pc, #624]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e80:	4aa1      	ldr	r2, [pc, #644]	; (8004108 <mpu9250_basic_init+0x2c4>)
 8003e82:	619a      	str	r2, [r3, #24]
    DRIVER_MPU9250_LINK_SPI_READ(&gs_handle, mpu9250_interface_spi_read);
 8003e84:	4b9a      	ldr	r3, [pc, #616]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e86:	4aa1      	ldr	r2, [pc, #644]	; (800410c <mpu9250_basic_init+0x2c8>)
 8003e88:	61da      	str	r2, [r3, #28]
    DRIVER_MPU9250_LINK_SPI_WRITE(&gs_handle, mpu9250_interface_spi_write);
 8003e8a:	4b99      	ldr	r3, [pc, #612]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e8c:	4aa0      	ldr	r2, [pc, #640]	; (8004110 <mpu9250_basic_init+0x2cc>)
 8003e8e:	621a      	str	r2, [r3, #32]
    DRIVER_MPU9250_LINK_DELAY_MS(&gs_handle, mpu9250_interface_delay_ms);
 8003e90:	4b97      	ldr	r3, [pc, #604]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e92:	4aa0      	ldr	r2, [pc, #640]	; (8004114 <mpu9250_basic_init+0x2d0>)
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
    DRIVER_MPU9250_LINK_DEBUG_PRINT(&gs_handle, mpu9250_interface_debug_print);
 8003e96:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e98:	4a9f      	ldr	r2, [pc, #636]	; (8004118 <mpu9250_basic_init+0x2d4>)
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28
    DRIVER_MPU9250_LINK_RECEIVE_CALLBACK(&gs_handle, mpu9250_interface_receive_callback);
 8003e9c:	4b94      	ldr	r3, [pc, #592]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003e9e:	4a9f      	ldr	r2, [pc, #636]	; (800411c <mpu9250_basic_init+0x2d8>)
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* set the interface */
    res = mpu9250_set_interface(&gs_handle, interface);
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4892      	ldr	r0, [pc, #584]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003ea8:	f7fc fbd1 	bl	800064e <mpu9250_set_interface>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <mpu9250_basic_init+0x7e>
    {
        mpu9250_interface_debug_print("mpu9250: set interface failed.\n");
 8003eb6:	489a      	ldr	r0, [pc, #616]	; (8004120 <mpu9250_basic_init+0x2dc>)
 8003eb8:	f000 fd42 	bl	8004940 <mpu9250_interface_debug_print>
       
        return 1;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f000 bc0b 	b.w	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the addr pin */
    res = mpu9250_set_addr_pin(&gs_handle, addr_pin);
 8003ec2:	79bb      	ldrb	r3, [r7, #6]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	488a      	ldr	r0, [pc, #552]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003ec8:	f7fc fbed 	bl	80006a6 <mpu9250_set_addr_pin>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <mpu9250_basic_init+0x9c>
    {
        mpu9250_interface_debug_print("mpu9250: set addr pin failed.\n");
 8003ed6:	4893      	ldr	r0, [pc, #588]	; (8004124 <mpu9250_basic_init+0x2e0>)
 8003ed8:	f000 fd32 	bl	8004940 <mpu9250_interface_debug_print>
       
        return 1;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e3fb      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* init */
    res = mpu9250_init(&gs_handle);
 8003ee0:	4883      	ldr	r0, [pc, #524]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003ee2:	f7fc fbf5 	bl	80006d0 <mpu9250_init>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <mpu9250_basic_init+0xb6>
    {
        mpu9250_interface_debug_print("mpu9250: init failed.\n");
 8003ef0:	488d      	ldr	r0, [pc, #564]	; (8004128 <mpu9250_basic_init+0x2e4>)
 8003ef2:	f000 fd25 	bl	8004940 <mpu9250_interface_debug_print>
       
        return 1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e3ee      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* delay 100 ms */
    mpu9250_interface_delay_ms(100);
 8003efa:	2064      	movs	r0, #100	; 0x64
 8003efc:	f000 fd15 	bl	800492a <mpu9250_interface_delay_ms>
    
    /* disable sleep */
    res = mpu9250_set_sleep(&gs_handle, MPU9250_BOOL_FALSE);
 8003f00:	2100      	movs	r1, #0
 8003f02:	487b      	ldr	r0, [pc, #492]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f04:	f7fe ff4c 	bl	8002da0 <mpu9250_set_sleep>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <mpu9250_basic_init+0xde>
    {
        mpu9250_interface_debug_print("mpu9250: set sleep failed.\n");
 8003f12:	4886      	ldr	r0, [pc, #536]	; (800412c <mpu9250_basic_init+0x2e8>)
 8003f14:	f000 fd14 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8003f18:	4875      	ldr	r0, [pc, #468]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f1a:	f7fc fcdf 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e3da      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU9250_INTERFACE_SPI)
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d110      	bne.n	8003f4a <mpu9250_basic_init+0x106>
    {
        /* disable iic */
        res = mpu9250_set_disable_iic_slave(&gs_handle, MPU9250_BOOL_TRUE);
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4871      	ldr	r0, [pc, #452]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f2c:	f7fe fe02 	bl	8002b34 <mpu9250_set_disable_iic_slave>
 8003f30:	4603      	mov	r3, r0
 8003f32:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <mpu9250_basic_init+0x106>
        {
            mpu9250_interface_debug_print("mpu9250: set disable iic slave failed.\n");
 8003f3a:	487d      	ldr	r0, [pc, #500]	; (8004130 <mpu9250_basic_init+0x2ec>)
 8003f3c:	f000 fd00 	bl	8004940 <mpu9250_interface_debug_print>
            (void)mpu9250_deinit(&gs_handle);
 8003f40:	486b      	ldr	r0, [pc, #428]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f42:	f7fc fccb 	bl	80008dc <mpu9250_deinit>
           
            return 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e3c6      	b.n	80046d8 <mpu9250_basic_init+0x894>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu9250_set_fifo_1024kb(&gs_handle);
 8003f4a:	4869      	ldr	r0, [pc, #420]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f4c:	f7ff fad2 	bl	80034f4 <mpu9250_set_fifo_1024kb>
 8003f50:	4603      	mov	r3, r0
 8003f52:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <mpu9250_basic_init+0x126>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo 1024kb failed.\n");
 8003f5a:	4876      	ldr	r0, [pc, #472]	; (8004134 <mpu9250_basic_init+0x2f0>)
 8003f5c:	f000 fcf0 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8003f60:	4863      	ldr	r0, [pc, #396]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f62:	f7fc fcbb 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e3b6      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default clock source */
    res = mpu9250_set_clock_source(&gs_handle, MPU9250_BASIC_DEFAULT_CLOCK_SOURCE);
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4860      	ldr	r0, [pc, #384]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f6e:	f7fe fe2f 	bl	8002bd0 <mpu9250_set_clock_source>
 8003f72:	4603      	mov	r3, r0
 8003f74:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <mpu9250_basic_init+0x148>
    {
        mpu9250_interface_debug_print("mpu9250: set clock source failed.\n");
 8003f7c:	486e      	ldr	r0, [pc, #440]	; (8004138 <mpu9250_basic_init+0x2f4>)
 8003f7e:	f000 fcdf 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8003f82:	485b      	ldr	r0, [pc, #364]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f84:	f7fc fcaa 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e3a5      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default rate */
    res = mpu9250_set_sample_rate_divider(&gs_handle, 1000 / (MPU9250_BASIC_DEFAULT_RATE - 1));
 8003f8c:	2114      	movs	r1, #20
 8003f8e:	4858      	ldr	r0, [pc, #352]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003f90:	f7fe fffc 	bl	8002f8c <mpu9250_set_sample_rate_divider>
 8003f94:	4603      	mov	r3, r0
 8003f96:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <mpu9250_basic_init+0x16a>
    {
        mpu9250_interface_debug_print("mpu9250: set sample rate divider failed.\n");
 8003f9e:	4867      	ldr	r0, [pc, #412]	; (800413c <mpu9250_basic_init+0x2f8>)
 8003fa0:	f000 fcce 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8003fa4:	4852      	ldr	r0, [pc, #328]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003fa6:	f7fc fc99 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e394      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* enable temperature sensor */
    res = mpu9250_set_ptat(&gs_handle, MPU9250_BOOL_TRUE);
 8003fae:	2101      	movs	r1, #1
 8003fb0:	484f      	ldr	r0, [pc, #316]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003fb2:	f7fe fe57 	bl	8002c64 <mpu9250_set_ptat>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <mpu9250_basic_init+0x18c>
    {
        mpu9250_interface_debug_print("mpu9250: set ptat failed.\n");
 8003fc0:	485f      	ldr	r0, [pc, #380]	; (8004140 <mpu9250_basic_init+0x2fc>)
 8003fc2:	f000 fcbd 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8003fc6:	484a      	ldr	r0, [pc, #296]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003fc8:	f7fc fc88 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e383      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default cycle wake up */
    res = mpu9250_set_cycle_wake_up(&gs_handle, MPU9250_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4847      	ldr	r0, [pc, #284]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003fd4:	f7fe fe96 	bl	8002d04 <mpu9250_set_cycle_wake_up>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <mpu9250_basic_init+0x1ae>
    {
        mpu9250_interface_debug_print("mpu9250: set cycle wake up failed.\n");
 8003fe2:	4858      	ldr	r0, [pc, #352]	; (8004144 <mpu9250_basic_init+0x300>)
 8003fe4:	f000 fcac 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8003fe8:	4841      	ldr	r0, [pc, #260]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003fea:	f7fc fc77 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e372      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc x */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_X, MPU9250_BOOL_FALSE);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2105      	movs	r1, #5
 8003ff6:	483e      	ldr	r0, [pc, #248]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8003ff8:	f7fe ff6e 	bl	8002ed8 <mpu9250_set_standby_mode>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <mpu9250_basic_init+0x1d2>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 8004006:	4850      	ldr	r0, [pc, #320]	; (8004148 <mpu9250_basic_init+0x304>)
 8004008:	f000 fc9a 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800400c:	4838      	ldr	r0, [pc, #224]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 800400e:	f7fc fc65 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004012:	2301      	movs	r3, #1
 8004014:	e360      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc y */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_Y, MPU9250_BOOL_FALSE);
 8004016:	2200      	movs	r2, #0
 8004018:	2104      	movs	r1, #4
 800401a:	4835      	ldr	r0, [pc, #212]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 800401c:	f7fe ff5c 	bl	8002ed8 <mpu9250_set_standby_mode>
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <mpu9250_basic_init+0x1f6>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 800402a:	4847      	ldr	r0, [pc, #284]	; (8004148 <mpu9250_basic_init+0x304>)
 800402c:	f000 fc88 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004030:	482f      	ldr	r0, [pc, #188]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8004032:	f7fc fc53 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004036:	2301      	movs	r3, #1
 8004038:	e34e      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc z */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_Z, MPU9250_BOOL_FALSE);
 800403a:	2200      	movs	r2, #0
 800403c:	2103      	movs	r1, #3
 800403e:	482c      	ldr	r0, [pc, #176]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8004040:	f7fe ff4a 	bl	8002ed8 <mpu9250_set_standby_mode>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <mpu9250_basic_init+0x21a>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 800404e:	483e      	ldr	r0, [pc, #248]	; (8004148 <mpu9250_basic_init+0x304>)
 8004050:	f000 fc76 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004054:	4826      	ldr	r0, [pc, #152]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8004056:	f7fc fc41 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800405a:	2301      	movs	r3, #1
 800405c:	e33c      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro x */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_X, MPU9250_BOOL_FALSE);
 800405e:	2200      	movs	r2, #0
 8004060:	2102      	movs	r1, #2
 8004062:	4823      	ldr	r0, [pc, #140]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8004064:	f7fe ff38 	bl	8002ed8 <mpu9250_set_standby_mode>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <mpu9250_basic_init+0x23e>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 8004072:	4835      	ldr	r0, [pc, #212]	; (8004148 <mpu9250_basic_init+0x304>)
 8004074:	f000 fc64 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004078:	481d      	ldr	r0, [pc, #116]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 800407a:	f7fc fc2f 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800407e:	2301      	movs	r3, #1
 8004080:	e32a      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro y */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_Y, MPU9250_BOOL_FALSE);
 8004082:	2200      	movs	r2, #0
 8004084:	2101      	movs	r1, #1
 8004086:	481a      	ldr	r0, [pc, #104]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 8004088:	f7fe ff26 	bl	8002ed8 <mpu9250_set_standby_mode>
 800408c:	4603      	mov	r3, r0
 800408e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <mpu9250_basic_init+0x262>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 8004096:	482c      	ldr	r0, [pc, #176]	; (8004148 <mpu9250_basic_init+0x304>)
 8004098:	f000 fc52 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800409c:	4814      	ldr	r0, [pc, #80]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 800409e:	f7fc fc1d 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e318      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro z */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_Z, MPU9250_BOOL_FALSE);
 80040a6:	2200      	movs	r2, #0
 80040a8:	2100      	movs	r1, #0
 80040aa:	4811      	ldr	r0, [pc, #68]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 80040ac:	f7fe ff14 	bl	8002ed8 <mpu9250_set_standby_mode>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <mpu9250_basic_init+0x286>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 80040ba:	4823      	ldr	r0, [pc, #140]	; (8004148 <mpu9250_basic_init+0x304>)
 80040bc:	f000 fc40 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80040c0:	480b      	ldr	r0, [pc, #44]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 80040c2:	f7fc fc0b 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e306      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable gyroscope x test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_X, MPU9250_BOOL_FALSE);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2107      	movs	r1, #7
 80040ce:	4808      	ldr	r0, [pc, #32]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 80040d0:	f7ff f86c 	bl	80031ac <mpu9250_set_gyroscope_test>
 80040d4:	4603      	mov	r3, r0
 80040d6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d038      	beq.n	8004150 <mpu9250_basic_init+0x30c>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 80040de:	481b      	ldr	r0, [pc, #108]	; (800414c <mpu9250_basic_init+0x308>)
 80040e0:	f000 fc2e 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80040e4:	4802      	ldr	r0, [pc, #8]	; (80040f0 <mpu9250_basic_init+0x2ac>)
 80040e6:	f7fc fbf9 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e2f4      	b.n	80046d8 <mpu9250_basic_init+0x894>
 80040ee:	bf00      	nop
 80040f0:	20000028 	.word	0x20000028
 80040f4:	08004819 	.word	0x08004819
 80040f8:	08004829 	.word	0x08004829
 80040fc:	08004839 	.word	0x08004839
 8004100:	08004885 	.word	0x08004885
 8004104:	080048d1 	.word	0x080048d1
 8004108:	080048df 	.word	0x080048df
 800410c:	080048ef 	.word	0x080048ef
 8004110:	0800490d 	.word	0x0800490d
 8004114:	0800492b 	.word	0x0800492b
 8004118:	08004941 	.word	0x08004941
 800411c:	08004959 	.word	0x08004959
 8004120:	0800b8cc 	.word	0x0800b8cc
 8004124:	0800b8ec 	.word	0x0800b8ec
 8004128:	0800b90c 	.word	0x0800b90c
 800412c:	0800b924 	.word	0x0800b924
 8004130:	0800b940 	.word	0x0800b940
 8004134:	0800b968 	.word	0x0800b968
 8004138:	0800b98c 	.word	0x0800b98c
 800413c:	0800b9b0 	.word	0x0800b9b0
 8004140:	0800b9dc 	.word	0x0800b9dc
 8004144:	0800b9f8 	.word	0x0800b9f8
 8004148:	0800ba1c 	.word	0x0800ba1c
 800414c:	0800ba40 	.word	0x0800ba40
    }
    
    /* disable gyroscope y test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_Y, MPU9250_BOOL_FALSE);
 8004150:	2200      	movs	r2, #0
 8004152:	2106      	movs	r1, #6
 8004154:	48b0      	ldr	r0, [pc, #704]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004156:	f7ff f829 	bl	80031ac <mpu9250_set_gyroscope_test>
 800415a:	4603      	mov	r3, r0
 800415c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <mpu9250_basic_init+0x330>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 8004164:	48ad      	ldr	r0, [pc, #692]	; (800441c <mpu9250_basic_init+0x5d8>)
 8004166:	f000 fbeb 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800416a:	48ab      	ldr	r0, [pc, #684]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800416c:	f7fc fbb6 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004170:	2301      	movs	r3, #1
 8004172:	e2b1      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable gyroscope z test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_Z, MPU9250_BOOL_FALSE);
 8004174:	2200      	movs	r2, #0
 8004176:	2105      	movs	r1, #5
 8004178:	48a7      	ldr	r0, [pc, #668]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800417a:	f7ff f817 	bl	80031ac <mpu9250_set_gyroscope_test>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <mpu9250_basic_init+0x354>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 8004188:	48a4      	ldr	r0, [pc, #656]	; (800441c <mpu9250_basic_init+0x5d8>)
 800418a:	f000 fbd9 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800418e:	48a2      	ldr	r0, [pc, #648]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004190:	f7fc fba4 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004194:	2301      	movs	r3, #1
 8004196:	e29f      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer x test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_X, MPU9250_BOOL_FALSE);
 8004198:	2200      	movs	r2, #0
 800419a:	2107      	movs	r1, #7
 800419c:	489e      	ldr	r0, [pc, #632]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800419e:	f7ff f901 	bl	80033a4 <mpu9250_set_accelerometer_test>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <mpu9250_basic_init+0x378>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 80041ac:	489c      	ldr	r0, [pc, #624]	; (8004420 <mpu9250_basic_init+0x5dc>)
 80041ae:	f000 fbc7 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80041b2:	4899      	ldr	r0, [pc, #612]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80041b4:	f7fc fb92 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e28d      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer y test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_Y, MPU9250_BOOL_FALSE);
 80041bc:	2200      	movs	r2, #0
 80041be:	2106      	movs	r1, #6
 80041c0:	4895      	ldr	r0, [pc, #596]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80041c2:	f7ff f8ef 	bl	80033a4 <mpu9250_set_accelerometer_test>
 80041c6:	4603      	mov	r3, r0
 80041c8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <mpu9250_basic_init+0x39c>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 80041d0:	4893      	ldr	r0, [pc, #588]	; (8004420 <mpu9250_basic_init+0x5dc>)
 80041d2:	f000 fbb5 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80041d6:	4890      	ldr	r0, [pc, #576]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80041d8:	f7fc fb80 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80041dc:	2301      	movs	r3, #1
 80041de:	e27b      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer z test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_Z, MPU9250_BOOL_FALSE);
 80041e0:	2200      	movs	r2, #0
 80041e2:	2105      	movs	r1, #5
 80041e4:	488c      	ldr	r0, [pc, #560]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80041e6:	f7ff f8dd 	bl	80033a4 <mpu9250_set_accelerometer_test>
 80041ea:	4603      	mov	r3, r0
 80041ec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <mpu9250_basic_init+0x3c0>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 80041f4:	488a      	ldr	r0, [pc, #552]	; (8004420 <mpu9250_basic_init+0x5dc>)
 80041f6:	f000 fba3 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80041fa:	4887      	ldr	r0, [pc, #540]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80041fc:	f7fc fb6e 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004200:	2301      	movs	r3, #1
 8004202:	e269      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable fifo */
    res = mpu9250_set_fifo(&gs_handle, MPU9250_BOOL_FALSE);
 8004204:	2100      	movs	r1, #0
 8004206:	4884      	ldr	r0, [pc, #528]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004208:	f7fe fbf8 	bl	80029fc <mpu9250_set_fifo>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <mpu9250_basic_init+0x3e2>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo failed.\n");
 8004216:	4883      	ldr	r0, [pc, #524]	; (8004424 <mpu9250_basic_init+0x5e0>)
 8004218:	f000 fb92 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800421c:	487e      	ldr	r0, [pc, #504]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800421e:	f7fc fb5d 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004222:	2301      	movs	r3, #1
 8004224:	e258      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable temp fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_TEMP, MPU9250_BOOL_FALSE);
 8004226:	2200      	movs	r2, #0
 8004228:	2107      	movs	r1, #7
 800422a:	487b      	ldr	r0, [pc, #492]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800422c:	f7ff fb32 	bl	8003894 <mpu9250_set_fifo_enable>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <mpu9250_basic_init+0x406>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 800423a:	487b      	ldr	r0, [pc, #492]	; (8004428 <mpu9250_basic_init+0x5e4>)
 800423c:	f000 fb80 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004240:	4875      	ldr	r0, [pc, #468]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004242:	f7fc fb4b 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004246:	2301      	movs	r3, #1
 8004248:	e246      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable xg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_XG, MPU9250_BOOL_FALSE);
 800424a:	2200      	movs	r2, #0
 800424c:	2106      	movs	r1, #6
 800424e:	4872      	ldr	r0, [pc, #456]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004250:	f7ff fb20 	bl	8003894 <mpu9250_set_fifo_enable>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <mpu9250_basic_init+0x42a>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 800425e:	4872      	ldr	r0, [pc, #456]	; (8004428 <mpu9250_basic_init+0x5e4>)
 8004260:	f000 fb6e 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004264:	486c      	ldr	r0, [pc, #432]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004266:	f7fc fb39 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800426a:	2301      	movs	r3, #1
 800426c:	e234      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable yg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_YG, MPU9250_BOOL_FALSE);
 800426e:	2200      	movs	r2, #0
 8004270:	2105      	movs	r1, #5
 8004272:	4869      	ldr	r0, [pc, #420]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004274:	f7ff fb0e 	bl	8003894 <mpu9250_set_fifo_enable>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <mpu9250_basic_init+0x44e>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 8004282:	4869      	ldr	r0, [pc, #420]	; (8004428 <mpu9250_basic_init+0x5e4>)
 8004284:	f000 fb5c 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004288:	4863      	ldr	r0, [pc, #396]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800428a:	f7fc fb27 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800428e:	2301      	movs	r3, #1
 8004290:	e222      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable zg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_ZG, MPU9250_BOOL_FALSE);
 8004292:	2200      	movs	r2, #0
 8004294:	2104      	movs	r1, #4
 8004296:	4860      	ldr	r0, [pc, #384]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004298:	f7ff fafc 	bl	8003894 <mpu9250_set_fifo_enable>
 800429c:	4603      	mov	r3, r0
 800429e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <mpu9250_basic_init+0x472>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 80042a6:	4860      	ldr	r0, [pc, #384]	; (8004428 <mpu9250_basic_init+0x5e4>)
 80042a8:	f000 fb4a 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80042ac:	485a      	ldr	r0, [pc, #360]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80042ae:	f7fc fb15 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e210      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* disable accel fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_ACCEL, MPU9250_BOOL_FALSE);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2103      	movs	r1, #3
 80042ba:	4857      	ldr	r0, [pc, #348]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80042bc:	f7ff faea 	bl	8003894 <mpu9250_set_fifo_enable>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <mpu9250_basic_init+0x496>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 80042ca:	4857      	ldr	r0, [pc, #348]	; (8004428 <mpu9250_basic_init+0x5e4>)
 80042cc:	f000 fb38 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80042d0:	4851      	ldr	r0, [pc, #324]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80042d2:	f7fc fb03 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e1fe      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt level */
    res = mpu9250_set_interrupt_level(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 80042da:	2101      	movs	r1, #1
 80042dc:	484e      	ldr	r0, [pc, #312]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80042de:	f7ff fb33 	bl	8003948 <mpu9250_set_interrupt_level>
 80042e2:	4603      	mov	r3, r0
 80042e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <mpu9250_basic_init+0x4b8>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt level failed.\n");
 80042ec:	484f      	ldr	r0, [pc, #316]	; (800442c <mpu9250_basic_init+0x5e8>)
 80042ee:	f000 fb27 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80042f2:	4849      	ldr	r0, [pc, #292]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80042f4:	f7fc faf2 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e1ed      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default pin type */
    res = mpu9250_set_interrupt_pin_type(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 80042fc:	2100      	movs	r1, #0
 80042fe:	4846      	ldr	r0, [pc, #280]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004300:	f7ff fb70 	bl	80039e4 <mpu9250_set_interrupt_pin_type>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <mpu9250_basic_init+0x4da>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt pin type failed.\n");
 800430e:	4848      	ldr	r0, [pc, #288]	; (8004430 <mpu9250_basic_init+0x5ec>)
 8004310:	f000 fb16 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004314:	4840      	ldr	r0, [pc, #256]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004316:	f7fc fae1 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800431a:	2301      	movs	r3, #1
 800431c:	e1dc      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default motion interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_MOTION, MPU9250_BASIC_DEFAULT_INTERRUPT_MOTION);
 800431e:	2200      	movs	r2, #0
 8004320:	2106      	movs	r1, #6
 8004322:	483d      	ldr	r0, [pc, #244]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004324:	f7ff fd34 	bl	8003d90 <mpu9250_set_interrupt>
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <mpu9250_basic_init+0x4fe>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 8004332:	4840      	ldr	r0, [pc, #256]	; (8004434 <mpu9250_basic_init+0x5f0>)
 8004334:	f000 fb04 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004338:	4837      	ldr	r0, [pc, #220]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800433a:	f7fc facf 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800433e:	2301      	movs	r3, #1
 8004340:	e1ca      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_FIFO_OVERFLOW, MPU9250_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 8004342:	2200      	movs	r2, #0
 8004344:	2104      	movs	r1, #4
 8004346:	4834      	ldr	r0, [pc, #208]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004348:	f7ff fd22 	bl	8003d90 <mpu9250_set_interrupt>
 800434c:	4603      	mov	r3, r0
 800434e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <mpu9250_basic_init+0x522>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 8004356:	4837      	ldr	r0, [pc, #220]	; (8004434 <mpu9250_basic_init+0x5f0>)
 8004358:	f000 faf2 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800435c:	482e      	ldr	r0, [pc, #184]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800435e:	f7fc fabd 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004362:	2301      	movs	r3, #1
 8004364:	e1b8      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default dmp interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_DMP, MPU9250_BASIC_DEFAULT_INTERRUPT_DMP);
 8004366:	2200      	movs	r2, #0
 8004368:	2101      	movs	r1, #1
 800436a:	482b      	ldr	r0, [pc, #172]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800436c:	f7ff fd10 	bl	8003d90 <mpu9250_set_interrupt>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <mpu9250_basic_init+0x546>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 800437a:	482e      	ldr	r0, [pc, #184]	; (8004434 <mpu9250_basic_init+0x5f0>)
 800437c:	f000 fae0 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004380:	4825      	ldr	r0, [pc, #148]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004382:	f7fc faab 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004386:	2301      	movs	r3, #1
 8004388:	e1a6      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync int interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_FSYNC_INT, MPU9250_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 800438a:	2200      	movs	r2, #0
 800438c:	2103      	movs	r1, #3
 800438e:	4822      	ldr	r0, [pc, #136]	; (8004418 <mpu9250_basic_init+0x5d4>)
 8004390:	f7ff fcfe 	bl	8003d90 <mpu9250_set_interrupt>
 8004394:	4603      	mov	r3, r0
 8004396:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <mpu9250_basic_init+0x56a>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 800439e:	4825      	ldr	r0, [pc, #148]	; (8004434 <mpu9250_basic_init+0x5f0>)
 80043a0:	f000 face 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80043a4:	481c      	ldr	r0, [pc, #112]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80043a6:	f7fc fa99 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e194      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default data ready interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_DATA_READY, MPU9250_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2100      	movs	r1, #0
 80043b2:	4819      	ldr	r0, [pc, #100]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80043b4:	f7ff fcec 	bl	8003d90 <mpu9250_set_interrupt>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <mpu9250_basic_init+0x58e>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 80043c2:	481c      	ldr	r0, [pc, #112]	; (8004434 <mpu9250_basic_init+0x5f0>)
 80043c4:	f000 fabc 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80043c8:	4813      	ldr	r0, [pc, #76]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80043ca:	f7fc fa87 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e182      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt latch */
    res = mpu9250_set_interrupt_latch(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_LATCH);
 80043d2:	2101      	movs	r1, #1
 80043d4:	4810      	ldr	r0, [pc, #64]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80043d6:	f7ff fb53 	bl	8003a80 <mpu9250_set_interrupt_latch>
 80043da:	4603      	mov	r3, r0
 80043dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <mpu9250_basic_init+0x5b0>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt latch failed.\n");
 80043e4:	4814      	ldr	r0, [pc, #80]	; (8004438 <mpu9250_basic_init+0x5f4>)
 80043e6:	f000 faab 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80043ea:	480b      	ldr	r0, [pc, #44]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80043ec:	f7fc fa76 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e171      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt read clear */
    res = mpu9250_set_interrupt_read_clear(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 80043f4:	2101      	movs	r1, #1
 80043f6:	4808      	ldr	r0, [pc, #32]	; (8004418 <mpu9250_basic_init+0x5d4>)
 80043f8:	f7ff fb92 	bl	8003b20 <mpu9250_set_interrupt_read_clear>
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01c      	beq.n	8004440 <mpu9250_basic_init+0x5fc>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt read clear failed.\n");
 8004406:	480d      	ldr	r0, [pc, #52]	; (800443c <mpu9250_basic_init+0x5f8>)
 8004408:	f000 fa9a 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800440c:	4802      	ldr	r0, [pc, #8]	; (8004418 <mpu9250_basic_init+0x5d4>)
 800440e:	f7fc fa65 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004412:	2301      	movs	r3, #1
 8004414:	e160      	b.n	80046d8 <mpu9250_basic_init+0x894>
 8004416:	bf00      	nop
 8004418:	20000028 	.word	0x20000028
 800441c:	0800ba40 	.word	0x0800ba40
 8004420:	0800ba68 	.word	0x0800ba68
 8004424:	0800ba94 	.word	0x0800ba94
 8004428:	0800bab0 	.word	0x0800bab0
 800442c:	0800bad4 	.word	0x0800bad4
 8004430:	0800bafc 	.word	0x0800bafc
 8004434:	0800bb28 	.word	0x0800bb28
 8004438:	0800bb48 	.word	0x0800bb48
 800443c:	0800bb70 	.word	0x0800bb70
    }
    
    /* set the extern sync */
    res = mpu9250_set_extern_sync(&gs_handle, MPU9250_BASIC_DEFAULT_EXTERN_SYNC);
 8004440:	2100      	movs	r1, #0
 8004442:	48a7      	ldr	r0, [pc, #668]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004444:	f7fe fdcc 	bl	8002fe0 <mpu9250_set_extern_sync>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <mpu9250_basic_init+0x61e>
    {
        mpu9250_interface_debug_print("mpu9250: set extern sync failed.\n");
 8004452:	48a4      	ldr	r0, [pc, #656]	; (80046e4 <mpu9250_basic_init+0x8a0>)
 8004454:	f000 fa74 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004458:	48a1      	ldr	r0, [pc, #644]	; (80046e0 <mpu9250_basic_init+0x89c>)
 800445a:	f7fc fa3f 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800445e:	2301      	movs	r3, #1
 8004460:	e13a      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync interrupt */
    res = mpu9250_set_fsync_interrupt(&gs_handle, MPU9250_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8004462:	2100      	movs	r1, #0
 8004464:	489e      	ldr	r0, [pc, #632]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004466:	f7ff fbf7 	bl	8003c58 <mpu9250_set_fsync_interrupt>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <mpu9250_basic_init+0x640>
    {
        mpu9250_interface_debug_print("mpu9250: set fsync interrupt failed.\n");
 8004474:	489c      	ldr	r0, [pc, #624]	; (80046e8 <mpu9250_basic_init+0x8a4>)
 8004476:	f000 fa63 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800447a:	4899      	ldr	r0, [pc, #612]	; (80046e0 <mpu9250_basic_init+0x89c>)
 800447c:	f7fc fa2e 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004480:	2301      	movs	r3, #1
 8004482:	e129      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync interrupt level */
    res = mpu9250_set_fsync_interrupt_level(&gs_handle, MPU9250_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8004484:	2101      	movs	r1, #1
 8004486:	4896      	ldr	r0, [pc, #600]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004488:	f7ff fb98 	bl	8003bbc <mpu9250_set_fsync_interrupt_level>
 800448c:	4603      	mov	r3, r0
 800448e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <mpu9250_basic_init+0x662>
    {
        mpu9250_interface_debug_print("mpu9250: set fsync interrupt level failed.\n");
 8004496:	4895      	ldr	r0, [pc, #596]	; (80046ec <mpu9250_basic_init+0x8a8>)
 8004498:	f000 fa52 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800449c:	4890      	ldr	r0, [pc, #576]	; (80046e0 <mpu9250_basic_init+0x89c>)
 800449e:	f7fc fa1d 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e118      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default iic master */
    res = mpu9250_set_iic_master(&gs_handle, MPU9250_BASIC_DEFAULT_IIC_MASTER);
 80044a6:	2100      	movs	r1, #0
 80044a8:	488d      	ldr	r0, [pc, #564]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80044aa:	f7fe faf5 	bl	8002a98 <mpu9250_set_iic_master>
 80044ae:	4603      	mov	r3, r0
 80044b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <mpu9250_basic_init+0x684>
    {
        mpu9250_interface_debug_print("mpu9250: set iic master failed.\n");
 80044b8:	488d      	ldr	r0, [pc, #564]	; (80046f0 <mpu9250_basic_init+0x8ac>)
 80044ba:	f000 fa41 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80044be:	4888      	ldr	r0, [pc, #544]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80044c0:	f7fc fa0c 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e107      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default iic bypass */
    res = mpu9250_set_iic_bypass(&gs_handle, MPU9250_BASIC_DEFAULT_IIC_BYPASS);
 80044c8:	2100      	movs	r1, #0
 80044ca:	4885      	ldr	r0, [pc, #532]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80044cc:	f7ff fc12 	bl	8003cf4 <mpu9250_set_iic_bypass>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <mpu9250_basic_init+0x6a6>
    {
        mpu9250_interface_debug_print("mpu9250: set iic bypass failed.\n");
 80044da:	4886      	ldr	r0, [pc, #536]	; (80046f4 <mpu9250_basic_init+0x8b0>)
 80044dc:	f000 fa30 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80044e0:	487f      	ldr	r0, [pc, #508]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80044e2:	f7fc f9fb 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0f6      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer range */
    res = mpu9250_set_accelerometer_range(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 80044ea:	2100      	movs	r1, #0
 80044ec:	487c      	ldr	r0, [pc, #496]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80044ee:	f7fe ffb3 	bl	8003458 <mpu9250_set_accelerometer_range>
 80044f2:	4603      	mov	r3, r0
 80044f4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <mpu9250_basic_init+0x6c8>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer range failed.\n");
 80044fc:	487e      	ldr	r0, [pc, #504]	; (80046f8 <mpu9250_basic_init+0x8b4>)
 80044fe:	f000 fa1f 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004502:	4877      	ldr	r0, [pc, #476]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004504:	f7fc f9ea 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004508:	2301      	movs	r3, #1
 800450a:	e0e5      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyroscope range */
    res = mpu9250_set_gyroscope_range(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_RANGE);
 800450c:	2100      	movs	r1, #0
 800450e:	4874      	ldr	r0, [pc, #464]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004510:	f7fe fea6 	bl	8003260 <mpu9250_set_gyroscope_range>
 8004514:	4603      	mov	r3, r0
 8004516:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <mpu9250_basic_init+0x6ea>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope range failed.\n");
 800451e:	4877      	ldr	r0, [pc, #476]	; (80046fc <mpu9250_basic_init+0x8b8>)
 8004520:	f000 fa0e 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004524:	486e      	ldr	r0, [pc, #440]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004526:	f7fc f9d9 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800452a:	2301      	movs	r3, #1
 800452c:	e0d4      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyro standby */
    res = mpu9250_set_gyro_standby(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 800452e:	2100      	movs	r1, #0
 8004530:	486b      	ldr	r0, [pc, #428]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004532:	f7fe fc83 	bl	8002e3c <mpu9250_set_gyro_standby>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <mpu9250_basic_init+0x70c>
    {
        mpu9250_interface_debug_print("mpu9250: set gyro standby failed.\n");
 8004540:	486f      	ldr	r0, [pc, #444]	; (8004700 <mpu9250_basic_init+0x8bc>)
 8004542:	f000 f9fd 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004546:	4866      	ldr	r0, [pc, #408]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004548:	f7fc f9c8 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800454c:	2301      	movs	r3, #1
 800454e:	e0c3      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fifo mode */
    res = mpu9250_set_fifo_mode(&gs_handle, MPU9250_BASIC_DEFAULT_FIFO_MODE);
 8004550:	2101      	movs	r1, #1
 8004552:	4863      	ldr	r0, [pc, #396]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004554:	f7fe fddc 	bl	8003110 <mpu9250_set_fifo_mode>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <mpu9250_basic_init+0x72e>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo mode failed.\n");
 8004562:	4868      	ldr	r0, [pc, #416]	; (8004704 <mpu9250_basic_init+0x8c0>)
 8004564:	f000 f9ec 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004568:	485d      	ldr	r0, [pc, #372]	; (80046e0 <mpu9250_basic_init+0x89c>)
 800456a:	f7fc f9b7 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800456e:	2301      	movs	r3, #1
 8004570:	e0b2      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyroscope choice */
    res = mpu9250_set_gyroscope_choice(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 8004572:	2100      	movs	r1, #0
 8004574:	485a      	ldr	r0, [pc, #360]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004576:	f7fe fec1 	bl	80032fc <mpu9250_set_gyroscope_choice>
 800457a:	4603      	mov	r3, r0
 800457c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <mpu9250_basic_init+0x750>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope choice failed.\n");
 8004584:	4860      	ldr	r0, [pc, #384]	; (8004708 <mpu9250_basic_init+0x8c4>)
 8004586:	f000 f9db 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800458a:	4855      	ldr	r0, [pc, #340]	; (80046e0 <mpu9250_basic_init+0x89c>)
 800458c:	f7fc f9a6 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004590:	2301      	movs	r3, #1
 8004592:	e0a1      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default low pass filter */
    res = mpu9250_set_low_pass_filter(&gs_handle, MPU9250_BASIC_DEFAULT_LOW_PASS_FILTER);
 8004594:	2107      	movs	r1, #7
 8004596:	4852      	ldr	r0, [pc, #328]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004598:	f7fe fd70 	bl	800307c <mpu9250_set_low_pass_filter>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <mpu9250_basic_init+0x772>
    {
        mpu9250_interface_debug_print("mpu9250: set low pass filter failed.\n");
 80045a6:	4859      	ldr	r0, [pc, #356]	; (800470c <mpu9250_basic_init+0x8c8>)
 80045a8:	f000 f9ca 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80045ac:	484c      	ldr	r0, [pc, #304]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80045ae:	f7fc f995 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e090      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer choice */
    res = mpu9250_set_accelerometer_choice(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 80045b6:	2100      	movs	r1, #0
 80045b8:	4849      	ldr	r0, [pc, #292]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80045ba:	f7fe ffe3 	bl	8003584 <mpu9250_set_accelerometer_choice>
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <mpu9250_basic_init+0x794>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer choice failed.\n");
 80045c8:	4851      	ldr	r0, [pc, #324]	; (8004710 <mpu9250_basic_init+0x8cc>)
 80045ca:	f000 f9b9 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80045ce:	4844      	ldr	r0, [pc, #272]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80045d0:	f7fc f984 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e07f      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu9250_set_accelerometer_low_pass_filter(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 80045d8:	2100      	movs	r1, #0
 80045da:	4841      	ldr	r0, [pc, #260]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80045dc:	f7ff f82a 	bl	8003634 <mpu9250_set_accelerometer_low_pass_filter>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <mpu9250_basic_init+0x7b6>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer low pass filter failed.\n");
 80045ea:	484a      	ldr	r0, [pc, #296]	; (8004714 <mpu9250_basic_init+0x8d0>)
 80045ec:	f000 f9a8 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80045f0:	483b      	ldr	r0, [pc, #236]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80045f2:	f7fc f973 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06e      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default low power accel output rate */
    res = mpu9250_set_low_power_accel_output_rate(&gs_handle, MPU9250_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 80045fa:	210b      	movs	r1, #11
 80045fc:	4838      	ldr	r0, [pc, #224]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80045fe:	f7ff f863 	bl	80036c8 <mpu9250_set_low_power_accel_output_rate>
 8004602:	4603      	mov	r3, r0
 8004604:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <mpu9250_basic_init+0x7d8>
    {
        mpu9250_interface_debug_print("mpu9250: set low power accel output rate failed.\n");
 800460c:	4842      	ldr	r0, [pc, #264]	; (8004718 <mpu9250_basic_init+0x8d4>)
 800460e:	f000 f997 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004612:	4833      	ldr	r0, [pc, #204]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004614:	f7fc f962 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 8004618:	2301      	movs	r3, #1
 800461a:	e05d      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default wake on motion */
    res = mpu9250_set_wake_on_motion(&gs_handle, MPU9250_BASIC_DEFAULT_WAKE_ON_MOTION);
 800461c:	2100      	movs	r1, #0
 800461e:	4830      	ldr	r0, [pc, #192]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004620:	f7ff f89c 	bl	800375c <mpu9250_set_wake_on_motion>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <mpu9250_basic_init+0x7fa>
    {
        mpu9250_interface_debug_print("mpu9250: set wake on motion failed.\n");
 800462e:	483b      	ldr	r0, [pc, #236]	; (800471c <mpu9250_basic_init+0x8d8>)
 8004630:	f000 f986 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004634:	482a      	ldr	r0, [pc, #168]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004636:	f7fc f951 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800463a:	2301      	movs	r3, #1
 800463c:	e04c      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu9250_set_accel_compare_with_previous_sample(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 800463e:	2101      	movs	r1, #1
 8004640:	4827      	ldr	r0, [pc, #156]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004642:	f7ff f8d9 	bl	80037f8 <mpu9250_set_accel_compare_with_previous_sample>
 8004646:	4603      	mov	r3, r0
 8004648:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <mpu9250_basic_init+0x81c>
    {
        mpu9250_interface_debug_print("mpu9250: set accel compare with previous sample failed.\n");
 8004650:	4833      	ldr	r0, [pc, #204]	; (8004720 <mpu9250_basic_init+0x8dc>)
 8004652:	f000 f975 	bl	8004940 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004656:	4822      	ldr	r0, [pc, #136]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004658:	f7fc f940 	bl	80008dc <mpu9250_deinit>
       
        return 1;
 800465c:	2301      	movs	r3, #1
 800465e:	e03b      	b.n	80046d8 <mpu9250_basic_init+0x894>
    }
    
    /* if iic interface */
    if (interface == MPU9250_INTERFACE_IIC)
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d137      	bne.n	80046d6 <mpu9250_basic_init+0x892>
    {
        /* mag init */
        res = mpu9250_mag_init(&gs_handle); 
 8004666:	481e      	ldr	r0, [pc, #120]	; (80046e0 <mpu9250_basic_init+0x89c>)
 8004668:	f7fd fefa 	bl	8002460 <mpu9250_mag_init>
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <mpu9250_basic_init+0x842>
        {
            mpu9250_interface_debug_print("mpu9250: mag init failed.\n");
 8004676:	482b      	ldr	r0, [pc, #172]	; (8004724 <mpu9250_basic_init+0x8e0>)
 8004678:	f000 f962 	bl	8004940 <mpu9250_interface_debug_print>
            (void)mpu9250_deinit(&gs_handle);
 800467c:	4818      	ldr	r0, [pc, #96]	; (80046e0 <mpu9250_basic_init+0x89c>)
 800467e:	f7fc f92d 	bl	80008dc <mpu9250_deinit>
           
            return 1;
 8004682:	2301      	movs	r3, #1
 8004684:	e028      	b.n	80046d8 <mpu9250_basic_init+0x894>
        }
        
        /* set the mag default mode */
        res = mpu9250_mag_set_mode(&gs_handle, MPU9250_BASIC_DEFAULT_MAGNETOMETER_MODE);
 8004686:	2106      	movs	r1, #6
 8004688:	4815      	ldr	r0, [pc, #84]	; (80046e0 <mpu9250_basic_init+0x89c>)
 800468a:	f7fe f907 	bl	800289c <mpu9250_mag_set_mode>
 800468e:	4603      	mov	r3, r0
 8004690:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <mpu9250_basic_init+0x86a>
        {
            mpu9250_interface_debug_print("mpu9250: mag set mode failed.\n");
 8004698:	4823      	ldr	r0, [pc, #140]	; (8004728 <mpu9250_basic_init+0x8e4>)
 800469a:	f000 f951 	bl	8004940 <mpu9250_interface_debug_print>
            (void)mpu9250_mag_deinit(&gs_handle); 
 800469e:	4810      	ldr	r0, [pc, #64]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80046a0:	f7fe f828 	bl	80026f4 <mpu9250_mag_deinit>
            (void)mpu9250_deinit(&gs_handle);
 80046a4:	480e      	ldr	r0, [pc, #56]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80046a6:	f7fc f919 	bl	80008dc <mpu9250_deinit>
           
            return 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e014      	b.n	80046d8 <mpu9250_basic_init+0x894>
        }
        
        /* set the mag default bits */
        res = mpu9250_mag_set_bits(&gs_handle, MPU9250_BASIC_DEFAULT_MAGNETOMETER_BITS);
 80046ae:	2101      	movs	r1, #1
 80046b0:	480b      	ldr	r0, [pc, #44]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80046b2:	f7fe f949 	bl	8002948 <mpu9250_mag_set_bits>
 80046b6:	4603      	mov	r3, r0
 80046b8:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <mpu9250_basic_init+0x892>
        {
            mpu9250_interface_debug_print("mpu9250: mag set bits failed.\n");
 80046c0:	481a      	ldr	r0, [pc, #104]	; (800472c <mpu9250_basic_init+0x8e8>)
 80046c2:	f000 f93d 	bl	8004940 <mpu9250_interface_debug_print>
            (void)mpu9250_mag_deinit(&gs_handle); 
 80046c6:	4806      	ldr	r0, [pc, #24]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80046c8:	f7fe f814 	bl	80026f4 <mpu9250_mag_deinit>
            (void)mpu9250_deinit(&gs_handle);
 80046cc:	4804      	ldr	r0, [pc, #16]	; (80046e0 <mpu9250_basic_init+0x89c>)
 80046ce:	f7fc f905 	bl	80008dc <mpu9250_deinit>
           
            return 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <mpu9250_basic_init+0x894>
        }
    }
    
    return 0;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000028 	.word	0x20000028
 80046e4:	0800bb9c 	.word	0x0800bb9c
 80046e8:	0800bbc0 	.word	0x0800bbc0
 80046ec:	0800bbe8 	.word	0x0800bbe8
 80046f0:	0800bc14 	.word	0x0800bc14
 80046f4:	0800bc38 	.word	0x0800bc38
 80046f8:	0800bc5c 	.word	0x0800bc5c
 80046fc:	0800bc88 	.word	0x0800bc88
 8004700:	0800bcb0 	.word	0x0800bcb0
 8004704:	0800bcd4 	.word	0x0800bcd4
 8004708:	0800bcf4 	.word	0x0800bcf4
 800470c:	0800bd1c 	.word	0x0800bd1c
 8004710:	0800bd44 	.word	0x0800bd44
 8004714:	0800bd70 	.word	0x0800bd70
 8004718:	0800bda4 	.word	0x0800bda4
 800471c:	0800bdd8 	.word	0x0800bdd8
 8004720:	0800be00 	.word	0x0800be00
 8004724:	0800be3c 	.word	0x0800be3c
 8004728:	0800be58 	.word	0x0800be58
 800472c:	0800be78 	.word	0x0800be78

08004730 <mpu9250_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_basic_read(float g[3], float dps[3], float ut[3])
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b098      	sub	sp, #96	; 0x60
 8004734:	af04      	add	r7, sp, #16
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
    float accel[3];
    float gyro[3];
    float mag[3];
    
    /* set 1 */
    len = 1;
 800473c:	2301      	movs	r3, #1
 800473e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    
    /* read data */
    if (mpu9250_read(&gs_handle,
 8004742:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004746:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800474a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800474e:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8004752:	9303      	str	r3, [sp, #12]
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	f107 0320 	add.w	r3, r7, #32
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	4603      	mov	r3, r0
 8004768:	4816      	ldr	r0, [pc, #88]	; (80047c4 <mpu9250_basic_read+0x94>)
 800476a:	f7fc f8fb 	bl	8000964 <mpu9250_read>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <mpu9250_basic_read+0x48>
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                    (int16_t (*)[3])&mag_raw, (float (*)[3])&mag,
                     &len) != 0
                    )
    {
        return 1;
 8004774:	2301      	movs	r3, #1
 8004776:	e021      	b.n	80047bc <mpu9250_basic_read+0x8c>
    }
    
    /* copy the data */
    g[0] = accel[0];
 8004778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]
    g[1] = accel[1];
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3304      	adds	r3, #4
 8004782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004784:	601a      	str	r2, [r3, #0]
    g[2] = accel[2];
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3308      	adds	r3, #8
 800478a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800478c:	601a      	str	r2, [r3, #0]
    dps[0] = gyro[0];
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	601a      	str	r2, [r3, #0]
    dps[1] = gyro[1];
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3304      	adds	r3, #4
 8004798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479a:	601a      	str	r2, [r3, #0]
    dps[2] = gyro[2];
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	3308      	adds	r3, #8
 80047a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a2:	601a      	str	r2, [r3, #0]
    ut[0] = mag[0];
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	601a      	str	r2, [r3, #0]
    ut[1] = mag[1];
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	601a      	str	r2, [r3, #0]
    ut[2] = mag[2];
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3308      	adds	r3, #8
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	601a      	str	r2, [r3, #0]
    
    return 0;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3750      	adds	r7, #80	; 0x50
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000028 	.word	0x20000028

080047c8 <mpu9250_basic_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t mpu9250_basic_deinit(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
    mpu9250_interface_t interface;
    
    /* get the interface */
    if (mpu9250_get_interface(&gs_handle, &interface) != 0)
 80047ce:	1dfb      	adds	r3, r7, #7
 80047d0:	4619      	mov	r1, r3
 80047d2:	4810      	ldr	r0, [pc, #64]	; (8004814 <mpu9250_basic_deinit+0x4c>)
 80047d4:	f7fb ff51 	bl	800067a <mpu9250_get_interface>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <mpu9250_basic_deinit+0x1a>
    {
        return 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	e013      	b.n	800480a <mpu9250_basic_deinit+0x42>
    }
    
    /* if interface iic*/
    if (interface == MPU9250_INTERFACE_IIC)
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <mpu9250_basic_deinit+0x30>
    {
        /* mag deinit */
        if (mpu9250_mag_deinit(&gs_handle) != 0)
 80047e8:	480a      	ldr	r0, [pc, #40]	; (8004814 <mpu9250_basic_deinit+0x4c>)
 80047ea:	f7fd ff83 	bl	80026f4 <mpu9250_mag_deinit>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <mpu9250_basic_deinit+0x30>
        {
            return 1;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e008      	b.n	800480a <mpu9250_basic_deinit+0x42>
        }
    }
    
    /* deinit */
    if (mpu9250_deinit(&gs_handle) != 0)
 80047f8:	4806      	ldr	r0, [pc, #24]	; (8004814 <mpu9250_basic_deinit+0x4c>)
 80047fa:	f7fc f86f 	bl	80008dc <mpu9250_deinit>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <mpu9250_basic_deinit+0x40>
    {
        return 1;
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <mpu9250_basic_deinit+0x42>
    }
    
    return 0;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000028 	.word	0x20000028

08004818 <mpu9250_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu9250_interface_iic_init(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
    return 0;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <mpu9250_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu9250_interface_iic_deinit(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
    return 0;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <mpu9250_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af04      	add	r7, sp, #16
 800483e:	603a      	str	r2, [r7, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]
 8004846:	460b      	mov	r3, r1
 8004848:	71bb      	strb	r3, [r7, #6]
 800484a:	4613      	mov	r3, r2
 800484c:	80bb      	strh	r3, [r7, #4]
	return not (HAL_I2C_Mem_Read(&hi2c1, addr, reg, 1, buf, len, HAL_MAX_DELAY) == HAL_OK);
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	b299      	uxth	r1, r3
 8004852:	79bb      	ldrb	r3, [r7, #6]
 8004854:	b29a      	uxth	r2, r3
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	9302      	str	r3, [sp, #8]
 800485c:	88bb      	ldrh	r3, [r7, #4]
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2301      	movs	r3, #1
 8004866:	4806      	ldr	r0, [pc, #24]	; (8004880 <mpu9250_interface_iic_read+0x48>)
 8004868:	f001 fb3a 	bl	8005ee0 <HAL_I2C_Mem_Read>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000046c 	.word	0x2000046c

08004884 <mpu9250_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu9250_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af04      	add	r7, sp, #16
 800488a:	603a      	str	r2, [r7, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
 8004892:	460b      	mov	r3, r1
 8004894:	71bb      	strb	r3, [r7, #6]
 8004896:	4613      	mov	r3, r2
 8004898:	80bb      	strh	r3, [r7, #4]
	return not (HAL_I2C_Mem_Write(&hi2c1, addr, reg, 1, buf, len, HAL_MAX_DELAY) == HAL_OK);
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	b299      	uxth	r1, r3
 800489e:	79bb      	ldrb	r3, [r7, #6]
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295
 80048a6:	9302      	str	r3, [sp, #8]
 80048a8:	88bb      	ldrh	r3, [r7, #4]
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2301      	movs	r3, #1
 80048b2:	4806      	ldr	r0, [pc, #24]	; (80048cc <mpu9250_interface_iic_write+0x48>)
 80048b4:	f001 f9f2 	bl	8005c9c <HAL_I2C_Mem_Write>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	2000046c 	.word	0x2000046c

080048d0 <mpu9250_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu9250_interface_spi_init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	Error_Handler();
 80048d4:	f000 fa2e 	bl	8004d34 <Error_Handler>
    return 0;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	bd80      	pop	{r7, pc}

080048de <mpu9250_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu9250_interface_spi_deinit(void)
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
    return 0;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <mpu9250_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4603      	mov	r3, r0
 80048f6:	6039      	str	r1, [r7, #0]
 80048f8:	71fb      	strb	r3, [r7, #7]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80bb      	strh	r3, [r7, #4]
	Error_Handler();
 80048fe:	f000 fa19 	bl	8004d34 <Error_Handler>
    return 0;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <mpu9250_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu9250_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	6039      	str	r1, [r7, #0]
 8004916:	71fb      	strb	r3, [r7, #7]
 8004918:	4613      	mov	r3, r2
 800491a:	80bb      	strh	r3, [r7, #4]
	Error_Handler();
 800491c:	f000 fa0a 	bl	8004d34 <Error_Handler>
    return 0;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <mpu9250_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mpu9250_interface_delay_ms(uint32_t ms)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fcda 	bl	80052ec <HAL_Delay>
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <mpu9250_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mpu9250_interface_debug_print(const char *const fmt, ...)
{
 8004940:	b40f      	push	{r0, r1, r2, r3}
 8004942:	b580      	push	{r7, lr}
 8004944:	af00      	add	r7, sp, #0
	Error_Handler();
 8004946:	f000 f9f5 	bl	8004d34 <Error_Handler>
}
 800494a:	bf00      	nop
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004952:	b004      	add	sp, #16
 8004954:	4770      	bx	lr
	...

08004958 <mpu9250_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the irq type
 * @note      none
 */
void mpu9250_interface_receive_callback(uint8_t type)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
    switch (type)
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	2b06      	cmp	r3, #6
 8004966:	d825      	bhi.n	80049b4 <mpu9250_interface_receive_callback+0x5c>
 8004968:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <mpu9250_interface_receive_callback+0x18>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	080049ad 	.word	0x080049ad
 8004974:	080049a5 	.word	0x080049a5
 8004978:	080049b5 	.word	0x080049b5
 800497c:	0800499d 	.word	0x0800499d
 8004980:	08004995 	.word	0x08004995
 8004984:	080049b5 	.word	0x080049b5
 8004988:	0800498d 	.word	0x0800498d
    {
        case MPU9250_INTERRUPT_MOTION :
        {
            mpu9250_interface_debug_print("mpu9250: irq motion.\n");
 800498c:	480d      	ldr	r0, [pc, #52]	; (80049c4 <mpu9250_interface_receive_callback+0x6c>)
 800498e:	f7ff ffd7 	bl	8004940 <mpu9250_interface_debug_print>
            
            break;
 8004992:	e013      	b.n	80049bc <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu9250_interface_debug_print("mpu9250: irq fifo overflow.\n");
 8004994:	480c      	ldr	r0, [pc, #48]	; (80049c8 <mpu9250_interface_receive_callback+0x70>)
 8004996:	f7ff ffd3 	bl	8004940 <mpu9250_interface_debug_print>
            
            break;
 800499a:	e00f      	b.n	80049bc <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_FSYNC_INT :
        {
            mpu9250_interface_debug_print("mpu9250: irq fsync int.\n");
 800499c:	480b      	ldr	r0, [pc, #44]	; (80049cc <mpu9250_interface_receive_callback+0x74>)
 800499e:	f7ff ffcf 	bl	8004940 <mpu9250_interface_debug_print>
            
            break;
 80049a2:	e00b      	b.n	80049bc <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_DMP :
        {
            mpu9250_interface_debug_print("mpu9250: irq dmp\n");
 80049a4:	480a      	ldr	r0, [pc, #40]	; (80049d0 <mpu9250_interface_receive_callback+0x78>)
 80049a6:	f7ff ffcb 	bl	8004940 <mpu9250_interface_debug_print>
            
            break;
 80049aa:	e007      	b.n	80049bc <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_DATA_READY :
        {
            mpu9250_interface_debug_print("mpu9250: irq data ready\n");
 80049ac:	4809      	ldr	r0, [pc, #36]	; (80049d4 <mpu9250_interface_receive_callback+0x7c>)
 80049ae:	f7ff ffc7 	bl	8004940 <mpu9250_interface_debug_print>
            
            break;
 80049b2:	e003      	b.n	80049bc <mpu9250_interface_receive_callback+0x64>
        }
        default :
        {
            mpu9250_interface_debug_print("mpu9250: irq unknown code.\n");
 80049b4:	4808      	ldr	r0, [pc, #32]	; (80049d8 <mpu9250_interface_receive_callback+0x80>)
 80049b6:	f7ff ffc3 	bl	8004940 <mpu9250_interface_debug_print>
            
            break;
 80049ba:	bf00      	nop
        }
    }
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	0800be98 	.word	0x0800be98
 80049c8:	0800beb0 	.word	0x0800beb0
 80049cc:	0800bed0 	.word	0x0800bed0
 80049d0:	0800beec 	.word	0x0800beec
 80049d4:	0800bf00 	.word	0x0800bf00
 80049d8:	0800bf1c 	.word	0x0800bf1c

080049dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e2:	f107 030c 	add.w	r3, r7, #12
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	609a      	str	r2, [r3, #8]
 80049ee:	60da      	str	r2, [r3, #12]
 80049f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <MX_GPIO_Init+0x8c>)
 80049f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f6:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <MX_GPIO_Init+0x8c>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049fe:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <MX_GPIO_Init+0x8c>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0a:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <MX_GPIO_Init+0x8c>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <MX_GPIO_Init+0x8c>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <MX_GPIO_Init+0x8c>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a22:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <MX_GPIO_Init+0x8c>)
 8004a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a26:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <MX_GPIO_Init+0x8c>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <MX_GPIO_Init+0x8c>)
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2108      	movs	r1, #8
 8004a3e:	480b      	ldr	r0, [pc, #44]	; (8004a6c <MX_GPIO_Init+0x90>)
 8004a40:	f000 ffdc 	bl	80059fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004a44:	2308      	movs	r3, #8
 8004a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4804      	ldr	r0, [pc, #16]	; (8004a6c <MX_GPIO_Init+0x90>)
 8004a5c:	f000 fdaa 	bl	80055b4 <HAL_GPIO_Init>

}
 8004a60:	bf00      	nop
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	48000400 	.word	0x48000400

08004a70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004a76:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <MX_I2C1_Init+0x78>)
 8004a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <MX_I2C1_Init+0x7c>)
 8004a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a86:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a8c:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004a92:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004aaa:	480e      	ldr	r0, [pc, #56]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004aac:	f000 ffd6 	bl	8005a5c <HAL_I2C_Init>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004ab6:	f000 f93d 	bl	8004d34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004aba:	2100      	movs	r1, #0
 8004abc:	4809      	ldr	r0, [pc, #36]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004abe:	f001 fe2b 	bl	8006718 <HAL_I2CEx_ConfigAnalogFilter>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004ac8:	f000 f934 	bl	8004d34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004acc:	2100      	movs	r1, #0
 8004ace:	4805      	ldr	r0, [pc, #20]	; (8004ae4 <MX_I2C1_Init+0x74>)
 8004ad0:	f001 fe8a 	bl	80067e8 <HAL_I2CEx_ConfigDigitalFilter>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004ada:	f000 f92b 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000046c 	.word	0x2000046c
 8004ae8:	40005400 	.word	0x40005400
 8004aec:	00702991 	.word	0x00702991

08004af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b09e      	sub	sp, #120	; 0x78
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	2254      	movs	r2, #84	; 0x54
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f005 fa04 	bl	8009f1e <memset>
  if(i2cHandle->Instance==I2C1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <HAL_I2C_MspInit+0xa8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d137      	bne.n	8004b90 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b20:	2340      	movs	r3, #64	; 0x40
 8004b22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b24:	2300      	movs	r3, #0
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f002 ff51 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004b38:	f000 f8fc 	bl	8004d34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b3c:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <HAL_I2C_MspInit+0xac>)
 8004b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b40:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <HAL_I2C_MspInit+0xac>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <HAL_I2C_MspInit+0xac>)
 8004b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b58:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b5a:	2312      	movs	r3, #18
 8004b5c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b62:	2303      	movs	r3, #3
 8004b64:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b66:	2304      	movs	r3, #4
 8004b68:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b74:	f000 fd1e 	bl	80055b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b78:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_I2C_MspInit+0xac>)
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	4a07      	ldr	r2, [pc, #28]	; (8004b9c <HAL_I2C_MspInit+0xac>)
 8004b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b82:	6593      	str	r3, [r2, #88]	; 0x58
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_I2C_MspInit+0xac>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004b90:	bf00      	nop
 8004b92:	3778      	adds	r7, #120	; 0x78
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40005400 	.word	0x40005400
 8004b9c:	40021000 	.word	0x40021000

08004ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	; 0x30
 8004ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ba6:	f000 fb2c 	bl	8005202 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004baa:	f000 f851 	bl	8004c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004bae:	f7ff ff15 	bl	80049dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004bb2:	f000 fa63 	bl	800507c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004bb6:	f7ff ff5b 	bl	8004a70 <MX_I2C1_Init>
  MX_TIM2_Init();
 8004bba:	f000 f949 	bl	8004e50 <MX_TIM2_Init>
  MX_TIM6_Init();
 8004bbe:	f000 f995 	bl	8004eec <MX_TIM6_Init>
  MX_TIM7_Init();
 8004bc2:	f000 f9c9 	bl	8004f58 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  mpu9250_address_t addr = MPU9250_ADDRESS_AD0_LOW;
 8004bc6:	23d0      	movs	r3, #208	; 0xd0
 8004bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_Delay(100);
 8004bcc:	2064      	movs	r0, #100	; 0x64
 8004bce:	f000 fb8d 	bl	80052ec <HAL_Delay>
  uint8_t res = mpu9250_basic_init(MPU9250_INTERFACE_IIC, addr);
 8004bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f7ff f933 	bl	8003e44 <mpu9250_basic_init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  float measurements[9];
  HAL_TIM_Base_Start_IT(&htim2);
 8004be4:	4817      	ldr	r0, [pc, #92]	; (8004c44 <main+0xa4>)
 8004be6:	f003 fc8d 	bl	8008504 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t start_byte = '$';
 8004bea:	2324      	movs	r3, #36	; 0x24
 8004bec:	71fb      	strb	r3, [r7, #7]
	if (read_acc) {
 8004bee:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <main+0xa8>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f9      	beq.n	8004bea <main+0x4a>
		read_acc = false;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <main+0xa8>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
		if (mpu9250_basic_read(measurements, measurements + 3, measurements + 6) != 0)
 8004bfc:	f107 0308 	add.w	r3, r7, #8
 8004c00:	330c      	adds	r3, #12
 8004c02:	f107 0208 	add.w	r2, r7, #8
 8004c06:	3218      	adds	r2, #24
 8004c08:	f107 0008 	add.w	r0, r7, #8
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f7ff fd8f 	bl	8004730 <mpu9250_basic_read>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <main+0x80>
		{
			(void)mpu9250_basic_deinit();
 8004c18:	f7ff fdd6 	bl	80047c8 <mpu9250_basic_deinit>
			return 1;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e00d      	b.n	8004c3c <main+0x9c>
		}
	HAL_UART_Transmit(&huart2, &start_byte, 1, 100);
 8004c20:	1df9      	adds	r1, r7, #7
 8004c22:	2364      	movs	r3, #100	; 0x64
 8004c24:	2201      	movs	r2, #1
 8004c26:	4809      	ldr	r0, [pc, #36]	; (8004c4c <main+0xac>)
 8004c28:	f004 fb64 	bl	80092f4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)measurements, sizeof(measurements), 100);
 8004c2c:	f107 0108 	add.w	r1, r7, #8
 8004c30:	2364      	movs	r3, #100	; 0x64
 8004c32:	2224      	movs	r2, #36	; 0x24
 8004c34:	4805      	ldr	r0, [pc, #20]	; (8004c4c <main+0xac>)
 8004c36:	f004 fb5d 	bl	80092f4 <HAL_UART_Transmit>
  {
 8004c3a:	e7d6      	b.n	8004bea <main+0x4a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3730      	adds	r7, #48	; 0x30
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200004c4 	.word	0x200004c4
 8004c48:	200004c0 	.word	0x200004c0
 8004c4c:	200005a8 	.word	0x200005a8

08004c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b096      	sub	sp, #88	; 0x58
 8004c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	2244      	movs	r2, #68	; 0x44
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f005 f95d 	bl	8009f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c64:	463b      	mov	r3, r7
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	609a      	str	r2, [r3, #8]
 8004c6e:	60da      	str	r2, [r3, #12]
 8004c70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004c72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c76:	f001 fe3b 	bl	80068f0 <HAL_PWREx_ControlVoltageScaling>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004c80:	f000 f858 	bl	8004d34 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004c84:	f001 fe16 	bl	80068b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <SystemClock_Config+0xc0>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <SystemClock_Config+0xc0>)
 8004c90:	f023 0318 	bic.w	r3, r3, #24
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004c98:	2314      	movs	r3, #20
 8004c9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004ca8:	2360      	movs	r3, #96	; 0x60
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cac:	2302      	movs	r3, #2
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004cb8:	2328      	movs	r3, #40	; 0x28
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004cbc:	2307      	movs	r3, #7
 8004cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 fe71 	bl	80069b4 <HAL_RCC_OscConfig>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004cd8:	f000 f82c 	bl	8004d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cdc:	230f      	movs	r3, #15
 8004cde:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f002 fba9 	bl	800744c <HAL_RCC_ClockConfig>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004d00:	f000 f818 	bl	8004d34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004d04:	f003 f98c 	bl	8008020 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004d08:	bf00      	nop
 8004d0a:	3758      	adds	r7, #88	; 0x58
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40021000 	.word	0x40021000

08004d14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	read_acc = true;
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	200004c0 	.word	0x200004c0

08004d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d38:	b672      	cpsid	i
}
 8004d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d3c:	e7fe      	b.n	8004d3c <Error_Handler+0x8>

08004d3e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <HAL_MspInit+0x44>)
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <HAL_MspInit+0x44>)
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	6613      	str	r3, [r2, #96]	; 0x60
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_MspInit+0x44>)
 8004d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_MspInit+0x44>)
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <HAL_MspInit+0x44>)
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_MspInit+0x44>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000

08004d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004da0:	e7fe      	b.n	8004da0 <NMI_Handler+0x4>

08004da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004da6:	e7fe      	b.n	8004da6 <HardFault_Handler+0x4>

08004da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dac:	e7fe      	b.n	8004dac <MemManage_Handler+0x4>

08004dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004db2:	e7fe      	b.n	8004db2 <BusFault_Handler+0x4>

08004db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004db8:	e7fe      	b.n	8004db8 <UsageFault_Handler+0x4>

08004dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004de8:	f000 fa60 	bl	80052ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004df4:	4802      	ldr	r0, [pc, #8]	; (8004e00 <TIM2_IRQHandler+0x10>)
 8004df6:	f003 fc03 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200004c4 	.word	0x200004c4

08004e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e08:	4802      	ldr	r0, [pc, #8]	; (8004e14 <TIM6_DAC_IRQHandler+0x10>)
 8004e0a:	f003 fbf9 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000510 	.word	0x20000510

08004e18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004e1c:	4802      	ldr	r0, [pc, #8]	; (8004e28 <TIM7_IRQHandler+0x10>)
 8004e1e:	f003 fbef 	bl	8008600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	2000055c 	.word	0x2000055c

08004e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <SystemInit+0x20>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	4a05      	ldr	r2, [pc, #20]	; (8004e4c <SystemInit+0x20>)
 8004e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e000ed00 	.word	0xe000ed00

08004e50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e56:	f107 0310 	add.w	r3, r7, #16
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
 8004e60:	609a      	str	r2, [r3, #8]
 8004e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e64:	1d3b      	adds	r3, r7, #4
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	605a      	str	r2, [r3, #4]
 8004e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80 - 1;
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004e78:	224f      	movs	r2, #79	; 0x4f
 8004e7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8004e82:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004e84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e90:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004e98:	f003 fa52 	bl	8008340 <HAL_TIM_Base_Init>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004ea2:	f7ff ff47 	bl	8004d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004eac:	f107 0310 	add.w	r3, r7, #16
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004eb4:	f003 fca6 	bl	8008804 <HAL_TIM_ConfigClockSource>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004ebe:	f7ff ff39 	bl	8004d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4806      	ldr	r0, [pc, #24]	; (8004ee8 <MX_TIM2_Init+0x98>)
 8004ed0:	f004 f85a 	bl	8008f88 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004eda:	f7ff ff2b 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ede:	bf00      	nop
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200004c4 	.word	0x200004c4

08004eec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004efc:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <MX_TIM6_Init+0x64>)
 8004efe:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <MX_TIM6_Init+0x68>)
 8004f00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80 - 1;
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <MX_TIM6_Init+0x64>)
 8004f04:	224f      	movs	r2, #79	; 0x4f
 8004f06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <MX_TIM6_Init+0x64>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <MX_TIM6_Init+0x64>)
 8004f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <MX_TIM6_Init+0x64>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004f1c:	480c      	ldr	r0, [pc, #48]	; (8004f50 <MX_TIM6_Init+0x64>)
 8004f1e:	f003 fa0f 	bl	8008340 <HAL_TIM_Base_Init>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004f28:	f7ff ff04 	bl	8004d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	4805      	ldr	r0, [pc, #20]	; (8004f50 <MX_TIM6_Init+0x64>)
 8004f3a:	f004 f825 	bl	8008f88 <HAL_TIMEx_MasterConfigSynchronization>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004f44:	f7ff fef6 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000510 	.word	0x20000510
 8004f54:	40001000 	.word	0x40001000

08004f58 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <MX_TIM7_Init+0x64>)
 8004f6a:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <MX_TIM7_Init+0x68>)
 8004f6c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80 - 1;
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <MX_TIM7_Init+0x64>)
 8004f70:	224f      	movs	r2, #79	; 0x4f
 8004f72:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f74:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <MX_TIM7_Init+0x64>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000 - 1;
 8004f7a:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <MX_TIM7_Init+0x64>)
 8004f7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <MX_TIM7_Init+0x64>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004f88:	480c      	ldr	r0, [pc, #48]	; (8004fbc <MX_TIM7_Init+0x64>)
 8004f8a:	f003 f9d9 	bl	8008340 <HAL_TIM_Base_Init>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004f94:	f7ff fece 	bl	8004d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4805      	ldr	r0, [pc, #20]	; (8004fbc <MX_TIM7_Init+0x64>)
 8004fa6:	f003 ffef 	bl	8008f88 <HAL_TIMEx_MasterConfigSynchronization>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004fb0:	f7ff fec0 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	2000055c 	.word	0x2000055c
 8004fc0:	40001400 	.word	0x40001400

08004fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d114      	bne.n	8005000 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	4a25      	ldr	r2, [pc, #148]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	201c      	movs	r0, #28
 8004ff4:	f000 fa8e 	bl	8005514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ff8:	201c      	movs	r0, #28
 8004ffa:	f000 fab7 	bl	800556c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004ffe:	e032      	b.n	8005066 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1b      	ldr	r2, [pc, #108]	; (8005074 <HAL_TIM_Base_MspInit+0xb0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d114      	bne.n	8005034 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800500a:	4b19      	ldr	r3, [pc, #100]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 8005010:	f043 0310 	orr.w	r3, r3, #16
 8005014:	6593      	str	r3, [r2, #88]	; 0x58
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005022:	2200      	movs	r2, #0
 8005024:	2100      	movs	r1, #0
 8005026:	2036      	movs	r0, #54	; 0x36
 8005028:	f000 fa74 	bl	8005514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800502c:	2036      	movs	r0, #54	; 0x36
 800502e:	f000 fa9d 	bl	800556c <HAL_NVIC_EnableIRQ>
}
 8005032:	e018      	b.n	8005066 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0f      	ldr	r2, [pc, #60]	; (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d113      	bne.n	8005066 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 8005044:	f043 0320 	orr.w	r3, r3, #32
 8005048:	6593      	str	r3, [r2, #88]	; 0x58
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_TIM_Base_MspInit+0xac>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	2037      	movs	r0, #55	; 0x37
 800505c:	f000 fa5a 	bl	8005514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005060:	2037      	movs	r0, #55	; 0x37
 8005062:	f000 fa83 	bl	800556c <HAL_NVIC_EnableIRQ>
}
 8005066:	bf00      	nop
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	40001000 	.word	0x40001000
 8005078:	40001400 	.word	0x40001400

0800507c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 8005082:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <MX_USART2_UART_Init+0x58>)
 8005084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8005086:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <MX_USART2_UART_Init+0x5c>)
 800508a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 8005094:	2200      	movs	r2, #0
 8005096:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 80050a0:	220c      	movs	r2, #12
 80050a2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050a4:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80050bc:	4804      	ldr	r0, [pc, #16]	; (80050d0 <MX_USART2_UART_Init+0x54>)
 80050be:	f004 f895 	bl	80091ec <HAL_UART_Init>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80050c8:	f7ff fe34 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200005a8 	.word	0x200005a8
 80050d4:	40004400 	.word	0x40004400
 80050d8:	0007a120 	.word	0x0007a120

080050dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b09e      	sub	sp, #120	; 0x78
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050f4:	f107 0310 	add.w	r3, r7, #16
 80050f8:	2254      	movs	r2, #84	; 0x54
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f004 ff0e 	bl	8009f1e <memset>
  if(uartHandle->Instance==USART2)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a28      	ldr	r2, [pc, #160]	; (80051a8 <HAL_UART_MspInit+0xcc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d148      	bne.n	800519e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800510c:	2302      	movs	r3, #2
 800510e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005110:	2300      	movs	r3, #0
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005114:	f107 0310 	add.w	r3, r7, #16
 8005118:	4618      	mov	r0, r3
 800511a:	f002 fc5b 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005124:	f7ff fe06 	bl	8004d34 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005128:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_UART_MspInit+0xd0>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <HAL_UART_MspInit+0xd0>)
 800512e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005132:	6593      	str	r3, [r2, #88]	; 0x58
 8005134:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <HAL_UART_MspInit+0xd0>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005140:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <HAL_UART_MspInit+0xd0>)
 8005142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <HAL_UART_MspInit+0xd0>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800514c:	4b17      	ldr	r3, [pc, #92]	; (80051ac <HAL_UART_MspInit+0xd0>)
 800514e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005158:	2304      	movs	r3, #4
 800515a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005160:	2300      	movs	r3, #0
 8005162:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005164:	2303      	movs	r3, #3
 8005166:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005168:	2307      	movs	r3, #7
 800516a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800516c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005170:	4619      	mov	r1, r3
 8005172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005176:	f000 fa1d 	bl	80055b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005180:	2302      	movs	r3, #2
 8005182:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005184:	2300      	movs	r3, #0
 8005186:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005188:	2303      	movs	r3, #3
 800518a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800518c:	2303      	movs	r3, #3
 800518e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005190:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005194:	4619      	mov	r1, r3
 8005196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800519a:	f000 fa0b 	bl	80055b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800519e:	bf00      	nop
 80051a0:	3778      	adds	r7, #120	; 0x78
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40004400 	.word	0x40004400
 80051ac:	40021000 	.word	0x40021000

080051b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80051b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80051b4:	f7ff fe3a 	bl	8004e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051b8:	480c      	ldr	r0, [pc, #48]	; (80051ec <LoopForever+0x6>)
  ldr r1, =_edata
 80051ba:	490d      	ldr	r1, [pc, #52]	; (80051f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051bc:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <LoopForever+0xe>)
  movs r3, #0
 80051be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051c0:	e002      	b.n	80051c8 <LoopCopyDataInit>

080051c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051c6:	3304      	adds	r3, #4

080051c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051cc:	d3f9      	bcc.n	80051c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051d0:	4c0a      	ldr	r4, [pc, #40]	; (80051fc <LoopForever+0x16>)
  movs r3, #0
 80051d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051d4:	e001      	b.n	80051da <LoopFillZerobss>

080051d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051d8:	3204      	adds	r2, #4

080051da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051dc:	d3fb      	bcc.n	80051d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051de:	f004 fea7 	bl	8009f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80051e2:	f7ff fcdd 	bl	8004ba0 <main>

080051e6 <LoopForever>:

LoopForever:
    b LoopForever
 80051e6:	e7fe      	b.n	80051e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80051e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80051ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80051f4:	0800c37c 	.word	0x0800c37c
  ldr r2, =_sbss
 80051f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80051fc:	20000634 	.word	0x20000634

08005200 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005200:	e7fe      	b.n	8005200 <ADC1_IRQHandler>

08005202 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800520c:	2003      	movs	r0, #3
 800520e:	f000 f961 	bl	80054d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005212:	2000      	movs	r0, #0
 8005214:	f000 f80e 	bl	8005234 <HAL_InitTick>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	71fb      	strb	r3, [r7, #7]
 8005222:	e001      	b.n	8005228 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005224:	f7ff fd96 	bl	8004d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005228:	79fb      	ldrb	r3, [r7, #7]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005240:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <HAL_InitTick+0x6c>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d023      	beq.n	8005290 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005248:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <HAL_InitTick+0x70>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <HAL_InitTick+0x6c>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	4619      	mov	r1, r3
 8005252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005256:	fbb3 f3f1 	udiv	r3, r3, r1
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f99c 	bl	800559c <HAL_SYSTICK_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b0f      	cmp	r3, #15
 800526e:	d809      	bhi.n	8005284 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005270:	2200      	movs	r2, #0
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	f000 f94c 	bl	8005514 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800527c:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <HAL_InitTick+0x74>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e007      	b.n	8005294 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
 8005288:	e004      	b.n	8005294 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
 800528e:	e001      	b.n	8005294 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000008 	.word	0x20000008
 80052a4:	20000000 	.word	0x20000000
 80052a8:	20000004 	.word	0x20000004

080052ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_IncTick+0x20>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_IncTick+0x24>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4413      	add	r3, r2
 80052bc:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <HAL_IncTick+0x24>)
 80052be:	6013      	str	r3, [r2, #0]
}
 80052c0:	bf00      	nop
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000008 	.word	0x20000008
 80052d0:	20000630 	.word	0x20000630

080052d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return uwTick;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_GetTick+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000630 	.word	0x20000630

080052ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052f4:	f7ff ffee 	bl	80052d4 <HAL_GetTick>
 80052f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d005      	beq.n	8005312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <HAL_Delay+0x44>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005312:	bf00      	nop
 8005314:	f7ff ffde 	bl	80052d4 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	429a      	cmp	r2, r3
 8005322:	d8f7      	bhi.n	8005314 <HAL_Delay+0x28>
  {
  }
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000008 	.word	0x20000008

08005334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <__NVIC_SetPriorityGrouping+0x44>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005350:	4013      	ands	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800535c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005366:	4a04      	ldr	r2, [pc, #16]	; (8005378 <__NVIC_SetPriorityGrouping+0x44>)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	60d3      	str	r3, [r2, #12]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	e000ed00 	.word	0xe000ed00

0800537c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <__NVIC_GetPriorityGrouping+0x18>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	0a1b      	lsrs	r3, r3, #8
 8005386:	f003 0307 	and.w	r3, r3, #7
}
 800538a:	4618      	mov	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	e000ed00 	.word	0xe000ed00

08005398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	db0b      	blt.n	80053c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	f003 021f 	and.w	r2, r3, #31
 80053b0:	4907      	ldr	r1, [pc, #28]	; (80053d0 <__NVIC_EnableIRQ+0x38>)
 80053b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	2001      	movs	r0, #1
 80053ba:	fa00 f202 	lsl.w	r2, r0, r2
 80053be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	e000e100 	.word	0xe000e100

080053d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	6039      	str	r1, [r7, #0]
 80053de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	db0a      	blt.n	80053fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	490c      	ldr	r1, [pc, #48]	; (8005420 <__NVIC_SetPriority+0x4c>)
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	0112      	lsls	r2, r2, #4
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	440b      	add	r3, r1
 80053f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053fc:	e00a      	b.n	8005414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	4908      	ldr	r1, [pc, #32]	; (8005424 <__NVIC_SetPriority+0x50>)
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	3b04      	subs	r3, #4
 800540c:	0112      	lsls	r2, r2, #4
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	440b      	add	r3, r1
 8005412:	761a      	strb	r2, [r3, #24]
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	e000e100 	.word	0xe000e100
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005428:	b480      	push	{r7}
 800542a:	b089      	sub	sp, #36	; 0x24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f1c3 0307 	rsb	r3, r3, #7
 8005442:	2b04      	cmp	r3, #4
 8005444:	bf28      	it	cs
 8005446:	2304      	movcs	r3, #4
 8005448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3304      	adds	r3, #4
 800544e:	2b06      	cmp	r3, #6
 8005450:	d902      	bls.n	8005458 <NVIC_EncodePriority+0x30>
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3b03      	subs	r3, #3
 8005456:	e000      	b.n	800545a <NVIC_EncodePriority+0x32>
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800545c:	f04f 32ff 	mov.w	r2, #4294967295
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43da      	mvns	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	401a      	ands	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005470:	f04f 31ff 	mov.w	r1, #4294967295
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	43d9      	mvns	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005480:	4313      	orrs	r3, r2
         );
}
 8005482:	4618      	mov	r0, r3
 8005484:	3724      	adds	r7, #36	; 0x24
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
	...

08005490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3b01      	subs	r3, #1
 800549c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054a0:	d301      	bcc.n	80054a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054a2:	2301      	movs	r3, #1
 80054a4:	e00f      	b.n	80054c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <SysTick_Config+0x40>)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ae:	210f      	movs	r1, #15
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	f7ff ff8e 	bl	80053d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <SysTick_Config+0x40>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054be:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <SysTick_Config+0x40>)
 80054c0:	2207      	movs	r2, #7
 80054c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	e000e010 	.word	0xe000e010

080054d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b07      	cmp	r3, #7
 80054e0:	d00f      	beq.n	8005502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	d00c      	beq.n	8005502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d009      	beq.n	8005502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d006      	beq.n	8005502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d003      	beq.n	8005502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80054fa:	21a6      	movs	r1, #166	; 0xa6
 80054fc:	4804      	ldr	r0, [pc, #16]	; (8005510 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80054fe:	f7ff fc1e 	bl	8004d3e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff ff16 	bl	8005334 <__NVIC_SetPriorityGrouping>
}
 8005508:	bf00      	nop
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	0800c0d8 	.word	0x0800c0d8

08005514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d903      	bls.n	8005534 <HAL_NVIC_SetPriority+0x20>
 800552c:	21be      	movs	r1, #190	; 0xbe
 800552e:	480e      	ldr	r0, [pc, #56]	; (8005568 <HAL_NVIC_SetPriority+0x54>)
 8005530:	f7ff fc05 	bl	8004d3e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d903      	bls.n	8005542 <HAL_NVIC_SetPriority+0x2e>
 800553a:	21bf      	movs	r1, #191	; 0xbf
 800553c:	480a      	ldr	r0, [pc, #40]	; (8005568 <HAL_NVIC_SetPriority+0x54>)
 800553e:	f7ff fbfe 	bl	8004d3e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8005542:	f7ff ff1b 	bl	800537c <__NVIC_GetPriorityGrouping>
 8005546:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	6978      	ldr	r0, [r7, #20]
 800554e:	f7ff ff6b 	bl	8005428 <NVIC_EncodePriority>
 8005552:	4602      	mov	r2, r0
 8005554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff ff3a 	bl	80053d4 <__NVIC_SetPriority>
}
 8005560:	bf00      	nop
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	0800c0d8 	.word	0x0800c0d8

0800556c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557a:	2b00      	cmp	r3, #0
 800557c:	da03      	bge.n	8005586 <HAL_NVIC_EnableIRQ+0x1a>
 800557e:	21d2      	movs	r1, #210	; 0xd2
 8005580:	4805      	ldr	r0, [pc, #20]	; (8005598 <HAL_NVIC_EnableIRQ+0x2c>)
 8005582:	f7ff fbdc 	bl	8004d3e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff ff04 	bl	8005398 <__NVIC_EnableIRQ>
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	0800c0d8 	.word	0x0800c0d8

0800559c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ff73 	bl	8005490 <SysTick_Config>
 80055aa:	4603      	mov	r3, r0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055c8:	d00f      	beq.n	80055ea <HAL_GPIO_Init+0x36>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a34      	ldr	r2, [pc, #208]	; (80056a0 <HAL_GPIO_Init+0xec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <HAL_GPIO_Init+0x36>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a33      	ldr	r2, [pc, #204]	; (80056a4 <HAL_GPIO_Init+0xf0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <HAL_GPIO_Init+0x36>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a32      	ldr	r2, [pc, #200]	; (80056a8 <HAL_GPIO_Init+0xf4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <HAL_GPIO_Init+0x36>
 80055e2:	21aa      	movs	r1, #170	; 0xaa
 80055e4:	4831      	ldr	r0, [pc, #196]	; (80056ac <HAL_GPIO_Init+0xf8>)
 80055e6:	f7ff fbaa 	bl	8004d3e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_GPIO_Init+0x4c>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_GPIO_Init+0x54>
 8005600:	21ab      	movs	r1, #171	; 0xab
 8005602:	482a      	ldr	r0, [pc, #168]	; (80056ac <HAL_GPIO_Init+0xf8>)
 8005604:	f7ff fb9b 	bl	8004d3e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 81e4 	beq.w	80059da <HAL_GPIO_Init+0x426>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b01      	cmp	r3, #1
 8005618:	f000 81df 	beq.w	80059da <HAL_GPIO_Init+0x426>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b11      	cmp	r3, #17
 8005622:	f000 81da 	beq.w	80059da <HAL_GPIO_Init+0x426>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b02      	cmp	r3, #2
 800562c:	f000 81d5 	beq.w	80059da <HAL_GPIO_Init+0x426>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b12      	cmp	r3, #18
 8005636:	f000 81d0 	beq.w	80059da <HAL_GPIO_Init+0x426>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005642:	f000 81ca 	beq.w	80059da <HAL_GPIO_Init+0x426>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800564e:	f000 81c4 	beq.w	80059da <HAL_GPIO_Init+0x426>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800565a:	f000 81be 	beq.w	80059da <HAL_GPIO_Init+0x426>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005666:	f000 81b8 	beq.w	80059da <HAL_GPIO_Init+0x426>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005672:	f000 81b2 	beq.w	80059da <HAL_GPIO_Init+0x426>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800567e:	f000 81ac 	beq.w	80059da <HAL_GPIO_Init+0x426>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b03      	cmp	r3, #3
 8005688:	f000 81a7 	beq.w	80059da <HAL_GPIO_Init+0x426>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b0b      	cmp	r3, #11
 8005692:	f000 81a2 	beq.w	80059da <HAL_GPIO_Init+0x426>
 8005696:	21ac      	movs	r1, #172	; 0xac
 8005698:	4804      	ldr	r0, [pc, #16]	; (80056ac <HAL_GPIO_Init+0xf8>)
 800569a:	f7ff fb50 	bl	8004d3e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800569e:	e19c      	b.n	80059da <HAL_GPIO_Init+0x426>
 80056a0:	48000400 	.word	0x48000400
 80056a4:	48000800 	.word	0x48000800
 80056a8:	48001c00 	.word	0x48001c00
 80056ac:	0800c114 	.word	0x0800c114
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	2101      	movs	r1, #1
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8186 	beq.w	80059d4 <HAL_GPIO_Init+0x420>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d005      	beq.n	80056e0 <HAL_GPIO_Init+0x12c>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d144      	bne.n	800576a <HAL_GPIO_Init+0x1b6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00f      	beq.n	8005708 <HAL_GPIO_Init+0x154>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d00b      	beq.n	8005708 <HAL_GPIO_Init+0x154>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d007      	beq.n	8005708 <HAL_GPIO_Init+0x154>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x154>
 8005700:	21bb      	movs	r1, #187	; 0xbb
 8005702:	487c      	ldr	r0, [pc, #496]	; (80058f4 <HAL_GPIO_Init+0x340>)
 8005704:	f7ff fb1b 	bl	8004d3e <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	2203      	movs	r2, #3
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800573e:	2201      	movs	r2, #1
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4013      	ands	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 0201 	and.w	r2, r3, #1
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b03      	cmp	r3, #3
 8005774:	d027      	beq.n	80057c6 <HAL_GPIO_Init+0x212>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <HAL_GPIO_Init+0x1e2>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d007      	beq.n	8005796 <HAL_GPIO_Init+0x1e2>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x1e2>
 800578e:	21dc      	movs	r1, #220	; 0xdc
 8005790:	4858      	ldr	r0, [pc, #352]	; (80058f4 <HAL_GPIO_Init+0x340>)
 8005792:	f7ff fad4 	bl	8004d3e <assert_failed>

        temp = GPIOx->PUPDR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	2203      	movs	r2, #3
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43db      	mvns	r3, r3
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d13f      	bne.n	8005852 <HAL_GPIO_Init+0x29e>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057d8:	d00f      	beq.n	80057fa <HAL_GPIO_Init+0x246>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a46      	ldr	r2, [pc, #280]	; (80058f8 <HAL_GPIO_Init+0x344>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00b      	beq.n	80057fa <HAL_GPIO_Init+0x246>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a45      	ldr	r2, [pc, #276]	; (80058fc <HAL_GPIO_Init+0x348>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <HAL_GPIO_Init+0x246>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a44      	ldr	r2, [pc, #272]	; (8005900 <HAL_GPIO_Init+0x34c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <HAL_GPIO_Init+0x246>
 80057f2:	21e8      	movs	r1, #232	; 0xe8
 80057f4:	483f      	ldr	r0, [pc, #252]	; (80058f4 <HAL_GPIO_Init+0x340>)
 80057f6:	f7ff faa2 	bl	8004d3e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b0f      	cmp	r3, #15
 8005800:	d903      	bls.n	800580a <HAL_GPIO_Init+0x256>
 8005802:	21e9      	movs	r1, #233	; 0xe9
 8005804:	483b      	ldr	r0, [pc, #236]	; (80058f4 <HAL_GPIO_Init+0x340>)
 8005806:	f7ff fa9a 	bl	8004d3e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	08da      	lsrs	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3208      	adds	r2, #8
 8005812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	220f      	movs	r2, #15
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43db      	mvns	r3, r3
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4013      	ands	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	08da      	lsrs	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3208      	adds	r2, #8
 800584c:	6939      	ldr	r1, [r7, #16]
 800584e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	2203      	movs	r2, #3
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43db      	mvns	r3, r3
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4013      	ands	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 0203 	and.w	r2, r3, #3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80a0 	beq.w	80059d4 <HAL_GPIO_Init+0x420>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <HAL_GPIO_Init+0x350>)
 8005896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005898:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <HAL_GPIO_Init+0x350>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	6613      	str	r3, [r2, #96]	; 0x60
 80058a0:	4b18      	ldr	r3, [pc, #96]	; (8005904 <HAL_GPIO_Init+0x350>)
 80058a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058ac:	4a16      	ldr	r2, [pc, #88]	; (8005908 <HAL_GPIO_Init+0x354>)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	089b      	lsrs	r3, r3, #2
 80058b2:	3302      	adds	r3, #2
 80058b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	220f      	movs	r2, #15
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4013      	ands	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058d6:	d019      	beq.n	800590c <HAL_GPIO_Init+0x358>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <HAL_GPIO_Init+0x344>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <HAL_GPIO_Init+0x33c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a06      	ldr	r2, [pc, #24]	; (80058fc <HAL_GPIO_Init+0x348>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_GPIO_Init+0x338>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e010      	b.n	800590e <HAL_GPIO_Init+0x35a>
 80058ec:	2307      	movs	r3, #7
 80058ee:	e00e      	b.n	800590e <HAL_GPIO_Init+0x35a>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e00c      	b.n	800590e <HAL_GPIO_Init+0x35a>
 80058f4:	0800c114 	.word	0x0800c114
 80058f8:	48000400 	.word	0x48000400
 80058fc:	48000800 	.word	0x48000800
 8005900:	48001c00 	.word	0x48001c00
 8005904:	40021000 	.word	0x40021000
 8005908:	40010000 	.word	0x40010000
 800590c:	2300      	movs	r3, #0
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	f002 0203 	and.w	r2, r2, #3
 8005914:	0092      	lsls	r2, r2, #2
 8005916:	4093      	lsls	r3, r2
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800591e:	4935      	ldr	r1, [pc, #212]	; (80059f4 <HAL_GPIO_Init+0x440>)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	3302      	adds	r3, #2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800592c:	4b32      	ldr	r3, [pc, #200]	; (80059f8 <HAL_GPIO_Init+0x444>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	43db      	mvns	r3, r3
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4013      	ands	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_GPIO_Init+0x39c>
        {
          temp |= iocurrent;
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005950:	4a29      	ldr	r2, [pc, #164]	; (80059f8 <HAL_GPIO_Init+0x444>)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005956:	4b28      	ldr	r3, [pc, #160]	; (80059f8 <HAL_GPIO_Init+0x444>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	43db      	mvns	r3, r3
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4013      	ands	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_Init+0x3c6>
        {
          temp |= iocurrent;
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800597a:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_GPIO_Init+0x444>)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005980:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_GPIO_Init+0x444>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	43db      	mvns	r3, r3
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_GPIO_Init+0x3f0>
        {
          temp |= iocurrent;
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059a4:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <HAL_GPIO_Init+0x444>)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <HAL_GPIO_Init+0x444>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x41a>
        {
          temp |= iocurrent;
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059ce:	4a0a      	ldr	r2, [pc, #40]	; (80059f8 <HAL_GPIO_Init+0x444>)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3301      	adds	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f47f ae63 	bne.w	80056b0 <HAL_GPIO_Init+0xfc>
  }
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40010000 	.word	0x40010000
 80059f8:	40010400 	.word	0x40010400

080059fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	807b      	strh	r3, [r7, #2]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005a0c:	887b      	ldrh	r3, [r7, #2]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <HAL_GPIO_WritePin+0x20>
 8005a12:	887b      	ldrh	r3, [r7, #2]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <HAL_GPIO_WritePin+0x2a>
 8005a1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a20:	480d      	ldr	r0, [pc, #52]	; (8005a58 <HAL_GPIO_WritePin+0x5c>)
 8005a22:	f7ff f98c 	bl	8004d3e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005a26:	787b      	ldrb	r3, [r7, #1]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_GPIO_WritePin+0x40>
 8005a2c:	787b      	ldrb	r3, [r7, #1]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d004      	beq.n	8005a3c <HAL_GPIO_WritePin+0x40>
 8005a32:	f240 11af 	movw	r1, #431	; 0x1af
 8005a36:	4808      	ldr	r0, [pc, #32]	; (8005a58 <HAL_GPIO_WritePin+0x5c>)
 8005a38:	f7ff f981 	bl	8004d3e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005a3c:	787b      	ldrb	r3, [r7, #1]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a42:	887a      	ldrh	r2, [r7, #2]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a48:	e002      	b.n	8005a50 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a4a:	887a      	ldrh	r2, [r7, #2]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	0800c114 	.word	0x0800c114

08005a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e10b      	b.n	8005c86 <HAL_I2C_Init+0x22a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a87      	ldr	r2, [pc, #540]	; (8005c90 <HAL_I2C_Init+0x234>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_I2C_Init+0x30>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a85      	ldr	r2, [pc, #532]	; (8005c94 <HAL_I2C_Init+0x238>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_I2C_Init+0x30>
 8005a82:	f44f 7108 	mov.w	r1, #544	; 0x220
 8005a86:	4884      	ldr	r0, [pc, #528]	; (8005c98 <HAL_I2C_Init+0x23c>)
 8005a88:	f7ff f959 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a94:	d304      	bcc.n	8005aa0 <HAL_I2C_Init+0x44>
 8005a96:	f240 2121 	movw	r1, #545	; 0x221
 8005a9a:	487f      	ldr	r0, [pc, #508]	; (8005c98 <HAL_I2C_Init+0x23c>)
 8005a9c:	f7ff f94f 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d008      	beq.n	8005aba <HAL_I2C_Init+0x5e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d004      	beq.n	8005aba <HAL_I2C_Init+0x5e>
 8005ab0:	f240 2122 	movw	r1, #546	; 0x222
 8005ab4:	4878      	ldr	r0, [pc, #480]	; (8005c98 <HAL_I2C_Init+0x23c>)
 8005ab6:	f7ff f942 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <HAL_I2C_Init+0x7a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aca:	d004      	beq.n	8005ad6 <HAL_I2C_Init+0x7a>
 8005acc:	f240 2123 	movw	r1, #547	; 0x223
 8005ad0:	4871      	ldr	r0, [pc, #452]	; (8005c98 <HAL_I2C_Init+0x23c>)
 8005ad2:	f7ff f934 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	2bff      	cmp	r3, #255	; 0xff
 8005adc:	d904      	bls.n	8005ae8 <HAL_I2C_Init+0x8c>
 8005ade:	f44f 7109 	mov.w	r1, #548	; 0x224
 8005ae2:	486d      	ldr	r0, [pc, #436]	; (8005c98 <HAL_I2C_Init+0x23c>)
 8005ae4:	f7ff f92b 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d020      	beq.n	8005b32 <HAL_I2C_Init+0xd6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d01c      	beq.n	8005b32 <HAL_I2C_Init+0xd6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d018      	beq.n	8005b32 <HAL_I2C_Init+0xd6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d014      	beq.n	8005b32 <HAL_I2C_Init+0xd6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d010      	beq.n	8005b32 <HAL_I2C_Init+0xd6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d00c      	beq.n	8005b32 <HAL_I2C_Init+0xd6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d008      	beq.n	8005b32 <HAL_I2C_Init+0xd6>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b07      	cmp	r3, #7
 8005b26:	d004      	beq.n	8005b32 <HAL_I2C_Init+0xd6>
 8005b28:	f240 2125 	movw	r1, #549	; 0x225
 8005b2c:	485a      	ldr	r0, [pc, #360]	; (8005c98 <HAL_I2C_Init+0x23c>)
 8005b2e:	f7ff f906 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <HAL_I2C_Init+0xf2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b42:	d004      	beq.n	8005b4e <HAL_I2C_Init+0xf2>
 8005b44:	f240 2126 	movw	r1, #550	; 0x226
 8005b48:	4853      	ldr	r0, [pc, #332]	; (8005c98 <HAL_I2C_Init+0x23c>)
 8005b4a:	f7ff f8f8 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_I2C_Init+0x10e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b5e:	d004      	beq.n	8005b6a <HAL_I2C_Init+0x10e>
 8005b60:	f240 2127 	movw	r1, #551	; 0x227
 8005b64:	484c      	ldr	r0, [pc, #304]	; (8005c98 <HAL_I2C_Init+0x23c>)
 8005b66:	f7ff f8ea 	bl	8004d3e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fe ffb6 	bl	8004af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2224      	movs	r2, #36	; 0x24
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ba8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	e006      	b.n	8005be0 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005bde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d108      	bne.n	8005bfa <HAL_I2C_Init+0x19e>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf6:	605a      	str	r2, [r3, #4]
 8005bf8:	e007      	b.n	8005c0a <HAL_I2C_Init+0x1ae>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69d9      	ldr	r1, [r3, #28]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40005400 	.word	0x40005400
 8005c94:	40005c00 	.word	0x40005c00
 8005c98:	0800c150 	.word	0x0800c150

08005c9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4603      	mov	r3, r0
 8005cac:	817b      	strh	r3, [r7, #10]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	813b      	strh	r3, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d007      	beq.n	8005ccc <HAL_I2C_Mem_Write+0x30>
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d004      	beq.n	8005ccc <HAL_I2C_Mem_Write+0x30>
 8005cc2:	f640 11c2 	movw	r1, #2498	; 0x9c2
 8005cc6:	4884      	ldr	r0, [pc, #528]	; (8005ed8 <HAL_I2C_Mem_Write+0x23c>)
 8005cc8:	f7ff f839 	bl	8004d3e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	f040 80f9 	bne.w	8005ecc <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_I2C_Mem_Write+0x4a>
 8005ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e0ed      	b.n	8005ece <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_I2C_Mem_Write+0x64>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e0e6      	b.n	8005ece <HAL_I2C_Mem_Write+0x232>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d08:	f7ff fae4 	bl	80052d4 <HAL_GetTick>
 8005d0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	2319      	movs	r3, #25
 8005d14:	2201      	movs	r2, #1
 8005d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fad4 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e0d1      	b.n	8005ece <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2221      	movs	r2, #33	; 0x21
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2240      	movs	r2, #64	; 0x40
 8005d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d52:	88f8      	ldrh	r0, [r7, #6]
 8005d54:	893a      	ldrh	r2, [r7, #8]
 8005d56:	8979      	ldrh	r1, [r7, #10]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4603      	mov	r3, r0
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f9e4 	bl	8006130 <I2C_RequestMemoryWrite>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e0a9      	b.n	8005ece <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2bff      	cmp	r3, #255	; 0xff
 8005d82:	d90e      	bls.n	8005da2 <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	22ff      	movs	r2, #255	; 0xff
 8005d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	8979      	ldrh	r1, [r7, #10]
 8005d92:	2300      	movs	r3, #0
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fc4e 	bl	800663c <I2C_TransferConfig>
 8005da0:	e00f      	b.n	8005dc2 <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	8979      	ldrh	r1, [r7, #10]
 8005db4:	2300      	movs	r3, #0
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fc3d 	bl	800663c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 facd 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07b      	b.n	8005ece <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d034      	beq.n	8005e7a <HAL_I2C_Mem_Write+0x1de>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d130      	bne.n	8005e7a <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2180      	movs	r1, #128	; 0x80
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fa50 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e04d      	b.n	8005ece <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2bff      	cmp	r3, #255	; 0xff
 8005e3a:	d90e      	bls.n	8005e5a <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	22ff      	movs	r2, #255	; 0xff
 8005e40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	8979      	ldrh	r1, [r7, #10]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fbf2 	bl	800663c <I2C_TransferConfig>
 8005e58:	e00f      	b.n	8005e7a <HAL_I2C_Mem_Write+0x1de>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	8979      	ldrh	r1, [r7, #10]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fbe1 	bl	800663c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d19e      	bne.n	8005dc2 <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fab3 	bl	80063f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e01a      	b.n	8005ece <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6859      	ldr	r1, [r3, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <HAL_I2C_Mem_Write+0x240>)
 8005eac:	400b      	ands	r3, r1
 8005eae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e000      	b.n	8005ece <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 8005ecc:	2302      	movs	r3, #2
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	0800c150 	.word	0x0800c150
 8005edc:	fe00e800 	.word	0xfe00e800

08005ee0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	461a      	mov	r2, r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	817b      	strh	r3, [r7, #10]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	813b      	strh	r3, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d007      	beq.n	8005f10 <HAL_I2C_Mem_Read+0x30>
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d004      	beq.n	8005f10 <HAL_I2C_Mem_Read+0x30>
 8005f06:	f640 214b 	movw	r1, #2635	; 0xa4b
 8005f0a:	4886      	ldr	r0, [pc, #536]	; (8006124 <HAL_I2C_Mem_Read+0x244>)
 8005f0c:	f7fe ff17 	bl	8004d3e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	f040 80fd 	bne.w	8006118 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_I2C_Mem_Read+0x4a>
 8005f24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0f1      	b.n	800611a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_I2C_Mem_Read+0x64>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0ea      	b.n	800611a <HAL_I2C_Mem_Read+0x23a>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f4c:	f7ff f9c2 	bl	80052d4 <HAL_GetTick>
 8005f50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2319      	movs	r3, #25
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f9b2 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0d5      	b.n	800611a <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2222      	movs	r2, #34	; 0x22
 8005f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2240      	movs	r2, #64	; 0x40
 8005f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a3a      	ldr	r2, [r7, #32]
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f96:	88f8      	ldrh	r0, [r7, #6]
 8005f98:	893a      	ldrh	r2, [r7, #8]
 8005f9a:	8979      	ldrh	r1, [r7, #10]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f916 	bl	80061d8 <I2C_RequestMemoryRead>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e0ad      	b.n	800611a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2bff      	cmp	r3, #255	; 0xff
 8005fc6:	d90e      	bls.n	8005fe6 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	22ff      	movs	r2, #255	; 0xff
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	8979      	ldrh	r1, [r7, #10]
 8005fd6:	4b54      	ldr	r3, [pc, #336]	; (8006128 <HAL_I2C_Mem_Read+0x248>)
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fb2c 	bl	800663c <I2C_TransferConfig>
 8005fe4:	e00f      	b.n	8006006 <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	8979      	ldrh	r1, [r7, #10]
 8005ff8:	4b4b      	ldr	r3, [pc, #300]	; (8006128 <HAL_I2C_Mem_Read+0x248>)
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fb1b 	bl	800663c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2200      	movs	r2, #0
 800600e:	2104      	movs	r1, #4
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f959 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e07c      	b.n	800611a <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d034      	beq.n	80060c6 <HAL_I2C_Mem_Read+0x1e6>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d130      	bne.n	80060c6 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	2200      	movs	r2, #0
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 f92a 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e04d      	b.n	800611a <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	2bff      	cmp	r3, #255	; 0xff
 8006086:	d90e      	bls.n	80060a6 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	22ff      	movs	r2, #255	; 0xff
 800608c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	b2da      	uxtb	r2, r3
 8006094:	8979      	ldrh	r1, [r7, #10]
 8006096:	2300      	movs	r3, #0
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 facc 	bl	800663c <I2C_TransferConfig>
 80060a4:	e00f      	b.n	80060c6 <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	8979      	ldrh	r1, [r7, #10]
 80060b8:	2300      	movs	r3, #0
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fabb 	bl	800663c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d19a      	bne.n	8006006 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f98d 	bl	80063f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e01a      	b.n	800611a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2220      	movs	r2, #32
 80060ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <HAL_I2C_Mem_Read+0x24c>)
 80060f8:	400b      	ands	r3, r1
 80060fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	e000      	b.n	800611a <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8006118:	2302      	movs	r3, #2
  }
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	0800c150 	.word	0x0800c150
 8006128:	80002400 	.word	0x80002400
 800612c:	fe00e800 	.word	0xfe00e800

08006130 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4603      	mov	r3, r0
 8006140:	817b      	strh	r3, [r7, #10]
 8006142:	460b      	mov	r3, r1
 8006144:	813b      	strh	r3, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	8979      	ldrh	r1, [r7, #10]
 8006150:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <I2C_RequestMemoryWrite+0xa4>)
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 fa6f 	bl	800663c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f8ff 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e02c      	b.n	80061cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d105      	bne.n	8006184 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006178:	893b      	ldrh	r3, [r7, #8]
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	629a      	str	r2, [r3, #40]	; 0x28
 8006182:	e015      	b.n	80061b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006184:	893b      	ldrh	r3, [r7, #8]
 8006186:	0a1b      	lsrs	r3, r3, #8
 8006188:	b29b      	uxth	r3, r3
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	69b9      	ldr	r1, [r7, #24]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f8e5 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e012      	b.n	80061cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061a6:	893b      	ldrh	r3, [r7, #8]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2180      	movs	r1, #128	; 0x80
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f884 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	80002000 	.word	0x80002000

080061d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	460b      	mov	r3, r1
 80061ec:	813b      	strh	r3, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	8979      	ldrh	r1, [r7, #10]
 80061f8:	4b20      	ldr	r3, [pc, #128]	; (800627c <I2C_RequestMemoryRead+0xa4>)
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 fa1c 	bl	800663c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	69b9      	ldr	r1, [r7, #24]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f8ac 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e02c      	b.n	8006272 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800621e:	893b      	ldrh	r3, [r7, #8]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
 8006228:	e015      	b.n	8006256 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800622a:	893b      	ldrh	r3, [r7, #8]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	b29b      	uxth	r3, r3
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	69b9      	ldr	r1, [r7, #24]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f892 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e012      	b.n	8006272 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800624c:	893b      	ldrh	r3, [r7, #8]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2200      	movs	r2, #0
 800625e:	2140      	movs	r1, #64	; 0x40
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f831 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	80002000 	.word	0x80002000

08006280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d103      	bne.n	800629e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2200      	movs	r2, #0
 800629c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d007      	beq.n	80062bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	619a      	str	r2, [r3, #24]
  }
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062d8:	e031      	b.n	800633e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d02d      	beq.n	800633e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e2:	f7fe fff7 	bl	80052d4 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d302      	bcc.n	80062f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d122      	bne.n	800633e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4013      	ands	r3, r2
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	bf0c      	ite	eq
 8006308:	2301      	moveq	r3, #1
 800630a:	2300      	movne	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	429a      	cmp	r2, r3
 8006314:	d113      	bne.n	800633e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e00f      	b.n	800635e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4013      	ands	r3, r2
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	429a      	cmp	r2, r3
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	429a      	cmp	r2, r3
 800635a:	d0be      	beq.n	80062da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006372:	e033      	b.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f87f 	bl	800647c <I2C_IsErrorOccurred>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e031      	b.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d025      	beq.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006390:	f7fe ffa0 	bl	80052d4 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	d302      	bcc.n	80063a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11a      	bne.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d013      	beq.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b8:	f043 0220 	orr.w	r2, r3, #32
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e007      	b.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d1c4      	bne.n	8006374 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006400:	e02f      	b.n	8006462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f838 	bl	800647c <I2C_IsErrorOccurred>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e02d      	b.n	8006472 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006416:	f7fe ff5d 	bl	80052d4 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	429a      	cmp	r2, r3
 8006424:	d302      	bcc.n	800642c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d11a      	bne.n	8006462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b20      	cmp	r3, #32
 8006438:	d013      	beq.n	8006462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e007      	b.n	8006472 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b20      	cmp	r3, #32
 800646e:	d1c8      	bne.n	8006402 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d068      	beq.n	800657a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2210      	movs	r2, #16
 80064ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064b0:	e049      	b.n	8006546 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d045      	beq.n	8006546 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064ba:	f7fe ff0b 	bl	80052d4 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d302      	bcc.n	80064d0 <I2C_IsErrorOccurred+0x54>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d13a      	bne.n	8006546 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f2:	d121      	bne.n	8006538 <I2C_IsErrorOccurred+0xbc>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064fa:	d01d      	beq.n	8006538 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80064fc:	7cfb      	ldrb	r3, [r7, #19]
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d01a      	beq.n	8006538 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006510:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006512:	f7fe fedf 	bl	80052d4 <HAL_GetTick>
 8006516:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006518:	e00e      	b.n	8006538 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800651a:	f7fe fedb 	bl	80052d4 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b19      	cmp	r3, #25
 8006526:	d907      	bls.n	8006538 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	f043 0320 	orr.w	r3, r3, #32
 800652e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006536:	e006      	b.n	8006546 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b20      	cmp	r3, #32
 8006544:	d1e9      	bne.n	800651a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b20      	cmp	r3, #32
 8006552:	d003      	beq.n	800655c <I2C_IsErrorOccurred+0xe0>
 8006554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0aa      	beq.n	80064b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800655c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2220      	movs	r2, #32
 800656a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f043 0304 	orr.w	r3, r3, #4
 8006572:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800659c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f043 0308 	orr.w	r3, r3, #8
 80065b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	f043 0302 	orr.w	r3, r3, #2
 80065d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01c      	beq.n	800662a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff fe45 	bl	8006280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <I2C_IsErrorOccurred+0x1bc>)
 8006602:	400b      	ands	r3, r1
 8006604:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800662a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	fe00e800 	.word	0xfe00e800

0800663c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	817b      	strh	r3, [r7, #10]
 800664a:	4613      	mov	r3, r2
 800664c:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <I2C_TransferConfig+0xc0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d009      	beq.n	800666c <I2C_TransferConfig+0x30>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a28      	ldr	r2, [pc, #160]	; (8006700 <I2C_TransferConfig+0xc4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <I2C_TransferConfig+0x30>
 8006662:	f641 4127 	movw	r1, #7207	; 0x1c27
 8006666:	4827      	ldr	r0, [pc, #156]	; (8006704 <I2C_TransferConfig+0xc8>)
 8006668:	f7fe fb69 	bl	8004d3e <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006672:	d00b      	beq.n	800668c <I2C_TransferConfig+0x50>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800667a:	d007      	beq.n	800668c <I2C_TransferConfig+0x50>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <I2C_TransferConfig+0x50>
 8006682:	f641 4128 	movw	r1, #7208	; 0x1c28
 8006686:	481f      	ldr	r0, [pc, #124]	; (8006704 <I2C_TransferConfig+0xc8>)
 8006688:	f7fe fb59 	bl	8004d3e <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <I2C_TransferConfig+0xcc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00f      	beq.n	80066b4 <I2C_TransferConfig+0x78>
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	4a1d      	ldr	r2, [pc, #116]	; (800670c <I2C_TransferConfig+0xd0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00b      	beq.n	80066b4 <I2C_TransferConfig+0x78>
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <I2C_TransferConfig+0xd4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <I2C_TransferConfig+0x78>
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d004      	beq.n	80066b4 <I2C_TransferConfig+0x78>
 80066aa:	f641 4129 	movw	r1, #7209	; 0x1c29
 80066ae:	4815      	ldr	r0, [pc, #84]	; (8006704 <I2C_TransferConfig+0xc8>)
 80066b0:	f7fe fb45 	bl	8004d3e <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066b4:	897b      	ldrh	r3, [r7, #10]
 80066b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066ba:	7a7b      	ldrb	r3, [r7, #9]
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	0d5b      	lsrs	r3, r3, #21
 80066dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80066e0:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <I2C_TransferConfig+0xd8>)
 80066e2:	430b      	orrs	r3, r1
 80066e4:	43db      	mvns	r3, r3
 80066e6:	ea02 0103 	and.w	r1, r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066f4:	bf00      	nop
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40005400 	.word	0x40005400
 8006700:	40005c00 	.word	0x40005c00
 8006704:	0800c150 	.word	0x0800c150
 8006708:	80004000 	.word	0x80004000
 800670c:	80002400 	.word	0x80002400
 8006710:	80002000 	.word	0x80002000
 8006714:	03ff63ff 	.word	0x03ff63ff

08006718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d008      	beq.n	800673e <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a2b      	ldr	r2, [pc, #172]	; (80067e0 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8006736:	2163      	movs	r1, #99	; 0x63
 8006738:	482a      	ldr	r0, [pc, #168]	; (80067e4 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800673a:	f7fe fb00 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	d003      	beq.n	8006754 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 800674c:	2164      	movs	r1, #100	; 0x64
 800674e:	4825      	ldr	r0, [pc, #148]	; (80067e4 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 8006750:	f7fe faf5 	bl	8004d3e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b20      	cmp	r3, #32
 800675e:	d138      	bne.n	80067d2 <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800676a:	2302      	movs	r3, #2
 800676c:	e032      	b.n	80067d4 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	; 0x24
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800679c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e000      	b.n	80067d4 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 80067d2:	2302      	movs	r3, #2
  }
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40005400 	.word	0x40005400
 80067e0:	40005c00 	.word	0x40005c00
 80067e4:	0800c188 	.word	0x0800c188

080067e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2c      	ldr	r2, [pc, #176]	; (80068a8 <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d008      	beq.n	800680e <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a2a      	ldr	r2, [pc, #168]	; (80068ac <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <HAL_I2CEx_ConfigDigitalFilter+0x26>
 8006806:	2191      	movs	r1, #145	; 0x91
 8006808:	4829      	ldr	r0, [pc, #164]	; (80068b0 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 800680a:	f7fe fa98 	bl	8004d3e <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b0f      	cmp	r3, #15
 8006812:	d903      	bls.n	800681c <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8006814:	2192      	movs	r1, #146	; 0x92
 8006816:	4826      	ldr	r0, [pc, #152]	; (80068b0 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8006818:	f7fe fa91 	bl	8004d3e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b20      	cmp	r3, #32
 8006826:	d139      	bne.n	800689c <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8006832:	2302      	movs	r3, #2
 8006834:	e033      	b.n	800689e <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2224      	movs	r2, #36	; 0x24
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0201 	bic.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006864:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40005400 	.word	0x40005400
 80068ac:	40005c00 	.word	0x40005c00
 80068b0:	0800c188 	.word	0x0800c188

080068b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068b8:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a04      	ldr	r2, [pc, #16]	; (80068d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c2:	6013      	str	r3, [r2, #0]
}
 80068c4:	bf00      	nop
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40007000 	.word	0x40007000

080068d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <HAL_PWREx_GetVoltageRange+0x18>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40007000 	.word	0x40007000

080068f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fe:	d007      	beq.n	8006910 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006906:	d003      	beq.n	8006910 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006908:	21a7      	movs	r1, #167	; 0xa7
 800690a:	4826      	ldr	r0, [pc, #152]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800690c:	f7fe fa17 	bl	8004d3e <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006916:	d130      	bne.n	800697a <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006918:	4b23      	ldr	r3, [pc, #140]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006924:	d038      	beq.n	8006998 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006926:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800692e:	4a1e      	ldr	r2, [pc, #120]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006934:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006936:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2232      	movs	r2, #50	; 0x32
 800693c:	fb02 f303 	mul.w	r3, r2, r3
 8006940:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	0c9b      	lsrs	r3, r3, #18
 8006948:	3301      	adds	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800694c:	e002      	b.n	8006954 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b01      	subs	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006954:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006960:	d102      	bne.n	8006968 <HAL_PWREx_ControlVoltageScaling+0x78>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f2      	bne.n	800694e <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d110      	bne.n	8006998 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e00f      	b.n	800699a <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006986:	d007      	beq.n	8006998 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006990:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006996:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	0800c1c4 	.word	0x0800c1c4
 80069a8:	40007000 	.word	0x40007000
 80069ac:	20000000 	.word	0x20000000
 80069b0:	431bde83 	.word	0x431bde83

080069b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f000 bd3a 	b.w	800743c <HAL_RCC_OscConfig+0xa88>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <HAL_RCC_OscConfig+0x32>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <HAL_RCC_OscConfig+0x32>
 80069dc:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80069e0:	489b      	ldr	r0, [pc, #620]	; (8006c50 <HAL_RCC_OscConfig+0x29c>)
 80069e2:	f7fe f9ac 	bl	8004d3e <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069e6:	4b9b      	ldr	r3, [pc, #620]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 030c 	and.w	r3, r3, #12
 80069ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069f0:	4b98      	ldr	r3, [pc, #608]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 813f 	beq.w	8006c86 <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <HAL_RCC_OscConfig+0x6e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d004      	beq.n	8006a22 <HAL_RCC_OscConfig+0x6e>
 8006a18:	f240 11ab 	movw	r1, #427	; 0x1ab
 8006a1c:	488c      	ldr	r0, [pc, #560]	; (8006c50 <HAL_RCC_OscConfig+0x29c>)
 8006a1e:	f7fe f98e 	bl	8004d3e <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	2bff      	cmp	r3, #255	; 0xff
 8006a28:	d904      	bls.n	8006a34 <HAL_RCC_OscConfig+0x80>
 8006a2a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8006a2e:	4888      	ldr	r0, [pc, #544]	; (8006c50 <HAL_RCC_OscConfig+0x29c>)
 8006a30:	f7fe f985 	bl	8004d3e <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d030      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d02c      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d028      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	2b30      	cmp	r3, #48	; 0x30
 8006a52:	d024      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d020      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	2b50      	cmp	r3, #80	; 0x50
 8006a62:	d01c      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	2b60      	cmp	r3, #96	; 0x60
 8006a6a:	d018      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	2b70      	cmp	r3, #112	; 0x70
 8006a72:	d014      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	2b80      	cmp	r3, #128	; 0x80
 8006a7a:	d010      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	2b90      	cmp	r3, #144	; 0x90
 8006a82:	d00c      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	2ba0      	cmp	r3, #160	; 0xa0
 8006a8a:	d008      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	2bb0      	cmp	r3, #176	; 0xb0
 8006a92:	d004      	beq.n	8006a9e <HAL_RCC_OscConfig+0xea>
 8006a94:	f240 11ad 	movw	r1, #429	; 0x1ad
 8006a98:	486d      	ldr	r0, [pc, #436]	; (8006c50 <HAL_RCC_OscConfig+0x29c>)
 8006a9a:	f7fe f950 	bl	8004d3e <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x100>
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b0c      	cmp	r3, #12
 8006aa8:	f040 808f 	bne.w	8006bca <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	f040 808b 	bne.w	8006bca <HAL_RCC_OscConfig+0x216>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ab4:	4b67      	ldr	r3, [pc, #412]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d006      	beq.n	8006ace <HAL_RCC_OscConfig+0x11a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f000 bcb7 	b.w	800743c <HAL_RCC_OscConfig+0xa88>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1a      	ldr	r2, [r3, #32]
 8006ad2:	4b60      	ldr	r3, [pc, #384]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x134>
 8006ade:	4b5d      	ldr	r3, [pc, #372]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae6:	e005      	b.n	8006af4 <HAL_RCC_OscConfig+0x140>
 8006ae8:	4b5a      	ldr	r3, [pc, #360]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aee:	091b      	lsrs	r3, r3, #4
 8006af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d224      	bcs.n	8006b42 <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 ff09 	bl	8007914 <RCC_SetFlashLatencyFromMSIRange>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f000 bc97 	b.w	800743c <HAL_RCC_OscConfig+0xa88>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b0e:	4b51      	ldr	r3, [pc, #324]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a50      	ldr	r2, [pc, #320]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b14:	f043 0308 	orr.w	r3, r3, #8
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	4b4e      	ldr	r3, [pc, #312]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	494b      	ldr	r1, [pc, #300]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b2c:	4b49      	ldr	r3, [pc, #292]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	4946      	ldr	r1, [pc, #280]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	604b      	str	r3, [r1, #4]
 8006b40:	e026      	b.n	8006b90 <HAL_RCC_OscConfig+0x1dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b42:	4b44      	ldr	r3, [pc, #272]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a43      	ldr	r2, [pc, #268]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b48:	f043 0308 	orr.w	r3, r3, #8
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	4b41      	ldr	r3, [pc, #260]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	493e      	ldr	r1, [pc, #248]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b60:	4b3c      	ldr	r3, [pc, #240]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	4939      	ldr	r1, [pc, #228]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <HAL_RCC_OscConfig+0x1dc>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fec8 	bl	8007914 <RCC_SetFlashLatencyFromMSIRange>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_RCC_OscConfig+0x1dc>
            {
              return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f000 bc56 	b.w	800743c <HAL_RCC_OscConfig+0xa88>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b90:	f000 fdfc 	bl	800778c <HAL_RCC_GetSysClockFreq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b2f      	ldr	r3, [pc, #188]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	091b      	lsrs	r3, r3, #4
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	492d      	ldr	r1, [pc, #180]	; (8006c58 <HAL_RCC_OscConfig+0x2a4>)
 8006ba2:	5ccb      	ldrb	r3, [r1, r3]
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <HAL_RCC_OscConfig+0x2a8>)
 8006bae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006bb0:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <HAL_RCC_OscConfig+0x2ac>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fb3d 	bl	8005234 <HAL_InitTick>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d05f      	beq.n	8006c84 <HAL_RCC_OscConfig+0x2d0>
        {
          return status;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	f000 bc39 	b.w	800743c <HAL_RCC_OscConfig+0xa88>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d033      	beq.n	8006c3a <HAL_RCC_OscConfig+0x286>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006bd2:	4b20      	ldr	r3, [pc, #128]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bde:	f7fe fb79 	bl	80052d4 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006be4:	e009      	b.n	8006bfa <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006be6:	f7fe fb75 	bl	80052d4 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d902      	bls.n	8006bfa <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	f000 bc21 	b.w	800743c <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bfa:	4b16      	ldr	r3, [pc, #88]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0ef      	beq.n	8006be6 <HAL_RCC_OscConfig+0x232>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c06:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006c0c:	f043 0308 	orr.w	r3, r3, #8
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b10      	ldr	r3, [pc, #64]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	490d      	ldr	r1, [pc, #52]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c24:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	4908      	ldr	r1, [pc, #32]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	604b      	str	r3, [r1, #4]
 8006c38:	e025      	b.n	8006c86 <HAL_RCC_OscConfig+0x2d2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a05      	ldr	r2, [pc, #20]	; (8006c54 <HAL_RCC_OscConfig+0x2a0>)
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c46:	f7fe fb45 	bl	80052d4 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c4c:	e013      	b.n	8006c76 <HAL_RCC_OscConfig+0x2c2>
 8006c4e:	bf00      	nop
 8006c50:	0800c200 	.word	0x0800c200
 8006c54:	40021000 	.word	0x40021000
 8006c58:	0800c324 	.word	0x0800c324
 8006c5c:	20000000 	.word	0x20000000
 8006c60:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c64:	f7fe fb36 	bl	80052d4 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e3e2      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c76:	4b97      	ldr	r3, [pc, #604]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x2b0>
 8006c82:	e000      	b.n	8006c86 <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d07e      	beq.n	8006d90 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00e      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x304>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca2:	d009      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x304>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cac:	d004      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x304>
 8006cae:	f240 2119 	movw	r1, #537	; 0x219
 8006cb2:	4889      	ldr	r0, [pc, #548]	; (8006ed8 <HAL_RCC_OscConfig+0x524>)
 8006cb4:	f7fe f843 	bl	8004d3e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d005      	beq.n	8006cca <HAL_RCC_OscConfig+0x316>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	d10e      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x32e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d10b      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x32e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cca:	4b82      	ldr	r3, [pc, #520]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d05b      	beq.n	8006d8e <HAL_RCC_OscConfig+0x3da>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d157      	bne.n	8006d8e <HAL_RCC_OscConfig+0x3da>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e3ac      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cea:	d106      	bne.n	8006cfa <HAL_RCC_OscConfig+0x346>
 8006cec:	4b79      	ldr	r3, [pc, #484]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a78      	ldr	r2, [pc, #480]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	e01d      	b.n	8006d36 <HAL_RCC_OscConfig+0x382>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d02:	d10c      	bne.n	8006d1e <HAL_RCC_OscConfig+0x36a>
 8006d04:	4b73      	ldr	r3, [pc, #460]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a72      	ldr	r2, [pc, #456]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	4b70      	ldr	r3, [pc, #448]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6f      	ldr	r2, [pc, #444]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e00b      	b.n	8006d36 <HAL_RCC_OscConfig+0x382>
 8006d1e:	4b6d      	ldr	r3, [pc, #436]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a6c      	ldr	r2, [pc, #432]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	4b6a      	ldr	r3, [pc, #424]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a69      	ldr	r2, [pc, #420]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d013      	beq.n	8006d66 <HAL_RCC_OscConfig+0x3b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3e:	f7fe fac9 	bl	80052d4 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d46:	f7fe fac5 	bl	80052d4 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b64      	cmp	r3, #100	; 0x64
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e371      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d58:	4b5e      	ldr	r3, [pc, #376]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCC_OscConfig+0x392>
 8006d64:	e014      	b.n	8006d90 <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d66:	f7fe fab5 	bl	80052d4 <HAL_GetTick>
 8006d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d6e:	f7fe fab1 	bl	80052d4 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b64      	cmp	r3, #100	; 0x64
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e35d      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d80:	4b54      	ldr	r3, [pc, #336]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f0      	bne.n	8006d6e <HAL_RCC_OscConfig+0x3ba>
 8006d8c:	e000      	b.n	8006d90 <HAL_RCC_OscConfig+0x3dc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d077      	beq.n	8006e8c <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <HAL_RCC_OscConfig+0x404>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dac:	d004      	beq.n	8006db8 <HAL_RCC_OscConfig+0x404>
 8006dae:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8006db2:	4849      	ldr	r0, [pc, #292]	; (8006ed8 <HAL_RCC_OscConfig+0x524>)
 8006db4:	f7fd ffc3 	bl	8004d3e <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b1f      	cmp	r3, #31
 8006dbe:	d904      	bls.n	8006dca <HAL_RCC_OscConfig+0x416>
 8006dc0:	f240 214d 	movw	r1, #589	; 0x24d
 8006dc4:	4844      	ldr	r0, [pc, #272]	; (8006ed8 <HAL_RCC_OscConfig+0x524>)
 8006dc6:	f7fd ffba 	bl	8004d3e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d005      	beq.n	8006ddc <HAL_RCC_OscConfig+0x428>
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b0c      	cmp	r3, #12
 8006dd4:	d119      	bne.n	8006e0a <HAL_RCC_OscConfig+0x456>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d116      	bne.n	8006e0a <HAL_RCC_OscConfig+0x456>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ddc:	4b3d      	ldr	r3, [pc, #244]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_RCC_OscConfig+0x440>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e323      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df4:	4b37      	ldr	r3, [pc, #220]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	061b      	lsls	r3, r3, #24
 8006e02:	4934      	ldr	r1, [pc, #208]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e08:	e040      	b.n	8006e8c <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d023      	beq.n	8006e5a <HAL_RCC_OscConfig+0x4a6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e12:	4b30      	ldr	r3, [pc, #192]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a2f      	ldr	r2, [pc, #188]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1e:	f7fe fa59 	bl	80052d4 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e26:	f7fe fa55 	bl	80052d4 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e301      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e38:	4b26      	ldr	r3, [pc, #152]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0f0      	beq.n	8006e26 <HAL_RCC_OscConfig+0x472>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e44:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	061b      	lsls	r3, r3, #24
 8006e52:	4920      	ldr	r1, [pc, #128]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]
 8006e58:	e018      	b.n	8006e8c <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e5a:	4b1e      	ldr	r3, [pc, #120]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e66:	f7fe fa35 	bl	80052d4 <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e6c:	e008      	b.n	8006e80 <HAL_RCC_OscConfig+0x4cc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e6e:	f7fe fa31 	bl	80052d4 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x4cc>
          {
            return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e2dd      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e80:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1f0      	bne.n	8006e6e <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d04e      	beq.n	8006f36 <HAL_RCC_OscConfig+0x582>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x4fe>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d004      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x4fe>
 8006ea8:	f240 218d 	movw	r1, #653	; 0x28d
 8006eac:	480a      	ldr	r0, [pc, #40]	; (8006ed8 <HAL_RCC_OscConfig+0x524>)
 8006eae:	f7fd ff46 	bl	8004d3e <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d021      	beq.n	8006efe <HAL_RCC_OscConfig+0x54a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec0:	4a04      	ldr	r2, [pc, #16]	; (8006ed4 <HAL_RCC_OscConfig+0x520>)
 8006ec2:	f043 0301 	orr.w	r3, r3, #1
 8006ec6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eca:	f7fe fa03 	bl	80052d4 <HAL_GetTick>
 8006ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ed0:	e00d      	b.n	8006eee <HAL_RCC_OscConfig+0x53a>
 8006ed2:	bf00      	nop
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	0800c200 	.word	0x0800c200
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006edc:	f7fe f9fa 	bl	80052d4 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e2a6      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006eee:	4b93      	ldr	r3, [pc, #588]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0ef      	beq.n	8006edc <HAL_RCC_OscConfig+0x528>
 8006efc:	e01b      	b.n	8006f36 <HAL_RCC_OscConfig+0x582>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006efe:	4b8f      	ldr	r3, [pc, #572]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f04:	4a8d      	ldr	r2, [pc, #564]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006f06:	f023 0301 	bic.w	r3, r3, #1
 8006f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0e:	f7fe f9e1 	bl	80052d4 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f14:	e008      	b.n	8006f28 <HAL_RCC_OscConfig+0x574>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f16:	f7fe f9dd 	bl	80052d4 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x574>
        {
          return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e289      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f28:	4b84      	ldr	r3, [pc, #528]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1ef      	bne.n	8006f16 <HAL_RCC_OscConfig+0x562>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80b2 	beq.w	80070a8 <HAL_RCC_OscConfig+0x6f4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f44:	2300      	movs	r3, #0
 8006f46:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00c      	beq.n	8006f6a <HAL_RCC_OscConfig+0x5b6>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d008      	beq.n	8006f6a <HAL_RCC_OscConfig+0x5b6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b05      	cmp	r3, #5
 8006f5e:	d004      	beq.n	8006f6a <HAL_RCC_OscConfig+0x5b6>
 8006f60:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8006f64:	4876      	ldr	r0, [pc, #472]	; (8007140 <HAL_RCC_OscConfig+0x78c>)
 8006f66:	f7fd feea 	bl	8004d3e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f6a:	4b74      	ldr	r3, [pc, #464]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10d      	bne.n	8006f92 <HAL_RCC_OscConfig+0x5de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f76:	4b71      	ldr	r3, [pc, #452]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7a:	4a70      	ldr	r2, [pc, #448]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f80:	6593      	str	r3, [r2, #88]	; 0x58
 8006f82:	4b6e      	ldr	r3, [pc, #440]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	60bb      	str	r3, [r7, #8]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f92:	4b6c      	ldr	r3, [pc, #432]	; (8007144 <HAL_RCC_OscConfig+0x790>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d118      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x61c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f9e:	4b69      	ldr	r3, [pc, #420]	; (8007144 <HAL_RCC_OscConfig+0x790>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a68      	ldr	r2, [pc, #416]	; (8007144 <HAL_RCC_OscConfig+0x790>)
 8006fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006faa:	f7fe f993 	bl	80052d4 <HAL_GetTick>
 8006fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb2:	f7fe f98f 	bl	80052d4 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e23b      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fc4:	4b5f      	ldr	r3, [pc, #380]	; (8007144 <HAL_RCC_OscConfig+0x790>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x5fe>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d108      	bne.n	8006fea <HAL_RCC_OscConfig+0x636>
 8006fd8:	4b58      	ldr	r3, [pc, #352]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fde:	4a57      	ldr	r2, [pc, #348]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fe8:	e024      	b.n	8007034 <HAL_RCC_OscConfig+0x680>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d110      	bne.n	8007014 <HAL_RCC_OscConfig+0x660>
 8006ff2:	4b52      	ldr	r3, [pc, #328]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff8:	4a50      	ldr	r2, [pc, #320]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8006ffa:	f043 0304 	orr.w	r3, r3, #4
 8006ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007002:	4b4e      	ldr	r3, [pc, #312]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8007004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007008:	4a4c      	ldr	r2, [pc, #304]	; (800713c <HAL_RCC_OscConfig+0x788>)
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007012:	e00f      	b.n	8007034 <HAL_RCC_OscConfig+0x680>
 8007014:	4b49      	ldr	r3, [pc, #292]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701a:	4a48      	ldr	r2, [pc, #288]	; (800713c <HAL_RCC_OscConfig+0x788>)
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007024:	4b45      	ldr	r3, [pc, #276]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702a:	4a44      	ldr	r2, [pc, #272]	; (800713c <HAL_RCC_OscConfig+0x788>)
 800702c:	f023 0304 	bic.w	r3, r3, #4
 8007030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d016      	beq.n	800706a <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7fe f94a 	bl	80052d4 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007042:	e00a      	b.n	800705a <HAL_RCC_OscConfig+0x6a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fe f946 	bl	80052d4 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e1f0      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800705a:	4b38      	ldr	r3, [pc, #224]	; (800713c <HAL_RCC_OscConfig+0x788>)
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0ed      	beq.n	8007044 <HAL_RCC_OscConfig+0x690>
 8007068:	e015      	b.n	8007096 <HAL_RCC_OscConfig+0x6e2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800706a:	f7fe f933 	bl	80052d4 <HAL_GetTick>
 800706e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007070:	e00a      	b.n	8007088 <HAL_RCC_OscConfig+0x6d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007072:	f7fe f92f 	bl	80052d4 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007080:	4293      	cmp	r3, r2
 8007082:	d901      	bls.n	8007088 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e1d9      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007088:	4b2c      	ldr	r3, [pc, #176]	; (800713c <HAL_RCC_OscConfig+0x788>)
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1ed      	bne.n	8007072 <HAL_RCC_OscConfig+0x6be>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007096:	7ffb      	ldrb	r3, [r7, #31]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d105      	bne.n	80070a8 <HAL_RCC_OscConfig+0x6f4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800709c:	4b27      	ldr	r3, [pc, #156]	; (800713c <HAL_RCC_OscConfig+0x788>)
 800709e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a0:	4a26      	ldr	r2, [pc, #152]	; (800713c <HAL_RCC_OscConfig+0x788>)
 80070a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d050      	beq.n	8007156 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_RCC_OscConfig+0x71a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d004      	beq.n	80070ce <HAL_RCC_OscConfig+0x71a>
 80070c4:	f240 3145 	movw	r1, #837	; 0x345
 80070c8:	481d      	ldr	r0, [pc, #116]	; (8007140 <HAL_RCC_OscConfig+0x78c>)
 80070ca:	f7fd fe38 	bl	8004d3e <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01c      	beq.n	8007110 <HAL_RCC_OscConfig+0x75c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070d6:	4b19      	ldr	r3, [pc, #100]	; (800713c <HAL_RCC_OscConfig+0x788>)
 80070d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070dc:	4a17      	ldr	r2, [pc, #92]	; (800713c <HAL_RCC_OscConfig+0x788>)
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e6:	f7fe f8f5 	bl	80052d4 <HAL_GetTick>
 80070ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070ec:	e008      	b.n	8007100 <HAL_RCC_OscConfig+0x74c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070ee:	f7fe f8f1 	bl	80052d4 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e19d      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007100:	4b0e      	ldr	r3, [pc, #56]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8007102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0ef      	beq.n	80070ee <HAL_RCC_OscConfig+0x73a>
 800710e:	e022      	b.n	8007156 <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007110:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8007112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007116:	4a09      	ldr	r2, [pc, #36]	; (800713c <HAL_RCC_OscConfig+0x788>)
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007120:	f7fe f8d8 	bl	80052d4 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007126:	e00f      	b.n	8007148 <HAL_RCC_OscConfig+0x794>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007128:	f7fe f8d4 	bl	80052d4 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d908      	bls.n	8007148 <HAL_RCC_OscConfig+0x794>
        {
          return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e180      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
 800713a:	bf00      	nop
 800713c:	40021000 	.word	0x40021000
 8007140:	0800c200 	.word	0x0800c200
 8007144:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007148:	4b93      	ldr	r3, [pc, #588]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 800714a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e8      	bne.n	8007128 <HAL_RCC_OscConfig+0x774>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00c      	beq.n	8007178 <HAL_RCC_OscConfig+0x7c4>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	2b01      	cmp	r3, #1
 8007164:	d008      	beq.n	8007178 <HAL_RCC_OscConfig+0x7c4>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	2b02      	cmp	r3, #2
 800716c:	d004      	beq.n	8007178 <HAL_RCC_OscConfig+0x7c4>
 800716e:	f240 316e 	movw	r1, #878	; 0x36e
 8007172:	488a      	ldr	r0, [pc, #552]	; (800739c <HAL_RCC_OscConfig+0x9e8>)
 8007174:	f7fd fde3 	bl	8004d3e <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 815c 	beq.w	800743a <HAL_RCC_OscConfig+0xa86>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	2b02      	cmp	r3, #2
 8007188:	f040 8132 	bne.w	80073f0 <HAL_RCC_OscConfig+0xa3c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d010      	beq.n	80071b6 <HAL_RCC_OscConfig+0x802>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d00c      	beq.n	80071b6 <HAL_RCC_OscConfig+0x802>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d008      	beq.n	80071b6 <HAL_RCC_OscConfig+0x802>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d004      	beq.n	80071b6 <HAL_RCC_OscConfig+0x802>
 80071ac:	f240 3176 	movw	r1, #886	; 0x376
 80071b0:	487a      	ldr	r0, [pc, #488]	; (800739c <HAL_RCC_OscConfig+0x9e8>)
 80071b2:	f7fd fdc4 	bl	8004d3e <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_RCC_OscConfig+0x812>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d904      	bls.n	80071d0 <HAL_RCC_OscConfig+0x81c>
 80071c6:	f240 3177 	movw	r1, #887	; 0x377
 80071ca:	4874      	ldr	r0, [pc, #464]	; (800739c <HAL_RCC_OscConfig+0x9e8>)
 80071cc:	f7fd fdb7 	bl	8004d3e <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	2b07      	cmp	r3, #7
 80071d6:	d903      	bls.n	80071e0 <HAL_RCC_OscConfig+0x82c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071dc:	2b56      	cmp	r3, #86	; 0x56
 80071de:	d904      	bls.n	80071ea <HAL_RCC_OscConfig+0x836>
 80071e0:	f44f 715e 	mov.w	r1, #888	; 0x378
 80071e4:	486d      	ldr	r0, [pc, #436]	; (800739c <HAL_RCC_OscConfig+0x9e8>)
 80071e6:	f7fd fdaa 	bl	8004d3e <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d903      	bls.n	80071fa <HAL_RCC_OscConfig+0x846>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	2b1f      	cmp	r3, #31
 80071f8:	d904      	bls.n	8007204 <HAL_RCC_OscConfig+0x850>
 80071fa:	f240 317a 	movw	r1, #890	; 0x37a
 80071fe:	4867      	ldr	r0, [pc, #412]	; (800739c <HAL_RCC_OscConfig+0x9e8>)
 8007200:	f7fd fd9d 	bl	8004d3e <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007208:	2b02      	cmp	r3, #2
 800720a:	d010      	beq.n	800722e <HAL_RCC_OscConfig+0x87a>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	2b04      	cmp	r3, #4
 8007212:	d00c      	beq.n	800722e <HAL_RCC_OscConfig+0x87a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007218:	2b06      	cmp	r3, #6
 800721a:	d008      	beq.n	800722e <HAL_RCC_OscConfig+0x87a>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007220:	2b08      	cmp	r3, #8
 8007222:	d004      	beq.n	800722e <HAL_RCC_OscConfig+0x87a>
 8007224:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8007228:	485c      	ldr	r0, [pc, #368]	; (800739c <HAL_RCC_OscConfig+0x9e8>)
 800722a:	f7fd fd88 	bl	8004d3e <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b02      	cmp	r3, #2
 8007234:	d010      	beq.n	8007258 <HAL_RCC_OscConfig+0x8a4>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	2b04      	cmp	r3, #4
 800723c:	d00c      	beq.n	8007258 <HAL_RCC_OscConfig+0x8a4>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	2b06      	cmp	r3, #6
 8007244:	d008      	beq.n	8007258 <HAL_RCC_OscConfig+0x8a4>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	2b08      	cmp	r3, #8
 800724c:	d004      	beq.n	8007258 <HAL_RCC_OscConfig+0x8a4>
 800724e:	f240 317d 	movw	r1, #893	; 0x37d
 8007252:	4852      	ldr	r0, [pc, #328]	; (800739c <HAL_RCC_OscConfig+0x9e8>)
 8007254:	f7fd fd73 	bl	8004d3e <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007258:	4b4f      	ldr	r3, [pc, #316]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f003 0203 	and.w	r2, r3, #3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	429a      	cmp	r2, r3
 800726a:	d12c      	bne.n	80072c6 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	3b01      	subs	r3, #1
 8007278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800727a:	429a      	cmp	r2, r3
 800727c:	d123      	bne.n	80072c6 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007288:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800728a:	429a      	cmp	r2, r3
 800728c:	d11b      	bne.n	80072c6 <HAL_RCC_OscConfig+0x912>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800729a:	429a      	cmp	r2, r3
 800729c:	d113      	bne.n	80072c6 <HAL_RCC_OscConfig+0x912>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	3b01      	subs	r3, #1
 80072ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d109      	bne.n	80072c6 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	3b01      	subs	r3, #1
 80072c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d06e      	beq.n	80073a4 <HAL_RCC_OscConfig+0x9f0>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b0c      	cmp	r3, #12
 80072ca:	d062      	beq.n	8007392 <HAL_RCC_OscConfig+0x9de>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80072cc:	4b32      	ldr	r3, [pc, #200]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <HAL_RCC_OscConfig+0x928>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0af      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80072dc:	4b2e      	ldr	r3, [pc, #184]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a2d      	ldr	r2, [pc, #180]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 80072e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80072e8:	f7fd fff4 	bl	80052d4 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x94e>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072f0:	f7fd fff0 	bl	80052d4 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x94e>
              {
                return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e09c      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007302:	4b25      	ldr	r3, [pc, #148]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f0      	bne.n	80072f0 <HAL_RCC_OscConfig+0x93c>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800730e:	4b22      	ldr	r3, [pc, #136]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	4b23      	ldr	r3, [pc, #140]	; (80073a0 <HAL_RCC_OscConfig+0x9ec>)
 8007314:	4013      	ands	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800731e:	3a01      	subs	r2, #1
 8007320:	0112      	lsls	r2, r2, #4
 8007322:	4311      	orrs	r1, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007328:	0212      	lsls	r2, r2, #8
 800732a:	4311      	orrs	r1, r2
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007330:	0852      	lsrs	r2, r2, #1
 8007332:	3a01      	subs	r2, #1
 8007334:	0552      	lsls	r2, r2, #21
 8007336:	4311      	orrs	r1, r2
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800733c:	0852      	lsrs	r2, r2, #1
 800733e:	3a01      	subs	r2, #1
 8007340:	0652      	lsls	r2, r2, #25
 8007342:	4311      	orrs	r1, r2
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007348:	06d2      	lsls	r2, r2, #27
 800734a:	430a      	orrs	r2, r1
 800734c:	4912      	ldr	r1, [pc, #72]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 800734e:	4313      	orrs	r3, r2
 8007350:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007352:	4b11      	ldr	r3, [pc, #68]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a10      	ldr	r2, [pc, #64]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 8007358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800735c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800735e:	4b0e      	ldr	r3, [pc, #56]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	4a0d      	ldr	r2, [pc, #52]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 8007364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007368:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800736a:	f7fd ffb3 	bl	80052d4 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x9d0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007372:	f7fd ffaf 	bl	80052d4 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x9d0>
              {
                return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e05b      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007384:	4b04      	ldr	r3, [pc, #16]	; (8007398 <HAL_RCC_OscConfig+0x9e4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0x9be>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007390:	e053      	b.n	800743a <HAL_RCC_OscConfig+0xa86>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e052      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
 8007396:	bf00      	nop
 8007398:	40021000 	.word	0x40021000
 800739c:	0800c200 	.word	0x0800c200
 80073a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d144      	bne.n	800743a <HAL_RCC_OscConfig+0xa86>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80073b0:	4b24      	ldr	r3, [pc, #144]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a23      	ldr	r2, [pc, #140]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 80073b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073bc:	4b21      	ldr	r3, [pc, #132]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	4a20      	ldr	r2, [pc, #128]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 80073c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80073c8:	f7fd ff84 	bl	80052d4 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0xa2e>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d0:	f7fd ff80 	bl	80052d4 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0xa2e>
            {
              return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e02c      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073e2:	4b18      	ldr	r3, [pc, #96]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0xa1c>
 80073ee:	e024      	b.n	800743a <HAL_RCC_OscConfig+0xa86>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b0c      	cmp	r3, #12
 80073f4:	d01f      	beq.n	8007436 <HAL_RCC_OscConfig+0xa82>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073f6:	4b13      	ldr	r3, [pc, #76]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a12      	ldr	r2, [pc, #72]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 80073fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007402:	f7fd ff67 	bl	80052d4 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0xa68>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800740a:	f7fd ff63 	bl	80052d4 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0xa68>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e00f      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f0      	bne.n	800740a <HAL_RCC_OscConfig+0xa56>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	4905      	ldr	r1, [pc, #20]	; (8007444 <HAL_RCC_OscConfig+0xa90>)
 800742e:	4b06      	ldr	r3, [pc, #24]	; (8007448 <HAL_RCC_OscConfig+0xa94>)
 8007430:	4013      	ands	r3, r2
 8007432:	60cb      	str	r3, [r1, #12]
 8007434:	e001      	b.n	800743a <HAL_RCC_OscConfig+0xa86>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <HAL_RCC_OscConfig+0xa88>
      }
    }
  }
  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40021000 	.word	0x40021000
 8007448:	feeefffc 	.word	0xfeeefffc

0800744c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e186      	b.n	800776e <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <HAL_RCC_ClockConfig+0x24>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b0f      	cmp	r3, #15
 800746e:	d904      	bls.n	800747a <HAL_RCC_ClockConfig+0x2e>
 8007470:	f240 4159 	movw	r1, #1113	; 0x459
 8007474:	4882      	ldr	r0, [pc, #520]	; (8007680 <HAL_RCC_ClockConfig+0x234>)
 8007476:	f7fd fc62 	bl	8004d3e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d010      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x56>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d00d      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x56>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d00a      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x56>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d007      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x56>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b04      	cmp	r3, #4
 8007496:	d004      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x56>
 8007498:	f240 415a 	movw	r1, #1114	; 0x45a
 800749c:	4878      	ldr	r0, [pc, #480]	; (8007680 <HAL_RCC_ClockConfig+0x234>)
 800749e:	f7fd fc4e 	bl	8004d3e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074a2:	4b78      	ldr	r3, [pc, #480]	; (8007684 <HAL_RCC_ClockConfig+0x238>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d910      	bls.n	80074d2 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074b0:	4b74      	ldr	r3, [pc, #464]	; (8007684 <HAL_RCC_ClockConfig+0x238>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f023 0207 	bic.w	r2, r3, #7
 80074b8:	4972      	ldr	r1, [pc, #456]	; (8007684 <HAL_RCC_ClockConfig+0x238>)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	4313      	orrs	r3, r2
 80074be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c0:	4b70      	ldr	r3, [pc, #448]	; (8007684 <HAL_RCC_ClockConfig+0x238>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d001      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e14d      	b.n	800776e <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d039      	beq.n	8007552 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d024      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b80      	cmp	r3, #128	; 0x80
 80074ec:	d020      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	2b90      	cmp	r3, #144	; 0x90
 80074f4:	d01c      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2ba0      	cmp	r3, #160	; 0xa0
 80074fc:	d018      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2bb0      	cmp	r3, #176	; 0xb0
 8007504:	d014      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2bc0      	cmp	r3, #192	; 0xc0
 800750c:	d010      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2bd0      	cmp	r3, #208	; 0xd0
 8007514:	d00c      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	2be0      	cmp	r3, #224	; 0xe0
 800751c:	d008      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2bf0      	cmp	r3, #240	; 0xf0
 8007524:	d004      	beq.n	8007530 <HAL_RCC_ClockConfig+0xe4>
 8007526:	f240 4172 	movw	r1, #1138	; 0x472
 800752a:	4855      	ldr	r0, [pc, #340]	; (8007680 <HAL_RCC_ClockConfig+0x234>)
 800752c:	f7fd fc07 	bl	8004d3e <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	4b54      	ldr	r3, [pc, #336]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800753c:	429a      	cmp	r2, r3
 800753e:	d908      	bls.n	8007552 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007540:	4b51      	ldr	r3, [pc, #324]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	494e      	ldr	r1, [pc, #312]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 800754e:	4313      	orrs	r3, r2
 8007550:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d061      	beq.n	8007622 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d010      	beq.n	8007588 <HAL_RCC_ClockConfig+0x13c>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d00c      	beq.n	8007588 <HAL_RCC_ClockConfig+0x13c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d008      	beq.n	8007588 <HAL_RCC_ClockConfig+0x13c>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d004      	beq.n	8007588 <HAL_RCC_ClockConfig+0x13c>
 800757e:	f240 417d 	movw	r1, #1149	; 0x47d
 8007582:	483f      	ldr	r0, [pc, #252]	; (8007680 <HAL_RCC_ClockConfig+0x234>)
 8007584:	f7fd fbdb 	bl	8004d3e <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b03      	cmp	r3, #3
 800758e:	d107      	bne.n	80075a0 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007590:	4b3d      	ldr	r3, [pc, #244]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d121      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e0e6      	b.n	800776e <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d107      	bne.n	80075b8 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075a8:	4b37      	ldr	r3, [pc, #220]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d115      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0da      	b.n	800776e <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d107      	bne.n	80075d0 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075c0:	4b31      	ldr	r3, [pc, #196]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d109      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0ce      	b.n	800776e <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075d0:	4b2d      	ldr	r3, [pc, #180]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e0c6      	b.n	800776e <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075e0:	4b29      	ldr	r3, [pc, #164]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f023 0203 	bic.w	r2, r3, #3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	4926      	ldr	r1, [pc, #152]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f2:	f7fd fe6f 	bl	80052d4 <HAL_GetTick>
 80075f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f8:	e00a      	b.n	8007610 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075fa:	f7fd fe6b 	bl	80052d4 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	f241 3288 	movw	r2, #5000	; 0x1388
 8007608:	4293      	cmp	r3, r2
 800760a:	d901      	bls.n	8007610 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e0ae      	b.n	800776e <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007610:	4b1d      	ldr	r3, [pc, #116]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 020c 	and.w	r2, r3, #12
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	429a      	cmp	r2, r3
 8007620:	d1eb      	bne.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d010      	beq.n	8007650 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	4b15      	ldr	r3, [pc, #84]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800763a:	429a      	cmp	r2, r3
 800763c:	d208      	bcs.n	8007650 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800763e:	4b12      	ldr	r3, [pc, #72]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	490f      	ldr	r1, [pc, #60]	; (8007688 <HAL_RCC_ClockConfig+0x23c>)
 800764c:	4313      	orrs	r3, r2
 800764e:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007650:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <HAL_RCC_ClockConfig+0x238>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d216      	bcs.n	800768c <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <HAL_RCC_ClockConfig+0x238>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f023 0207 	bic.w	r2, r3, #7
 8007666:	4907      	ldr	r1, [pc, #28]	; (8007684 <HAL_RCC_ClockConfig+0x238>)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	4313      	orrs	r3, r2
 800766c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <HAL_RCC_ClockConfig+0x238>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d007      	beq.n	800768c <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e076      	b.n	800776e <HAL_RCC_ClockConfig+0x322>
 8007680:	0800c200 	.word	0x0800c200
 8007684:	40022000 	.word	0x40022000
 8007688:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	d025      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d018      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x286>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a8:	d013      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x286>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80076b2:	d00e      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x286>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80076bc:	d009      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x286>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076c6:	d004      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x286>
 80076c8:	f240 41f5 	movw	r1, #1269	; 0x4f5
 80076cc:	482a      	ldr	r0, [pc, #168]	; (8007778 <HAL_RCC_ClockConfig+0x32c>)
 80076ce:	f7fd fb36 	bl	8004d3e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076d2:	4b2a      	ldr	r3, [pc, #168]	; (800777c <HAL_RCC_ClockConfig+0x330>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	4927      	ldr	r1, [pc, #156]	; (800777c <HAL_RCC_ClockConfig+0x330>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d026      	beq.n	800773e <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d018      	beq.n	800772a <HAL_RCC_ClockConfig+0x2de>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007700:	d013      	beq.n	800772a <HAL_RCC_ClockConfig+0x2de>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800770a:	d00e      	beq.n	800772a <HAL_RCC_ClockConfig+0x2de>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007714:	d009      	beq.n	800772a <HAL_RCC_ClockConfig+0x2de>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800771e:	d004      	beq.n	800772a <HAL_RCC_ClockConfig+0x2de>
 8007720:	f240 41fc 	movw	r1, #1276	; 0x4fc
 8007724:	4814      	ldr	r0, [pc, #80]	; (8007778 <HAL_RCC_ClockConfig+0x32c>)
 8007726:	f7fd fb0a 	bl	8004d3e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800772a:	4b14      	ldr	r3, [pc, #80]	; (800777c <HAL_RCC_ClockConfig+0x330>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	4910      	ldr	r1, [pc, #64]	; (800777c <HAL_RCC_ClockConfig+0x330>)
 800773a:	4313      	orrs	r3, r2
 800773c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800773e:	f000 f825 	bl	800778c <HAL_RCC_GetSysClockFreq>
 8007742:	4602      	mov	r2, r0
 8007744:	4b0d      	ldr	r3, [pc, #52]	; (800777c <HAL_RCC_ClockConfig+0x330>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	091b      	lsrs	r3, r3, #4
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	490c      	ldr	r1, [pc, #48]	; (8007780 <HAL_RCC_ClockConfig+0x334>)
 8007750:	5ccb      	ldrb	r3, [r1, r3]
 8007752:	f003 031f 	and.w	r3, r3, #31
 8007756:	fa22 f303 	lsr.w	r3, r2, r3
 800775a:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <HAL_RCC_ClockConfig+0x338>)
 800775c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800775e:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <HAL_RCC_ClockConfig+0x33c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7fd fd66 	bl	8005234 <HAL_InitTick>
 8007768:	4603      	mov	r3, r0
 800776a:	72fb      	strb	r3, [r7, #11]

  return status;
 800776c:	7afb      	ldrb	r3, [r7, #11]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	0800c200 	.word	0x0800c200
 800777c:	40021000 	.word	0x40021000
 8007780:	0800c324 	.word	0x0800c324
 8007784:	20000000 	.word	0x20000000
 8007788:	20000004 	.word	0x20000004

0800778c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800778c:	b480      	push	{r7}
 800778e:	b089      	sub	sp, #36	; 0x24
 8007790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]
 8007796:	2300      	movs	r3, #0
 8007798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800779a:	4b3e      	ldr	r3, [pc, #248]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 030c 	and.w	r3, r3, #12
 80077a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077a4:	4b3b      	ldr	r3, [pc, #236]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <HAL_RCC_GetSysClockFreq+0x34>
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	2b0c      	cmp	r3, #12
 80077b8:	d121      	bne.n	80077fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d11e      	bne.n	80077fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80077c0:	4b34      	ldr	r3, [pc, #208]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d107      	bne.n	80077dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80077cc:	4b31      	ldr	r3, [pc, #196]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 80077ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077d2:	0a1b      	lsrs	r3, r3, #8
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	61fb      	str	r3, [r7, #28]
 80077da:	e005      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80077dc:	4b2d      	ldr	r3, [pc, #180]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80077e8:	4a2b      	ldr	r2, [pc, #172]	; (8007898 <HAL_RCC_GetSysClockFreq+0x10c>)
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10d      	bne.n	8007814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80077fc:	e00a      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b04      	cmp	r3, #4
 8007802:	d102      	bne.n	800780a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007804:	4b25      	ldr	r3, [pc, #148]	; (800789c <HAL_RCC_GetSysClockFreq+0x110>)
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	e004      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b08      	cmp	r3, #8
 800780e:	d101      	bne.n	8007814 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007810:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007812:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b0c      	cmp	r3, #12
 8007818:	d134      	bne.n	8007884 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800781a:	4b1e      	ldr	r3, [pc, #120]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d003      	beq.n	8007832 <HAL_RCC_GetSysClockFreq+0xa6>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d003      	beq.n	8007838 <HAL_RCC_GetSysClockFreq+0xac>
 8007830:	e005      	b.n	800783e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007832:	4b1a      	ldr	r3, [pc, #104]	; (800789c <HAL_RCC_GetSysClockFreq+0x110>)
 8007834:	617b      	str	r3, [r7, #20]
      break;
 8007836:	e005      	b.n	8007844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007838:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800783a:	617b      	str	r3, [r7, #20]
      break;
 800783c:	e002      	b.n	8007844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	617b      	str	r3, [r7, #20]
      break;
 8007842:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007844:	4b13      	ldr	r3, [pc, #76]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	091b      	lsrs	r3, r3, #4
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	3301      	adds	r3, #1
 8007850:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007852:	4b10      	ldr	r3, [pc, #64]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	fb03 f202 	mul.w	r2, r3, r2
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800786a:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <HAL_RCC_GetSysClockFreq+0x108>)
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	0e5b      	lsrs	r3, r3, #25
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	3301      	adds	r3, #1
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007884:	69bb      	ldr	r3, [r7, #24]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3724      	adds	r7, #36	; 0x24
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40021000 	.word	0x40021000
 8007898:	0800c33c 	.word	0x0800c33c
 800789c:	00f42400 	.word	0x00f42400
 80078a0:	007a1200 	.word	0x007a1200

080078a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078a8:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80078aa:	681b      	ldr	r3, [r3, #0]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20000000 	.word	0x20000000

080078bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078c0:	f7ff fff0 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 80078c4:	4602      	mov	r2, r0
 80078c6:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	4904      	ldr	r1, [pc, #16]	; (80078e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078d2:	5ccb      	ldrb	r3, [r1, r3]
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078dc:	4618      	mov	r0, r3
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	40021000 	.word	0x40021000
 80078e4:	0800c334 	.word	0x0800c334

080078e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80078ec:	f7ff ffda 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 80078f0:	4602      	mov	r2, r0
 80078f2:	4b06      	ldr	r3, [pc, #24]	; (800790c <HAL_RCC_GetPCLK2Freq+0x24>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	0adb      	lsrs	r3, r3, #11
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4904      	ldr	r1, [pc, #16]	; (8007910 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078fe:	5ccb      	ldrb	r3, [r1, r3]
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40021000 	.word	0x40021000
 8007910:	0800c334 	.word	0x0800c334

08007914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007920:	4b2a      	ldr	r3, [pc, #168]	; (80079cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800792c:	f7fe ffd2 	bl	80068d4 <HAL_PWREx_GetVoltageRange>
 8007930:	6178      	str	r0, [r7, #20]
 8007932:	e014      	b.n	800795e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007934:	4b25      	ldr	r3, [pc, #148]	; (80079cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007938:	4a24      	ldr	r2, [pc, #144]	; (80079cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800793a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800793e:	6593      	str	r3, [r2, #88]	; 0x58
 8007940:	4b22      	ldr	r3, [pc, #136]	; (80079cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800794c:	f7fe ffc2 	bl	80068d4 <HAL_PWREx_GetVoltageRange>
 8007950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007952:	4b1e      	ldr	r3, [pc, #120]	; (80079cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007956:	4a1d      	ldr	r2, [pc, #116]	; (80079cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007964:	d10b      	bne.n	800797e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b80      	cmp	r3, #128	; 0x80
 800796a:	d919      	bls.n	80079a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2ba0      	cmp	r3, #160	; 0xa0
 8007970:	d902      	bls.n	8007978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007972:	2302      	movs	r3, #2
 8007974:	613b      	str	r3, [r7, #16]
 8007976:	e013      	b.n	80079a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007978:	2301      	movs	r3, #1
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	e010      	b.n	80079a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b80      	cmp	r3, #128	; 0x80
 8007982:	d902      	bls.n	800798a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007984:	2303      	movs	r3, #3
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	e00a      	b.n	80079a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b80      	cmp	r3, #128	; 0x80
 800798e:	d102      	bne.n	8007996 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007990:	2302      	movs	r3, #2
 8007992:	613b      	str	r3, [r7, #16]
 8007994:	e004      	b.n	80079a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b70      	cmp	r3, #112	; 0x70
 800799a:	d101      	bne.n	80079a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800799c:	2301      	movs	r3, #1
 800799e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f023 0207 	bic.w	r2, r3, #7
 80079a8:	4909      	ldr	r1, [pc, #36]	; (80079d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d001      	beq.n	80079c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40021000 	.word	0x40021000
 80079d0:	40022000 	.word	0x40022000

080079d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079dc:	2300      	movs	r3, #0
 80079de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079e0:	2300      	movs	r3, #0
 80079e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4b82      	ldr	r3, [pc, #520]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4b80      	ldr	r3, [pc, #512]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x30>
 80079fc:	21c9      	movs	r1, #201	; 0xc9
 80079fe:	487f      	ldr	r0, [pc, #508]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8007a00:	f7fd f99d 	bl	8004d3e <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d043      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00d      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a20:	d008      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a2a:	d003      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007a2c:	21d1      	movs	r1, #209	; 0xd1
 8007a2e:	4873      	ldr	r0, [pc, #460]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8007a30:	f7fd f985 	bl	8004d3e <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a3c:	d01a      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8007a3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a42:	d814      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007a48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a4c:	d10f      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007a4e:	4b6c      	ldr	r3, [pc, #432]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	4a6b      	ldr	r2, [pc, #428]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a5a:	e00c      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xa2>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 faec 	bl	8008040 <RCCEx_PLLSAI1_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a6c:	e003      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	74fb      	strb	r3, [r7, #19]
      break;
 8007a72:	e000      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      break;
 8007a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a76:	7cfb      	ldrb	r3, [r7, #19]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10b      	bne.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a7c:	4b60      	ldr	r3, [pc, #384]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	495d      	ldr	r1, [pc, #372]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007a92:	e001      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a94:	7cfb      	ldrb	r3, [r7, #19]
 8007a96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80bc 	beq.w	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d013      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aba:	d00e      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac4:	d009      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ace:	d004      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ad0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007ad4:	4849      	ldr	r0, [pc, #292]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8007ad6:	f7fd f932 	bl	8004d3e <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ada:	4b49      	ldr	r3, [pc, #292]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x118>
 8007aea:	2300      	movs	r3, #0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00d      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007af0:	4b43      	ldr	r3, [pc, #268]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af4:	4a42      	ldr	r2, [pc, #264]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007afa:	6593      	str	r3, [r2, #88]	; 0x58
 8007afc:	4b40      	ldr	r3, [pc, #256]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b04:	60bb      	str	r3, [r7, #8]
 8007b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b0c:	4b3d      	ldr	r3, [pc, #244]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a3c      	ldr	r2, [pc, #240]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b18:	f7fd fbdc 	bl	80052d4 <HAL_GetTick>
 8007b1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b1e:	e009      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b20:	f7fd fbd8 	bl	80052d4 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d902      	bls.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        ret = HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	74fb      	strb	r3, [r7, #19]
        break;
 8007b32:	e005      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b34:	4b33      	ldr	r3, [pc, #204]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0ef      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    if(ret == HAL_OK)
 8007b40:	7cfb      	ldrb	r3, [r7, #19]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d160      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x234>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b46:	4b2e      	ldr	r3, [pc, #184]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01e      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d019      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b6e:	4b24      	ldr	r3, [pc, #144]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b74:	4a22      	ldr	r2, [pc, #136]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b7e:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b84:	4a1e      	ldr	r2, [pc, #120]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b8e:	4a1c      	ldr	r2, [pc, #112]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d016      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba0:	f7fd fb98 	bl	80052d4 <HAL_GetTick>
 8007ba4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ba6:	e00b      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba8:	f7fd fb94 	bl	80052d4 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d902      	bls.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
          {
            ret = HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	74fb      	strb	r3, [r7, #19]
            break;
 8007bbe:	e006      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0ec      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
          }
        }
      }

      if(ret == HAL_OK)
 8007bce:	7cfb      	ldrb	r3, [r7, #19]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10b      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x218>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be2:	4907      	ldr	r1, [pc, #28]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007bea:	e00f      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bec:	7cfb      	ldrb	r3, [r7, #19]
 8007bee:	74bb      	strb	r3, [r7, #18]
 8007bf0:	e00c      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8007bf2:	bf00      	nop
 8007bf4:	0006ef63 	.word	0x0006ef63
 8007bf8:	fff9109c 	.word	0xfff9109c
 8007bfc:	0800c238 	.word	0x0800c238
 8007c00:	40021000 	.word	0x40021000
 8007c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	7cfb      	ldrb	r3, [r7, #19]
 8007c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c0c:	7c7b      	ldrb	r3, [r7, #17]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d105      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c12:	4b9d      	ldr	r3, [pc, #628]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c16:	4a9c      	ldr	r2, [pc, #624]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01f      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d010      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d00c      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d008      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d004      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007c4a:	f240 1199 	movw	r1, #409	; 0x199
 8007c4e:	488f      	ldr	r0, [pc, #572]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007c50:	f7fd f875 	bl	8004d3e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c54:	4b8c      	ldr	r3, [pc, #560]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	f023 0203 	bic.w	r2, r3, #3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	4989      	ldr	r1, [pc, #548]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d01f      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d010      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d00c      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	2b0c      	cmp	r3, #12
 8007c8c:	d008      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d004      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007c96:	f240 11a3 	movw	r1, #419	; 0x1a3
 8007c9a:	487c      	ldr	r0, [pc, #496]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007c9c:	f7fd f84f 	bl	8004d3e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ca0:	4b79      	ldr	r3, [pc, #484]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca6:	f023 020c 	bic.w	r2, r3, #12
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	4976      	ldr	r1, [pc, #472]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d022      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d013      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd2:	d00e      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cdc:	d009      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce6:	d004      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8007ce8:	f240 11d7 	movw	r1, #471	; 0x1d7
 8007cec:	4867      	ldr	r0, [pc, #412]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007cee:	f7fd f826 	bl	8004d3e <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cf2:	4b65      	ldr	r3, [pc, #404]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d00:	4961      	ldr	r1, [pc, #388]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d022      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d013      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d24:	d00e      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d2e:	d009      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d38:	d004      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007d3a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007d3e:	4853      	ldr	r0, [pc, #332]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007d40:	f7fc fffd 	bl	8004d3e <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d44:	4b50      	ldr	r3, [pc, #320]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	494d      	ldr	r1, [pc, #308]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d022      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d013      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d76:	d00e      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d80:	d009      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d8a:	d004      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007d8c:	f240 11e7 	movw	r1, #487	; 0x1e7
 8007d90:	483e      	ldr	r0, [pc, #248]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007d92:	f7fc ffd4 	bl	8004d3e <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d96:	4b3c      	ldr	r3, [pc, #240]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	4938      	ldr	r1, [pc, #224]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01d      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00e      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc8:	d009      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd2:	d004      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007dd4:	f240 11ef 	movw	r1, #495	; 0x1ef
 8007dd8:	482c      	ldr	r0, [pc, #176]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007dda:	f7fc ffb0 	bl	8004d3e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dde:	4b2a      	ldr	r3, [pc, #168]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	4926      	ldr	r1, [pc, #152]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01d      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00e      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e10:	d009      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e1a:	d004      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007e1c:	f240 2107 	movw	r1, #519	; 0x207
 8007e20:	481a      	ldr	r0, [pc, #104]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007e22:	f7fc ff8c 	bl	8004d3e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e26:	4b18      	ldr	r3, [pc, #96]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	4914      	ldr	r1, [pc, #80]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d046      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x502>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d013      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e58:	d00e      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e62:	d009      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e6c:	d004      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007e6e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007e72:	4806      	ldr	r0, [pc, #24]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8007e74:	f7fc ff63 	bl	8004d3e <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e78:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8007e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	e004      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007e86:	bf00      	nop
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	0800c238 	.word	0x0800c238
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	4961      	ldr	r1, [pc, #388]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea2:	d106      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ea4:	4b5c      	ldr	r3, [pc, #368]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4a5b      	ldr	r2, [pc, #364]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eae:	60d3      	str	r3, [r2, #12]
 8007eb0:	e011      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eba:	d10c      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f8bc 	bl	8008040 <RCCEx_PLLSAI1_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007ecc:	7cfb      	ldrb	r3, [r7, #19]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x502>
        {
          /* set overall return value */
          status = ret;
 8007ed2:	7cfb      	ldrb	r3, [r7, #19]
 8007ed4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d040      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d013      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ef2:	d00e      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007efc:	d009      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f06:	d004      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007f08:	f240 2166 	movw	r1, #614	; 0x266
 8007f0c:	4843      	ldr	r0, [pc, #268]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007f0e:	f7fc ff16 	bl	8004d3e <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f12:	4b41      	ldr	r3, [pc, #260]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	493d      	ldr	r1, [pc, #244]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f30:	d106      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f32:	4b39      	ldr	r3, [pc, #228]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	4a38      	ldr	r2, [pc, #224]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f3c:	60d3      	str	r3, [r2, #12]
 8007f3e:	e011      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f48:	d10c      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f875 	bl	8008040 <RCCEx_PLLSAI1_Config>
 8007f56:	4603      	mov	r3, r0
 8007f58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f5a:	7cfb      	ldrb	r3, [r7, #19]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x590>
      {
        /* set overall return value */
        status = ret;
 8007f60:	7cfb      	ldrb	r3, [r7, #19]
 8007f62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02f      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00e      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f80:	d009      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f8a:	d004      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8007f8c:	f240 2186 	movw	r1, #646	; 0x286
 8007f90:	4822      	ldr	r0, [pc, #136]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007f92:	f7fc fed4 	bl	8004d3e <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f96:	4b20      	ldr	r3, [pc, #128]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa4:	491c      	ldr	r1, [pc, #112]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fb4:	d10c      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	2102      	movs	r1, #2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f83f 	bl	8008040 <RCCEx_PLLSAI1_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fc6:	7cfb      	ldrb	r3, [r7, #19]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      {
        /* set overall return value */
        status = ret;
 8007fcc:	7cfb      	ldrb	r3, [r7, #19]
 8007fce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d018      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fec:	d004      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007fee:	f240 21b2 	movw	r1, #690	; 0x2b2
 8007ff2:	480a      	ldr	r0, [pc, #40]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007ff4:	f7fc fea3 	bl	8004d3e <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008006:	4904      	ldr	r1, [pc, #16]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800800e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40021000 	.word	0x40021000
 800801c:	0800c238 	.word	0x0800c238

08008020 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a04      	ldr	r2, [pc, #16]	; (800803c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800802a:	f043 0304 	orr.w	r3, r3, #4
 800802e:	6013      	str	r3, [r2, #0]
}
 8008030:	bf00      	nop
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	40021000 	.word	0x40021000

08008040 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d010      	beq.n	8008078 <RCCEx_PLLSAI1_Config+0x38>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d00c      	beq.n	8008078 <RCCEx_PLLSAI1_Config+0x38>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b02      	cmp	r3, #2
 8008064:	d008      	beq.n	8008078 <RCCEx_PLLSAI1_Config+0x38>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b03      	cmp	r3, #3
 800806c:	d004      	beq.n	8008078 <RCCEx_PLLSAI1_Config+0x38>
 800806e:	f640 315e 	movw	r1, #2910	; 0xb5e
 8008072:	4887      	ldr	r0, [pc, #540]	; (8008290 <RCCEx_PLLSAI1_Config+0x250>)
 8008074:	f7fc fe63 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <RCCEx_PLLSAI1_Config+0x48>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d904      	bls.n	8008092 <RCCEx_PLLSAI1_Config+0x52>
 8008088:	f640 315f 	movw	r1, #2911	; 0xb5f
 800808c:	4880      	ldr	r0, [pc, #512]	; (8008290 <RCCEx_PLLSAI1_Config+0x250>)
 800808e:	f7fc fe56 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	2b07      	cmp	r3, #7
 8008098:	d903      	bls.n	80080a2 <RCCEx_PLLSAI1_Config+0x62>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	2b56      	cmp	r3, #86	; 0x56
 80080a0:	d904      	bls.n	80080ac <RCCEx_PLLSAI1_Config+0x6c>
 80080a2:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80080a6:	487a      	ldr	r0, [pc, #488]	; (8008290 <RCCEx_PLLSAI1_Config+0x250>)
 80080a8:	f7fc fe49 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10b      	bne.n	80080d0 <RCCEx_PLLSAI1_Config+0x90>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d105      	bne.n	80080d0 <RCCEx_PLLSAI1_Config+0x90>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d007      	beq.n	80080e0 <RCCEx_PLLSAI1_Config+0xa0>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80080d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <RCCEx_PLLSAI1_Config+0xaa>
 80080e0:	f640 3161 	movw	r1, #2913	; 0xb61
 80080e4:	486a      	ldr	r0, [pc, #424]	; (8008290 <RCCEx_PLLSAI1_Config+0x250>)
 80080e6:	f7fc fe2a 	bl	8004d3e <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80080ea:	4b6a      	ldr	r3, [pc, #424]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d018      	beq.n	8008128 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80080f6:	4b67      	ldr	r3, [pc, #412]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f003 0203 	and.w	r2, r3, #3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d10d      	bne.n	8008122 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
       ||
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800810e:	4b61      	ldr	r3, [pc, #388]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	091b      	lsrs	r3, r3, #4
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
       ||
 800811e:	429a      	cmp	r2, r3
 8008120:	d047      	beq.n	80081b2 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	73fb      	strb	r3, [r7, #15]
 8008126:	e044      	b.n	80081b2 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b03      	cmp	r3, #3
 800812e:	d018      	beq.n	8008162 <RCCEx_PLLSAI1_Config+0x122>
 8008130:	2b03      	cmp	r3, #3
 8008132:	d825      	bhi.n	8008180 <RCCEx_PLLSAI1_Config+0x140>
 8008134:	2b01      	cmp	r3, #1
 8008136:	d002      	beq.n	800813e <RCCEx_PLLSAI1_Config+0xfe>
 8008138:	2b02      	cmp	r3, #2
 800813a:	d009      	beq.n	8008150 <RCCEx_PLLSAI1_Config+0x110>
 800813c:	e020      	b.n	8008180 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800813e:	4b55      	ldr	r3, [pc, #340]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d11d      	bne.n	8008186 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800814e:	e01a      	b.n	8008186 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008150:	4b50      	ldr	r3, [pc, #320]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008158:	2b00      	cmp	r3, #0
 800815a:	d116      	bne.n	800818a <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008160:	e013      	b.n	800818a <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008162:	4b4c      	ldr	r3, [pc, #304]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10f      	bne.n	800818e <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800816e:	4b49      	ldr	r3, [pc, #292]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800817e:	e006      	b.n	800818e <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	73fb      	strb	r3, [r7, #15]
      break;
 8008184:	e004      	b.n	8008190 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008186:	bf00      	nop
 8008188:	e002      	b.n	8008190 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800818a:	bf00      	nop
 800818c:	e000      	b.n	8008190 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800818e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10d      	bne.n	80081b2 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008196:	4b3f      	ldr	r3, [pc, #252]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6819      	ldr	r1, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	430b      	orrs	r3, r1
 80081ac:	4939      	ldr	r1, [pc, #228]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f040 80ba 	bne.w	800832e <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80081ba:	4b36      	ldr	r3, [pc, #216]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a35      	ldr	r2, [pc, #212]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 80081c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081c6:	f7fd f885 	bl	80052d4 <HAL_GetTick>
 80081ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081cc:	e009      	b.n	80081e2 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081ce:	f7fd f881 	bl	80052d4 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d902      	bls.n	80081e2 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	73fb      	strb	r3, [r7, #15]
        break;
 80081e0:	e005      	b.n	80081ee <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081e2:	4b2c      	ldr	r3, [pc, #176]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1ef      	bne.n	80081ce <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80081ee:	7bfb      	ldrb	r3, [r7, #15]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f040 809c 	bne.w	800832e <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d11d      	bne.n	8008238 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d903      	bls.n	800820c <RCCEx_PLLSAI1_Config+0x1cc>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	2b1f      	cmp	r3, #31
 800820a:	d904      	bls.n	8008216 <RCCEx_PLLSAI1_Config+0x1d6>
 800820c:	f640 31b4 	movw	r1, #2996	; 0xbb4
 8008210:	481f      	ldr	r0, [pc, #124]	; (8008290 <RCCEx_PLLSAI1_Config+0x250>)
 8008212:	f7fc fd94 	bl	8004d3e <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008216:	4b1f      	ldr	r3, [pc, #124]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800821e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6892      	ldr	r2, [r2, #8]
 8008226:	0211      	lsls	r1, r2, #8
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	68d2      	ldr	r2, [r2, #12]
 800822c:	06d2      	lsls	r2, r2, #27
 800822e:	430a      	orrs	r2, r1
 8008230:	4918      	ldr	r1, [pc, #96]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008232:	4313      	orrs	r3, r2
 8008234:	610b      	str	r3, [r1, #16]
 8008236:	e056      	b.n	80082e6 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d12c      	bne.n	8008298 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d010      	beq.n	8008268 <RCCEx_PLLSAI1_Config+0x228>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b04      	cmp	r3, #4
 800824c:	d00c      	beq.n	8008268 <RCCEx_PLLSAI1_Config+0x228>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b06      	cmp	r3, #6
 8008254:	d008      	beq.n	8008268 <RCCEx_PLLSAI1_Config+0x228>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	2b08      	cmp	r3, #8
 800825c:	d004      	beq.n	8008268 <RCCEx_PLLSAI1_Config+0x228>
 800825e:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8008262:	480b      	ldr	r0, [pc, #44]	; (8008290 <RCCEx_PLLSAI1_Config+0x250>)
 8008264:	f7fc fd6b 	bl	8004d3e <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008270:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6892      	ldr	r2, [r2, #8]
 8008278:	0211      	lsls	r1, r2, #8
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6912      	ldr	r2, [r2, #16]
 800827e:	0852      	lsrs	r2, r2, #1
 8008280:	3a01      	subs	r2, #1
 8008282:	0552      	lsls	r2, r2, #21
 8008284:	430a      	orrs	r2, r1
 8008286:	4903      	ldr	r1, [pc, #12]	; (8008294 <RCCEx_PLLSAI1_Config+0x254>)
 8008288:	4313      	orrs	r3, r2
 800828a:	610b      	str	r3, [r1, #16]
 800828c:	e02b      	b.n	80082e6 <RCCEx_PLLSAI1_Config+0x2a6>
 800828e:	bf00      	nop
 8008290:	0800c238 	.word	0x0800c238
 8008294:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d010      	beq.n	80082c2 <RCCEx_PLLSAI1_Config+0x282>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d00c      	beq.n	80082c2 <RCCEx_PLLSAI1_Config+0x282>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	2b06      	cmp	r3, #6
 80082ae:	d008      	beq.n	80082c2 <RCCEx_PLLSAI1_Config+0x282>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d004      	beq.n	80082c2 <RCCEx_PLLSAI1_Config+0x282>
 80082b8:	f640 31ea 	movw	r1, #3050	; 0xbea
 80082bc:	481e      	ldr	r0, [pc, #120]	; (8008338 <RCCEx_PLLSAI1_Config+0x2f8>)
 80082be:	f7fc fd3e 	bl	8004d3e <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082c2:	4b1e      	ldr	r3, [pc, #120]	; (800833c <RCCEx_PLLSAI1_Config+0x2fc>)
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80082ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6892      	ldr	r2, [r2, #8]
 80082d2:	0211      	lsls	r1, r2, #8
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6952      	ldr	r2, [r2, #20]
 80082d8:	0852      	lsrs	r2, r2, #1
 80082da:	3a01      	subs	r2, #1
 80082dc:	0652      	lsls	r2, r2, #25
 80082de:	430a      	orrs	r2, r1
 80082e0:	4916      	ldr	r1, [pc, #88]	; (800833c <RCCEx_PLLSAI1_Config+0x2fc>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80082e6:	4b15      	ldr	r3, [pc, #84]	; (800833c <RCCEx_PLLSAI1_Config+0x2fc>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a14      	ldr	r2, [pc, #80]	; (800833c <RCCEx_PLLSAI1_Config+0x2fc>)
 80082ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082f2:	f7fc ffef 	bl	80052d4 <HAL_GetTick>
 80082f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80082f8:	e009      	b.n	800830e <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082fa:	f7fc ffeb 	bl	80052d4 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d902      	bls.n	800830e <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	73fb      	strb	r3, [r7, #15]
          break;
 800830c:	e005      	b.n	800831a <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800830e:	4b0b      	ldr	r3, [pc, #44]	; (800833c <RCCEx_PLLSAI1_Config+0x2fc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0ef      	beq.n	80082fa <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d106      	bne.n	800832e <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008320:	4b06      	ldr	r3, [pc, #24]	; (800833c <RCCEx_PLLSAI1_Config+0x2fc>)
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	4904      	ldr	r1, [pc, #16]	; (800833c <RCCEx_PLLSAI1_Config+0x2fc>)
 800832a:	4313      	orrs	r3, r2
 800832c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	0800c238 	.word	0x0800c238
 800833c:	40021000 	.word	0x40021000

08008340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e0c8      	b.n	80084e4 <HAL_TIM_Base_Init+0x1a4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a65      	ldr	r2, [pc, #404]	; (80084ec <HAL_TIM_Base_Init+0x1ac>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d01d      	beq.n	8008398 <HAL_TIM_Base_Init+0x58>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008364:	d018      	beq.n	8008398 <HAL_TIM_Base_Init+0x58>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a61      	ldr	r2, [pc, #388]	; (80084f0 <HAL_TIM_Base_Init+0x1b0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d013      	beq.n	8008398 <HAL_TIM_Base_Init+0x58>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a5f      	ldr	r2, [pc, #380]	; (80084f4 <HAL_TIM_Base_Init+0x1b4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00e      	beq.n	8008398 <HAL_TIM_Base_Init+0x58>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a5e      	ldr	r2, [pc, #376]	; (80084f8 <HAL_TIM_Base_Init+0x1b8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d009      	beq.n	8008398 <HAL_TIM_Base_Init+0x58>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a5c      	ldr	r2, [pc, #368]	; (80084fc <HAL_TIM_Base_Init+0x1bc>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d004      	beq.n	8008398 <HAL_TIM_Base_Init+0x58>
 800838e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008392:	485b      	ldr	r0, [pc, #364]	; (8008500 <HAL_TIM_Base_Init+0x1c0>)
 8008394:	f7fc fcd3 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d014      	beq.n	80083ca <HAL_TIM_Base_Init+0x8a>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d010      	beq.n	80083ca <HAL_TIM_Base_Init+0x8a>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b20      	cmp	r3, #32
 80083ae:	d00c      	beq.n	80083ca <HAL_TIM_Base_Init+0x8a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	d008      	beq.n	80083ca <HAL_TIM_Base_Init+0x8a>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	2b60      	cmp	r3, #96	; 0x60
 80083be:	d004      	beq.n	80083ca <HAL_TIM_Base_Init+0x8a>
 80083c0:	f240 1117 	movw	r1, #279	; 0x117
 80083c4:	484e      	ldr	r0, [pc, #312]	; (8008500 <HAL_TIM_Base_Init+0x1c0>)
 80083c6:	f7fc fcba 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00e      	beq.n	80083f0 <HAL_TIM_Base_Init+0xb0>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083da:	d009      	beq.n	80083f0 <HAL_TIM_Base_Init+0xb0>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e4:	d004      	beq.n	80083f0 <HAL_TIM_Base_Init+0xb0>
 80083e6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80083ea:	4845      	ldr	r0, [pc, #276]	; (8008500 <HAL_TIM_Base_Init+0x1c0>)
 80083ec:	f7fc fca7 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f8:	d00f      	beq.n	800841a <HAL_TIM_Base_Init+0xda>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d006      	beq.n	8008410 <HAL_TIM_Base_Init+0xd0>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840a:	d201      	bcs.n	8008410 <HAL_TIM_Base_Init+0xd0>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <HAL_TIM_Base_Init+0xd2>
 8008410:	2300      	movs	r3, #0
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	e006      	b.n	8008428 <HAL_TIM_Base_Init+0xe8>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	bf14      	ite	ne
 8008422:	2301      	movne	r3, #1
 8008424:	2300      	moveq	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <HAL_TIM_Base_Init+0xf6>
 800842c:	f240 1119 	movw	r1, #281	; 0x119
 8008430:	4833      	ldr	r0, [pc, #204]	; (8008500 <HAL_TIM_Base_Init+0x1c0>)
 8008432:	f7fc fc84 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d008      	beq.n	8008450 <HAL_TIM_Base_Init+0x110>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2b80      	cmp	r3, #128	; 0x80
 8008444:	d004      	beq.n	8008450 <HAL_TIM_Base_Init+0x110>
 8008446:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800844a:	482d      	ldr	r0, [pc, #180]	; (8008500 <HAL_TIM_Base_Init+0x1c0>)
 800844c:	f7fc fc77 	bl	8004d3e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d106      	bne.n	800846a <HAL_TIM_Base_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7fc fdad 	bl	8004fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2202      	movs	r2, #2
 800846e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3304      	adds	r3, #4
 800847a:	4619      	mov	r1, r3
 800847c:	4610      	mov	r0, r2
 800847e:	f000 fc85 	bl	8008d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	40012c00 	.word	0x40012c00
 80084f0:	40001000 	.word	0x40001000
 80084f4:	40001400 	.word	0x40001400
 80084f8:	40014000 	.word	0x40014000
 80084fc:	40014400 	.word	0x40014400
 8008500:	0800c274 	.word	0x0800c274

08008504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a34      	ldr	r2, [pc, #208]	; (80085e4 <HAL_TIM_Base_Start_IT+0xe0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d01d      	beq.n	8008552 <HAL_TIM_Base_Start_IT+0x4e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851e:	d018      	beq.n	8008552 <HAL_TIM_Base_Start_IT+0x4e>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a30      	ldr	r2, [pc, #192]	; (80085e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d013      	beq.n	8008552 <HAL_TIM_Base_Start_IT+0x4e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a2f      	ldr	r2, [pc, #188]	; (80085ec <HAL_TIM_Base_Start_IT+0xe8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00e      	beq.n	8008552 <HAL_TIM_Base_Start_IT+0x4e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a2d      	ldr	r2, [pc, #180]	; (80085f0 <HAL_TIM_Base_Start_IT+0xec>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d009      	beq.n	8008552 <HAL_TIM_Base_Start_IT+0x4e>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a2c      	ldr	r2, [pc, #176]	; (80085f4 <HAL_TIM_Base_Start_IT+0xf0>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d004      	beq.n	8008552 <HAL_TIM_Base_Start_IT+0x4e>
 8008548:	f240 11d3 	movw	r1, #467	; 0x1d3
 800854c:	482a      	ldr	r0, [pc, #168]	; (80085f8 <HAL_TIM_Base_Start_IT+0xf4>)
 800854e:	f7fc fbf6 	bl	8004d3e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b01      	cmp	r3, #1
 800855c:	d001      	beq.n	8008562 <HAL_TIM_Base_Start_IT+0x5e>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e03b      	b.n	80085da <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2202      	movs	r2, #2
 8008566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0201 	orr.w	r2, r2, #1
 8008578:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a19      	ldr	r2, [pc, #100]	; (80085e4 <HAL_TIM_Base_Start_IT+0xe0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d009      	beq.n	8008598 <HAL_TIM_Base_Start_IT+0x94>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858c:	d004      	beq.n	8008598 <HAL_TIM_Base_Start_IT+0x94>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a17      	ldr	r2, [pc, #92]	; (80085f0 <HAL_TIM_Base_Start_IT+0xec>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d115      	bne.n	80085c4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	4b17      	ldr	r3, [pc, #92]	; (80085fc <HAL_TIM_Base_Start_IT+0xf8>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b06      	cmp	r3, #6
 80085a8:	d015      	beq.n	80085d6 <HAL_TIM_Base_Start_IT+0xd2>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b0:	d011      	beq.n	80085d6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0201 	orr.w	r2, r2, #1
 80085c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c2:	e008      	b.n	80085d6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e000      	b.n	80085d8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	40012c00 	.word	0x40012c00
 80085e8:	40001000 	.word	0x40001000
 80085ec:	40001400 	.word	0x40001400
 80085f0:	40014000 	.word	0x40014000
 80085f4:	40014400 	.word	0x40014400
 80085f8:	0800c274 	.word	0x0800c274
 80085fc:	00010007 	.word	0x00010007

08008600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d020      	beq.n	8008664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01b      	beq.n	8008664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0202 	mvn.w	r2, #2
 8008634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fb80 	bl	8008d50 <HAL_TIM_IC_CaptureCallback>
 8008650:	e005      	b.n	800865e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fb72 	bl	8008d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fb83 	bl	8008d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 0304 	and.w	r3, r3, #4
 800866a:	2b00      	cmp	r3, #0
 800866c:	d020      	beq.n	80086b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f003 0304 	and.w	r3, r3, #4
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01b      	beq.n	80086b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0204 	mvn.w	r2, #4
 8008680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2202      	movs	r2, #2
 8008686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fb5a 	bl	8008d50 <HAL_TIM_IC_CaptureCallback>
 800869c:	e005      	b.n	80086aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fb4c 	bl	8008d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fb5d 	bl	8008d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f003 0308 	and.w	r3, r3, #8
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d020      	beq.n	80086fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01b      	beq.n	80086fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f06f 0208 	mvn.w	r2, #8
 80086cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2204      	movs	r2, #4
 80086d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fb34 	bl	8008d50 <HAL_TIM_IC_CaptureCallback>
 80086e8:	e005      	b.n	80086f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fb26 	bl	8008d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fb37 	bl	8008d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f003 0310 	and.w	r3, r3, #16
 8008702:	2b00      	cmp	r3, #0
 8008704:	d020      	beq.n	8008748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01b      	beq.n	8008748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f06f 0210 	mvn.w	r2, #16
 8008718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2208      	movs	r2, #8
 800871e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fb0e 	bl	8008d50 <HAL_TIM_IC_CaptureCallback>
 8008734:	e005      	b.n	8008742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fb00 	bl	8008d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fb11 	bl	8008d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00c      	beq.n	800876c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d007      	beq.n	800876c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0201 	mvn.w	r2, #1
 8008764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fc fad4 	bl	8004d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00c      	beq.n	8008790 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fd1a 	bl	80091c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00c      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fd12 	bl	80091d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00c      	beq.n	80087d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d007      	beq.n	80087d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fad0 	bl	8008d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00c      	beq.n	80087fc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f06f 0220 	mvn.w	r2, #32
 80087f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fcda 	bl	80091b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_TIM_ConfigClockSource+0x1c>
 800881c:	2302      	movs	r3, #2
 800881e:	e282      	b.n	8008d26 <HAL_TIM_ConfigClockSource+0x522>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008838:	d029      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b70      	cmp	r3, #112	; 0x70
 8008840:	d025      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800884a:	d020      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d01c      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b50      	cmp	r3, #80	; 0x50
 800885a:	d018      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b60      	cmp	r3, #96	; 0x60
 8008862:	d014      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d010      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b10      	cmp	r3, #16
 8008872:	d00c      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b20      	cmp	r3, #32
 800887a:	d008      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b30      	cmp	r3, #48	; 0x30
 8008882:	d004      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x8a>
 8008884:	f241 5154 	movw	r1, #5460	; 0x1554
 8008888:	486f      	ldr	r0, [pc, #444]	; (8008a48 <HAL_TIM_ConfigClockSource+0x244>)
 800888a:	f7fc fa58 	bl	8004d3e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800889c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80088a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088a8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ba:	f000 80d1 	beq.w	8008a60 <HAL_TIM_ConfigClockSource+0x25c>
 80088be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c2:	f200 8223 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x508>
 80088c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ca:	d02d      	beq.n	8008928 <HAL_TIM_ConfigClockSource+0x124>
 80088cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d0:	f200 821c 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x508>
 80088d4:	2b70      	cmp	r3, #112	; 0x70
 80088d6:	d051      	beq.n	800897c <HAL_TIM_ConfigClockSource+0x178>
 80088d8:	2b70      	cmp	r3, #112	; 0x70
 80088da:	f200 8217 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x508>
 80088de:	2b60      	cmp	r3, #96	; 0x60
 80088e0:	f000 8162 	beq.w	8008ba8 <HAL_TIM_ConfigClockSource+0x3a4>
 80088e4:	2b60      	cmp	r3, #96	; 0x60
 80088e6:	f200 8211 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x508>
 80088ea:	2b50      	cmp	r3, #80	; 0x50
 80088ec:	f000 8115 	beq.w	8008b1a <HAL_TIM_ConfigClockSource+0x316>
 80088f0:	2b50      	cmp	r3, #80	; 0x50
 80088f2:	f200 820b 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x508>
 80088f6:	2b40      	cmp	r3, #64	; 0x40
 80088f8:	f000 81a4 	beq.w	8008c44 <HAL_TIM_ConfigClockSource+0x440>
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	f200 8205 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x508>
 8008902:	2b30      	cmp	r3, #48	; 0x30
 8008904:	f000 81e5 	beq.w	8008cd2 <HAL_TIM_ConfigClockSource+0x4ce>
 8008908:	2b30      	cmp	r3, #48	; 0x30
 800890a:	f200 81ff 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x508>
 800890e:	2b20      	cmp	r3, #32
 8008910:	f000 81df 	beq.w	8008cd2 <HAL_TIM_ConfigClockSource+0x4ce>
 8008914:	2b20      	cmp	r3, #32
 8008916:	f200 81f9 	bhi.w	8008d0c <HAL_TIM_ConfigClockSource+0x508>
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 81d9 	beq.w	8008cd2 <HAL_TIM_ConfigClockSource+0x4ce>
 8008920:	2b10      	cmp	r3, #16
 8008922:	f000 81d6 	beq.w	8008cd2 <HAL_TIM_ConfigClockSource+0x4ce>
 8008926:	e1f1      	b.n	8008d0c <HAL_TIM_ConfigClockSource+0x508>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a47      	ldr	r2, [pc, #284]	; (8008a4c <HAL_TIM_ConfigClockSource+0x248>)
 800892e:	4293      	cmp	r3, r2
 8008930:	f000 81ef 	beq.w	8008d12 <HAL_TIM_ConfigClockSource+0x50e>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800893c:	f000 81e9 	beq.w	8008d12 <HAL_TIM_ConfigClockSource+0x50e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a42      	ldr	r2, [pc, #264]	; (8008a50 <HAL_TIM_ConfigClockSource+0x24c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	f000 81e3 	beq.w	8008d12 <HAL_TIM_ConfigClockSource+0x50e>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a40      	ldr	r2, [pc, #256]	; (8008a54 <HAL_TIM_ConfigClockSource+0x250>)
 8008952:	4293      	cmp	r3, r2
 8008954:	f000 81dd 	beq.w	8008d12 <HAL_TIM_ConfigClockSource+0x50e>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a3e      	ldr	r2, [pc, #248]	; (8008a58 <HAL_TIM_ConfigClockSource+0x254>)
 800895e:	4293      	cmp	r3, r2
 8008960:	f000 81d7 	beq.w	8008d12 <HAL_TIM_ConfigClockSource+0x50e>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a3c      	ldr	r2, [pc, #240]	; (8008a5c <HAL_TIM_ConfigClockSource+0x258>)
 800896a:	4293      	cmp	r3, r2
 800896c:	f000 81d1 	beq.w	8008d12 <HAL_TIM_ConfigClockSource+0x50e>
 8008970:	f44f 51ab 	mov.w	r1, #5472	; 0x1560
 8008974:	4834      	ldr	r0, [pc, #208]	; (8008a48 <HAL_TIM_ConfigClockSource+0x244>)
 8008976:	f7fc f9e2 	bl	8004d3e <assert_failed>
      break;
 800897a:	e1ca      	b.n	8008d12 <HAL_TIM_ConfigClockSource+0x50e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a32      	ldr	r2, [pc, #200]	; (8008a4c <HAL_TIM_ConfigClockSource+0x248>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00e      	beq.n	80089a4 <HAL_TIM_ConfigClockSource+0x1a0>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898e:	d009      	beq.n	80089a4 <HAL_TIM_ConfigClockSource+0x1a0>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a30      	ldr	r2, [pc, #192]	; (8008a58 <HAL_TIM_ConfigClockSource+0x254>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_TIM_ConfigClockSource+0x1a0>
 800899a:	f241 5167 	movw	r1, #5479	; 0x1567
 800899e:	482a      	ldr	r0, [pc, #168]	; (8008a48 <HAL_TIM_ConfigClockSource+0x244>)
 80089a0:	f7fc f9cd 	bl	8004d3e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d013      	beq.n	80089d4 <HAL_TIM_ConfigClockSource+0x1d0>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b4:	d00e      	beq.n	80089d4 <HAL_TIM_ConfigClockSource+0x1d0>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089be:	d009      	beq.n	80089d4 <HAL_TIM_ConfigClockSource+0x1d0>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089c8:	d004      	beq.n	80089d4 <HAL_TIM_ConfigClockSource+0x1d0>
 80089ca:	f241 516a 	movw	r1, #5482	; 0x156a
 80089ce:	481e      	ldr	r0, [pc, #120]	; (8008a48 <HAL_TIM_ConfigClockSource+0x244>)
 80089d0:	f7fc f9b5 	bl	8004d3e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089dc:	d014      	beq.n	8008a08 <HAL_TIM_ConfigClockSource+0x204>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d010      	beq.n	8008a08 <HAL_TIM_ConfigClockSource+0x204>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00c      	beq.n	8008a08 <HAL_TIM_ConfigClockSource+0x204>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d008      	beq.n	8008a08 <HAL_TIM_ConfigClockSource+0x204>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b0a      	cmp	r3, #10
 80089fc:	d004      	beq.n	8008a08 <HAL_TIM_ConfigClockSource+0x204>
 80089fe:	f241 516b 	movw	r1, #5483	; 0x156b
 8008a02:	4811      	ldr	r0, [pc, #68]	; (8008a48 <HAL_TIM_ConfigClockSource+0x244>)
 8008a04:	f7fc f99b 	bl	8004d3e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b0f      	cmp	r3, #15
 8008a0e:	d904      	bls.n	8008a1a <HAL_TIM_ConfigClockSource+0x216>
 8008a10:	f241 516c 	movw	r1, #5484	; 0x156c
 8008a14:	480c      	ldr	r0, [pc, #48]	; (8008a48 <HAL_TIM_ConfigClockSource+0x244>)
 8008a16:	f7fc f992 	bl	8004d3e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a2a:	f000 fa8d 	bl	8008f48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	609a      	str	r2, [r3, #8]
      break;
 8008a46:	e165      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x510>
 8008a48:	0800c274 	.word	0x0800c274
 8008a4c:	40012c00 	.word	0x40012c00
 8008a50:	40001000 	.word	0x40001000
 8008a54:	40001400 	.word	0x40001400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40014400 	.word	0x40014400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a74      	ldr	r2, [pc, #464]	; (8008c38 <HAL_TIM_ConfigClockSource+0x434>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d009      	beq.n	8008a7e <HAL_TIM_ConfigClockSource+0x27a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a72:	d004      	beq.n	8008a7e <HAL_TIM_ConfigClockSource+0x27a>
 8008a74:	f241 517f 	movw	r1, #5503	; 0x157f
 8008a78:	4870      	ldr	r0, [pc, #448]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008a7a:	f7fc f960 	bl	8004d3e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d013      	beq.n	8008aae <HAL_TIM_ConfigClockSource+0x2aa>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8e:	d00e      	beq.n	8008aae <HAL_TIM_ConfigClockSource+0x2aa>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a98:	d009      	beq.n	8008aae <HAL_TIM_ConfigClockSource+0x2aa>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aa2:	d004      	beq.n	8008aae <HAL_TIM_ConfigClockSource+0x2aa>
 8008aa4:	f241 5182 	movw	r1, #5506	; 0x1582
 8008aa8:	4864      	ldr	r0, [pc, #400]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008aaa:	f7fc f948 	bl	8004d3e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab6:	d014      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x2de>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d010      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x2de>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00c      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x2de>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d008      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x2de>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b0a      	cmp	r3, #10
 8008ad6:	d004      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x2de>
 8008ad8:	f241 5183 	movw	r1, #5507	; 0x1583
 8008adc:	4857      	ldr	r0, [pc, #348]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008ade:	f7fc f92e 	bl	8004d3e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b0f      	cmp	r3, #15
 8008ae8:	d904      	bls.n	8008af4 <HAL_TIM_ConfigClockSource+0x2f0>
 8008aea:	f241 5184 	movw	r1, #5508	; 0x1584
 8008aee:	4853      	ldr	r0, [pc, #332]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008af0:	f7fc f925 	bl	8004d3e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b04:	f000 fa20 	bl	8008f48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b16:	609a      	str	r2, [r3, #8]
      break;
 8008b18:	e0fc      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x510>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a46      	ldr	r2, [pc, #280]	; (8008c38 <HAL_TIM_ConfigClockSource+0x434>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d00e      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x33e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b2c:	d009      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x33e>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a43      	ldr	r2, [pc, #268]	; (8008c40 <HAL_TIM_ConfigClockSource+0x43c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d004      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x33e>
 8008b38:	f241 5193 	movw	r1, #5523	; 0x1593
 8008b3c:	483f      	ldr	r0, [pc, #252]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008b3e:	f7fc f8fe 	bl	8004d3e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b4a:	d014      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x372>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d010      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x372>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00c      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x372>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d008      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x372>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b0a      	cmp	r3, #10
 8008b6a:	d004      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x372>
 8008b6c:	f241 5196 	movw	r1, #5526	; 0x1596
 8008b70:	4832      	ldr	r0, [pc, #200]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008b72:	f7fc f8e4 	bl	8004d3e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	2b0f      	cmp	r3, #15
 8008b7c:	d904      	bls.n	8008b88 <HAL_TIM_ConfigClockSource+0x384>
 8008b7e:	f241 5197 	movw	r1, #5527	; 0x1597
 8008b82:	482e      	ldr	r0, [pc, #184]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008b84:	f7fc f8db 	bl	8004d3e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b94:	461a      	mov	r2, r3
 8008b96:	f000 f95d 	bl	8008e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2150      	movs	r1, #80	; 0x50
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 f9b6 	bl	8008f12 <TIM_ITRx_SetConfig>
      break;
 8008ba6:	e0b5      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x510>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a22      	ldr	r2, [pc, #136]	; (8008c38 <HAL_TIM_ConfigClockSource+0x434>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d00e      	beq.n	8008bd0 <HAL_TIM_ConfigClockSource+0x3cc>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bba:	d009      	beq.n	8008bd0 <HAL_TIM_ConfigClockSource+0x3cc>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <HAL_TIM_ConfigClockSource+0x43c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d004      	beq.n	8008bd0 <HAL_TIM_ConfigClockSource+0x3cc>
 8008bc6:	f241 51a3 	movw	r1, #5539	; 0x15a3
 8008bca:	481c      	ldr	r0, [pc, #112]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008bcc:	f7fc f8b7 	bl	8004d3e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd8:	d014      	beq.n	8008c04 <HAL_TIM_ConfigClockSource+0x400>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d010      	beq.n	8008c04 <HAL_TIM_ConfigClockSource+0x400>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00c      	beq.n	8008c04 <HAL_TIM_ConfigClockSource+0x400>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d008      	beq.n	8008c04 <HAL_TIM_ConfigClockSource+0x400>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b0a      	cmp	r3, #10
 8008bf8:	d004      	beq.n	8008c04 <HAL_TIM_ConfigClockSource+0x400>
 8008bfa:	f241 51a6 	movw	r1, #5542	; 0x15a6
 8008bfe:	480f      	ldr	r0, [pc, #60]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008c00:	f7fc f89d 	bl	8004d3e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	2b0f      	cmp	r3, #15
 8008c0a:	d904      	bls.n	8008c16 <HAL_TIM_ConfigClockSource+0x412>
 8008c0c:	f241 51a7 	movw	r1, #5543	; 0x15a7
 8008c10:	480a      	ldr	r0, [pc, #40]	; (8008c3c <HAL_TIM_ConfigClockSource+0x438>)
 8008c12:	f7fc f894 	bl	8004d3e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c22:	461a      	mov	r2, r3
 8008c24:	f000 f945 	bl	8008eb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2160      	movs	r1, #96	; 0x60
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f96f 	bl	8008f12 <TIM_ITRx_SetConfig>
      break;
 8008c34:	e06e      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x510>
 8008c36:	bf00      	nop
 8008c38:	40012c00 	.word	0x40012c00
 8008c3c:	0800c274 	.word	0x0800c274
 8008c40:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a39      	ldr	r2, [pc, #228]	; (8008d30 <HAL_TIM_ConfigClockSource+0x52c>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00e      	beq.n	8008c6c <HAL_TIM_ConfigClockSource+0x468>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c56:	d009      	beq.n	8008c6c <HAL_TIM_ConfigClockSource+0x468>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a35      	ldr	r2, [pc, #212]	; (8008d34 <HAL_TIM_ConfigClockSource+0x530>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d004      	beq.n	8008c6c <HAL_TIM_ConfigClockSource+0x468>
 8008c62:	f241 51b3 	movw	r1, #5555	; 0x15b3
 8008c66:	4834      	ldr	r0, [pc, #208]	; (8008d38 <HAL_TIM_ConfigClockSource+0x534>)
 8008c68:	f7fc f869 	bl	8004d3e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c74:	d014      	beq.n	8008ca0 <HAL_TIM_ConfigClockSource+0x49c>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d010      	beq.n	8008ca0 <HAL_TIM_ConfigClockSource+0x49c>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00c      	beq.n	8008ca0 <HAL_TIM_ConfigClockSource+0x49c>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d008      	beq.n	8008ca0 <HAL_TIM_ConfigClockSource+0x49c>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	2b0a      	cmp	r3, #10
 8008c94:	d004      	beq.n	8008ca0 <HAL_TIM_ConfigClockSource+0x49c>
 8008c96:	f241 51b6 	movw	r1, #5558	; 0x15b6
 8008c9a:	4827      	ldr	r0, [pc, #156]	; (8008d38 <HAL_TIM_ConfigClockSource+0x534>)
 8008c9c:	f7fc f84f 	bl	8004d3e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b0f      	cmp	r3, #15
 8008ca6:	d904      	bls.n	8008cb2 <HAL_TIM_ConfigClockSource+0x4ae>
 8008ca8:	f241 51b7 	movw	r1, #5559	; 0x15b7
 8008cac:	4822      	ldr	r0, [pc, #136]	; (8008d38 <HAL_TIM_ConfigClockSource+0x534>)
 8008cae:	f7fc f846 	bl	8004d3e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f000 f8c8 	bl	8008e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2140      	movs	r1, #64	; 0x40
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f921 	bl	8008f12 <TIM_ITRx_SetConfig>
      break;
 8008cd0:	e020      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x510>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <HAL_TIM_ConfigClockSource+0x52c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00e      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x4f6>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce4:	d009      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x4f6>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a12      	ldr	r2, [pc, #72]	; (8008d34 <HAL_TIM_ConfigClockSource+0x530>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d004      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x4f6>
 8008cf0:	f241 51c6 	movw	r1, #5574	; 0x15c6
 8008cf4:	4810      	ldr	r0, [pc, #64]	; (8008d38 <HAL_TIM_ConfigClockSource+0x534>)
 8008cf6:	f7fc f822 	bl	8004d3e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f000 f904 	bl	8008f12 <TIM_ITRx_SetConfig>
      break;
 8008d0a:	e003      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x510>
    }

    default:
      status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d10:	e000      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x510>
      break;
 8008d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	40012c00 	.word	0x40012c00
 8008d34:	40014000 	.word	0x40014000
 8008d38:	0800c274 	.word	0x0800c274

08008d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a2a      	ldr	r2, [pc, #168]	; (8008e48 <TIM_Base_SetConfig+0xbc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d003      	beq.n	8008dac <TIM_Base_SetConfig+0x20>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008daa:	d108      	bne.n	8008dbe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a21      	ldr	r2, [pc, #132]	; (8008e48 <TIM_Base_SetConfig+0xbc>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00b      	beq.n	8008dde <TIM_Base_SetConfig+0x52>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dcc:	d007      	beq.n	8008dde <TIM_Base_SetConfig+0x52>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a1e      	ldr	r2, [pc, #120]	; (8008e4c <TIM_Base_SetConfig+0xc0>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d003      	beq.n	8008dde <TIM_Base_SetConfig+0x52>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a1d      	ldr	r2, [pc, #116]	; (8008e50 <TIM_Base_SetConfig+0xc4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d108      	bne.n	8008df0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a0c      	ldr	r2, [pc, #48]	; (8008e48 <TIM_Base_SetConfig+0xbc>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <TIM_Base_SetConfig+0xa0>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a0b      	ldr	r2, [pc, #44]	; (8008e4c <TIM_Base_SetConfig+0xc0>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_Base_SetConfig+0xa0>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <TIM_Base_SetConfig+0xc4>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d103      	bne.n	8008e34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	615a      	str	r2, [r3, #20]
}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40012c00 	.word	0x40012c00
 8008e4c:	40014000 	.word	0x40014000
 8008e50:	40014400 	.word	0x40014400

08008e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	f023 0201 	bic.w	r2, r3, #1
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	011b      	lsls	r3, r3, #4
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f023 030a 	bic.w	r3, r3, #10
 8008e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	621a      	str	r2, [r3, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b087      	sub	sp, #28
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	60f8      	str	r0, [r7, #12]
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	f023 0210 	bic.w	r2, r3, #16
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	031b      	lsls	r3, r3, #12
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008eee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	621a      	str	r2, [r3, #32]
}
 8008f06:	bf00      	nop
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	f043 0307 	orr.w	r3, r3, #7
 8008f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	609a      	str	r2, [r3, #8]
}
 8008f3c:	bf00      	nop
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	021a      	lsls	r2, r3, #8
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	609a      	str	r2, [r3, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a81      	ldr	r2, [pc, #516]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d018      	beq.n	8008fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa4:	d013      	beq.n	8008fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a7d      	ldr	r2, [pc, #500]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x218>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d00e      	beq.n	8008fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a7b      	ldr	r2, [pc, #492]	; (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d009      	beq.n	8008fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a7a      	ldr	r2, [pc, #488]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d004      	beq.n	8008fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008fc4:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8008fc8:	4878      	ldr	r0, [pc, #480]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8008fca:	f7fb feb8 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d020      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b10      	cmp	r3, #16
 8008fdc:	d01c      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	d018      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b30      	cmp	r3, #48	; 0x30
 8008fec:	d014      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b40      	cmp	r3, #64	; 0x40
 8008ff4:	d010      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b50      	cmp	r3, #80	; 0x50
 8008ffc:	d00c      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b60      	cmp	r3, #96	; 0x60
 8009004:	d008      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b70      	cmp	r3, #112	; 0x70
 800900c:	d004      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800900e:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8009012:	4866      	ldr	r0, [pc, #408]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8009014:	f7fb fe93 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	2b80      	cmp	r3, #128	; 0x80
 800901e:	d008      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009028:	f240 71b9 	movw	r1, #1977	; 0x7b9
 800902c:	485f      	ldr	r0, [pc, #380]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 800902e:	f7fb fe86 	bl	8004d3e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009038:	2b01      	cmp	r3, #1
 800903a:	d101      	bne.n	8009040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800903c:	2302      	movs	r3, #2
 800903e:	e0a8      	b.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0x20a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a4d      	ldr	r2, [pc, #308]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d161      	bne.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d054      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800907a:	d04f      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009084:	d04a      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800908e:	d045      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009098:	d040      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80090a2:	d03b      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090ac:	d036      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090b6:	d031      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80090c0:	d02c      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090ca:	d027      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80090d4:	d022      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80090de:	d01d      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80090e8:	d018      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80090f2:	d013      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80090fc:	d00e      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8009106:	d009      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8009110:	d004      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009112:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8009116:	4825      	ldr	r0, [pc, #148]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8009118:	f7fb fe11 	bl	8004d3e <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a13      	ldr	r2, [pc, #76]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d009      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915a:	d004      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a11      	ldr	r2, [pc, #68]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d10c      	bne.n	8009180 <HAL_TIMEx_MasterConfigSynchronization+0x1f8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800916c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4313      	orrs	r3, r2
 8009176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	40012c00 	.word	0x40012c00
 80091a0:	40001000 	.word	0x40001000
 80091a4:	40001400 	.word	0x40001400
 80091a8:	40014000 	.word	0x40014000
 80091ac:	0800c2ac 	.word	0x0800c2ac

080091b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e06d      	b.n	80092da <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d014      	beq.n	8009230 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a36      	ldr	r2, [pc, #216]	; (80092e4 <HAL_UART_Init+0xf8>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d023      	beq.n	8009258 <HAL_UART_Init+0x6c>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a34      	ldr	r2, [pc, #208]	; (80092e8 <HAL_UART_Init+0xfc>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d01e      	beq.n	8009258 <HAL_UART_Init+0x6c>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a33      	ldr	r2, [pc, #204]	; (80092ec <HAL_UART_Init+0x100>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d019      	beq.n	8009258 <HAL_UART_Init+0x6c>
 8009224:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8009228:	4831      	ldr	r0, [pc, #196]	; (80092f0 <HAL_UART_Init+0x104>)
 800922a:	f7fb fd88 	bl	8004d3e <assert_failed>
 800922e:	e013      	b.n	8009258 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a2b      	ldr	r2, [pc, #172]	; (80092e4 <HAL_UART_Init+0xf8>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d00e      	beq.n	8009258 <HAL_UART_Init+0x6c>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a2a      	ldr	r2, [pc, #168]	; (80092e8 <HAL_UART_Init+0xfc>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d009      	beq.n	8009258 <HAL_UART_Init+0x6c>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a28      	ldr	r2, [pc, #160]	; (80092ec <HAL_UART_Init+0x100>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d004      	beq.n	8009258 <HAL_UART_Init+0x6c>
 800924e:	f240 1157 	movw	r1, #343	; 0x157
 8009252:	4827      	ldr	r0, [pc, #156]	; (80092f0 <HAL_UART_Init+0x104>)
 8009254:	f7fb fd73 	bl	8004d3e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925c:	2b00      	cmp	r3, #0
 800925e:	d106      	bne.n	800926e <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7fb ff37 	bl	80050dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2224      	movs	r2, #36	; 0x24
 8009272:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 0201 	bic.w	r2, r2, #1
 8009282:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <HAL_UART_Init+0xa6>
  {
    UART_AdvFeatureConfig(huart);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fb8b 	bl	80099a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f8b8 	bl	8009408 <UART_SetConfig>
 8009298:	4603      	mov	r3, r0
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_UART_Init+0xb6>
  {
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e01b      	b.n	80092da <HAL_UART_Init+0xee>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0201 	orr.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fcb0 	bl	8009c38 <UART_CheckIdleState>
 80092d8:	4603      	mov	r3, r0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40013800 	.word	0x40013800
 80092e8:	40004400 	.word	0x40004400
 80092ec:	40008000 	.word	0x40008000
 80092f0:	0800c2e8 	.word	0x0800c2e8

080092f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	; 0x28
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	4613      	mov	r3, r2
 8009302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009308:	2b20      	cmp	r3, #32
 800930a:	d178      	bne.n	80093fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HAL_UART_Transmit+0x24>
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d101      	bne.n	800931c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e071      	b.n	8009400 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2221      	movs	r2, #33	; 0x21
 8009328:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800932a:	f7fb ffd3 	bl	80052d4 <HAL_GetTick>
 800932e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	88fa      	ldrh	r2, [r7, #6]
 8009334:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	88fa      	ldrh	r2, [r7, #6]
 800933c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009348:	d108      	bne.n	800935c <HAL_UART_Transmit+0x68>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d104      	bne.n	800935c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009352:	2300      	movs	r3, #0
 8009354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	61bb      	str	r3, [r7, #24]
 800935a:	e003      	b.n	8009364 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009364:	e030      	b.n	80093c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2200      	movs	r2, #0
 800936e:	2180      	movs	r1, #128	; 0x80
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fd09 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2220      	movs	r2, #32
 8009380:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e03c      	b.n	8009400 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10b      	bne.n	80093a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	881a      	ldrh	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009398:	b292      	uxth	r2, r2
 800939a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	3302      	adds	r3, #2
 80093a0:	61bb      	str	r3, [r7, #24]
 80093a2:	e008      	b.n	80093b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	b292      	uxth	r2, r2
 80093ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	3301      	adds	r3, #1
 80093b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093bc:	b29b      	uxth	r3, r3
 80093be:	3b01      	subs	r3, #1
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1c8      	bne.n	8009366 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2200      	movs	r2, #0
 80093dc:	2140      	movs	r1, #64	; 0x40
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fcd2 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d004      	beq.n	80093f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2220      	movs	r2, #32
 80093ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e005      	b.n	8009400 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2220      	movs	r2, #32
 80093f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	e000      	b.n	8009400 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80093fe:	2302      	movs	r3, #2
  }
}
 8009400:	4618      	mov	r0, r3
 8009402:	3720      	adds	r7, #32
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800940c:	b08a      	sub	sp, #40	; 0x28
 800940e:	af00      	add	r7, sp, #0
 8009410:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	4a9e      	ldr	r2, [pc, #632]	; (8009698 <UART_SetConfig+0x290>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d904      	bls.n	800942c <UART_SetConfig+0x24>
 8009422:	f640 414d 	movw	r1, #3149	; 0xc4d
 8009426:	489d      	ldr	r0, [pc, #628]	; (800969c <UART_SetConfig+0x294>)
 8009428:	f7fb fc89 	bl	8004d3e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009434:	d00d      	beq.n	8009452 <UART_SetConfig+0x4a>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d009      	beq.n	8009452 <UART_SetConfig+0x4a>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009446:	d004      	beq.n	8009452 <UART_SetConfig+0x4a>
 8009448:	f640 414e 	movw	r1, #3150	; 0xc4e
 800944c:	4893      	ldr	r0, [pc, #588]	; (800969c <UART_SetConfig+0x294>)
 800944e:	f7fb fc76 	bl	8004d3e <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a92      	ldr	r2, [pc, #584]	; (80096a0 <UART_SetConfig+0x298>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d10e      	bne.n	800947a <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d030      	beq.n	80094c6 <UART_SetConfig+0xbe>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800946c:	d02b      	beq.n	80094c6 <UART_SetConfig+0xbe>
 800946e:	f640 4151 	movw	r1, #3153	; 0xc51
 8009472:	488a      	ldr	r0, [pc, #552]	; (800969c <UART_SetConfig+0x294>)
 8009474:	f7fb fc63 	bl	8004d3e <assert_failed>
 8009478:	e025      	b.n	80094c6 <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009482:	d012      	beq.n	80094aa <UART_SetConfig+0xa2>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00e      	beq.n	80094aa <UART_SetConfig+0xa2>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009494:	d009      	beq.n	80094aa <UART_SetConfig+0xa2>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949e:	d004      	beq.n	80094aa <UART_SetConfig+0xa2>
 80094a0:	f640 4155 	movw	r1, #3157	; 0xc55
 80094a4:	487d      	ldr	r0, [pc, #500]	; (800969c <UART_SetConfig+0x294>)
 80094a6:	f7fb fc4a 	bl	8004d3e <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <UART_SetConfig+0xbe>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094ba:	d004      	beq.n	80094c6 <UART_SetConfig+0xbe>
 80094bc:	f640 4156 	movw	r1, #3158	; 0xc56
 80094c0:	4876      	ldr	r0, [pc, #472]	; (800969c <UART_SetConfig+0x294>)
 80094c2:	f7fb fc3c 	bl	8004d3e <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00e      	beq.n	80094ec <UART_SetConfig+0xe4>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d6:	d009      	beq.n	80094ec <UART_SetConfig+0xe4>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80094e0:	d004      	beq.n	80094ec <UART_SetConfig+0xe4>
 80094e2:	f640 4159 	movw	r1, #3161	; 0xc59
 80094e6:	486d      	ldr	r0, [pc, #436]	; (800969c <UART_SetConfig+0x294>)
 80094e8:	f7fb fc29 	bl	8004d3e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	f023 030c 	bic.w	r3, r3, #12
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d103      	bne.n	8009500 <UART_SetConfig+0xf8>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <UART_SetConfig+0x102>
 8009500:	f640 415a 	movw	r1, #3162	; 0xc5a
 8009504:	4865      	ldr	r0, [pc, #404]	; (800969c <UART_SetConfig+0x294>)
 8009506:	f7fb fc1a 	bl	8004d3e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d013      	beq.n	800953a <UART_SetConfig+0x132>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800951a:	d00e      	beq.n	800953a <UART_SetConfig+0x132>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009524:	d009      	beq.n	800953a <UART_SetConfig+0x132>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800952e:	d004      	beq.n	800953a <UART_SetConfig+0x132>
 8009530:	f640 415b 	movw	r1, #3163	; 0xc5b
 8009534:	4859      	ldr	r0, [pc, #356]	; (800969c <UART_SetConfig+0x294>)
 8009536:	f7fb fc02 	bl	8004d3e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <UART_SetConfig+0x14e>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800954a:	d004      	beq.n	8009556 <UART_SetConfig+0x14e>
 800954c:	f640 415c 	movw	r1, #3164	; 0xc5c
 8009550:	4852      	ldr	r0, [pc, #328]	; (800969c <UART_SetConfig+0x294>)
 8009552:	f7fb fbf4 	bl	8004d3e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689a      	ldr	r2, [r3, #8]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	431a      	orrs	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	431a      	orrs	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	4313      	orrs	r3, r2
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	4b4b      	ldr	r3, [pc, #300]	; (80096a4 <UART_SetConfig+0x29c>)
 8009576:	4013      	ands	r3, r2
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800957e:	430b      	orrs	r3, r1
 8009580:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68da      	ldr	r2, [r3, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a3f      	ldr	r2, [pc, #252]	; (80096a0 <UART_SetConfig+0x298>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d004      	beq.n	80095b2 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ae:	4313      	orrs	r3, r2
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c2:	430a      	orrs	r2, r1
 80095c4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a37      	ldr	r2, [pc, #220]	; (80096a8 <UART_SetConfig+0x2a0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d125      	bne.n	800961c <UART_SetConfig+0x214>
 80095d0:	4b36      	ldr	r3, [pc, #216]	; (80096ac <UART_SetConfig+0x2a4>)
 80095d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d6:	f003 0303 	and.w	r3, r3, #3
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d81a      	bhi.n	8009614 <UART_SetConfig+0x20c>
 80095de:	a201      	add	r2, pc, #4	; (adr r2, 80095e4 <UART_SetConfig+0x1dc>)
 80095e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e4:	080095f5 	.word	0x080095f5
 80095e8:	08009605 	.word	0x08009605
 80095ec:	080095fd 	.word	0x080095fd
 80095f0:	0800960d 	.word	0x0800960d
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095fa:	e08e      	b.n	800971a <UART_SetConfig+0x312>
 80095fc:	2302      	movs	r3, #2
 80095fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009602:	e08a      	b.n	800971a <UART_SetConfig+0x312>
 8009604:	2304      	movs	r3, #4
 8009606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800960a:	e086      	b.n	800971a <UART_SetConfig+0x312>
 800960c:	2308      	movs	r3, #8
 800960e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009612:	e082      	b.n	800971a <UART_SetConfig+0x312>
 8009614:	2310      	movs	r3, #16
 8009616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800961a:	e07e      	b.n	800971a <UART_SetConfig+0x312>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a23      	ldr	r2, [pc, #140]	; (80096b0 <UART_SetConfig+0x2a8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d146      	bne.n	80096b4 <UART_SetConfig+0x2ac>
 8009626:	4b21      	ldr	r3, [pc, #132]	; (80096ac <UART_SetConfig+0x2a4>)
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962c:	f003 030c 	and.w	r3, r3, #12
 8009630:	2b0c      	cmp	r3, #12
 8009632:	d82d      	bhi.n	8009690 <UART_SetConfig+0x288>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <UART_SetConfig+0x234>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	08009671 	.word	0x08009671
 8009640:	08009691 	.word	0x08009691
 8009644:	08009691 	.word	0x08009691
 8009648:	08009691 	.word	0x08009691
 800964c:	08009681 	.word	0x08009681
 8009650:	08009691 	.word	0x08009691
 8009654:	08009691 	.word	0x08009691
 8009658:	08009691 	.word	0x08009691
 800965c:	08009679 	.word	0x08009679
 8009660:	08009691 	.word	0x08009691
 8009664:	08009691 	.word	0x08009691
 8009668:	08009691 	.word	0x08009691
 800966c:	08009689 	.word	0x08009689
 8009670:	2300      	movs	r3, #0
 8009672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009676:	e050      	b.n	800971a <UART_SetConfig+0x312>
 8009678:	2302      	movs	r3, #2
 800967a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800967e:	e04c      	b.n	800971a <UART_SetConfig+0x312>
 8009680:	2304      	movs	r3, #4
 8009682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009686:	e048      	b.n	800971a <UART_SetConfig+0x312>
 8009688:	2308      	movs	r3, #8
 800968a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800968e:	e044      	b.n	800971a <UART_SetConfig+0x312>
 8009690:	2310      	movs	r3, #16
 8009692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009696:	e040      	b.n	800971a <UART_SetConfig+0x312>
 8009698:	00989680 	.word	0x00989680
 800969c:	0800c2e8 	.word	0x0800c2e8
 80096a0:	40008000 	.word	0x40008000
 80096a4:	efff69f3 	.word	0xefff69f3
 80096a8:	40013800 	.word	0x40013800
 80096ac:	40021000 	.word	0x40021000
 80096b0:	40004400 	.word	0x40004400
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4aa0      	ldr	r2, [pc, #640]	; (800993c <UART_SetConfig+0x534>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d12a      	bne.n	8009714 <UART_SetConfig+0x30c>
 80096be:	4ba0      	ldr	r3, [pc, #640]	; (8009940 <UART_SetConfig+0x538>)
 80096c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80096c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096cc:	d01a      	beq.n	8009704 <UART_SetConfig+0x2fc>
 80096ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096d2:	d81b      	bhi.n	800970c <UART_SetConfig+0x304>
 80096d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096d8:	d00c      	beq.n	80096f4 <UART_SetConfig+0x2ec>
 80096da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096de:	d815      	bhi.n	800970c <UART_SetConfig+0x304>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <UART_SetConfig+0x2e4>
 80096e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e8:	d008      	beq.n	80096fc <UART_SetConfig+0x2f4>
 80096ea:	e00f      	b.n	800970c <UART_SetConfig+0x304>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096f2:	e012      	b.n	800971a <UART_SetConfig+0x312>
 80096f4:	2302      	movs	r3, #2
 80096f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096fa:	e00e      	b.n	800971a <UART_SetConfig+0x312>
 80096fc:	2304      	movs	r3, #4
 80096fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009702:	e00a      	b.n	800971a <UART_SetConfig+0x312>
 8009704:	2308      	movs	r3, #8
 8009706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800970a:	e006      	b.n	800971a <UART_SetConfig+0x312>
 800970c:	2310      	movs	r3, #16
 800970e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009712:	e002      	b.n	800971a <UART_SetConfig+0x312>
 8009714:	2310      	movs	r3, #16
 8009716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a87      	ldr	r2, [pc, #540]	; (800993c <UART_SetConfig+0x534>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d17a      	bne.n	800981a <UART_SetConfig+0x412>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009728:	2b08      	cmp	r3, #8
 800972a:	d824      	bhi.n	8009776 <UART_SetConfig+0x36e>
 800972c:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <UART_SetConfig+0x32c>)
 800972e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009732:	bf00      	nop
 8009734:	08009759 	.word	0x08009759
 8009738:	08009777 	.word	0x08009777
 800973c:	08009761 	.word	0x08009761
 8009740:	08009777 	.word	0x08009777
 8009744:	08009767 	.word	0x08009767
 8009748:	08009777 	.word	0x08009777
 800974c:	08009777 	.word	0x08009777
 8009750:	08009777 	.word	0x08009777
 8009754:	0800976f 	.word	0x0800976f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009758:	f7fe f8b0 	bl	80078bc <HAL_RCC_GetPCLK1Freq>
 800975c:	61f8      	str	r0, [r7, #28]
        break;
 800975e:	e010      	b.n	8009782 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009760:	4b78      	ldr	r3, [pc, #480]	; (8009944 <UART_SetConfig+0x53c>)
 8009762:	61fb      	str	r3, [r7, #28]
        break;
 8009764:	e00d      	b.n	8009782 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009766:	f7fe f811 	bl	800778c <HAL_RCC_GetSysClockFreq>
 800976a:	61f8      	str	r0, [r7, #28]
        break;
 800976c:	e009      	b.n	8009782 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800976e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009772:	61fb      	str	r3, [r7, #28]
        break;
 8009774:	e005      	b.n	8009782 <UART_SetConfig+0x37a>
      default:
        pclk = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8102 	beq.w	800998e <UART_SetConfig+0x586>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	4413      	add	r3, r2
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	429a      	cmp	r2, r3
 8009798:	d305      	bcc.n	80097a6 <UART_SetConfig+0x39e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80097a0:	69fa      	ldr	r2, [r7, #28]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d903      	bls.n	80097ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80097ac:	e0ef      	b.n	800998e <UART_SetConfig+0x586>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	2200      	movs	r2, #0
 80097b2:	461c      	mov	r4, r3
 80097b4:	4615      	mov	r5, r2
 80097b6:	f04f 0200 	mov.w	r2, #0
 80097ba:	f04f 0300 	mov.w	r3, #0
 80097be:	022b      	lsls	r3, r5, #8
 80097c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80097c4:	0222      	lsls	r2, r4, #8
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	6849      	ldr	r1, [r1, #4]
 80097ca:	0849      	lsrs	r1, r1, #1
 80097cc:	2000      	movs	r0, #0
 80097ce:	4688      	mov	r8, r1
 80097d0:	4681      	mov	r9, r0
 80097d2:	eb12 0a08 	adds.w	sl, r2, r8
 80097d6:	eb43 0b09 	adc.w	fp, r3, r9
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e8:	4650      	mov	r0, sl
 80097ea:	4659      	mov	r1, fp
 80097ec:	f7f6 fcee 	bl	80001cc <__aeabi_uldivmod>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4613      	mov	r3, r2
 80097f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097fe:	d308      	bcc.n	8009812 <UART_SetConfig+0x40a>
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009806:	d204      	bcs.n	8009812 <UART_SetConfig+0x40a>
        {
          huart->Instance->BRR = usartdiv;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	60da      	str	r2, [r3, #12]
 8009810:	e0bd      	b.n	800998e <UART_SetConfig+0x586>
        }
        else
        {
          ret = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009818:	e0b9      	b.n	800998e <UART_SetConfig+0x586>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	69db      	ldr	r3, [r3, #28]
 800981e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009822:	d15e      	bne.n	80098e2 <UART_SetConfig+0x4da>
  {
    switch (clocksource)
 8009824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009828:	2b08      	cmp	r3, #8
 800982a:	d828      	bhi.n	800987e <UART_SetConfig+0x476>
 800982c:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <UART_SetConfig+0x42c>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	08009859 	.word	0x08009859
 8009838:	08009861 	.word	0x08009861
 800983c:	08009869 	.word	0x08009869
 8009840:	0800987f 	.word	0x0800987f
 8009844:	0800986f 	.word	0x0800986f
 8009848:	0800987f 	.word	0x0800987f
 800984c:	0800987f 	.word	0x0800987f
 8009850:	0800987f 	.word	0x0800987f
 8009854:	08009877 	.word	0x08009877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009858:	f7fe f830 	bl	80078bc <HAL_RCC_GetPCLK1Freq>
 800985c:	61f8      	str	r0, [r7, #28]
        break;
 800985e:	e014      	b.n	800988a <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009860:	f7fe f842 	bl	80078e8 <HAL_RCC_GetPCLK2Freq>
 8009864:	61f8      	str	r0, [r7, #28]
        break;
 8009866:	e010      	b.n	800988a <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009868:	4b36      	ldr	r3, [pc, #216]	; (8009944 <UART_SetConfig+0x53c>)
 800986a:	61fb      	str	r3, [r7, #28]
        break;
 800986c:	e00d      	b.n	800988a <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800986e:	f7fd ff8d 	bl	800778c <HAL_RCC_GetSysClockFreq>
 8009872:	61f8      	str	r0, [r7, #28]
        break;
 8009874:	e009      	b.n	800988a <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800987a:	61fb      	str	r3, [r7, #28]
        break;
 800987c:	e005      	b.n	800988a <UART_SetConfig+0x482>
      default:
        pclk = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d07e      	beq.n	800998e <UART_SetConfig+0x586>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	005a      	lsls	r2, r3, #1
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	085b      	lsrs	r3, r3, #1
 800989a:	441a      	add	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2b0f      	cmp	r3, #15
 80098aa:	d916      	bls.n	80098da <UART_SetConfig+0x4d2>
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098b2:	d212      	bcs.n	80098da <UART_SetConfig+0x4d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	f023 030f 	bic.w	r3, r3, #15
 80098bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	085b      	lsrs	r3, r3, #1
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	8afb      	ldrh	r3, [r7, #22]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	8afa      	ldrh	r2, [r7, #22]
 80098d6:	60da      	str	r2, [r3, #12]
 80098d8:	e059      	b.n	800998e <UART_SetConfig+0x586>
      }
      else
      {
        ret = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80098e0:	e055      	b.n	800998e <UART_SetConfig+0x586>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	d82e      	bhi.n	8009948 <UART_SetConfig+0x540>
 80098ea:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <UART_SetConfig+0x4e8>)
 80098ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f0:	08009915 	.word	0x08009915
 80098f4:	0800991d 	.word	0x0800991d
 80098f8:	08009925 	.word	0x08009925
 80098fc:	08009949 	.word	0x08009949
 8009900:	0800992b 	.word	0x0800992b
 8009904:	08009949 	.word	0x08009949
 8009908:	08009949 	.word	0x08009949
 800990c:	08009949 	.word	0x08009949
 8009910:	08009933 	.word	0x08009933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009914:	f7fd ffd2 	bl	80078bc <HAL_RCC_GetPCLK1Freq>
 8009918:	61f8      	str	r0, [r7, #28]
        break;
 800991a:	e01b      	b.n	8009954 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800991c:	f7fd ffe4 	bl	80078e8 <HAL_RCC_GetPCLK2Freq>
 8009920:	61f8      	str	r0, [r7, #28]
        break;
 8009922:	e017      	b.n	8009954 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009924:	4b07      	ldr	r3, [pc, #28]	; (8009944 <UART_SetConfig+0x53c>)
 8009926:	61fb      	str	r3, [r7, #28]
        break;
 8009928:	e014      	b.n	8009954 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800992a:	f7fd ff2f 	bl	800778c <HAL_RCC_GetSysClockFreq>
 800992e:	61f8      	str	r0, [r7, #28]
        break;
 8009930:	e010      	b.n	8009954 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009936:	61fb      	str	r3, [r7, #28]
        break;
 8009938:	e00c      	b.n	8009954 <UART_SetConfig+0x54c>
 800993a:	bf00      	nop
 800993c:	40008000 	.word	0x40008000
 8009940:	40021000 	.word	0x40021000
 8009944:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009952:	bf00      	nop
    }

    if (pclk != 0U)
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d019      	beq.n	800998e <UART_SetConfig+0x586>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	085a      	lsrs	r2, r3, #1
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	441a      	add	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	fbb2 f3f3 	udiv	r3, r2, r3
 800996c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	2b0f      	cmp	r3, #15
 8009972:	d909      	bls.n	8009988 <UART_SetConfig+0x580>
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800997a:	d205      	bcs.n	8009988 <UART_SetConfig+0x580>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	b29a      	uxth	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60da      	str	r2, [r3, #12]
 8009986:	e002      	b.n	800998e <UART_SetConfig+0x586>
      }
      else
      {
        ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800999a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3728      	adds	r7, #40	; 0x28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080099a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2bff      	cmp	r3, #255	; 0xff
 80099b6:	d904      	bls.n	80099c2 <UART_AdvFeatureConfig+0x1a>
 80099b8:	f640 5142 	movw	r1, #3394	; 0xd42
 80099bc:	4893      	ldr	r0, [pc, #588]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 80099be:	f7fb f9be 	bl	8004d3e <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c6:	f003 0308 	and.w	r3, r3, #8
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d018      	beq.n	8009a00 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d009      	beq.n	80099ea <UART_AdvFeatureConfig+0x42>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099de:	d004      	beq.n	80099ea <UART_AdvFeatureConfig+0x42>
 80099e0:	f640 5147 	movw	r1, #3399	; 0xd47
 80099e4:	4889      	ldr	r0, [pc, #548]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 80099e6:	f7fb f9aa 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d018      	beq.n	8009a3e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d009      	beq.n	8009a28 <UART_AdvFeatureConfig+0x80>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a1c:	d004      	beq.n	8009a28 <UART_AdvFeatureConfig+0x80>
 8009a1e:	f640 514e 	movw	r1, #3406	; 0xd4e
 8009a22:	487a      	ldr	r0, [pc, #488]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009a24:	f7fb f98b 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d018      	beq.n	8009a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <UART_AdvFeatureConfig+0xbe>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a5a:	d004      	beq.n	8009a66 <UART_AdvFeatureConfig+0xbe>
 8009a5c:	f640 5155 	movw	r1, #3413	; 0xd55
 8009a60:	486a      	ldr	r0, [pc, #424]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009a62:	f7fb f96c 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d018      	beq.n	8009aba <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d009      	beq.n	8009aa4 <UART_AdvFeatureConfig+0xfc>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a98:	d004      	beq.n	8009aa4 <UART_AdvFeatureConfig+0xfc>
 8009a9a:	f640 515c 	movw	r1, #3420	; 0xd5c
 8009a9e:	485b      	ldr	r0, [pc, #364]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009aa0:	f7fb f94d 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	f003 0310 	and.w	r3, r3, #16
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d018      	beq.n	8009af8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <UART_AdvFeatureConfig+0x13a>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad6:	d004      	beq.n	8009ae2 <UART_AdvFeatureConfig+0x13a>
 8009ad8:	f640 5163 	movw	r1, #3427	; 0xd63
 8009adc:	484b      	ldr	r0, [pc, #300]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009ade:	f7fb f92e 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d018      	beq.n	8009b36 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d009      	beq.n	8009b20 <UART_AdvFeatureConfig+0x178>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b14:	d004      	beq.n	8009b20 <UART_AdvFeatureConfig+0x178>
 8009b16:	f640 516a 	movw	r1, #3434	; 0xd6a
 8009b1a:	483c      	ldr	r0, [pc, #240]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009b1c:	f7fb f90f 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d04f      	beq.n	8009be2 <UART_AdvFeatureConfig+0x23a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a32      	ldr	r2, [pc, #200]	; (8009c10 <UART_AdvFeatureConfig+0x268>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d009      	beq.n	8009b60 <UART_AdvFeatureConfig+0x1b8>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a30      	ldr	r2, [pc, #192]	; (8009c14 <UART_AdvFeatureConfig+0x26c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d004      	beq.n	8009b60 <UART_AdvFeatureConfig+0x1b8>
 8009b56:	f640 5171 	movw	r1, #3441	; 0xd71
 8009b5a:	482c      	ldr	r0, [pc, #176]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009b5c:	f7fb f8ef 	bl	8004d3e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d009      	beq.n	8009b7c <UART_AdvFeatureConfig+0x1d4>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b70:	d004      	beq.n	8009b7c <UART_AdvFeatureConfig+0x1d4>
 8009b72:	f640 5172 	movw	r1, #3442	; 0xd72
 8009b76:	4825      	ldr	r0, [pc, #148]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009b78:	f7fb f8e1 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b9a:	d122      	bne.n	8009be2 <UART_AdvFeatureConfig+0x23a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d013      	beq.n	8009bcc <UART_AdvFeatureConfig+0x224>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bac:	d00e      	beq.n	8009bcc <UART_AdvFeatureConfig+0x224>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bb6:	d009      	beq.n	8009bcc <UART_AdvFeatureConfig+0x224>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009bc0:	d004      	beq.n	8009bcc <UART_AdvFeatureConfig+0x224>
 8009bc2:	f640 5177 	movw	r1, #3447	; 0xd77
 8009bc6:	4811      	ldr	r0, [pc, #68]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009bc8:	f7fb f8b9 	bl	8004d3e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d01f      	beq.n	8009c2e <UART_AdvFeatureConfig+0x286>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d010      	beq.n	8009c18 <UART_AdvFeatureConfig+0x270>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bfa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009bfe:	d00b      	beq.n	8009c18 <UART_AdvFeatureConfig+0x270>
 8009c00:	f640 517f 	movw	r1, #3455	; 0xd7f
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <UART_AdvFeatureConfig+0x264>)
 8009c06:	f7fb f89a 	bl	8004d3e <assert_failed>
 8009c0a:	e005      	b.n	8009c18 <UART_AdvFeatureConfig+0x270>
 8009c0c:	0800c2e8 	.word	0x0800c2e8
 8009c10:	40013800 	.word	0x40013800
 8009c14:	40004400 	.word	0x40004400
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	605a      	str	r2, [r3, #4]
  }
}
 8009c2e:	bf00      	nop
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop

08009c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b098      	sub	sp, #96	; 0x60
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c48:	f7fb fb44 	bl	80052d4 <HAL_GetTick>
 8009c4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0308 	and.w	r3, r3, #8
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d12e      	bne.n	8009cba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c64:	2200      	movs	r2, #0
 8009c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f88c 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d021      	beq.n	8009cba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7e:	e853 3f00 	ldrex	r3, [r3]
 8009c82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
 8009c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c94:	647b      	str	r3, [r7, #68]	; 0x44
 8009c96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c9c:	e841 2300 	strex	r3, r2, [r1]
 8009ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e6      	bne.n	8009c76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2220      	movs	r2, #32
 8009cac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e062      	b.n	8009d80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d149      	bne.n	8009d5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f856 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d03c      	beq.n	8009d5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	623b      	str	r3, [r7, #32]
   return(result);
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d00:	633b      	str	r3, [r7, #48]	; 0x30
 8009d02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e6      	bne.n	8009ce2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3308      	adds	r3, #8
 8009d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0301 	bic.w	r3, r3, #1
 8009d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3308      	adds	r3, #8
 8009d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d34:	61fa      	str	r2, [r7, #28]
 8009d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	69b9      	ldr	r1, [r7, #24]
 8009d3a:	69fa      	ldr	r2, [r7, #28]
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	617b      	str	r3, [r7, #20]
   return(result);
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e5      	bne.n	8009d14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e011      	b.n	8009d80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3758      	adds	r7, #88	; 0x58
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	4613      	mov	r3, r2
 8009d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d98:	e049      	b.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da0:	d045      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009da2:	f7fb fa97 	bl	80052d4 <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d302      	bcc.n	8009db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e048      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d031      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	f003 0308 	and.w	r3, r3, #8
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d110      	bne.n	8009dfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2208      	movs	r2, #8
 8009dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f838 	bl	8009e56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2208      	movs	r2, #8
 8009dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e029      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e08:	d111      	bne.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 f81e 	bl	8009e56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e00f      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4013      	ands	r3, r2
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	bf0c      	ite	eq
 8009e3e:	2301      	moveq	r3, #1
 8009e40:	2300      	movne	r3, #0
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d0a6      	beq.n	8009d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b095      	sub	sp, #84	; 0x54
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e6      	bne.n	8009e5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3308      	adds	r3, #8
 8009e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
 8009e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	f023 0301 	bic.w	r3, r3, #1
 8009ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3308      	adds	r3, #8
 8009eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb8:	e841 2300 	strex	r3, r2, [r1]
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1e5      	bne.n	8009e90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d118      	bne.n	8009efe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	e853 3f00 	ldrex	r3, [r3]
 8009ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f023 0310 	bic.w	r3, r3, #16
 8009ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eea:	61bb      	str	r3, [r7, #24]
 8009eec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eee:	6979      	ldr	r1, [r7, #20]
 8009ef0:	69ba      	ldr	r2, [r7, #24]
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e6      	bne.n	8009ecc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009f12:	bf00      	nop
 8009f14:	3754      	adds	r7, #84	; 0x54
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <memset>:
 8009f1e:	4402      	add	r2, r0
 8009f20:	4603      	mov	r3, r0
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d100      	bne.n	8009f28 <memset+0xa>
 8009f26:	4770      	bx	lr
 8009f28:	f803 1b01 	strb.w	r1, [r3], #1
 8009f2c:	e7f9      	b.n	8009f22 <memset+0x4>
	...

08009f30 <__libc_init_array>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	4d0d      	ldr	r5, [pc, #52]	; (8009f68 <__libc_init_array+0x38>)
 8009f34:	4c0d      	ldr	r4, [pc, #52]	; (8009f6c <__libc_init_array+0x3c>)
 8009f36:	1b64      	subs	r4, r4, r5
 8009f38:	10a4      	asrs	r4, r4, #2
 8009f3a:	2600      	movs	r6, #0
 8009f3c:	42a6      	cmp	r6, r4
 8009f3e:	d109      	bne.n	8009f54 <__libc_init_array+0x24>
 8009f40:	4d0b      	ldr	r5, [pc, #44]	; (8009f70 <__libc_init_array+0x40>)
 8009f42:	4c0c      	ldr	r4, [pc, #48]	; (8009f74 <__libc_init_array+0x44>)
 8009f44:	f000 f818 	bl	8009f78 <_init>
 8009f48:	1b64      	subs	r4, r4, r5
 8009f4a:	10a4      	asrs	r4, r4, #2
 8009f4c:	2600      	movs	r6, #0
 8009f4e:	42a6      	cmp	r6, r4
 8009f50:	d105      	bne.n	8009f5e <__libc_init_array+0x2e>
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f58:	4798      	blx	r3
 8009f5a:	3601      	adds	r6, #1
 8009f5c:	e7ee      	b.n	8009f3c <__libc_init_array+0xc>
 8009f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f62:	4798      	blx	r3
 8009f64:	3601      	adds	r6, #1
 8009f66:	e7f2      	b.n	8009f4e <__libc_init_array+0x1e>
 8009f68:	0800c374 	.word	0x0800c374
 8009f6c:	0800c374 	.word	0x0800c374
 8009f70:	0800c374 	.word	0x0800c374
 8009f74:	0800c378 	.word	0x0800c378

08009f78 <_init>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	bf00      	nop
 8009f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7e:	bc08      	pop	{r3}
 8009f80:	469e      	mov	lr, r3
 8009f82:	4770      	bx	lr

08009f84 <_fini>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	bf00      	nop
 8009f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8a:	bc08      	pop	{r3}
 8009f8c:	469e      	mov	lr, r3
 8009f8e:	4770      	bx	lr
