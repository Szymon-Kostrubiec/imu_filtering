
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a474  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002200  0800a604  0800a604  0001a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c804  0800c804  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800c804  0800c804  0001c804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c80c  0800c80c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c80c  0800c80c  0001c80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c810  0800c810  0001c810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800c814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000060  0800c874  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  0800c874  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c30d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357e  00000000  00000000  0003c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  0003f960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014a6  00000000  00000000  000413b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023094  00000000  00000000  00042856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f84f  00000000  00000000  000658ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d16f1  00000000  00000000  00085139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007444  00000000  00000000  0015682c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0015dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5ec 	.word	0x0800a5ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800a5ec 	.word	0x0800a5ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_DMA_Init+0x38>)
 8000584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <MX_DMA_Init+0x38>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6493      	str	r3, [r2, #72]	; 0x48
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_DMA_Init+0x38>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2011      	movs	r0, #17
 80005a0:	f005 f891 	bl	80056c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005a4:	2011      	movs	r0, #17
 80005a6:	f005 f8aa 	bl	80056fe <HAL_NVIC_EnableIRQ>

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000

080005b8 <a_mpu9250_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu9250_read(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	461a      	mov	r2, r3
 80005c4:	460b      	mov	r3, r1
 80005c6:	72fb      	strb	r3, [r7, #11]
 80005c8:	4613      	mov	r3, r2
 80005ca:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                     /* if iic interface */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10e      	bne.n	80005f4 <a_mpu9250_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	7818      	ldrb	r0, [r3, #0]
 80005de:	893b      	ldrh	r3, [r7, #8]
 80005e0:	7af9      	ldrb	r1, [r7, #11]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	47a0      	blx	r4
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <a_mpu9250_read+0x38>
        {
            return 1;                                                                 /* return error */
 80005ec:	2301      	movs	r3, #1
 80005ee:	e010      	b.n	8000612 <a_mpu9250_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 80005f0:	2300      	movs	r3, #0
 80005f2:	e00e      	b.n	8000612 <a_mpu9250_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	7afa      	ldrb	r2, [r7, #11]
 80005fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80005fe:	b2d0      	uxtb	r0, r2
 8000600:	893a      	ldrh	r2, [r7, #8]
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4798      	blx	r3
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <a_mpu9250_read+0x58>
        {
            return 1;                                                                 /* return error */
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <a_mpu9250_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8000610:	2300      	movs	r3, #0
        }
    }
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bd90      	pop	{r4, r7, pc}

0800061a <a_mpu9250_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu9250_write(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 800061a:	b590      	push	{r4, r7, lr}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	461a      	mov	r2, r3
 8000626:	460b      	mov	r3, r1
 8000628:	72fb      	strb	r3, [r7, #11]
 800062a:	4613      	mov	r3, r2
 800062c:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                      /* if iic interface */
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10e      	bne.n	8000656 <a_mpu9250_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	691c      	ldr	r4, [r3, #16]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	7818      	ldrb	r0, [r3, #0]
 8000640:	893b      	ldrh	r3, [r7, #8]
 8000642:	7af9      	ldrb	r1, [r7, #11]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	47a0      	blx	r4
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <a_mpu9250_write+0x38>
        {
            return 1;                                                                  /* return error */
 800064e:	2301      	movs	r3, #1
 8000650:	e010      	b.n	8000674 <a_mpu9250_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8000652:	2300      	movs	r3, #0
 8000654:	e00e      	b.n	8000674 <a_mpu9250_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6a1b      	ldr	r3, [r3, #32]
 800065a:	7afa      	ldrb	r2, [r7, #11]
 800065c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000660:	b2d0      	uxtb	r0, r2
 8000662:	893a      	ldrh	r2, [r7, #8]
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	4798      	blx	r3
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <a_mpu9250_write+0x58>
        {
            return 1;                                                                  /* return error */
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <a_mpu9250_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8000672:	2300      	movs	r3, #0
        }
    }
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}

0800067c <a_mpu9250_mag_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu9250_mag_write(mpu9250_handle_t *handle, uint8_t reg, uint8_t *data)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	460b      	mov	r3, r1
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	72fb      	strb	r3, [r7, #11]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                            /* if iic interface */
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000690:	2b00      	cmp	r3, #0
 8000692:	d10d      	bne.n	80006b0 <a_mpu9250_mag_write+0x34>
    {
        if (handle->iic_write(AK8963_IIC_ADDRESS << 1, reg, (uint8_t *)data, 1) != 0)        /* write data */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	691c      	ldr	r4, [r3, #16]
 8000698:	7af9      	ldrb	r1, [r7, #11]
 800069a:	2301      	movs	r3, #1
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	2018      	movs	r0, #24
 80006a0:	47a0      	blx	r4
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <a_mpu9250_mag_write+0x30>
        {
            return 1;                                                                        /* return error */
 80006a8:	2301      	movs	r3, #1
 80006aa:	e002      	b.n	80006b2 <a_mpu9250_mag_write+0x36>
        }
        else
        {
            return 0;                                                                        /* success return 0 */
 80006ac:	2300      	movs	r3, #0
 80006ae:	e000      	b.n	80006b2 <a_mpu9250_mag_write+0x36>
        }
    }
    else                                                                                     /* spi interface */
    {
        return 1;
 80006b0:	2301      	movs	r3, #1
    }
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}

080006ba <a_mpu9250_mag_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu9250_mag_read(mpu9250_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80006ba:	b590      	push	{r4, r7, lr}
 80006bc:	b085      	sub	sp, #20
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	461a      	mov	r2, r3
 80006c6:	460b      	mov	r3, r1
 80006c8:	72fb      	strb	r3, [r7, #11]
 80006ca:	4613      	mov	r3, r2
 80006cc:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                            /* if iic interface */
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10d      	bne.n	80006f4 <a_mpu9250_mag_read+0x3a>
    {
        if (handle->iic_read(AK8963_IIC_ADDRESS << 1, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	68dc      	ldr	r4, [r3, #12]
 80006dc:	893b      	ldrh	r3, [r7, #8]
 80006de:	7af9      	ldrb	r1, [r7, #11]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	2018      	movs	r0, #24
 80006e4:	47a0      	blx	r4
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <a_mpu9250_mag_read+0x36>
        {
            return 1;                                                                        /* return error */
 80006ec:	2301      	movs	r3, #1
 80006ee:	e002      	b.n	80006f6 <a_mpu9250_mag_read+0x3c>
        }
        else
        {
            return 0;                                                                        /* success return 0 */
 80006f0:	2300      	movs	r3, #0
 80006f2:	e000      	b.n	80006f6 <a_mpu9250_mag_read+0x3c>
        }
    }
    else                                                                                     /* spi interface */
    {
        return 1;
 80006f4:	2301      	movs	r3, #1
    }
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd90      	pop	{r4, r7, pc}

080006fe <a_mpu9250_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu9250_deinit(mpu9250_handle_t *handle)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)        /* if iic interface */
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800070c:	2b00      	cmp	r3, #0
 800070e:	d109      	bne.n	8000724 <a_mpu9250_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	4798      	blx	r3
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <a_mpu9250_deinit+0x22>
        {
            return 1;                                    /* return error */
 800071c:	2301      	movs	r3, #1
 800071e:	e00a      	b.n	8000736 <a_mpu9250_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8000720:	2300      	movs	r3, #0
 8000722:	e008      	b.n	8000736 <a_mpu9250_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4798      	blx	r3
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <a_mpu9250_deinit+0x36>
        {
            return 1;                                    /* return error */
 8000730:	2301      	movs	r3, #1
 8000732:	e000      	b.n	8000736 <a_mpu9250_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8000734:	2300      	movs	r3, #0
        }
    }
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <mpu9250_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu9250_set_interface(mpu9250_handle_t *handle, mpu9250_interface_t interface)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	460b      	mov	r3, r1
 8000748:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <mpu9250_set_interface+0x16>
    {
        return 2;                                /* return error */
 8000750:	2302      	movs	r3, #2
 8000752:	e004      	b.n	800075e <mpu9250_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	78fa      	ldrb	r2, [r7, #3]
 8000758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return 0;                                    /* success return 0 */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <mpu9250_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu9250_set_addr_pin(mpu9250_handle_t *handle, mpu9250_address_t addr_pin)
{
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d101      	bne.n	8000780 <mpu9250_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 800077c:	2302      	movs	r3, #2
 800077e:	e003      	b.n	8000788 <mpu9250_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	78fa      	ldrb	r2, [r7, #3]
 8000784:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <mpu9250_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu9250_init(mpu9250_handle_t *handle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <mpu9250_init+0x12>
    {
        return 2;                                                                   /* return error */
 80007a2:	2302      	movs	r3, #2
 80007a4:	e0fb      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <mpu9250_init+0x1e>
    {
        return 3;                                                                   /* return error */
 80007ae:	2303      	movs	r3, #3
 80007b0:	e0f5      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d105      	bne.n	80007c6 <mpu9250_init+0x32>
    {
        handle->debug_print("mpu9250: iic_init is null.\n");                        /* iic_init is null */
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007be:	487a      	ldr	r0, [pc, #488]	; (80009a8 <mpu9250_init+0x214>)
 80007c0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80007c2:	2303      	movs	r3, #3
 80007c4:	e0eb      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d105      	bne.n	80007da <mpu9250_init+0x46>
    {
        handle->debug_print("mpu9250: iic_deinit is null.\n");                      /* iic_deinit is null */
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d2:	4876      	ldr	r0, [pc, #472]	; (80009ac <mpu9250_init+0x218>)
 80007d4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80007d6:	2303      	movs	r3, #3
 80007d8:	e0e1      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <mpu9250_init+0x5a>
    {
        handle->debug_print("mpu9250: iic_read is null.\n");                        /* iic_read is null */
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e6:	4872      	ldr	r0, [pc, #456]	; (80009b0 <mpu9250_init+0x21c>)
 80007e8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80007ea:	2303      	movs	r3, #3
 80007ec:	e0d7      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d105      	bne.n	8000802 <mpu9250_init+0x6e>
    {
        handle->debug_print("mpu9250: iic_write is null.\n");                       /* iic_write is null */
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fa:	486e      	ldr	r0, [pc, #440]	; (80009b4 <mpu9250_init+0x220>)
 80007fc:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80007fe:	2303      	movs	r3, #3
 8000800:	e0cd      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d105      	bne.n	8000816 <mpu9250_init+0x82>
    {
        handle->debug_print("mpu9250: spi_init is null.\n");                        /* spi_init is null */
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080e:	486a      	ldr	r0, [pc, #424]	; (80009b8 <mpu9250_init+0x224>)
 8000810:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000812:	2303      	movs	r3, #3
 8000814:	e0c3      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d105      	bne.n	800082a <mpu9250_init+0x96>
    {
        handle->debug_print("mpu9250: spi_deinit is null.\n");                      /* spi_deinit is null */
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000822:	4866      	ldr	r0, [pc, #408]	; (80009bc <mpu9250_init+0x228>)
 8000824:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000826:	2303      	movs	r3, #3
 8000828:	e0b9      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d105      	bne.n	800083e <mpu9250_init+0xaa>
    {
        handle->debug_print("mpu9250: spi_read is null.\n");                        /* spi_read is null */
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000836:	4862      	ldr	r0, [pc, #392]	; (80009c0 <mpu9250_init+0x22c>)
 8000838:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800083a:	2303      	movs	r3, #3
 800083c:	e0af      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d105      	bne.n	8000852 <mpu9250_init+0xbe>
    {
        handle->debug_print("mpu9250: spi_write is null.\n");                       /* spi_write is null */
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084a:	485e      	ldr	r0, [pc, #376]	; (80009c4 <mpu9250_init+0x230>)
 800084c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800084e:	2303      	movs	r3, #3
 8000850:	e0a5      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	2b00      	cmp	r3, #0
 8000858:	d105      	bne.n	8000866 <mpu9250_init+0xd2>
    {
        handle->debug_print("mpu9250: delay_ms is null.\n");                        /* delay_ms is null */
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085e:	485a      	ldr	r0, [pc, #360]	; (80009c8 <mpu9250_init+0x234>)
 8000860:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000862:	2303      	movs	r3, #3
 8000864:	e09b      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	2b00      	cmp	r3, #0
 800086c:	d105      	bne.n	800087a <mpu9250_init+0xe6>
    {
        handle->debug_print("mpu9250: receive_callback is null.\n");                /* receive_callback is null */
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000872:	4856      	ldr	r0, [pc, #344]	; (80009cc <mpu9250_init+0x238>)
 8000874:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8000876:	2303      	movs	r3, #3
 8000878:	e091      	b.n	800099e <mpu9250_init+0x20a>
    }
    
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                   /* if iic interface */
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10d      	bne.n	80008a0 <mpu9250_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	4798      	blx	r3
 800088a:	4603      	mov	r3, r0
 800088c:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 800088e:	7afb      	ldrb	r3, [r7, #11]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d013      	beq.n	80008bc <mpu9250_init+0x128>
        {
            handle->debug_print("mpu9250: iic init failed.\n");                     /* iic init failed */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	484d      	ldr	r0, [pc, #308]	; (80009d0 <mpu9250_init+0x23c>)
 800089a:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 800089c:	2301      	movs	r3, #1
 800089e:	e07e      	b.n	800099e <mpu9250_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	4798      	blx	r3
 80008a6:	4603      	mov	r3, r0
 80008a8:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80008aa:	7afb      	ldrb	r3, [r7, #11]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d005      	beq.n	80008bc <mpu9250_init+0x128>
        {
            handle->debug_print("mpu9250: spi init failed.\n");                     /* spi init failed */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	4847      	ldr	r0, [pc, #284]	; (80009d4 <mpu9250_init+0x240>)
 80008b6:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 80008b8:	2301      	movs	r3, #1
 80008ba:	e070      	b.n	800099e <mpu9250_init+0x20a>
        }
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 80008bc:	f107 020a 	add.w	r2, r7, #10
 80008c0:	2301      	movs	r3, #1
 80008c2:	2175      	movs	r1, #117	; 0x75
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fe77 	bl	80005b8 <a_mpu9250_read>
 80008ca:	4603      	mov	r3, r0
 80008cc:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d008      	beq.n	80008e6 <mpu9250_init+0x152>
    {
        handle->debug_print("mpu9250: read who am i failed.\n");                    /* read who am I failed */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d8:	483f      	ldr	r0, [pc, #252]	; (80009d8 <mpu9250_init+0x244>)
 80008da:	4798      	blx	r3
        (void)a_mpu9250_deinit(handle);                                             /* iic or spi deinit */
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff0e 	bl	80006fe <a_mpu9250_deinit>
        
        return 5;                                                                   /* return error */
 80008e2:	2305      	movs	r3, #5
 80008e4:	e05b      	b.n	800099e <mpu9250_init+0x20a>
    }
    if (prev != 0x71)                                                               /* check the id */
 80008e6:	7abb      	ldrb	r3, [r7, #10]
 80008e8:	2b71      	cmp	r3, #113	; 0x71
 80008ea:	d008      	beq.n	80008fe <mpu9250_init+0x16a>
    {
        handle->debug_print("mpu9250: id is invalid.\n");                           /* id is invalid */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	483a      	ldr	r0, [pc, #232]	; (80009dc <mpu9250_init+0x248>)
 80008f2:	4798      	blx	r3
        (void)a_mpu9250_deinit(handle);                                             /* iic or spi deinit */
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff02 	bl	80006fe <a_mpu9250_deinit>
        
        return 5;                                                                   /* return error */
 80008fa:	2305      	movs	r3, #5
 80008fc:	e04f      	b.n	800099e <mpu9250_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 80008fe:	2380      	movs	r3, #128	; 0x80
 8000900:	72bb      	strb	r3, [r7, #10]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 8000902:	f107 020a 	add.w	r2, r7, #10
 8000906:	2301      	movs	r3, #1
 8000908:	216b      	movs	r1, #107	; 0x6b
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe85 	bl	800061a <a_mpu9250_write>
 8000910:	4603      	mov	r3, r0
 8000912:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8000914:	7afb      	ldrb	r3, [r7, #11]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <mpu9250_init+0x198>
    {
        handle->debug_print("mpu9250: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091e:	4830      	ldr	r0, [pc, #192]	; (80009e0 <mpu9250_init+0x24c>)
 8000920:	4798      	blx	r3
        (void)a_mpu9250_deinit(handle);                                             /* iic or spi deinit */
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff feeb 	bl	80006fe <a_mpu9250_deinit>
        
        return 4;                                                                   /* return error */
 8000928:	2304      	movs	r3, #4
 800092a:	e038      	b.n	800099e <mpu9250_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000930:	200a      	movs	r0, #10
 8000932:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8000938:	e029      	b.n	800098e <mpu9250_init+0x1fa>
    {
        res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 800093a:	f107 020a 	add.w	r2, r7, #10
 800093e:	2301      	movs	r3, #1
 8000940:	216b      	movs	r1, #107	; 0x6b
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe38 	bl	80005b8 <a_mpu9250_read>
 8000948:	4603      	mov	r3, r0
 800094a:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 800094c:	7afb      	ldrb	r3, [r7, #11]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d008      	beq.n	8000964 <mpu9250_init+0x1d0>
        {
            handle->debug_print("mpu9250: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000956:	4823      	ldr	r0, [pc, #140]	; (80009e4 <mpu9250_init+0x250>)
 8000958:	4798      	blx	r3
            (void)a_mpu9250_deinit(handle);                                         /* iic or spi deinit */
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fecf 	bl	80006fe <a_mpu9250_deinit>
            
            return 4;                                                               /* return error */
 8000960:	2304      	movs	r3, #4
 8000962:	e01c      	b.n	800099e <mpu9250_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 8000964:	7abb      	ldrb	r3, [r7, #10]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	db09      	blt.n	8000980 <mpu9250_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2201      	movs	r2, #1
 8000970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            
            return 0;                                                               /* success return 0 */
 800097c:	2300      	movs	r3, #0
 800097e:	e00e      	b.n	800099e <mpu9250_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000984:	200a      	movs	r0, #10
 8000986:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3b01      	subs	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1d2      	bne.n	800093a <mpu9250_init+0x1a6>
    }
    
    handle->debug_print("mpu9250: reset failed.\n");                                /* reset failed */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000998:	4813      	ldr	r0, [pc, #76]	; (80009e8 <mpu9250_init+0x254>)
 800099a:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 800099c:	2304      	movs	r3, #4
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	0800aa20 	.word	0x0800aa20
 80009ac:	0800aa3c 	.word	0x0800aa3c
 80009b0:	0800aa5c 	.word	0x0800aa5c
 80009b4:	0800aa78 	.word	0x0800aa78
 80009b8:	0800aa98 	.word	0x0800aa98
 80009bc:	0800aab4 	.word	0x0800aab4
 80009c0:	0800aad4 	.word	0x0800aad4
 80009c4:	0800aaf0 	.word	0x0800aaf0
 80009c8:	0800ab10 	.word	0x0800ab10
 80009cc:	0800ab2c 	.word	0x0800ab2c
 80009d0:	0800ab50 	.word	0x0800ab50
 80009d4:	0800ab6c 	.word	0x0800ab6c
 80009d8:	0800ab88 	.word	0x0800ab88
 80009dc:	0800aba8 	.word	0x0800aba8
 80009e0:	0800abc4 	.word	0x0800abc4
 80009e4:	0800abe8 	.word	0x0800abe8
 80009e8:	0800ac0c 	.word	0x0800ac0c

080009ec <mpu9250_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu9250_deinit(mpu9250_handle_t *handle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <mpu9250_deinit+0x12>
    {
        return 2;                                                               /* return error */
 80009fa:	2302      	movs	r3, #2
 80009fc:	e031      	b.n	8000a62 <mpu9250_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d001      	beq.n	8000a0c <mpu9250_deinit+0x20>
    {
        return 3;                                                               /* return error */
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e02a      	b.n	8000a62 <mpu9250_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 8000a0c:	234f      	movs	r3, #79	; 0x4f
 8000a0e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8000a10:	f107 020e 	add.w	r2, r7, #14
 8000a14:	2301      	movs	r3, #1
 8000a16:	216b      	movs	r1, #107	; 0x6b
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fdfe 	bl	800061a <a_mpu9250_write>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d005      	beq.n	8000a34 <mpu9250_deinit+0x48>
    {
        handle->debug_print("mpu9250: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2c:	480f      	ldr	r0, [pc, #60]	; (8000a6c <mpu9250_deinit+0x80>)
 8000a2e:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 8000a30:	2304      	movs	r3, #4
 8000a32:	e016      	b.n	8000a62 <mpu9250_deinit+0x76>
    }
    res = a_mpu9250_deinit(handle);                                             /* deinit */
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fe62 	bl	80006fe <a_mpu9250_deinit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d005      	beq.n	8000a50 <mpu9250_deinit+0x64>
    {
        handle->debug_print("mpu9250: deinit failed.\n");                       /* deinit failed */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <mpu9250_deinit+0x84>)
 8000a4a:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e008      	b.n	8000a62 <mpu9250_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    return 0;                                                                   /* success return 0 */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	0800abc4 	.word	0x0800abc4
 8000a70:	0800ac24 	.word	0x0800ac24

08000a74 <mpu9250_read>:
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     int16_t (*mag_raw)[3], float (*mag_ut)[3],
                     uint16_t *len
                    )
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <mpu9250_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f001 bd65 	b.w	8002558 <mpu9250_read+0x1ae4>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d002      	beq.n	8000a9e <mpu9250_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f001 bd5d 	b.w	8002558 <mpu9250_read+0x1ae4>
    }
    if ((*len) == 0)                                                                               /* check length */
 8000a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d106      	bne.n	8000ab4 <mpu9250_read+0x40>
    {
        handle->debug_print("mpu9250: length is zero.\n");                                         /* length is zero */
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aaa:	4873      	ldr	r0, [pc, #460]	; (8000c78 <mpu9250_read+0x204>)
 8000aac:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 8000aae:	2304      	movs	r3, #4
 8000ab0:	f001 bd52 	b.w	8002558 <mpu9250_read+0x1ae4>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <mpu9250_read+0x58>
    {
        handle->debug_print("mpu9250: dmp is running.\n");                                         /* dmp is running */
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac2:	486e      	ldr	r0, [pc, #440]	; (8000c7c <mpu9250_read+0x208>)
 8000ac4:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	f001 bd46 	b.w	8002558 <mpu9250_read+0x1ae4>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 8000acc:	f107 0217 	add.w	r2, r7, #23
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	216a      	movs	r1, #106	; 0x6a
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f7ff fd6f 	bl	80005b8 <a_mpu9250_read>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 8000ae0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <mpu9250_read+0x82>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	4864      	ldr	r0, [pc, #400]	; (8000c80 <mpu9250_read+0x20c>)
 8000aee:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8000af0:	2301      	movs	r3, #1
 8000af2:	f001 bd31 	b.w	8002558 <mpu9250_read+0x1ae4>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 8000af6:	f107 0216 	add.w	r2, r7, #22
 8000afa:	2301      	movs	r3, #1
 8000afc:	211c      	movs	r1, #28
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fd5a 	bl	80005b8 <a_mpu9250_read>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 8000b0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <mpu9250_read+0xac>
    {
        handle->debug_print("mpu9250: read accel config failed.\n");                               /* read accel config failed */
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b16:	485b      	ldr	r0, [pc, #364]	; (8000c84 <mpu9250_read+0x210>)
 8000b18:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f001 bd1c 	b.w	8002558 <mpu9250_read+0x1ae4>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 8000b20:	f107 0215 	add.w	r2, r7, #21
 8000b24:	2301      	movs	r3, #1
 8000b26:	211b      	movs	r1, #27
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd45 	bl	80005b8 <a_mpu9250_read>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if (res != 0)                                                                                  /* check result */
 8000b34:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <mpu9250_read+0xd6>
    {
        handle->debug_print("mpu9250: read gyro config failed.\n");                                /* read gyro config failed */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	4851      	ldr	r0, [pc, #324]	; (8000c88 <mpu9250_read+0x214>)
 8000b42:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8000b44:	2301      	movs	r3, #1
 8000b46:	f001 bd07 	b.w	8002558 <mpu9250_read+0x1ae4>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 8000b4a:	7dbb      	ldrb	r3, [r7, #22]
 8000b4c:	08db      	lsrs	r3, r3, #3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	75bb      	strb	r3, [r7, #22]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 8000b58:	7d7b      	ldrb	r3, [r7, #21]
 8000b5a:	08db      	lsrs	r3, r3, #3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	757b      	strb	r3, [r7, #21]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f001 81fb 	beq.w	8001f68 <mpu9250_read+0x14f4>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu9250_read(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 8000b72:	f107 0214 	add.w	r2, r7, #20
 8000b76:	2301      	movs	r3, #1
 8000b78:	2123      	movs	r1, #35	; 0x23
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff fd1c 	bl	80005b8 <a_mpu9250_read>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8000b86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <mpu9250_read+0x128>
        {
            handle->debug_print("mpu9250: read fifo enable failed.\n");                            /* read fifo enable failed */
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	483e      	ldr	r0, [pc, #248]	; (8000c8c <mpu9250_read+0x218>)
 8000b94:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8000b96:	2301      	movs	r3, #1
 8000b98:	f001 bcde 	b.w	8002558 <mpu9250_read+0x1ae4>
        }
        if ((conf != 0x78) && (conf != 0x79))                                                      /* check the conf */
 8000b9c:	7d3b      	ldrb	r3, [r7, #20]
 8000b9e:	2b78      	cmp	r3, #120	; 0x78
 8000ba0:	d009      	beq.n	8000bb6 <mpu9250_read+0x142>
 8000ba2:	7d3b      	ldrb	r3, [r7, #20]
 8000ba4:	2b79      	cmp	r3, #121	; 0x79
 8000ba6:	d006      	beq.n	8000bb6 <mpu9250_read+0x142>
        {
            handle->debug_print("mpu9250: fifo conf is error.\n");                                 /* fifo conf is error */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	4838      	ldr	r0, [pc, #224]	; (8000c90 <mpu9250_read+0x21c>)
 8000bae:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	f001 bcd1 	b.w	8002558 <mpu9250_read+0x1ae4>
        }
        
        res = a_mpu9250_read(handle, MPU9250_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 8000bb6:	f107 0210 	add.w	r2, r7, #16
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2172      	movs	r1, #114	; 0x72
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff fcfa 	bl	80005b8 <a_mpu9250_read>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8000bca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d006      	beq.n	8000be0 <mpu9250_read+0x16c>
        {
            handle->debug_print("mpu9250: read fifo count failed.\n");                             /* read fifo count failed */
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	482f      	ldr	r0, [pc, #188]	; (8000c94 <mpu9250_read+0x220>)
 8000bd8:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f001 bcbc 	b.w	8002558 <mpu9250_read+0x1ae4>
        }
        
        if (conf == 0x78)                                                                          /* only acc and gyro */
 8000be0:	7d3b      	ldrb	r3, [r7, #20]
 8000be2:	2b78      	cmp	r3, #120	; 0x78
 8000be4:	f040 8443 	bne.w	800146e <mpu9250_read+0x9fa>
        {
            count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                  /* set count */
 8000be8:	7c3b      	ldrb	r3, [r7, #16]
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	7c7b      	ldrb	r3, [r7, #17]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < 1024) ? count : 1024;                                                 /* just the counter */
 8000bf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfe:	bf28      	it	cs
 8000c00:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8000c04:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < ((*len) * 12)) ? count : ((*len) * 12);                               /* just outer buffer size */
 8000c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	461a      	mov	r2, r3
 8000c16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	bfa8      	it	ge
 8000c1c:	4613      	movge	r3, r2
 8000c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count / 12) * 12;                                                             /* 12 times */
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <mpu9250_read+0x224>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	0052      	lsls	r2, r2, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	84fb      	strh	r3, [r7, #38]	; 0x26
            *len = count / 12;                                                                     /* set the output length */
 8000c36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c38:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <mpu9250_read+0x224>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	08db      	lsrs	r3, r3, #3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c44:	801a      	strh	r2, [r3, #0]
            res = a_mpu9250_read(handle, MPU9250_REG_R_W, handle->buf, count);                     /* read data */
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8000c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c4e:	2174      	movs	r1, #116	; 0x74
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fcb1 	bl	80005b8 <a_mpu9250_read>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 8000c5c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <mpu9250_read+0x1fe>
            {
                handle->debug_print("mpu9250: read failed.\n");                                    /* read failed */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <mpu9250_read+0x228>)
 8000c6a:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f001 bc73 	b.w	8002558 <mpu9250_read+0x1ae4>
            }
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8000c72:	2300      	movs	r3, #0
 8000c74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000c76:	e3f1      	b.n	800145c <mpu9250_read+0x9e8>
 8000c78:	0800ac40 	.word	0x0800ac40
 8000c7c:	0800a710 	.word	0x0800a710
 8000c80:	0800a9d8 	.word	0x0800a9d8
 8000c84:	0800a990 	.word	0x0800a990
 8000c88:	0800a9b4 	.word	0x0800a9b4
 8000c8c:	0800ac5c 	.word	0x0800ac5c
 8000c90:	0800ac80 	.word	0x0800ac80
 8000c94:	0800a914 	.word	0x0800a914
 8000c98:	aaaaaaab 	.word	0xaaaaaaab
 8000c9c:	0800a938 	.word	0x0800a938
 8000ca0:	46800000 	.word	0x46800000
 8000ca4:	46000000 	.word	0x46000000
            {
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8000ca8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 1];                              /* set raw accel x */
 8000cc0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	3301      	adds	r3, #1
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cd4:	b219      	sxth	r1, r3
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8000cd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	ea40 0201 	orr.w	r2, r0, r1
 8000cea:	b212      	sxth	r2, r2
 8000cec:	801a      	strh	r2, [r3, #0]
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8000cee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 3];                              /* set raw accel y */
 8000d06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	3303      	adds	r3, #3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4413      	add	r3, r2
 8000d16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d1a:	b219      	sxth	r1, r3
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8000d1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	461a      	mov	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	ea40 0201 	orr.w	r2, r0, r1
 8000d30:	b212      	sxth	r2, r2
 8000d32:	805a      	strh	r2, [r3, #2]
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8000d34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	3304      	adds	r3, #4
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b218      	sxth	r0, r3
                                             handle->buf[i * 12 + 5];                              /* set raw accel z */
 8000d4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	3305      	adds	r3, #5
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d60:	b219      	sxth	r1, r3
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8000d62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4413      	add	r3, r2
 8000d72:	ea40 0201 	orr.w	r2, r0, r1
 8000d76:	b212      	sxth	r2, r2
 8000d78:	809a      	strh	r2, [r3, #4]
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8000d7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	3306      	adds	r3, #6
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4413      	add	r3, r2
 8000d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 7];                               /* set raw gyro x */
 8000d92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3307      	adds	r3, #7
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4413      	add	r3, r2
 8000da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000da6:	b219      	sxth	r1, r3
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8000da8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	461a      	mov	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	ea40 0201 	orr.w	r2, r0, r1
 8000dbc:	b212      	sxth	r2, r2
 8000dbe:	801a      	strh	r2, [r3, #0]
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8000dc0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	3308      	adds	r3, #8
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 9];                               /* set raw gyro y */
 8000dd8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	3309      	adds	r3, #9
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dec:	b219      	sxth	r1, r3
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8000dee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	461a      	mov	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	ea40 0201 	orr.w	r2, r0, r1
 8000e02:	b212      	sxth	r2, r2
 8000e04:	805a      	strh	r2, [r3, #2]
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8000e06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	330a      	adds	r3, #10
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4413      	add	r3, r2
 8000e16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b218      	sxth	r0, r3
                                            handle->buf[i * 12 + 11];                              /* set raw gyro z */
 8000e1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	330b      	adds	r3, #11
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e32:	b219      	sxth	r1, r3
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8000e34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	461a      	mov	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	ea40 0201 	orr.w	r2, r0, r1
 8000e48:	b212      	sxth	r2, r2
 8000e4a:	809a      	strh	r2, [r3, #4]
                mag_raw[i][0] = 0;                                                                 /* set 0 */
 8000e4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	461a      	mov	r2, r3
 8000e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	801a      	strh	r2, [r3, #0]
                mag_raw[i][1] = 0;                                                                 /* set 0 */
 8000e60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e6e:	4413      	add	r3, r2
 8000e70:	2200      	movs	r2, #0
 8000e72:	805a      	strh	r2, [r3, #2]
                mag_raw[i][2] = 0;                                                                 /* set 0 */
 8000e74:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	461a      	mov	r2, r3
 8000e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e82:	4413      	add	r3, r2
 8000e84:	2200      	movs	r2, #0
 8000e86:	809a      	strh	r2, [r3, #4]
                
                if (accel_conf == 0)                                                               /* ±2g */
 8000e88:	7dbb      	ldrb	r3, [r7, #22]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d154      	bne.n	8000f38 <mpu9250_read+0x4c4>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                           /* set accel x */
 8000e8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	461a      	mov	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	ed5f 6a87 	vldr	s13, [pc, #-540]	; 8000ca0 <mpu9250_read+0x22c>
 8000ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ec2:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                           /* set accel y */
 8000ec6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	ed5f 6a95 	vldr	s13, [pc, #-596]	; 8000ca0 <mpu9250_read+0x22c>
 8000ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efa:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                           /* set accel z */
 8000efe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	461a      	mov	r2, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	ed5f 6aa3 	vldr	s13, [pc, #-652]	; 8000ca0 <mpu9250_read+0x22c>
 8000f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f32:	edc3 7a02 	vstr	s15, [r3, #8]
 8000f36:	e103      	b.n	8001140 <mpu9250_read+0x6cc>
                }
                else if (accel_conf == 1)                                                          /* ±4g */
 8000f38:	7dbb      	ldrb	r3, [r7, #22]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d154      	bne.n	8000fe8 <mpu9250_read+0x574>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                            /* set accel x */
 8000f3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	461a      	mov	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	ed5f 6ab2 	vldr	s13, [pc, #-712]	; 8000ca4 <mpu9250_read+0x230>
 8000f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f72:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                            /* set accel y */
 8000f76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	ed5f 6ac0 	vldr	s13, [pc, #-768]	; 8000ca4 <mpu9250_read+0x230>
 8000fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000faa:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                            /* set accel z */
 8000fae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	eddf 6ab1 	vldr	s13, [pc, #708]	; 80012a0 <mpu9250_read+0x82c>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000fe6:	e0ab      	b.n	8001140 <mpu9250_read+0x6cc>
                }
                else if (accel_conf == 2)                                                          /* ±8g */
 8000fe8:	7dbb      	ldrb	r3, [r7, #22]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d154      	bne.n	8001098 <mpu9250_read+0x624>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                            /* set accel x */
 8000fee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80012a4 <mpu9250_read+0x830>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                            /* set accel y */
 8001026:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	461a      	mov	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001042:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	eddf 6a94 	vldr	s13, [pc, #592]	; 80012a4 <mpu9250_read+0x830>
 8001056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105a:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                            /* set accel z */
 800105e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	461a      	mov	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	eddf 6a86 	vldr	s13, [pc, #536]	; 80012a4 <mpu9250_read+0x830>
 800108e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001092:	edc3 7a02 	vstr	s15, [r3, #8]
 8001096:	e053      	b.n	8001140 <mpu9250_read+0x6cc>
                }
                else                                                                               /* ±16g */
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                            /* set accel x */
 8001098:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4413      	add	r3, r2
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	461a      	mov	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	eddf 6a78 	vldr	s13, [pc, #480]	; 80012a8 <mpu9250_read+0x834>
 80010c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010cc:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                            /* set accel y */
 80010d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	461a      	mov	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4413      	add	r3, r2
 80010e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80012a8 <mpu9250_read+0x834>
 8001100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001104:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                            /* set accel z */
 8001108:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	461a      	mov	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4413      	add	r3, r2
 8001118:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001124:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80012a8 <mpu9250_read+0x834>
 8001138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113c:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                
                if (gyro_conf == 0)                                                                /* ±250dps */
 8001140:	7d7b      	ldrb	r3, [r7, #21]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d154      	bne.n	80011f0 <mpu9250_read+0x77c>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                             /* set gyro x */
 8001146:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	461a      	mov	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	461a      	mov	r2, r3
 800116e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001170:	4413      	add	r3, r2
 8001172:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80012ac <mpu9250_read+0x838>
 8001176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800117a:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                             /* set gyro y */
 800117e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	461a      	mov	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	461a      	mov	r2, r3
 80011a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a8:	4413      	add	r3, r2
 80011aa:	eddf 6a40 	vldr	s13, [pc, #256]	; 80012ac <mpu9250_read+0x838>
 80011ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b2:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                             /* set gyro z */
 80011b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	461a      	mov	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	461a      	mov	r2, r3
 80011de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e0:	4413      	add	r3, r2
 80011e2:	eddf 6a32 	vldr	s13, [pc, #200]	; 80012ac <mpu9250_read+0x838>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	edc3 7a02 	vstr	s15, [r3, #8]
 80011ee:	e111      	b.n	8001414 <mpu9250_read+0x9a0>
                }
                else if (gyro_conf == 1)                                                           /* ±500dps */
 80011f0:	7d7b      	ldrb	r3, [r7, #21]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d162      	bne.n	80012bc <mpu9250_read+0x848>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                              /* set gyro x */
 80011f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	461a      	mov	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	4413      	add	r3, r2
 8001206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	461a      	mov	r2, r3
 800121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001220:	4413      	add	r3, r2
 8001222:	eddf 6a23 	vldr	s13, [pc, #140]	; 80012b0 <mpu9250_read+0x83c>
 8001226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122a:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                              /* set gyro y */
 800122e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	461a      	mov	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	4413      	add	r3, r2
 800123e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	461a      	mov	r2, r3
 8001256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001258:	4413      	add	r3, r2
 800125a:	eddf 6a15 	vldr	s13, [pc, #84]	; 80012b0 <mpu9250_read+0x83c>
 800125e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001262:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                              /* set gyro z */
 8001266:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	461a      	mov	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001282:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	461a      	mov	r2, r3
 800128e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001290:	4413      	add	r3, r2
 8001292:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012b0 <mpu9250_read+0x83c>
 8001296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129a:	edc3 7a02 	vstr	s15, [r3, #8]
 800129e:	e0b9      	b.n	8001414 <mpu9250_read+0x9a0>
 80012a0:	46000000 	.word	0x46000000
 80012a4:	45800000 	.word	0x45800000
 80012a8:	45000000 	.word	0x45000000
 80012ac:	43030000 	.word	0x43030000
 80012b0:	42830000 	.word	0x42830000
 80012b4:	42033333 	.word	0x42033333
 80012b8:	41833333 	.word	0x41833333
                }
                else if (gyro_conf == 2)                                                           /* ±1000dps */
 80012bc:	7d7b      	ldrb	r3, [r7, #21]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d154      	bne.n	800136c <mpu9250_read+0x8f8>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                              /* set gyro x */
 80012c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	461a      	mov	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	461a      	mov	r2, r3
 80012ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ec:	4413      	add	r3, r2
 80012ee:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 80012b4 <mpu9250_read+0x840>
 80012f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f6:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                              /* set gyro y */
 80012fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	461a      	mov	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001316:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	461a      	mov	r2, r3
 8001322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001324:	4413      	add	r3, r2
 8001326:	ed5f 6a1d 	vldr	s13, [pc, #-116]	; 80012b4 <mpu9250_read+0x840>
 800132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132e:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                              /* set gyro z */
 8001332:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	461a      	mov	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	461a      	mov	r2, r3
 800135a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800135c:	4413      	add	r3, r2
 800135e:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 80012b4 <mpu9250_read+0x840>
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	edc3 7a02 	vstr	s15, [r3, #8]
 800136a:	e053      	b.n	8001414 <mpu9250_read+0x9a0>
                }
                else                                                                               /* ±2000dps */
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                              /* set gyro x */
 800136c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	461a      	mov	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	4413      	add	r3, r2
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001388:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	461a      	mov	r2, r3
 8001394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001396:	4413      	add	r3, r2
 8001398:	ed5f 6a39 	vldr	s13, [pc, #-228]	; 80012b8 <mpu9250_read+0x844>
 800139c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a0:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                              /* set gyro y */
 80013a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	461a      	mov	r2, r3
 80013cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ce:	4413      	add	r3, r2
 80013d0:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80012b8 <mpu9250_read+0x844>
 80013d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d8:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                              /* set gyro z */
 80013dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	461a      	mov	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	461a      	mov	r2, r3
 8001404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001406:	4413      	add	r3, r2
 8001408:	ed5f 6a55 	vldr	s13, [pc, #-340]	; 80012b8 <mpu9250_read+0x844>
 800140c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001410:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                mag_ut[i][0] = 0.0f;                                                               /* set 0.0f */
 8001414:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	461a      	mov	r2, r3
 8001420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001422:	4413      	add	r3, r2
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
                mag_ut[i][1] = 0.0f;                                                               /* set 0.0f */
 800142a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	461a      	mov	r2, r3
 8001436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001438:	4413      	add	r3, r2
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
                mag_ut[i][2] = 0.0f;                                                               /* set 0.0f */
 8001440:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	461a      	mov	r2, r3
 800144c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800144e:	4413      	add	r3, r2
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8001456:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001458:	3301      	adds	r3, #1
 800145a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800145c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001462:	429a      	cmp	r2, r3
 8001464:	f4ff ac20 	bcc.w	8000ca8 <mpu9250_read+0x234>
            }
            
            return 0;                                                                              /* success return 0 */
 8001468:	2300      	movs	r3, #0
 800146a:	f001 b875 	b.w	8002558 <mpu9250_read+0x1ae4>
        {
            float mag_k_x;
            float mag_k_y;
            float mag_k_z;
            
            count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                  /* set count */
 800146e:	7c3b      	ldrb	r3, [r7, #16]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	7c7b      	ldrb	r3, [r7, #17]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21b      	sxth	r3, r3
 800147c:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < 1024) ? count : 1024;                                                 /* just the counter */
 800147e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001484:	bf28      	it	cs
 8001486:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800148a:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count < ((*len) * 20)) ? count : ((*len) * 20);                               /* just outer buffer size */
 800148c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800149e:	4293      	cmp	r3, r2
 80014a0:	bfa8      	it	ge
 80014a2:	4613      	movge	r3, r2
 80014a4:	84fb      	strh	r3, [r7, #38]	; 0x26
            count = (count / 20) * 20;                                                             /* 20 times */
 80014a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a8:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <mpu9250_read+0xb24>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	0092      	lsls	r2, r2, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	84fb      	strh	r3, [r7, #38]	; 0x26
            *len = count / 20;                                                                     /* set the output length */
 80014bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014be:	4a36      	ldr	r2, [pc, #216]	; (8001598 <mpu9250_read+0xb24>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ca:	801a      	strh	r2, [r3, #0]
            res = a_mpu9250_read(handle, MPU9250_REG_R_W, handle->buf, count);                     /* read data */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80014d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d4:	2174      	movs	r1, #116	; 0x74
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f7ff f86e 	bl	80005b8 <a_mpu9250_read>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 80014e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <mpu9250_read+0xa84>
            {
                handle->debug_print("mpu9250: read failed.\n");                                    /* read failed */
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	482b      	ldr	r0, [pc, #172]	; (800159c <mpu9250_read+0xb28>)
 80014f0:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 80014f2:	2301      	movs	r3, #1
 80014f4:	f001 b830 	b.w	8002558 <mpu9250_read+0x1ae4>
            }
            
            mag_k_x = ((float)handle->mag_asa[0] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the x sensitivity adjustment */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001506:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80015a0 <mpu9250_read+0xb2c>
 800150a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800150e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001512:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001516:	eddf 6a22 	vldr	s13, [pc, #136]	; 80015a0 <mpu9250_read+0xb2c>
 800151a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001526:	edc7 7a08 	vstr	s15, [r7, #32]
            mag_k_y = ((float)handle->mag_asa[1] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the y sensitivity adjustment */
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001538:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80015a0 <mpu9250_read+0xb2c>
 800153c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001540:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001544:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001548:	eddf 6a15 	vldr	s13, [pc, #84]	; 80015a0 <mpu9250_read+0xb2c>
 800154c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001554:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001558:	edc7 7a07 	vstr	s15, [r7, #28]
            mag_k_z = ((float)handle->mag_asa[2] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the z sensitivity adjustment */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80015a0 <mpu9250_read+0xb2c>
 800156e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001572:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001576:	ee27 7a87 	vmul.f32	s14, s15, s14
 800157a:	eddf 6a09 	vldr	s13, [pc, #36]	; 80015a0 <mpu9250_read+0xb2c>
 800157e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001586:	ee77 7a87 	vadd.f32	s15, s15, s14
 800158a:	edc7 7a06 	vstr	s15, [r7, #24]
            
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 800158e:	2300      	movs	r3, #0
 8001590:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001592:	f000 bce1 	b.w	8001f58 <mpu9250_read+0x14e4>
 8001596:	bf00      	nop
 8001598:	cccccccd 	.word	0xcccccccd
 800159c:	0800a938 	.word	0x0800a938
 80015a0:	43000000 	.word	0x43000000
 80015a4:	46800000 	.word	0x46800000
            {
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 0] << 8) | 
 80015a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 1];                              /* set raw accel x */
 80015c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	3301      	adds	r3, #1
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015d4:	b219      	sxth	r1, r3
                accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 0] << 8) | 
 80015d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	461a      	mov	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	4413      	add	r3, r2
 80015e6:	ea40 0201 	orr.w	r2, r0, r1
 80015ea:	b212      	sxth	r2, r2
 80015ec:	801a      	strh	r2, [r3, #0]
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 2] << 8) | 
 80015ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 3];                              /* set raw accel y */
 8001606:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	3303      	adds	r3, #3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800161a:	b219      	sxth	r1, r3
                accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 2] << 8) | 
 800161c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	461a      	mov	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4413      	add	r3, r2
 800162c:	ea40 0201 	orr.w	r2, r0, r1
 8001630:	b212      	sxth	r2, r2
 8001632:	805a      	strh	r2, [r3, #2]
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 4] << 8) | 
 8001634:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	3304      	adds	r3, #4
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b218      	sxth	r0, r3
                                             handle->buf[i * 20 + 5];                              /* set raw accel z */
 800164c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	3305      	adds	r3, #5
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001660:	b219      	sxth	r1, r3
                accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 4] << 8) | 
 8001662:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	461a      	mov	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4413      	add	r3, r2
 8001672:	ea40 0201 	orr.w	r2, r0, r1
 8001676:	b212      	sxth	r2, r2
 8001678:	809a      	strh	r2, [r3, #4]
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 6] << 8) | 
 800167a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3306      	adds	r3, #6
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 7];                               /* set raw gyro x */
 8001692:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	3307      	adds	r3, #7
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016a6:	b219      	sxth	r1, r3
                gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 6] << 8) | 
 80016a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	461a      	mov	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	ea40 0201 	orr.w	r2, r0, r1
 80016bc:	b212      	sxth	r2, r2
 80016be:	801a      	strh	r2, [r3, #0]
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 8] << 8) | 
 80016c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	3308      	adds	r3, #8
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 9];                               /* set raw gyro y */
 80016d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	3309      	adds	r3, #9
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016ec:	b219      	sxth	r1, r3
                gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 8] << 8) | 
 80016ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	461a      	mov	r2, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	ea40 0201 	orr.w	r2, r0, r1
 8001702:	b212      	sxth	r2, r2
 8001704:	805a      	strh	r2, [r3, #2]
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 10] << 8) | 
 8001706:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	330a      	adds	r3, #10
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4413      	add	r3, r2
 8001716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b218      	sxth	r0, r3
                                            handle->buf[i * 20 + 11];                              /* set raw gyro z */
 800171e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	330b      	adds	r3, #11
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001732:	b219      	sxth	r1, r3
                gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 10] << 8) | 
 8001734:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	ea40 0201 	orr.w	r2, r0, r1
 8001748:	b212      	sxth	r2, r2
 800174a:	809a      	strh	r2, [r3, #4]
                mag_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 14] << 8) | 
 800174c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	330e      	adds	r3, #14
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 13];                               /* set raw mag x */
 8001764:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	330d      	adds	r3, #13
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001778:	b219      	sxth	r1, r3
                mag_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 20 + 14] << 8) | 
 800177a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	461a      	mov	r2, r3
 8001786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001788:	4413      	add	r3, r2
 800178a:	ea40 0201 	orr.w	r2, r0, r1
 800178e:	b212      	sxth	r2, r2
 8001790:	801a      	strh	r2, [r3, #0]
                mag_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 16] << 8) | 
 8001792:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	3310      	adds	r3, #16
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 15];                               /* set raw mag y */
 80017aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	330f      	adds	r3, #15
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017be:	b219      	sxth	r1, r3
                mag_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 20 + 16] << 8) | 
 80017c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	461a      	mov	r2, r3
 80017cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ce:	4413      	add	r3, r2
 80017d0:	ea40 0201 	orr.w	r2, r0, r1
 80017d4:	b212      	sxth	r2, r2
 80017d6:	805a      	strh	r2, [r3, #2]
                mag_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 18] << 8) | 
 80017d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	3312      	adds	r3, #18
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b218      	sxth	r0, r3
                                           handle->buf[i * 20 + 17];                               /* set raw mag z */
 80017f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	3311      	adds	r3, #17
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001804:	b219      	sxth	r1, r3
                mag_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 20 + 18] << 8) | 
 8001806:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	461a      	mov	r2, r3
 8001812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001814:	4413      	add	r3, r2
 8001816:	ea40 0201 	orr.w	r2, r0, r1
 800181a:	b212      	sxth	r2, r2
 800181c:	809a      	strh	r2, [r3, #4]
                
                if (accel_conf == 0)                                                               /* ±2g */
 800181e:	7dbb      	ldrb	r3, [r7, #22]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d154      	bne.n	80018ce <mpu9250_read+0xe5a>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                           /* set accel x */
 8001824:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001840:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 80015a4 <mpu9250_read+0xb30>
 8001854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001858:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                           /* set accel y */
 800185c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4413      	add	r3, r2
 800186c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001878:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	ed5f 6aba 	vldr	s13, [pc, #-744]	; 80015a4 <mpu9250_read+0xb30>
 800188c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001890:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                           /* set accel z */
 8001894:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 80015a4 <mpu9250_read+0xb30>
 80018c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c8:	edc3 7a02 	vstr	s15, [r3, #8]
 80018cc:	e103      	b.n	8001ad6 <mpu9250_read+0x1062>
                }
                else if (accel_conf == 1)                                                          /* ±4g */
 80018ce:	7dbb      	ldrb	r3, [r7, #22]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d154      	bne.n	800197e <mpu9250_read+0xf0a>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                            /* set accel x */
 80018d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4413      	add	r3, r2
 80018e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	eddf 6acd 	vldr	s13, [pc, #820]	; 8001c38 <mpu9250_read+0x11c4>
 8001904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001908:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                            /* set accel y */
 800190c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	461a      	mov	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4413      	add	r3, r2
 800191c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001928:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	eddf 6abf 	vldr	s13, [pc, #764]	; 8001c38 <mpu9250_read+0x11c4>
 800193c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001940:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                            /* set accel z */
 8001944:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	461a      	mov	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4413      	add	r3, r2
 8001954:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001960:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001c38 <mpu9250_read+0x11c4>
 8001974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001978:	edc3 7a02 	vstr	s15, [r3, #8]
 800197c:	e0ab      	b.n	8001ad6 <mpu9250_read+0x1062>
                }
                else if (accel_conf == 2)                                                          /* ±8g */
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d154      	bne.n	8001a2e <mpu9250_read+0xfba>
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                            /* set accel x */
 8001984:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	461a      	mov	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4413      	add	r3, r2
 8001994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8001c3c <mpu9250_read+0x11c8>
 80019b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b8:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                            /* set accel y */
 80019bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4413      	add	r3, r2
 80019cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001c3c <mpu9250_read+0x11c8>
 80019ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f0:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                            /* set accel z */
 80019f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	461a      	mov	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4413      	add	r3, r2
 8001a04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	eddf 6a86 	vldr	s13, [pc, #536]	; 8001c3c <mpu9250_read+0x11c8>
 8001a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a28:	edc3 7a02 	vstr	s15, [r3, #8]
 8001a2c:	e053      	b.n	8001ad6 <mpu9250_read+0x1062>
                }
                else                                                                               /* ±16g */
                {
                    accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                            /* set accel x */
 8001a2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001c40 <mpu9250_read+0x11cc>
 8001a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a62:	edc3 7a00 	vstr	s15, [r3]
                    accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                            /* set accel y */
 8001a66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4413      	add	r3, r2
 8001a76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001c40 <mpu9250_read+0x11cc>
 8001a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9a:	edc3 7a01 	vstr	s15, [r3, #4]
                    accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                            /* set accel z */
 8001a9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001c40 <mpu9250_read+0x11cc>
 8001ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad2:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                
                if (gyro_conf == 0)                                                                /* ±250dps */
 8001ad6:	7d7b      	ldrb	r3, [r7, #21]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d154      	bne.n	8001b86 <mpu9250_read+0x1112>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                             /* set gyro x */
 8001adc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	461a      	mov	r2, r3
 8001b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b06:	4413      	add	r3, r2
 8001b08:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001c44 <mpu9250_read+0x11d0>
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                             /* set gyro y */
 8001b14:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	461a      	mov	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b3e:	4413      	add	r3, r2
 8001b40:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001c44 <mpu9250_read+0x11d0>
 8001b44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b48:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                             /* set gyro z */
 8001b4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	461a      	mov	r2, r3
 8001b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b76:	4413      	add	r3, r2
 8001b78:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001c44 <mpu9250_read+0x11d0>
 8001b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b80:	edc3 7a02 	vstr	s15, [r3, #8]
 8001b84:	e116      	b.n	8001db4 <mpu9250_read+0x1340>
                }
                else if (gyro_conf == 1)                                                           /* ±500dps */
 8001b86:	7d7b      	ldrb	r3, [r7, #21]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d167      	bne.n	8001c5c <mpu9250_read+0x11e8>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                              /* set gyro x */
 8001b8c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	461a      	mov	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb6:	4413      	add	r3, r2
 8001bb8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001c48 <mpu9250_read+0x11d4>
 8001bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc0:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                              /* set gyro y */
 8001bc4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	461a      	mov	r2, r3
 8001bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bee:	4413      	add	r3, r2
 8001bf0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001c48 <mpu9250_read+0x11d4>
 8001bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf8:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                              /* set gyro z */
 8001bfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	461a      	mov	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	461a      	mov	r2, r3
 8001c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c26:	4413      	add	r3, r2
 8001c28:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001c48 <mpu9250_read+0x11d4>
 8001c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c30:	edc3 7a02 	vstr	s15, [r3, #8]
 8001c34:	e0be      	b.n	8001db4 <mpu9250_read+0x1340>
 8001c36:	bf00      	nop
 8001c38:	46000000 	.word	0x46000000
 8001c3c:	45800000 	.word	0x45800000
 8001c40:	45000000 	.word	0x45000000
 8001c44:	43030000 	.word	0x43030000
 8001c48:	42830000 	.word	0x42830000
 8001c4c:	42033333 	.word	0x42033333
 8001c50:	41833333 	.word	0x41833333
 8001c54:	3e19999a 	.word	0x3e19999a
 8001c58:	3f19999a 	.word	0x3f19999a
                }
                else if (gyro_conf == 2)                                                           /* ±1000dps */
 8001c5c:	7d7b      	ldrb	r3, [r7, #21]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d154      	bne.n	8001d0c <mpu9250_read+0x1298>
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                              /* set gyro x */
 8001c62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c8c:	4413      	add	r3, r2
 8001c8e:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8001c4c <mpu9250_read+0x11d8>
 8001c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c96:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                              /* set gyro y */
 8001c9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc4:	4413      	add	r3, r2
 8001cc6:	ed5f 6a1f 	vldr	s13, [pc, #-124]	; 8001c4c <mpu9250_read+0x11d8>
 8001cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cce:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                              /* set gyro z */
 8001cd2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	461a      	mov	r2, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cfc:	4413      	add	r3, r2
 8001cfe:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 8001c4c <mpu9250_read+0x11d8>
 8001d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d06:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d0a:	e053      	b.n	8001db4 <mpu9250_read+0x1340>
                }
                else                                                                               /* ±2000dps */
                {
                    gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                              /* set gyro x */
 8001d0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	461a      	mov	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d28:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	461a      	mov	r2, r3
 8001d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d36:	4413      	add	r3, r2
 8001d38:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8001c50 <mpu9250_read+0x11dc>
 8001d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d40:	edc3 7a00 	vstr	s15, [r3]
                    gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                              /* set gyro y */
 8001d44:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	461a      	mov	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6e:	4413      	add	r3, r2
 8001d70:	ed5f 6a49 	vldr	s13, [pc, #-292]	; 8001c50 <mpu9250_read+0x11dc>
 8001d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d78:	edc3 7a01 	vstr	s15, [r3, #4]
                    gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                              /* set gyro z */
 8001d7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	461a      	mov	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	461a      	mov	r2, r3
 8001da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da6:	4413      	add	r3, r2
 8001da8:	ed5f 6a57 	vldr	s13, [pc, #-348]	; 8001c50 <mpu9250_read+0x11dc>
 8001dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db0:	edc3 7a02 	vstr	s15, [r3, #8]
                }
                if ((handle->buf[i * 20 + 19] & (1 << 4)) != 0)                                    /* if 16 bits */
 8001db4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	3313      	adds	r3, #19
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d060      	beq.n	8001e92 <mpu9250_read+0x141e>
                {
                    mag_ut[i][0] = (float)mag_raw[i][0] * mag_k_x * 0.15f;                         /* set the mag x */
 8001dd0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	461a      	mov	r2, r3
 8001ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dde:	4413      	add	r3, r2
 8001de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dec:	edd7 7a08 	vldr	s15, [r7, #32]
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e02:	4413      	add	r3, r2
 8001e04:	ed1f 7a6d 	vldr	s14, [pc, #-436]	; 8001c54 <mpu9250_read+0x11e0>
 8001e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0c:	edc3 7a00 	vstr	s15, [r3]
                    mag_ut[i][1] = (float)mag_raw[i][1] * mag_k_y * 0.15f;                         /* set the mag y */
 8001e10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1e:	4413      	add	r3, r2
 8001e20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e42:	4413      	add	r3, r2
 8001e44:	ed1f 7a7d 	vldr	s14, [pc, #-500]	; 8001c54 <mpu9250_read+0x11e0>
 8001e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4c:	edc3 7a01 	vstr	s15, [r3, #4]
                    mag_ut[i][2] = (float)mag_raw[i][2] * mag_k_z * 0.15f;                         /* set the mag z */
 8001e50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5e:	4413      	add	r3, r2
 8001e60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e74:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e82:	4413      	add	r3, r2
 8001e84:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 8001c54 <mpu9250_read+0x11e0>
 8001e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001e90:	e05f      	b.n	8001f52 <mpu9250_read+0x14de>
                }
                else                                                                               /* if 14 bits */
                {
                    mag_ut[i][0] = (float)mag_raw[i][0] * mag_k_x * 0.6f;                          /* set the mag x */
 8001e92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eae:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec4:	4413      	add	r3, r2
 8001ec6:	ed1f 7a9c 	vldr	s14, [pc, #-624]	; 8001c58 <mpu9250_read+0x11e4>
 8001eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ece:	edc3 7a00 	vstr	s15, [r3]
                    mag_ut[i][1] = (float)mag_raw[i][1] * mag_k_y * 0.6f;                          /* set the mag y */
 8001ed2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	461a      	mov	r2, r3
 8001ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eee:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	461a      	mov	r2, r3
 8001f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f04:	4413      	add	r3, r2
 8001f06:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 8001c58 <mpu9250_read+0x11e4>
 8001f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0e:	edc3 7a01 	vstr	s15, [r3, #4]
                    mag_ut[i][2] = (float)mag_raw[i][2] * mag_k_z * 0.6f;                          /* set the mag z */
 8001f12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f20:	4413      	add	r3, r2
 8001f22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	461a      	mov	r2, r3
 8001f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f44:	4413      	add	r3, r2
 8001f46:	ed1f 7abc 	vldr	s14, [pc, #-752]	; 8001c58 <mpu9250_read+0x11e4>
 8001f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4e:	edc3 7a02 	vstr	s15, [r3, #8]
            for (i = 0; i < (*len); i++)                                                           /* *len times */
 8001f52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f54:	3301      	adds	r3, #1
 8001f56:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	f4ff ab22 	bcc.w	80015a8 <mpu9250_read+0xb34>
                }
            }
            
            return 0;                                                                              /* success return 0 */
 8001f64:	2300      	movs	r3, #0
 8001f66:	e2f7      	b.n	8002558 <mpu9250_read+0x1ae4>
        }
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8001f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	801a      	strh	r2, [r3, #0]
        res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001f74:	230e      	movs	r3, #14
 8001f76:	213b      	movs	r1, #59	; 0x3b
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7fe fb1d 	bl	80005b8 <a_mpu9250_read>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if (res != 0)                                                                              /* check result */
 8001f84:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <mpu9250_read+0x1524>
        {
            handle->debug_print("mpu9250: read failed.\n");                                        /* read failed */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	48b0      	ldr	r0, [pc, #704]	; (8002254 <mpu9250_read+0x17e0>)
 8001f92:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8001f94:	2301      	movs	r3, #1
 8001f96:	e2df      	b.n	8002558 <mpu9250_read+0x1ae4>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	b21a      	sxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8002010:	b21b      	sxth	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b21a      	sxth	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	b21a      	sxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800202a:	b21b      	sxth	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b21a      	sxth	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 8002034:	7dbb      	ldrb	r3, [r7, #22]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d12a      	bne.n	8002090 <mpu9250_read+0x161c>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002048:	eddf 6a83 	vldr	s13, [pc, #524]	; 8002258 <mpu9250_read+0x17e4>
 800204c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002064:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8002258 <mpu9250_read+0x17e4>
 8002068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002080:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002258 <mpu9250_read+0x17e4>
 8002084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	edc3 7a02 	vstr	s15, [r3, #8]
 800208e:	e085      	b.n	800219c <mpu9250_read+0x1728>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 8002090:	7dbb      	ldrb	r3, [r7, #22]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d12a      	bne.n	80020ec <mpu9250_read+0x1678>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a4:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800225c <mpu9250_read+0x17e8>
 80020a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c0:	eddf 6a66 	vldr	s13, [pc, #408]	; 800225c <mpu9250_read+0x17e8>
 80020c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020dc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800225c <mpu9250_read+0x17e8>
 80020e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	edc3 7a02 	vstr	s15, [r3, #8]
 80020ea:	e057      	b.n	800219c <mpu9250_read+0x1728>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 80020ec:	7dbb      	ldrb	r3, [r7, #22]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d12a      	bne.n	8002148 <mpu9250_read+0x16d4>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002100:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002260 <mpu9250_read+0x17ec>
 8002104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8002260 <mpu9250_read+0x17ec>
 8002120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002138:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002260 <mpu9250_read+0x17ec>
 800213c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	edc3 7a02 	vstr	s15, [r3, #8]
 8002146:	e029      	b.n	800219c <mpu9250_read+0x1728>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002156:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002264 <mpu9250_read+0x17f0>
 800215a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002172:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002264 <mpu9250_read+0x17f0>
 8002176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800218e:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002264 <mpu9250_read+0x17f0>
 8002192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 800219c:	7d7b      	ldrb	r3, [r7, #21]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d12a      	bne.n	80021f8 <mpu9250_read+0x1784>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002268 <mpu9250_read+0x17f4>
 80021b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ba:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021cc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002268 <mpu9250_read+0x17f4>
 80021d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d6:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002268 <mpu9250_read+0x17f4>
 80021ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f2:	edc3 7a02 	vstr	s15, [r3, #8]
 80021f6:	e097      	b.n	8002328 <mpu9250_read+0x18b4>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 80021f8:	7d7b      	ldrb	r3, [r7, #21]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d13c      	bne.n	8002278 <mpu9250_read+0x1804>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800226c <mpu9250_read+0x17f8>
 8002210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002216:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002228:	eddf 6a10 	vldr	s13, [pc, #64]	; 800226c <mpu9250_read+0x17f8>
 800222c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002232:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800223c:	ee07 3a90 	vmov	s15, r3
 8002240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002244:	eddf 6a09 	vldr	s13, [pc, #36]	; 800226c <mpu9250_read+0x17f8>
 8002248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002252:	e069      	b.n	8002328 <mpu9250_read+0x18b4>
 8002254:	0800a938 	.word	0x0800a938
 8002258:	46800000 	.word	0x46800000
 800225c:	46000000 	.word	0x46000000
 8002260:	45800000 	.word	0x45800000
 8002264:	45000000 	.word	0x45000000
 8002268:	43030000 	.word	0x43030000
 800226c:	42830000 	.word	0x42830000
 8002270:	42033333 	.word	0x42033333
 8002274:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 8002278:	7d7b      	ldrb	r3, [r7, #21]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d12a      	bne.n	80022d4 <mpu9250_read+0x1860>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800228c:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 8002270 <mpu9250_read+0x17fc>
 8002290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002296:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a8:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8002270 <mpu9250_read+0x17fc>
 80022ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b2:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c4:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8002270 <mpu9250_read+0x17fc>
 80022c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ce:	edc3 7a02 	vstr	s15, [r3, #8]
 80022d2:	e029      	b.n	8002328 <mpu9250_read+0x18b4>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e2:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8002274 <mpu9250_read+0x1800>
 80022e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ec:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022fe:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 8002274 <mpu9250_read+0x1800>
 8002302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002308:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800231a:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8002274 <mpu9250_read+0x1800>
 800231e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002324:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        if (handle->mag_inited == 1)                                                               /* if mag is inited */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800232e:	2b01      	cmp	r3, #1
 8002330:	f040 80fc 	bne.w	800252c <mpu9250_read+0x1ab8>
        {
            float mag_k_x;
            float mag_k_y;
            float mag_k_z;
            
            res = a_mpu9250_mag_read(handle, AK8963_REG_ST1, handle->buf, 8);                      /* read the mag data */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800233a:	2308      	movs	r3, #8
 800233c:	2102      	movs	r1, #2
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7fe f9bb 	bl	80006ba <a_mpu9250_mag_read>
 8002344:	4603      	mov	r3, r0
 8002346:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if (res != 0)                                                                          /* check result */
 800234a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <mpu9250_read+0x18ea>
            {
                handle->debug_print("mpu9250: mag read failed.\n");                                /* mag read failed */
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	4882      	ldr	r0, [pc, #520]	; (8002560 <mpu9250_read+0x1aec>)
 8002358:	4798      	blx	r3
               
                return 1;                                                                          /* return error */
 800235a:	2301      	movs	r3, #1
 800235c:	e0fc      	b.n	8002558 <mpu9250_read+0x1ae4>
            }
            mag_raw[0][0] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[1];             /* set raw mag x */
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800236e:	b21b      	sxth	r3, r3
 8002370:	4313      	orrs	r3, r2
 8002372:	b21a      	sxth	r2, r3
 8002374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002376:	801a      	strh	r2, [r3, #0]
            mag_raw[0][1] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[3];             /* set raw mag y */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	b21a      	sxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002390:	805a      	strh	r2, [r3, #2]
            mag_raw[0][2] = (int16_t)((uint16_t)handle->buf[6] << 8) | handle->buf[5];             /* set raw mag z */
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	b21a      	sxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023aa:	809a      	strh	r2, [r3, #4]

            mag_k_x = ((float)handle->mag_asa[0] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the x sensitivity adjustment */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ba:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002564 <mpu9250_read+0x1af0>
 80023be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ca:	eddf 6a66 	vldr	s13, [pc, #408]	; 8002564 <mpu9250_read+0x1af0>
 80023ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            mag_k_y = ((float)handle->mag_asa[1] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the y sensitivity adjustment */
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ec:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002564 <mpu9250_read+0x1af0>
 80023f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023fc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002564 <mpu9250_read+0x1af0>
 8002400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800240c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            mag_k_z = ((float)handle->mag_asa[2] - 128.0f) * 0.5f / 128.0f + 1.0f;                 /* get the z sensitivity adjustment */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002564 <mpu9250_read+0x1af0>
 8002422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002426:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800242a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800242e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002564 <mpu9250_read+0x1af0>
 8002432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800243a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800243e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            if ((handle->buf[7] & (1 << 4)) != 0)                                                  /* if 16 bits */
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d036      	beq.n	80024be <mpu9250_read+0x1a4a>
            {
                mag_ut[0][0] = (float)mag_raw[0][0] * mag_k_x * 0.15f;                             /* set the mag x */
 8002450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002466:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002568 <mpu9250_read+0x1af4>
 800246a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002470:	edc3 7a00 	vstr	s15, [r3]
                mag_ut[0][1] = (float)mag_raw[0][1] * mag_k_y * 0.15f;                             /* set the mag y */
 8002474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002476:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002482:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002568 <mpu9250_read+0x1af4>
 800248e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002494:	edc3 7a01 	vstr	s15, [r3, #4]
                mag_ut[0][2] = (float)mag_raw[0][2] * mag_k_z * 0.15f;                             /* set the mag z */
 8002498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ae:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002568 <mpu9250_read+0x1af4>
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b8:	edc3 7a02 	vstr	s15, [r3, #8]
 80024bc:	e04b      	b.n	8002556 <mpu9250_read+0x1ae2>
            }
            else                                                                                   /* if 14 bits */
            {
                mag_ut[0][0] = (float)mag_raw[0][0] * mag_k_x * 0.6f;                              /* set the mag x */
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800256c <mpu9250_read+0x1af8>
 80024d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024de:	edc3 7a00 	vstr	s15, [r3]
                mag_ut[0][1] = (float)mag_raw[0][1] * mag_k_y * 0.6f;                              /* set the mag y */
 80024e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800256c <mpu9250_read+0x1af8>
 80024fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	edc3 7a01 	vstr	s15, [r3, #4]
                mag_ut[0][2] = (float)mag_raw[0][2] * mag_k_z * 0.6f;                              /* set the mag z */
 8002506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002508:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002514:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800256c <mpu9250_read+0x1af8>
 8002520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002526:	edc3 7a02 	vstr	s15, [r3, #8]
 800252a:	e014      	b.n	8002556 <mpu9250_read+0x1ae2>
            }
        }
        else
        {
            mag_raw[0][0] = 0;                                                                     /* set raw mag x 0 */
 800252c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]
            mag_raw[0][1] = 0;                                                                     /* set raw mag y 0 */
 8002532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002534:	2200      	movs	r2, #0
 8002536:	805a      	strh	r2, [r3, #2]
            mag_raw[0][2] = 0;                                                                     /* set raw mag z 0 */
 8002538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253a:	2200      	movs	r2, #0
 800253c:	809a      	strh	r2, [r3, #4]
            mag_ut[0][0] = 0.0f;                                                                   /* set mag x 0.0f */
 800253e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
            mag_ut[0][1] = 0.0f;                                                                   /* set mag y 0.0f */
 8002546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
            mag_ut[0][2] = 0.0f;                                                                   /* set mag z 0.0f */
 800254e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 8002556:	2300      	movs	r3, #0
    }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3738      	adds	r7, #56	; 0x38
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	0800aca0 	.word	0x0800aca0
 8002564:	43000000 	.word	0x43000000
 8002568:	3e19999a 	.word	0x3e19999a
 800256c:	3f19999a 	.word	0x3f19999a

08002570 <mpu9250_read_temperature>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu9250_read_temperature(mpu9250_handle_t *handle, int16_t (*raw), float *degrees)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                      /* check handle */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <mpu9250_read_temperature+0x16>
    {
        return 2;                                                            /* return error */
 8002582:	2302      	movs	r3, #2
 8002584:	e034      	b.n	80025f0 <mpu9250_read_temperature+0x80>
    }
    if (handle->inited != 1)                                                 /* check handle initialization */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <mpu9250_read_temperature+0x24>
    {
        return 3;                                                            /* return error */
 8002590:	2303      	movs	r3, #3
 8002592:	e02d      	b.n	80025f0 <mpu9250_read_temperature+0x80>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_TEMP_OUT_H, buf, 2);            /* read data */
 8002594:	f107 0214 	add.w	r2, r7, #20
 8002598:	2302      	movs	r3, #2
 800259a:	2141      	movs	r1, #65	; 0x41
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7fe f80b 	bl	80005b8 <a_mpu9250_read>
 80025a2:	4603      	mov	r3, r0
 80025a4:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                            /* check result */
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <mpu9250_read_temperature+0x48>
    {
        handle->debug_print("mpu9250: read failed.\n");                      /* read failed */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	4811      	ldr	r0, [pc, #68]	; (80025f8 <mpu9250_read_temperature+0x88>)
 80025b2:	4798      	blx	r3
       
        return 1;                                                            /* return error */
 80025b4:	2301      	movs	r3, #1
 80025b6:	e01b      	b.n	80025f0 <mpu9250_read_temperature+0x80>
    }
    *raw = (int16_t)((uint16_t)buf[0] << 8) | buf[1];                        /* get the raw */
 80025b8:	7d3b      	ldrb	r3, [r7, #20]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b21a      	sxth	r2, r3
 80025be:	7d7b      	ldrb	r3, [r7, #21]
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	4313      	orrs	r3, r2
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	801a      	strh	r2, [r3, #0]
    *degrees = (float)(*raw) / 321.0f + 21.0f;                               /* convert the degrees */
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80025fc <mpu9250_read_temperature+0x8c>
 80025dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e0:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80025e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	edc3 7a00 	vstr	s15, [r3]
    
    return 0;                                                                /* success return 0 */
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	0800a938 	.word	0x0800a938
 80025fc:	43a08000 	.word	0x43a08000

08002600 <mpu9250_mag_init>:
 *            - 5 mag id is invalid
 *            - 6 spi don't support
 * @note      none
 */
uint8_t mpu9250_mag_init(mpu9250_handle_t *handle)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    uint32_t timeout;
    
    if (handle == NULL)                                                                     /* check handle */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <mpu9250_mag_init+0x12>
    {
        return 2;                                                                           /* return error */
 800260e:	2302      	movs	r3, #2
 8002610:	e123      	b.n	800285a <mpu9250_mag_init+0x25a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002618:	2b01      	cmp	r3, #1
 800261a:	d001      	beq.n	8002620 <mpu9250_mag_init+0x20>
    {
        return 3;                                                                           /* return error */
 800261c:	2303      	movs	r3, #3
 800261e:	e11c      	b.n	800285a <mpu9250_mag_init+0x25a>
    }
    
    if (handle->iic_spi == MPU9250_INTERFACE_IIC)                                           /* if iic interface */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8112 	bne.w	8002850 <mpu9250_mag_init+0x250>
    {
        res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);           /* read config */
 800262c:	f107 020a 	add.w	r2, r7, #10
 8002630:	2301      	movs	r3, #1
 8002632:	216a      	movs	r1, #106	; 0x6a
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fd ffbf 	bl	80005b8 <a_mpu9250_read>
 800263a:	4603      	mov	r3, r0
 800263c:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <mpu9250_mag_init+0x50>
        {
            handle->debug_print("mpu9250: read user ctrl failed.\n");                       /* read user ctrl failed */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	4886      	ldr	r0, [pc, #536]	; (8002864 <mpu9250_mag_init+0x264>)
 800264a:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 800264c:	2301      	movs	r3, #1
 800264e:	e104      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        prev &= ~(1 << 5);                                                                  /* disable iic master */
 8002650:	7abb      	ldrb	r3, [r7, #10]
 8002652:	f023 0320 	bic.w	r3, r3, #32
 8002656:	b2db      	uxtb	r3, r3
 8002658:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);          /* write config */
 800265a:	f107 020a 	add.w	r2, r7, #10
 800265e:	2301      	movs	r3, #1
 8002660:	216a      	movs	r1, #106	; 0x6a
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fd ffd9 	bl	800061a <a_mpu9250_write>
 8002668:	4603      	mov	r3, r0
 800266a:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800266c:	7afb      	ldrb	r3, [r7, #11]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <mpu9250_mag_init+0x7e>
        {
            handle->debug_print("mpu9250: write user ctrl failed.\n");                      /* write user ctrl failed */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	487c      	ldr	r0, [pc, #496]	; (8002868 <mpu9250_mag_init+0x268>)
 8002678:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 800267a:	2301      	movs	r3, #1
 800267c:	e0ed      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read config */
 800267e:	f107 020a 	add.w	r2, r7, #10
 8002682:	2301      	movs	r3, #1
 8002684:	2137      	movs	r1, #55	; 0x37
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fd ff96 	bl	80005b8 <a_mpu9250_read>
 800268c:	4603      	mov	r3, r0
 800268e:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002690:	7afb      	ldrb	r3, [r7, #11]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <mpu9250_mag_init+0xa2>
        {
            handle->debug_print("mpu9250: read int pin cfg failed.\n");                     /* read int pin cfg failed */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	4874      	ldr	r0, [pc, #464]	; (800286c <mpu9250_mag_init+0x26c>)
 800269c:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 800269e:	2301      	movs	r3, #1
 80026a0:	e0db      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        prev &= ~(1 << 1);                                                                  /* clear config */
 80026a2:	7abb      	ldrb	r3, [r7, #10]
 80026a4:	f023 0302 	bic.w	r3, r3, #2
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	72bb      	strb	r3, [r7, #10]
        prev |= 1 << 1;                                                                     /* enable bypass */
 80026ac:	7abb      	ldrb	r3, [r7, #10]
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write config */
 80026b6:	f107 020a 	add.w	r2, r7, #10
 80026ba:	2301      	movs	r3, #1
 80026bc:	2137      	movs	r1, #55	; 0x37
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fd ffab 	bl	800061a <a_mpu9250_write>
 80026c4:	4603      	mov	r3, r0
 80026c6:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <mpu9250_mag_init+0xda>
        {
            handle->debug_print("mpu9250: write int pin cfg failed.\n");                    /* write int pin cfg failed */
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	4867      	ldr	r0, [pc, #412]	; (8002870 <mpu9250_mag_init+0x270>)
 80026d4:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0bf      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        
        res = a_mpu9250_mag_read(handle, AK8963_REG_WIA, (uint8_t *)&prev, 1);              /* read who am I */
 80026da:	f107 020a 	add.w	r2, r7, #10
 80026de:	2301      	movs	r3, #1
 80026e0:	2100      	movs	r1, #0
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fd ffe9 	bl	80006ba <a_mpu9250_mag_read>
 80026e8:	4603      	mov	r3, r0
 80026ea:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <mpu9250_mag_init+0xfe>
        {
            handle->debug_print("mpu9250: mag read who am i failed.\n");                    /* mag read who am I failed */
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	485f      	ldr	r0, [pc, #380]	; (8002874 <mpu9250_mag_init+0x274>)
 80026f8:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0ad      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        if (prev != 0x48)                                                                   /* check the id */
 80026fe:	7abb      	ldrb	r3, [r7, #10]
 8002700:	2b48      	cmp	r3, #72	; 0x48
 8002702:	d005      	beq.n	8002710 <mpu9250_mag_init+0x110>
        {
            handle->debug_print("mpu9250: mag id is invalid.\n");                           /* mag id is invalid */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	485b      	ldr	r0, [pc, #364]	; (8002878 <mpu9250_mag_init+0x278>)
 800270a:	4798      	blx	r3
           
            return 5;                                                                       /* return error */
 800270c:	2305      	movs	r3, #5
 800270e:	e0a4      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        
        prev = 0x01;                                                                        /* set the reset command */
 8002710:	2301      	movs	r3, #1
 8002712:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL2, &prev);                         /* reset the magnetometer */
 8002714:	f107 030a 	add.w	r3, r7, #10
 8002718:	461a      	mov	r2, r3
 800271a:	210b      	movs	r1, #11
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7fd ffad 	bl	800067c <a_mpu9250_mag_write>
 8002722:	4603      	mov	r3, r0
 8002724:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <mpu9250_mag_init+0x138>
        {
            handle->debug_print("mpu9250: mag write cntl2 failed.\n");                      /* mag write cntl2 failed */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	4852      	ldr	r0, [pc, #328]	; (800287c <mpu9250_mag_init+0x27c>)
 8002732:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002734:	2301      	movs	r3, #1
 8002736:	e090      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        timeout = 100;                                                                      /* set timeout 1000ms */
 8002738:	2364      	movs	r3, #100	; 0x64
 800273a:	60fb      	str	r3, [r7, #12]
        while (timeout != 0)                                                                /* check the timeout */
 800273c:	e01d      	b.n	800277a <mpu9250_mag_init+0x17a>
        {
            res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL2, (uint8_t *)&prev, 1);        /* read cntl2 */
 800273e:	f107 020a 	add.w	r2, r7, #10
 8002742:	2301      	movs	r3, #1
 8002744:	210b      	movs	r1, #11
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fd ffb7 	bl	80006ba <a_mpu9250_mag_read>
 800274c:	4603      	mov	r3, r0
 800274e:	72fb      	strb	r3, [r7, #11]
            if (res != 0)                                                                   /* check result */
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <mpu9250_mag_init+0x162>
            {
                handle->debug_print("mpu9250: mag read cntl2 failed.\n");                   /* mag read cntl2 failed */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	4849      	ldr	r0, [pc, #292]	; (8002880 <mpu9250_mag_init+0x280>)
 800275c:	4798      	blx	r3
               
                return 1;                                                                   /* return error */
 800275e:	2301      	movs	r3, #1
 8002760:	e07b      	b.n	800285a <mpu9250_mag_init+0x25a>
            }
            if ((prev & 0x01) == 0x00)                                                      /* check finished */
 8002762:	7abb      	ldrb	r3, [r7, #10]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <mpu9250_mag_init+0x182>
            {
                break;                                                                      /* break */
            }
            handle->delay_ms(10);                                                           /* delay 10ms */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	200a      	movs	r0, #10
 8002772:	4798      	blx	r3
            timeout--;                                                                      /* timeout-- */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3b01      	subs	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
        while (timeout != 0)                                                                /* check the timeout */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1de      	bne.n	800273e <mpu9250_mag_init+0x13e>
 8002780:	e000      	b.n	8002784 <mpu9250_mag_init+0x184>
                break;                                                                      /* break */
 8002782:	bf00      	nop
        }
        if (timeout == 0)                                                                   /* check the timeout */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <mpu9250_mag_init+0x196>
        {
            handle->debug_print("mpu9250: reset failed.\n");                                /* reset failed */
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	483d      	ldr	r0, [pc, #244]	; (8002884 <mpu9250_mag_init+0x284>)
 8002790:	4798      	blx	r3
           
            return 4;                                                                       /* return error */
 8002792:	2304      	movs	r3, #4
 8002794:	e061      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        
        prev = 0x00;                                                                        /* power down */
 8002796:	2300      	movs	r3, #0
 8002798:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 800279a:	f107 030a 	add.w	r3, r7, #10
 800279e:	461a      	mov	r2, r3
 80027a0:	210a      	movs	r1, #10
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fd ff6a 	bl	800067c <a_mpu9250_mag_write>
 80027a8:	4603      	mov	r3, r0
 80027aa:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <mpu9250_mag_init+0x1be>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	4834      	ldr	r0, [pc, #208]	; (8002888 <mpu9250_mag_init+0x288>)
 80027b8:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80027ba:	2301      	movs	r3, #1
 80027bc:	e04d      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        handle->delay_ms(10);                                                               /* delay 10ms */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	200a      	movs	r0, #10
 80027c4:	4798      	blx	r3
        prev = 0x0F;                                                                        /* fuse rom access mode */
 80027c6:	230f      	movs	r3, #15
 80027c8:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 80027ca:	f107 030a 	add.w	r3, r7, #10
 80027ce:	461a      	mov	r2, r3
 80027d0:	210a      	movs	r1, #10
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fd ff52 	bl	800067c <a_mpu9250_mag_write>
 80027d8:	4603      	mov	r3, r0
 80027da:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <mpu9250_mag_init+0x1ee>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	4828      	ldr	r0, [pc, #160]	; (8002888 <mpu9250_mag_init+0x288>)
 80027e8:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 80027ea:	2301      	movs	r3, #1
 80027ec:	e035      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        res = a_mpu9250_mag_read(handle, AK8963_REG_ASAX, handle->mag_asa, 3);              /* read the asa */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 80027f4:	2303      	movs	r3, #3
 80027f6:	2110      	movs	r1, #16
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fd ff5e 	bl	80006ba <a_mpu9250_mag_read>
 80027fe:	4603      	mov	r3, r0
 8002800:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <mpu9250_mag_init+0x214>
        {
            handle->debug_print("mpu9250: mag read asa failed.\n");                         /* mag read asa failed */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	481f      	ldr	r0, [pc, #124]	; (800288c <mpu9250_mag_init+0x28c>)
 800280e:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002810:	2301      	movs	r3, #1
 8002812:	e022      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        prev = 0x00;                                                                        /* power down */
 8002814:	2300      	movs	r3, #0
 8002816:	72bb      	strb	r3, [r7, #10]
        res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, &prev);                         /* set the settings */
 8002818:	f107 030a 	add.w	r3, r7, #10
 800281c:	461a      	mov	r2, r3
 800281e:	210a      	movs	r1, #10
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fd ff2b 	bl	800067c <a_mpu9250_mag_write>
 8002826:	4603      	mov	r3, r0
 8002828:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                                       /* check result */
 800282a:	7afb      	ldrb	r3, [r7, #11]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <mpu9250_mag_init+0x23c>
        {
            handle->debug_print("mpu9250: mag write cntl1 failed.\n");                      /* mag write cntl1 failed */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	4814      	ldr	r0, [pc, #80]	; (8002888 <mpu9250_mag_init+0x288>)
 8002836:	4798      	blx	r3
           
            return 1;                                                                       /* return error */
 8002838:	2301      	movs	r3, #1
 800283a:	e00e      	b.n	800285a <mpu9250_mag_init+0x25a>
        }
        handle->delay_ms(10);                                                               /* delay 10ms */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	200a      	movs	r0, #10
 8002842:	4798      	blx	r3
        
        handle->mag_inited = 1;                                                             /* flag inited */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        return 0;                                                                           /* success return 0 */
 800284c:	2300      	movs	r3, #0
 800284e:	e004      	b.n	800285a <mpu9250_mag_init+0x25a>
    }
    else
    {
        handle->debug_print("mpu9250: spi don't support.\n");                               /* spi don't support */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	480e      	ldr	r0, [pc, #56]	; (8002890 <mpu9250_mag_init+0x290>)
 8002856:	4798      	blx	r3
       
        return 6;                                                                           /* return error */
 8002858:	2306      	movs	r3, #6
    }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	0800a9d8 	.word	0x0800a9d8
 8002868:	0800a9fc 	.word	0x0800a9fc
 800286c:	0800acbc 	.word	0x0800acbc
 8002870:	0800ace0 	.word	0x0800ace0
 8002874:	0800ad04 	.word	0x0800ad04
 8002878:	0800ad28 	.word	0x0800ad28
 800287c:	0800ad48 	.word	0x0800ad48
 8002880:	0800ad6c 	.word	0x0800ad6c
 8002884:	0800ac0c 	.word	0x0800ac0c
 8002888:	0800ad90 	.word	0x0800ad90
 800288c:	0800adb4 	.word	0x0800adb4
 8002890:	0800add4 	.word	0x0800add4

08002894 <mpu9250_mag_deinit>:
 *             - 3 handle is not initialized
 *             - 4 mag is not inited
 * @note       none
 */
uint8_t mpu9250_mag_deinit(mpu9250_handle_t *handle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <mpu9250_mag_deinit+0x12>
    {
        return 2;                                                                   /* return error */
 80028a2:	2302      	movs	r3, #2
 80028a4:	e0b3      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <mpu9250_mag_deinit+0x20>
    {
        return 3;                                                                   /* return error */
 80028b0:	2303      	movs	r3, #3
 80028b2:	e0ac      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <mpu9250_mag_deinit+0x36>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	4855      	ldr	r0, [pc, #340]	; (8002a18 <mpu9250_mag_deinit+0x184>)
 80028c4:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 80028c6:	2304      	movs	r3, #4
 80028c8:	e0a1      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* read config */
 80028ca:	f107 020e 	add.w	r2, r7, #14
 80028ce:	2301      	movs	r3, #1
 80028d0:	216a      	movs	r1, #106	; 0x6a
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fd fe70 	bl	80005b8 <a_mpu9250_read>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <mpu9250_mag_deinit+0x5a>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                   /* read user ctrl failed */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	484d      	ldr	r0, [pc, #308]	; (8002a1c <mpu9250_mag_deinit+0x188>)
 80028e8:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e08f      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(1 << 5);                                                              /* disable iic master */
 80028ee:	7bbb      	ldrb	r3, [r7, #14]
 80028f0:	f023 0320 	bic.w	r3, r3, #32
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);      /* write config */
 80028f8:	f107 020e 	add.w	r2, r7, #14
 80028fc:	2301      	movs	r3, #1
 80028fe:	216a      	movs	r1, #106	; 0x6a
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fd fe8a 	bl	800061a <a_mpu9250_write>
 8002906:	4603      	mov	r3, r0
 8002908:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <mpu9250_mag_deinit+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                  /* write user ctrl failed */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	4842      	ldr	r0, [pc, #264]	; (8002a20 <mpu9250_mag_deinit+0x18c>)
 8002916:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002918:	2301      	movs	r3, #1
 800291a:	e078      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);     /* read config */
 800291c:	f107 020e 	add.w	r2, r7, #14
 8002920:	2301      	movs	r3, #1
 8002922:	2137      	movs	r1, #55	; 0x37
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7fd fe47 	bl	80005b8 <a_mpu9250_read>
 800292a:	4603      	mov	r3, r0
 800292c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <mpu9250_mag_deinit+0xac>
    {
        handle->debug_print("mpu9250: read int pin cfg failed.\n");                 /* read int pin cfg failed */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	483a      	ldr	r0, [pc, #232]	; (8002a24 <mpu9250_mag_deinit+0x190>)
 800293a:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800293c:	2301      	movs	r3, #1
 800293e:	e066      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(1 << 1);                                                              /* clear config */
 8002940:	7bbb      	ldrb	r3, [r7, #14]
 8002942:	f023 0302 	bic.w	r3, r3, #2
 8002946:	b2db      	uxtb	r3, r3
 8002948:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 1;                                                                 /* enable bypass */
 800294a:	7bbb      	ldrb	r3, [r7, #14]
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	b2db      	uxtb	r3, r3
 8002952:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);    /* write config */
 8002954:	f107 020e 	add.w	r2, r7, #14
 8002958:	2301      	movs	r3, #1
 800295a:	2137      	movs	r1, #55	; 0x37
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fd fe5c 	bl	800061a <a_mpu9250_write>
 8002962:	4603      	mov	r3, r0
 8002964:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <mpu9250_mag_deinit+0xe4>
    {
        handle->debug_print("mpu9250: write int pin cfg failed.\n");                /* write int pin cfg failed */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	482d      	ldr	r0, [pc, #180]	; (8002a28 <mpu9250_mag_deinit+0x194>)
 8002972:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002974:	2301      	movs	r3, #1
 8002976:	e04a      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_WIA, (uint8_t *)&prev, 1);          /* read who am I */
 8002978:	f107 020e 	add.w	r2, r7, #14
 800297c:	2301      	movs	r3, #1
 800297e:	2100      	movs	r1, #0
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fd fe9a 	bl	80006ba <a_mpu9250_mag_read>
 8002986:	4603      	mov	r3, r0
 8002988:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <mpu9250_mag_deinit+0x108>
    {
        handle->debug_print("mpu9250: mag read who am i failed.\n");                /* mag read who am I failed */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	4825      	ldr	r0, [pc, #148]	; (8002a2c <mpu9250_mag_deinit+0x198>)
 8002996:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002998:	2301      	movs	r3, #1
 800299a:	e038      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    if (prev != 0x48)                                                               /* check the id */
 800299c:	7bbb      	ldrb	r3, [r7, #14]
 800299e:	2b48      	cmp	r3, #72	; 0x48
 80029a0:	d005      	beq.n	80029ae <mpu9250_mag_deinit+0x11a>
    {
        handle->debug_print("mpu9250: mag id is invalid.\n");                       /* mag id is invalid */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	4822      	ldr	r0, [pc, #136]	; (8002a30 <mpu9250_mag_deinit+0x19c>)
 80029a8:	4798      	blx	r3
       
        return 5;                                                                   /* return error */
 80029aa:	2305      	movs	r3, #5
 80029ac:	e02f      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 80029ae:	f107 020e 	add.w	r2, r7, #14
 80029b2:	2301      	movs	r3, #1
 80029b4:	210a      	movs	r1, #10
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fd fe7f 	bl	80006ba <a_mpu9250_mag_read>
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <mpu9250_mag_deinit+0x13e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	481a      	ldr	r0, [pc, #104]	; (8002a34 <mpu9250_mag_deinit+0x1a0>)
 80029cc:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01d      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    prev &= ~(0xF << 0);                                                            /* clear config */
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	f023 030f 	bic.w	r3, r3, #15
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	73bb      	strb	r3, [r7, #14]
    prev |= 0x00 << 0;                                                              /* set the power mode */
 80029dc:	7bbb      	ldrb	r3, [r7, #14]
 80029de:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 80029e0:	f107 030e 	add.w	r3, r7, #14
 80029e4:	461a      	mov	r2, r3
 80029e6:	210a      	movs	r1, #10
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fd fe47 	bl	800067c <a_mpu9250_mag_write>
 80029ee:	4603      	mov	r3, r0
 80029f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <mpu9250_mag_deinit+0x170>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	480e      	ldr	r0, [pc, #56]	; (8002a38 <mpu9250_mag_deinit+0x1a4>)
 80029fe:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002a00:	2301      	movs	r3, #1
 8002a02:	e004      	b.n	8002a0e <mpu9250_mag_deinit+0x17a>
    }
    
    handle->mag_inited = 0;                                                         /* flag closed */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    return 0;                                                                       /* success return 0 */
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	0800adf4 	.word	0x0800adf4
 8002a1c:	0800a9d8 	.word	0x0800a9d8
 8002a20:	0800a9fc 	.word	0x0800a9fc
 8002a24:	0800acbc 	.word	0x0800acbc
 8002a28:	0800ace0 	.word	0x0800ace0
 8002a2c:	0800ad04 	.word	0x0800ad04
 8002a30:	0800ad28 	.word	0x0800ad28
 8002a34:	0800ae14 	.word	0x0800ae14
 8002a38:	0800ad90 	.word	0x0800ad90

08002a3c <mpu9250_mag_set_mode>:
 *            - 3 handle is not initialized
 *            - 4 mag is not inited
 * @note      none
 */
uint8_t mpu9250_mag_set_mode(mpu9250_handle_t *handle, mpu9250_magnetometer_mode_t mode)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <mpu9250_mag_set_mode+0x16>
    {
        return 2;                                                                   /* return error */
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e040      	b.n	8002ad4 <mpu9250_mag_set_mode+0x98>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d001      	beq.n	8002a60 <mpu9250_mag_set_mode+0x24>
    {
        return 3;                                                                   /* return error */
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e039      	b.n	8002ad4 <mpu9250_mag_set_mode+0x98>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d005      	beq.n	8002a76 <mpu9250_mag_set_mode+0x3a>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	481b      	ldr	r0, [pc, #108]	; (8002adc <mpu9250_mag_set_mode+0xa0>)
 8002a70:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 8002a72:	2304      	movs	r3, #4
 8002a74:	e02e      	b.n	8002ad4 <mpu9250_mag_set_mode+0x98>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 8002a76:	f107 020e 	add.w	r2, r7, #14
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	210a      	movs	r1, #10
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fd fe1b 	bl	80006ba <a_mpu9250_mag_read>
 8002a84:	4603      	mov	r3, r0
 8002a86:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <mpu9250_mag_set_mode+0x5e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	4813      	ldr	r0, [pc, #76]	; (8002ae0 <mpu9250_mag_set_mode+0xa4>)
 8002a94:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e01c      	b.n	8002ad4 <mpu9250_mag_set_mode+0x98>
    }
    prev &= ~(0xF << 0);                                                            /* clear config */
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	f023 030f 	bic.w	r3, r3, #15
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 0;                                                              /* set the mode */
 8002aa4:	7bba      	ldrb	r2, [r7, #14]
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 8002aae:	f107 030e 	add.w	r3, r7, #14
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	210a      	movs	r1, #10
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fd fde0 	bl	800067c <a_mpu9250_mag_write>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <mpu9250_mag_set_mode+0x96>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <mpu9250_mag_set_mode+0xa8>)
 8002acc:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <mpu9250_mag_set_mode+0x98>
    }
    
    return 0;                                                                       /* success return 0 */
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	0800adf4 	.word	0x0800adf4
 8002ae0:	0800ae14 	.word	0x0800ae14
 8002ae4:	0800ad90 	.word	0x0800ad90

08002ae8 <mpu9250_mag_set_bits>:
 *            - 3 handle is not initialized
 *            - 4 mag is not inited
 * @note      none
 */
uint8_t mpu9250_mag_set_bits(mpu9250_handle_t *handle, mpu9250_magnetometer_bits_t bits)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <mpu9250_mag_set_bits+0x16>
    {
        return 2;                                                                   /* return error */
 8002afa:	2302      	movs	r3, #2
 8002afc:	e044      	b.n	8002b88 <mpu9250_mag_set_bits+0xa0>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d001      	beq.n	8002b0c <mpu9250_mag_set_bits+0x24>
    {
        return 3;                                                                   /* return error */
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e03d      	b.n	8002b88 <mpu9250_mag_set_bits+0xa0>
    }
    if (handle->mag_inited != 1)                                                    /* check mag initialization */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <mpu9250_mag_set_bits+0x3a>
    {
        handle->debug_print("mpu9250: mag is not inited.\n");                       /* mag is not inited */
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	481d      	ldr	r0, [pc, #116]	; (8002b90 <mpu9250_mag_set_bits+0xa8>)
 8002b1c:	4798      	blx	r3
       
        return 4;                                                                   /* return error */
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e032      	b.n	8002b88 <mpu9250_mag_set_bits+0xa0>
    }
    
    res = a_mpu9250_mag_read(handle, AK8963_REG_CNTL1, (uint8_t *)&prev, 1);        /* read cntl1 */
 8002b22:	f107 020e 	add.w	r2, r7, #14
 8002b26:	2301      	movs	r3, #1
 8002b28:	210a      	movs	r1, #10
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fd fdc5 	bl	80006ba <a_mpu9250_mag_read>
 8002b30:	4603      	mov	r3, r0
 8002b32:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <mpu9250_mag_set_bits+0x5e>
    {
        handle->debug_print("mpu9250: mag read cntl1 failed.\n");                   /* mag read cntl1 failed */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	4815      	ldr	r0, [pc, #84]	; (8002b94 <mpu9250_mag_set_bits+0xac>)
 8002b40:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002b42:	2301      	movs	r3, #1
 8002b44:	e020      	b.n	8002b88 <mpu9250_mag_set_bits+0xa0>
    }
    prev &= ~(1 << 4);                                                              /* clear config */
 8002b46:	7bbb      	ldrb	r3, [r7, #14]
 8002b48:	f023 0310 	bic.w	r3, r3, #16
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	73bb      	strb	r3, [r7, #14]
    prev |= bits << 4;                                                              /* set the mode */
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	7bbb      	ldrb	r3, [r7, #14]
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_mag_write(handle, AK8963_REG_CNTL1, (uint8_t *)&prev);          /* write cntl1 */
 8002b62:	f107 030e 	add.w	r3, r7, #14
 8002b66:	461a      	mov	r2, r3
 8002b68:	210a      	movs	r1, #10
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fd fd86 	bl	800067c <a_mpu9250_mag_write>
 8002b70:	4603      	mov	r3, r0
 8002b72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <mpu9250_mag_set_bits+0x9e>
    {
        handle->debug_print("mpu9250: mag write cntl1 failed.\n");                  /* mag write cntl1 failed */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	4806      	ldr	r0, [pc, #24]	; (8002b98 <mpu9250_mag_set_bits+0xb0>)
 8002b80:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <mpu9250_mag_set_bits+0xa0>
    }
    
    return 0;                                                                       /* success return 0 */
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0800adf4 	.word	0x0800adf4
 8002b94:	0800ae14 	.word	0x0800ae14
 8002b98:	0800ad90 	.word	0x0800ad90

08002b9c <mpu9250_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <mpu9250_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e039      	b.n	8002c26 <mpu9250_set_fifo+0x8a>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d001      	beq.n	8002bc0 <mpu9250_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e032      	b.n	8002c26 <mpu9250_set_fifo+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8002bc0:	f107 020e 	add.w	r2, r7, #14
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	216a      	movs	r1, #106	; 0x6a
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fd fcf5 	bl	80005b8 <a_mpu9250_read>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <mpu9250_set_fifo+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                     /* read user ctrl failed */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	4814      	ldr	r0, [pc, #80]	; (8002c30 <mpu9250_set_fifo+0x94>)
 8002bde:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8002be0:	2301      	movs	r3, #1
 8002be2:	e020      	b.n	8002c26 <mpu9250_set_fifo+0x8a>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	7bbb      	ldrb	r3, [r7, #14]
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8002c00:	f107 020e 	add.w	r2, r7, #14
 8002c04:	2301      	movs	r3, #1
 8002c06:	216a      	movs	r1, #106	; 0x6a
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7fd fd06 	bl	800061a <a_mpu9250_write>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <mpu9250_set_fifo+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                    /* write user ctrl failed */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	4805      	ldr	r0, [pc, #20]	; (8002c34 <mpu9250_set_fifo+0x98>)
 8002c1e:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <mpu9250_set_fifo+0x8a>
    }
    
    return 0;                                                                         /* success return 0 */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	0800a9d8 	.word	0x0800a9d8
 8002c34:	0800a9fc 	.word	0x0800a9fc

08002c38 <mpu9250_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_iic_master(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <mpu9250_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e039      	b.n	8002cc2 <mpu9250_set_iic_master+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d001      	beq.n	8002c5c <mpu9250_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e032      	b.n	8002cc2 <mpu9250_set_iic_master+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002c5c:	f107 020e 	add.w	r2, r7, #14
 8002c60:	2301      	movs	r3, #1
 8002c62:	216a      	movs	r1, #106	; 0x6a
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fd fca7 	bl	80005b8 <a_mpu9250_read>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <mpu9250_set_iic_master+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                    /* read user ctrl failed */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	4814      	ldr	r0, [pc, #80]	; (8002ccc <mpu9250_set_iic_master+0x94>)
 8002c7a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e020      	b.n	8002cc2 <mpu9250_set_iic_master+0x8a>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8002c80:	7bbb      	ldrb	r3, [r7, #14]
 8002c82:	f023 0320 	bic.w	r3, r3, #32
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	015b      	lsls	r3, r3, #5
 8002c8e:	b25a      	sxtb	r2, r3
 8002c90:	7bbb      	ldrb	r3, [r7, #14]
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002c9c:	f107 020e 	add.w	r2, r7, #14
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	216a      	movs	r1, #106	; 0x6a
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fd fcb8 	bl	800061a <a_mpu9250_write>
 8002caa:	4603      	mov	r3, r0
 8002cac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <mpu9250_set_iic_master+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                   /* write user ctrl failed */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <mpu9250_set_iic_master+0x98>)
 8002cba:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <mpu9250_set_iic_master+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	0800a9d8 	.word	0x0800a9d8
 8002cd0:	0800a9fc 	.word	0x0800a9fc

08002cd4 <mpu9250_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_disable_iic_slave(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <mpu9250_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e039      	b.n	8002d5e <mpu9250_set_disable_iic_slave+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <mpu9250_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e032      	b.n	8002d5e <mpu9250_set_disable_iic_slave+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002cf8:	f107 020e 	add.w	r2, r7, #14
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	216a      	movs	r1, #106	; 0x6a
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fd fc59 	bl	80005b8 <a_mpu9250_read>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <mpu9250_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu9250: read user ctrl failed.\n");                    /* read user ctrl failed */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	4814      	ldr	r0, [pc, #80]	; (8002d68 <mpu9250_set_disable_iic_slave+0x94>)
 8002d16:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e020      	b.n	8002d5e <mpu9250_set_disable_iic_slave+0x8a>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8002d1c:	7bbb      	ldrb	r3, [r7, #14]
 8002d1e:	f023 0310 	bic.w	r3, r3, #16
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	b25a      	sxtb	r2, r3
 8002d2c:	7bbb      	ldrb	r3, [r7, #14]
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	4313      	orrs	r3, r2
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002d38:	f107 020e 	add.w	r2, r7, #14
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	216a      	movs	r1, #106	; 0x6a
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fd fc6a 	bl	800061a <a_mpu9250_write>
 8002d46:	4603      	mov	r3, r0
 8002d48:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <mpu9250_set_disable_iic_slave+0x88>
    {
        handle->debug_print("mpu9250: write user ctrl failed.\n");                   /* write user ctrl failed */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	4805      	ldr	r0, [pc, #20]	; (8002d6c <mpu9250_set_disable_iic_slave+0x98>)
 8002d56:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <mpu9250_set_disable_iic_slave+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	0800a9d8 	.word	0x0800a9d8
 8002d6c:	0800a9fc 	.word	0x0800a9fc

08002d70 <mpu9250_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_clock_source(mpu9250_handle_t *handle, mpu9250_clock_source_t clock_source)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <mpu9250_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 8002d82:	2302      	movs	r3, #2
 8002d84:	e035      	b.n	8002df2 <mpu9250_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d001      	beq.n	8002d94 <mpu9250_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 8002d90:	2303      	movs	r3, #3
 8002d92:	e02e      	b.n	8002df2 <mpu9250_set_clock_source+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002d94:	f107 020e 	add.w	r2, r7, #14
 8002d98:	2301      	movs	r3, #1
 8002d9a:	216b      	movs	r1, #107	; 0x6b
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fd fc0b 	bl	80005b8 <a_mpu9250_read>
 8002da2:	4603      	mov	r3, r0
 8002da4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <mpu9250_set_clock_source+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	4812      	ldr	r0, [pc, #72]	; (8002dfc <mpu9250_set_clock_source+0x8c>)
 8002db2:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002db4:	2301      	movs	r3, #1
 8002db6:	e01c      	b.n	8002df2 <mpu9250_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	f023 0307 	bic.w	r3, r3, #7
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 8002dc2:	7bba      	ldrb	r2, [r7, #14]
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002dcc:	f107 020e 	add.w	r2, r7, #14
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	216b      	movs	r1, #107	; 0x6b
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fd fc20 	bl	800061a <a_mpu9250_write>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <mpu9250_set_clock_source+0x80>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	4805      	ldr	r0, [pc, #20]	; (8002e00 <mpu9250_set_clock_source+0x90>)
 8002dea:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <mpu9250_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	0800afc8 	.word	0x0800afc8
 8002e00:	0800aff4 	.word	0x0800aff4

08002e04 <mpu9250_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_ptat(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <mpu9250_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 8002e16:	2302      	movs	r3, #2
 8002e18:	e03c      	b.n	8002e94 <mpu9250_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <mpu9250_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 8002e24:	2303      	movs	r3, #3
 8002e26:	e035      	b.n	8002e94 <mpu9250_set_ptat+0x90>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002e28:	f107 020e 	add.w	r2, r7, #14
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	216b      	movs	r1, #107	; 0x6b
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd fbc1 	bl	80005b8 <a_mpu9250_read>
 8002e36:	4603      	mov	r3, r0
 8002e38:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <mpu9250_set_ptat+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	4815      	ldr	r0, [pc, #84]	; (8002e9c <mpu9250_set_ptat+0x98>)
 8002e46:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e023      	b.n	8002e94 <mpu9250_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8002e4c:	7bbb      	ldrb	r3, [r7, #14]
 8002e4e:	f023 0308 	bic.w	r3, r3, #8
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <mpu9250_set_ptat+0x5c>
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	e000      	b.n	8002e62 <mpu9250_set_ptat+0x5e>
 8002e60:	2200      	movs	r2, #0
 8002e62:	7bbb      	ldrb	r3, [r7, #14]
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	4313      	orrs	r3, r2
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002e6e:	f107 020e 	add.w	r2, r7, #14
 8002e72:	2301      	movs	r3, #1
 8002e74:	216b      	movs	r1, #107	; 0x6b
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fbcf 	bl	800061a <a_mpu9250_write>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <mpu9250_set_ptat+0x8e>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <mpu9250_set_ptat+0x9c>)
 8002e8c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <mpu9250_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	0800afc8 	.word	0x0800afc8
 8002ea0:	0800aff4 	.word	0x0800aff4

08002ea4 <mpu9250_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_cycle_wake_up(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <mpu9250_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e039      	b.n	8002f2e <mpu9250_set_cycle_wake_up+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d001      	beq.n	8002ec8 <mpu9250_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e032      	b.n	8002f2e <mpu9250_set_cycle_wake_up+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002ec8:	f107 020e 	add.w	r2, r7, #14
 8002ecc:	2301      	movs	r3, #1
 8002ece:	216b      	movs	r1, #107	; 0x6b
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fd fb71 	bl	80005b8 <a_mpu9250_read>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <mpu9250_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	4814      	ldr	r0, [pc, #80]	; (8002f38 <mpu9250_set_cycle_wake_up+0x94>)
 8002ee6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e020      	b.n	8002f2e <mpu9250_set_cycle_wake_up+0x8a>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8002eec:	7bbb      	ldrb	r3, [r7, #14]
 8002eee:	f023 0320 	bic.w	r3, r3, #32
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	015b      	lsls	r3, r3, #5
 8002efa:	b25a      	sxtb	r2, r3
 8002efc:	7bbb      	ldrb	r3, [r7, #14]
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002f08:	f107 020e 	add.w	r2, r7, #14
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	216b      	movs	r1, #107	; 0x6b
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fd fb82 	bl	800061a <a_mpu9250_write>
 8002f16:	4603      	mov	r3, r0
 8002f18:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <mpu9250_set_cycle_wake_up+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	4805      	ldr	r0, [pc, #20]	; (8002f3c <mpu9250_set_cycle_wake_up+0x98>)
 8002f26:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <mpu9250_set_cycle_wake_up+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	0800afc8 	.word	0x0800afc8
 8002f3c:	0800aff4 	.word	0x0800aff4

08002f40 <mpu9250_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_sleep(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <mpu9250_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 8002f52:	2302      	movs	r3, #2
 8002f54:	e039      	b.n	8002fca <mpu9250_set_sleep+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d001      	beq.n	8002f64 <mpu9250_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 8002f60:	2303      	movs	r3, #3
 8002f62:	e032      	b.n	8002fca <mpu9250_set_sleep+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8002f64:	f107 020e 	add.w	r2, r7, #14
 8002f68:	2301      	movs	r3, #1
 8002f6a:	216b      	movs	r1, #107	; 0x6b
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fd fb23 	bl	80005b8 <a_mpu9250_read>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <mpu9250_set_sleep+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	4814      	ldr	r0, [pc, #80]	; (8002fd4 <mpu9250_set_sleep+0x94>)
 8002f82:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002f84:	2301      	movs	r3, #1
 8002f86:	e020      	b.n	8002fca <mpu9250_set_sleep+0x8a>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	b25a      	sxtb	r2, r3
 8002f98:	7bbb      	ldrb	r3, [r7, #14]
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b25b      	sxtb	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8002fa4:	f107 020e 	add.w	r2, r7, #14
 8002fa8:	2301      	movs	r3, #1
 8002faa:	216b      	movs	r1, #107	; 0x6b
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fd fb34 	bl	800061a <a_mpu9250_write>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <mpu9250_set_sleep+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <mpu9250_set_sleep+0x98>)
 8002fc2:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <mpu9250_set_sleep+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	0800afc8 	.word	0x0800afc8
 8002fd8:	0800aff4 	.word	0x0800aff4

08002fdc <mpu9250_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyro_standby(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <mpu9250_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e039      	b.n	8003066 <mpu9250_set_gyro_standby+0x8a>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d001      	beq.n	8003000 <mpu9250_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e032      	b.n	8003066 <mpu9250_set_gyro_standby+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8003000:	f107 020e 	add.w	r2, r7, #14
 8003004:	2301      	movs	r3, #1
 8003006:	216b      	movs	r1, #107	; 0x6b
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fd fad5 	bl	80005b8 <a_mpu9250_read>
 800300e:	4603      	mov	r3, r0
 8003010:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <mpu9250_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu9250: read power management 1 failed.\n");           /* read power management 1 failed */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	4814      	ldr	r0, [pc, #80]	; (8003070 <mpu9250_set_gyro_standby+0x94>)
 800301e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8003020:	2301      	movs	r3, #1
 8003022:	e020      	b.n	8003066 <mpu9250_set_gyro_standby+0x8a>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8003024:	7bbb      	ldrb	r3, [r7, #14]
 8003026:	f023 0310 	bic.w	r3, r3, #16
 800302a:	b2db      	uxtb	r3, r3
 800302c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	b25a      	sxtb	r2, r3
 8003034:	7bbb      	ldrb	r3, [r7, #14]
 8003036:	b25b      	sxtb	r3, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	b25b      	sxtb	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8003040:	f107 020e 	add.w	r2, r7, #14
 8003044:	2301      	movs	r3, #1
 8003046:	216b      	movs	r1, #107	; 0x6b
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fd fae6 	bl	800061a <a_mpu9250_write>
 800304e:	4603      	mov	r3, r0
 8003050:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <mpu9250_set_gyro_standby+0x88>
    {
        handle->debug_print("mpu9250: write power management 1 failed.\n");          /* write power management 1 failed */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	4805      	ldr	r0, [pc, #20]	; (8003074 <mpu9250_set_gyro_standby+0x98>)
 800305e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <mpu9250_set_gyro_standby+0x8a>
    }
    
    return 0;                                                                        /* success return 0 */
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	0800afc8 	.word	0x0800afc8
 8003074:	0800aff4 	.word	0x0800aff4

08003078 <mpu9250_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_standby_mode(mpu9250_handle_t *handle, mpu9250_source_t source, mpu9250_bool_t enable)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	70fb      	strb	r3, [r7, #3]
 8003084:	4613      	mov	r3, r2
 8003086:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <mpu9250_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 800308e:	2302      	movs	r3, #2
 8003090:	e043      	b.n	800311a <mpu9250_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <mpu9250_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 800309c:	2303      	movs	r3, #3
 800309e:	e03c      	b.n	800311a <mpu9250_set_standby_mode+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 80030a0:	f107 020e 	add.w	r2, r7, #14
 80030a4:	2301      	movs	r3, #1
 80030a6:	216c      	movs	r1, #108	; 0x6c
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fd fa85 	bl	80005b8 <a_mpu9250_read>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <mpu9250_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu9250: read power management 2 failed.\n");           /* read power management 2 failed */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	4819      	ldr	r0, [pc, #100]	; (8003124 <mpu9250_set_standby_mode+0xac>)
 80030be:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80030c0:	2301      	movs	r3, #1
 80030c2:	e02a      	b.n	800311a <mpu9250_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	2201      	movs	r2, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	b25a      	sxtb	r2, r3
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	4013      	ands	r3, r2
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 80030de:	78ba      	ldrb	r2, [r7, #2]
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	b25a      	sxtb	r2, r3
 80030e8:	7bbb      	ldrb	r3, [r7, #14]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 80030f4:	f107 020e 	add.w	r2, r7, #14
 80030f8:	2301      	movs	r3, #1
 80030fa:	216c      	movs	r1, #108	; 0x6c
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fd fa8c 	bl	800061a <a_mpu9250_write>
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <mpu9250_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu9250: write power management 2 failed.\n");          /* write power management 2 failed */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	4805      	ldr	r0, [pc, #20]	; (8003128 <mpu9250_set_standby_mode+0xb0>)
 8003112:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <mpu9250_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	0800b020 	.word	0x0800b020
 8003128:	0800b04c 	.word	0x0800b04c

0800312c <mpu9250_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_sample_rate_divider(mpu9250_handle_t *handle, uint8_t d)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <mpu9250_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 800313e:	2302      	movs	r3, #2
 8003140:	e018      	b.n	8003174 <mpu9250_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003148:	2b01      	cmp	r3, #1
 800314a:	d001      	beq.n	8003150 <mpu9250_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 800314c:	2303      	movs	r3, #3
 800314e:	e011      	b.n	8003174 <mpu9250_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu9250_write(handle, MPU9250_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8003150:	1cfa      	adds	r2, r7, #3
 8003152:	2301      	movs	r3, #1
 8003154:	2119      	movs	r1, #25
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd fa5f 	bl	800061a <a_mpu9250_write>
 800315c:	4603      	mov	r3, r0
 800315e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <mpu9250_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu9250: write smprt div failed.\n");                   /* write smprt div failed */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	4804      	ldr	r0, [pc, #16]	; (800317c <mpu9250_set_sample_rate_divider+0x50>)
 800316c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <mpu9250_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	0800b10c 	.word	0x0800b10c

08003180 <mpu9250_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_extern_sync(mpu9250_handle_t *handle, mpu9250_extern_sync_t sync)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <mpu9250_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 8003192:	2302      	movs	r3, #2
 8003194:	e039      	b.n	800320a <mpu9250_set_extern_sync+0x8a>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800319c:	2b01      	cmp	r3, #1
 800319e:	d001      	beq.n	80031a4 <mpu9250_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 80031a0:	2303      	movs	r3, #3
 80031a2:	e032      	b.n	800320a <mpu9250_set_extern_sync+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80031a4:	f107 020e 	add.w	r2, r7, #14
 80031a8:	2301      	movs	r3, #1
 80031aa:	211a      	movs	r1, #26
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fd fa03 	bl	80005b8 <a_mpu9250_read>
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <mpu9250_set_extern_sync+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	4814      	ldr	r0, [pc, #80]	; (8003214 <mpu9250_set_extern_sync+0x94>)
 80031c2:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 80031c4:	2301      	movs	r3, #1
 80031c6:	e020      	b.n	800320a <mpu9250_set_extern_sync+0x8a>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 80031c8:	7bbb      	ldrb	r3, [r7, #14]
 80031ca:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	b25a      	sxtb	r2, r3
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 80031e4:	f107 020e 	add.w	r2, r7, #14
 80031e8:	2301      	movs	r3, #1
 80031ea:	211a      	movs	r1, #26
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fd fa14 	bl	800061a <a_mpu9250_write>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <mpu9250_set_extern_sync+0x88>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	4805      	ldr	r0, [pc, #20]	; (8003218 <mpu9250_set_extern_sync+0x98>)
 8003202:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <mpu9250_set_extern_sync+0x8a>
    }
    
    return 0;                                                                      /* success return 0 */
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	0800b154 	.word	0x0800b154
 8003218:	0800b174 	.word	0x0800b174

0800321c <mpu9250_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_low_pass_filter(mpu9250_handle_t *handle, mpu9250_low_pass_filter_t filter)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <mpu9250_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 800322e:	2302      	movs	r3, #2
 8003230:	e035      	b.n	800329e <mpu9250_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <mpu9250_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 800323c:	2303      	movs	r3, #3
 800323e:	e02e      	b.n	800329e <mpu9250_set_low_pass_filter+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8003240:	f107 020e 	add.w	r2, r7, #14
 8003244:	2301      	movs	r3, #1
 8003246:	211a      	movs	r1, #26
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fd f9b5 	bl	80005b8 <a_mpu9250_read>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <mpu9250_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	4812      	ldr	r0, [pc, #72]	; (80032a8 <mpu9250_set_low_pass_filter+0x8c>)
 800325e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003260:	2301      	movs	r3, #1
 8003262:	e01c      	b.n	800329e <mpu9250_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 8003264:	7bbb      	ldrb	r3, [r7, #14]
 8003266:	f023 0307 	bic.w	r3, r3, #7
 800326a:	b2db      	uxtb	r3, r3
 800326c:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 800326e:	7bba      	ldrb	r2, [r7, #14]
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	4313      	orrs	r3, r2
 8003274:	b2db      	uxtb	r3, r3
 8003276:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8003278:	f107 020e 	add.w	r2, r7, #14
 800327c:	2301      	movs	r3, #1
 800327e:	211a      	movs	r1, #26
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd f9ca 	bl	800061a <a_mpu9250_write>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <mpu9250_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	4805      	ldr	r0, [pc, #20]	; (80032ac <mpu9250_set_low_pass_filter+0x90>)
 8003296:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <mpu9250_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	0800b154 	.word	0x0800b154
 80032ac:	0800b174 	.word	0x0800b174

080032b0 <mpu9250_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_mode(mpu9250_handle_t *handle, mpu9250_fifo_mode mode)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <mpu9250_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 80032c2:	2302      	movs	r3, #2
 80032c4:	e039      	b.n	800333a <mpu9250_set_fifo_mode+0x8a>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <mpu9250_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 80032d0:	2303      	movs	r3, #3
 80032d2:	e032      	b.n	800333a <mpu9250_set_fifo_mode+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80032d4:	f107 020e 	add.w	r2, r7, #14
 80032d8:	2301      	movs	r3, #1
 80032da:	211a      	movs	r1, #26
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fd f96b 	bl	80005b8 <a_mpu9250_read>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <mpu9250_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu9250: read config failed.\n");                     /* read config failed */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	4814      	ldr	r0, [pc, #80]	; (8003344 <mpu9250_set_fifo_mode+0x94>)
 80032f2:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 80032f4:	2301      	movs	r3, #1
 80032f6:	e020      	b.n	800333a <mpu9250_set_fifo_mode+0x8a>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 80032f8:	7bbb      	ldrb	r3, [r7, #14]
 80032fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	019b      	lsls	r3, r3, #6
 8003306:	b25a      	sxtb	r2, r3
 8003308:	7bbb      	ldrb	r3, [r7, #14]
 800330a:	b25b      	sxtb	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	b25b      	sxtb	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8003314:	f107 020e 	add.w	r2, r7, #14
 8003318:	2301      	movs	r3, #1
 800331a:	211a      	movs	r1, #26
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fd f97c 	bl	800061a <a_mpu9250_write>
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <mpu9250_set_fifo_mode+0x88>
    {
        handle->debug_print("mpu9250: write config failed.\n");                    /* write config failed */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	4805      	ldr	r0, [pc, #20]	; (8003348 <mpu9250_set_fifo_mode+0x98>)
 8003332:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <mpu9250_set_fifo_mode+0x8a>
    }
    
    return 0;                                                                      /* success return 0 */
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	0800b154 	.word	0x0800b154
 8003348:	0800b174 	.word	0x0800b174

0800334c <mpu9250_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_test(mpu9250_handle_t *handle, mpu9250_axis_t axis, mpu9250_bool_t enable)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
 8003358:	4613      	mov	r3, r2
 800335a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <mpu9250_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8003362:	2302      	movs	r3, #2
 8003364:	e043      	b.n	80033ee <mpu9250_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <mpu9250_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 8003370:	2303      	movs	r3, #3
 8003372:	e03c      	b.n	80033ee <mpu9250_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8003374:	f107 020e 	add.w	r2, r7, #14
 8003378:	2301      	movs	r3, #1
 800337a:	211b      	movs	r1, #27
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd f91b 	bl	80005b8 <a_mpu9250_read>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <mpu9250_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	4819      	ldr	r0, [pc, #100]	; (80033f8 <mpu9250_set_gyroscope_test+0xac>)
 8003392:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003394:	2301      	movs	r3, #1
 8003396:	e02a      	b.n	80033ee <mpu9250_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	2201      	movs	r2, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	b25b      	sxtb	r3, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	b25a      	sxtb	r2, r3
 80033a6:	7bbb      	ldrb	r3, [r7, #14]
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	4013      	ands	r3, r2
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 80033b2:	78ba      	ldrb	r2, [r7, #2]
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	b25a      	sxtb	r2, r3
 80033bc:	7bbb      	ldrb	r3, [r7, #14]
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	4313      	orrs	r3, r2
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80033c8:	f107 020e 	add.w	r2, r7, #14
 80033cc:	2301      	movs	r3, #1
 80033ce:	211b      	movs	r1, #27
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd f922 	bl	800061a <a_mpu9250_write>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <mpu9250_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <mpu9250_set_gyroscope_test+0xb0>)
 80033e6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <mpu9250_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	0800b194 	.word	0x0800b194
 80033fc:	0800b1bc 	.word	0x0800b1bc

08003400 <mpu9250_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_range(mpu9250_handle_t *handle, mpu9250_gyroscope_range_t range)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <mpu9250_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 8003412:	2302      	movs	r3, #2
 8003414:	e039      	b.n	800348a <mpu9250_set_gyroscope_range+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800341c:	2b01      	cmp	r3, #1
 800341e:	d001      	beq.n	8003424 <mpu9250_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 8003420:	2303      	movs	r3, #3
 8003422:	e032      	b.n	800348a <mpu9250_set_gyroscope_range+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8003424:	f107 020e 	add.w	r2, r7, #14
 8003428:	2301      	movs	r3, #1
 800342a:	211b      	movs	r1, #27
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fd f8c3 	bl	80005b8 <a_mpu9250_read>
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <mpu9250_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	4814      	ldr	r0, [pc, #80]	; (8003494 <mpu9250_set_gyroscope_range+0x94>)
 8003442:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003444:	2301      	movs	r3, #1
 8003446:	e020      	b.n	800348a <mpu9250_set_gyroscope_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8003448:	7bbb      	ldrb	r3, [r7, #14]
 800344a:	f023 0318 	bic.w	r3, r3, #24
 800344e:	b2db      	uxtb	r3, r3
 8003450:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	b25a      	sxtb	r2, r3
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	b25b      	sxtb	r3, r3
 800345c:	4313      	orrs	r3, r2
 800345e:	b25b      	sxtb	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8003464:	f107 020e 	add.w	r2, r7, #14
 8003468:	2301      	movs	r3, #1
 800346a:	211b      	movs	r1, #27
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fd f8d4 	bl	800061a <a_mpu9250_write>
 8003472:	4603      	mov	r3, r0
 8003474:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <mpu9250_set_gyroscope_range+0x88>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	4805      	ldr	r0, [pc, #20]	; (8003498 <mpu9250_set_gyroscope_range+0x98>)
 8003482:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <mpu9250_set_gyroscope_range+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	0800b194 	.word	0x0800b194
 8003498:	0800b1bc 	.word	0x0800b1bc

0800349c <mpu9250_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu9250_set_gyroscope_choice(mpu9250_handle_t *handle, uint8_t choice)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <mpu9250_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 80034ae:	2302      	movs	r3, #2
 80034b0:	e03e      	b.n	8003530 <mpu9250_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d001      	beq.n	80034c0 <mpu9250_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 80034bc:	2303      	movs	r3, #3
 80034be:	e037      	b.n	8003530 <mpu9250_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d905      	bls.n	80034d2 <mpu9250_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu9250: choice > 3.\n");                                  /* choice > 3 */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	481b      	ldr	r0, [pc, #108]	; (8003538 <mpu9250_set_gyroscope_choice+0x9c>)
 80034cc:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 80034ce:	2304      	movs	r3, #4
 80034d0:	e02e      	b.n	8003530 <mpu9250_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 80034d2:	f107 020e 	add.w	r2, r7, #14
 80034d6:	2301      	movs	r3, #1
 80034d8:	211b      	movs	r1, #27
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd f86c 	bl	80005b8 <a_mpu9250_read>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <mpu9250_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu9250: read gyroscope config failed.\n");                /* read gyroscope config failed */
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	4813      	ldr	r0, [pc, #76]	; (800353c <mpu9250_set_gyroscope_choice+0xa0>)
 80034f0:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e01c      	b.n	8003530 <mpu9250_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 80034f6:	7bbb      	ldrb	r3, [r7, #14]
 80034f8:	f023 0303 	bic.w	r3, r3, #3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 8003500:	7bba      	ldrb	r2, [r7, #14]
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	4313      	orrs	r3, r2
 8003506:	b2db      	uxtb	r3, r3
 8003508:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 800350a:	f107 020e 	add.w	r2, r7, #14
 800350e:	2301      	movs	r3, #1
 8003510:	211b      	movs	r1, #27
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd f881 	bl	800061a <a_mpu9250_write>
 8003518:	4603      	mov	r3, r0
 800351a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <mpu9250_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu9250: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	4806      	ldr	r0, [pc, #24]	; (8003540 <mpu9250_set_gyroscope_choice+0xa4>)
 8003528:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <mpu9250_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	0800b1e8 	.word	0x0800b1e8
 800353c:	0800b194 	.word	0x0800b194
 8003540:	0800b1bc 	.word	0x0800b1bc

08003544 <mpu9250_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_test(mpu9250_handle_t *handle, mpu9250_axis_t axis, mpu9250_bool_t enable)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
 8003550:	4613      	mov	r3, r2
 8003552:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <mpu9250_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 800355a:	2302      	movs	r3, #2
 800355c:	e043      	b.n	80035e6 <mpu9250_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <mpu9250_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 8003568:	2303      	movs	r3, #3
 800356a:	e03c      	b.n	80035e6 <mpu9250_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 800356c:	f107 020e 	add.w	r2, r7, #14
 8003570:	2301      	movs	r3, #1
 8003572:	211c      	movs	r1, #28
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd f81f 	bl	80005b8 <a_mpu9250_read>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <mpu9250_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu9250: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	4819      	ldr	r0, [pc, #100]	; (80035f0 <mpu9250_set_accelerometer_test+0xac>)
 800358a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800358c:	2301      	movs	r3, #1
 800358e:	e02a      	b.n	80035e6 <mpu9250_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	2201      	movs	r2, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	b25b      	sxtb	r3, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	b25a      	sxtb	r2, r3
 800359e:	7bbb      	ldrb	r3, [r7, #14]
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	4013      	ands	r3, r2
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 80035aa:	78ba      	ldrb	r2, [r7, #2]
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	7bbb      	ldrb	r3, [r7, #14]
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 80035c0:	f107 020e 	add.w	r2, r7, #14
 80035c4:	2301      	movs	r3, #1
 80035c6:	211c      	movs	r1, #28
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fd f826 	bl	800061a <a_mpu9250_write>
 80035ce:	4603      	mov	r3, r0
 80035d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <mpu9250_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu9250: write accelerometer config failed.\n");           /* write accelerometer config failed */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	4805      	ldr	r0, [pc, #20]	; (80035f4 <mpu9250_set_accelerometer_test+0xb0>)
 80035de:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <mpu9250_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	0800a840 	.word	0x0800a840
 80035f4:	0800b200 	.word	0x0800b200

080035f8 <mpu9250_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_range(mpu9250_handle_t *handle, mpu9250_accelerometer_range_t range)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <mpu9250_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 800360a:	2302      	movs	r3, #2
 800360c:	e039      	b.n	8003682 <mpu9250_set_accelerometer_range+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003614:	2b01      	cmp	r3, #1
 8003616:	d001      	beq.n	800361c <mpu9250_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8003618:	2303      	movs	r3, #3
 800361a:	e032      	b.n	8003682 <mpu9250_set_accelerometer_range+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 800361c:	f107 020e 	add.w	r2, r7, #14
 8003620:	2301      	movs	r3, #1
 8003622:	211c      	movs	r1, #28
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fc ffc7 	bl	80005b8 <a_mpu9250_read>
 800362a:	4603      	mov	r3, r0
 800362c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <mpu9250_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu9250: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	4814      	ldr	r0, [pc, #80]	; (800368c <mpu9250_set_accelerometer_range+0x94>)
 800363a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800363c:	2301      	movs	r3, #1
 800363e:	e020      	b.n	8003682 <mpu9250_set_accelerometer_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	f023 0318 	bic.w	r3, r3, #24
 8003646:	b2db      	uxtb	r3, r3
 8003648:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	b25a      	sxtb	r2, r3
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	b25b      	sxtb	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b25b      	sxtb	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 800365c:	f107 020e 	add.w	r2, r7, #14
 8003660:	2301      	movs	r3, #1
 8003662:	211c      	movs	r1, #28
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fc ffd8 	bl	800061a <a_mpu9250_write>
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <mpu9250_set_accelerometer_range+0x88>
    {
        handle->debug_print("mpu9250: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	4805      	ldr	r0, [pc, #20]	; (8003690 <mpu9250_set_accelerometer_range+0x98>)
 800367a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <mpu9250_set_accelerometer_range+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	0800a840 	.word	0x0800a840
 8003690:	0800b200 	.word	0x0800b200

08003694 <mpu9250_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_1024kb(mpu9250_handle_t *handle)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <mpu9250_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 80036a2:	2302      	movs	r3, #2
 80036a4:	e035      	b.n	8003712 <mpu9250_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d001      	beq.n	80036b4 <mpu9250_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 80036b0:	2303      	movs	r3, #3
 80036b2:	e02e      	b.n	8003712 <mpu9250_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 80036b4:	f107 020e 	add.w	r2, r7, #14
 80036b8:	2301      	movs	r3, #1
 80036ba:	211d      	movs	r1, #29
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fc ff7b 	bl	80005b8 <a_mpu9250_read>
 80036c2:	4603      	mov	r3, r0
 80036c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <mpu9250_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	4812      	ldr	r0, [pc, #72]	; (800371c <mpu9250_set_fifo_1024kb+0x88>)
 80036d2:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80036d4:	2301      	movs	r3, #1
 80036d6:	e01c      	b.n	8003712 <mpu9250_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 80036d8:	7bbb      	ldrb	r3, [r7, #14]
 80036da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 80036e2:	7bbb      	ldrb	r3, [r7, #14]
 80036e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 80036ec:	f107 020e 	add.w	r2, r7, #14
 80036f0:	2301      	movs	r3, #1
 80036f2:	211d      	movs	r1, #29
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fc ff90 	bl	800061a <a_mpu9250_write>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <mpu9250_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	4805      	ldr	r0, [pc, #20]	; (8003720 <mpu9250_set_fifo_1024kb+0x8c>)
 800370a:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <mpu9250_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	0800b230 	.word	0x0800b230
 8003720:	0800b260 	.word	0x0800b260

08003724 <mpu9250_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_choice(mpu9250_handle_t *handle, uint8_t choice)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <mpu9250_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8003736:	2302      	movs	r3, #2
 8003738:	e042      	b.n	80037c0 <mpu9250_set_accelerometer_choice+0x9c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <mpu9250_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8003744:	2303      	movs	r3, #3
 8003746:	e03b      	b.n	80037c0 <mpu9250_set_accelerometer_choice+0x9c>
    }
    if (choice > 1)                                                                     /* check the choice */
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d905      	bls.n	800375a <mpu9250_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu9250: choice > 1.\n");                                  /* choice > 1 */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	481d      	ldr	r0, [pc, #116]	; (80037c8 <mpu9250_set_accelerometer_choice+0xa4>)
 8003754:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 8003756:	2304      	movs	r3, #4
 8003758:	e032      	b.n	80037c0 <mpu9250_set_accelerometer_choice+0x9c>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 800375a:	f107 020e 	add.w	r2, r7, #14
 800375e:	2301      	movs	r3, #1
 8003760:	211d      	movs	r1, #29
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fc ff28 	bl	80005b8 <a_mpu9250_read>
 8003768:	4603      	mov	r3, r0
 800376a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <mpu9250_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	4815      	ldr	r0, [pc, #84]	; (80037cc <mpu9250_set_accelerometer_choice+0xa8>)
 8003778:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800377a:	2301      	movs	r3, #1
 800377c:	e020      	b.n	80037c0 <mpu9250_set_accelerometer_choice+0x9c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 800377e:	7bbb      	ldrb	r3, [r7, #14]
 8003780:	f023 0308 	bic.w	r3, r3, #8
 8003784:	b2db      	uxtb	r3, r3
 8003786:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	b25a      	sxtb	r2, r3
 800378e:	7bbb      	ldrb	r3, [r7, #14]
 8003790:	b25b      	sxtb	r3, r3
 8003792:	4313      	orrs	r3, r2
 8003794:	b25b      	sxtb	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 800379a:	f107 020e 	add.w	r2, r7, #14
 800379e:	2301      	movs	r3, #1
 80037a0:	211d      	movs	r1, #29
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fc ff39 	bl	800061a <a_mpu9250_write>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <mpu9250_set_accelerometer_choice+0x9a>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	4806      	ldr	r0, [pc, #24]	; (80037d0 <mpu9250_set_accelerometer_choice+0xac>)
 80037b8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <mpu9250_set_accelerometer_choice+0x9c>
    }
    
    return 0;                                                                           /* success return 0 */
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	0800b290 	.word	0x0800b290
 80037cc:	0800b230 	.word	0x0800b230
 80037d0:	0800b260 	.word	0x0800b260

080037d4 <mpu9250_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accelerometer_low_pass_filter(mpu9250_handle_t *handle, mpu9250_accelerometer_low_pass_filter_t filter)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <mpu9250_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 80037e6:	2302      	movs	r3, #2
 80037e8:	e035      	b.n	8003856 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d001      	beq.n	80037f8 <mpu9250_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 80037f4:	2303      	movs	r3, #3
 80037f6:	e02e      	b.n	8003856 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 80037f8:	f107 020e 	add.w	r2, r7, #14
 80037fc:	2301      	movs	r3, #1
 80037fe:	211d      	movs	r1, #29
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fc fed9 	bl	80005b8 <a_mpu9250_read>
 8003806:	4603      	mov	r3, r0
 8003808:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <mpu9250_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu9250: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	4812      	ldr	r0, [pc, #72]	; (8003860 <mpu9250_set_accelerometer_low_pass_filter+0x8c>)
 8003816:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003818:	2301      	movs	r3, #1
 800381a:	e01c      	b.n	8003856 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	b2db      	uxtb	r3, r3
 8003824:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 8003826:	7bba      	ldrb	r2, [r7, #14]
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	4313      	orrs	r3, r2
 800382c:	b2db      	uxtb	r3, r3
 800382e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8003830:	f107 020e 	add.w	r2, r7, #14
 8003834:	2301      	movs	r3, #1
 8003836:	211d      	movs	r1, #29
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fc feee 	bl	800061a <a_mpu9250_write>
 800383e:	4603      	mov	r3, r0
 8003840:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <mpu9250_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu9250: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	4805      	ldr	r0, [pc, #20]	; (8003864 <mpu9250_set_accelerometer_low_pass_filter+0x90>)
 800384e:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <mpu9250_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	0800b230 	.word	0x0800b230
 8003864:	0800b260 	.word	0x0800b260

08003868 <mpu9250_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_low_power_accel_output_rate(mpu9250_handle_t *handle, mpu9250_low_power_accel_output_rate_t rate)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <mpu9250_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 800387a:	2302      	movs	r3, #2
 800387c:	e035      	b.n	80038ea <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003884:	2b01      	cmp	r3, #1
 8003886:	d001      	beq.n	800388c <mpu9250_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 8003888:	2303      	movs	r3, #3
 800388a:	e02e      	b.n	80038ea <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 800388c:	f107 020e 	add.w	r2, r7, #14
 8003890:	2301      	movs	r3, #1
 8003892:	211e      	movs	r1, #30
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7fc fe8f 	bl	80005b8 <a_mpu9250_read>
 800389a:	4603      	mov	r3, r0
 800389c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <mpu9250_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu9250: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	4812      	ldr	r0, [pc, #72]	; (80038f4 <mpu9250_set_low_power_accel_output_rate+0x8c>)
 80038aa:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80038ac:	2301      	movs	r3, #1
 80038ae:	e01c      	b.n	80038ea <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	f023 030f 	bic.w	r3, r3, #15
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 80038ba:	7bba      	ldrb	r2, [r7, #14]
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	4313      	orrs	r3, r2
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 80038c4:	f107 020e 	add.w	r2, r7, #14
 80038c8:	2301      	movs	r3, #1
 80038ca:	211e      	movs	r1, #30
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7fc fea4 	bl	800061a <a_mpu9250_write>
 80038d2:	4603      	mov	r3, r0
 80038d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <mpu9250_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu9250: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	4805      	ldr	r0, [pc, #20]	; (80038f8 <mpu9250_set_low_power_accel_output_rate+0x90>)
 80038e2:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <mpu9250_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	0800b2a8 	.word	0x0800b2a8
 80038f8:	0800b2d4 	.word	0x0800b2d4

080038fc <mpu9250_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_wake_on_motion(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <mpu9250_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 800390e:	2302      	movs	r3, #2
 8003910:	e039      	b.n	8003986 <mpu9250_set_wake_on_motion+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003918:	2b01      	cmp	r3, #1
 800391a:	d001      	beq.n	8003920 <mpu9250_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 800391c:	2303      	movs	r3, #3
 800391e:	e032      	b.n	8003986 <mpu9250_set_wake_on_motion+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8003920:	f107 020e 	add.w	r2, r7, #14
 8003924:	2301      	movs	r3, #1
 8003926:	2169      	movs	r1, #105	; 0x69
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fc fe45 	bl	80005b8 <a_mpu9250_read>
 800392e:	4603      	mov	r3, r0
 8003930:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <mpu9250_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu9250: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	4814      	ldr	r0, [pc, #80]	; (8003990 <mpu9250_set_wake_on_motion+0x94>)
 800393e:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8003940:	2301      	movs	r3, #1
 8003942:	e020      	b.n	8003986 <mpu9250_set_wake_on_motion+0x8a>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8003944:	7bbb      	ldrb	r3, [r7, #14]
 8003946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394a:	b2db      	uxtb	r3, r3
 800394c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	01db      	lsls	r3, r3, #7
 8003952:	b25a      	sxtb	r2, r3
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	b25b      	sxtb	r3, r3
 8003958:	4313      	orrs	r3, r2
 800395a:	b25b      	sxtb	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8003960:	f107 020e 	add.w	r2, r7, #14
 8003964:	2301      	movs	r3, #1
 8003966:	2169      	movs	r1, #105	; 0x69
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fc fe56 	bl	800061a <a_mpu9250_write>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <mpu9250_set_wake_on_motion+0x88>
    {
        handle->debug_print("mpu9250: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	4805      	ldr	r0, [pc, #20]	; (8003994 <mpu9250_set_wake_on_motion+0x98>)
 800397e:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <mpu9250_set_wake_on_motion+0x8a>
    }
    
    return 0;                                                                               /* success return 0 */
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	0800b304 	.word	0x0800b304
 8003994:	0800b330 	.word	0x0800b330

08003998 <mpu9250_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_accel_compare_with_previous_sample(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <mpu9250_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 80039aa:	2302      	movs	r3, #2
 80039ac:	e039      	b.n	8003a22 <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d001      	beq.n	80039bc <mpu9250_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 80039b8:	2303      	movs	r3, #3
 80039ba:	e032      	b.n	8003a22 <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 80039bc:	f107 020e 	add.w	r2, r7, #14
 80039c0:	2301      	movs	r3, #1
 80039c2:	2169      	movs	r1, #105	; 0x69
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fc fdf7 	bl	80005b8 <a_mpu9250_read>
 80039ca:	4603      	mov	r3, r0
 80039cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <mpu9250_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu9250: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	4814      	ldr	r0, [pc, #80]	; (8003a2c <mpu9250_set_accel_compare_with_previous_sample+0x94>)
 80039da:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80039dc:	2301      	movs	r3, #1
 80039de:	e020      	b.n	8003a22 <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 80039e0:	7bbb      	ldrb	r3, [r7, #14]
 80039e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	b25a      	sxtb	r2, r3
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	b25b      	sxtb	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80039fc:	f107 020e 	add.w	r2, r7, #14
 8003a00:	2301      	movs	r3, #1
 8003a02:	2169      	movs	r1, #105	; 0x69
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fc fe08 	bl	800061a <a_mpu9250_write>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <mpu9250_set_accel_compare_with_previous_sample+0x88>
    {
        handle->debug_print("mpu9250: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <mpu9250_set_accel_compare_with_previous_sample+0x98>)
 8003a1a:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <mpu9250_set_accel_compare_with_previous_sample+0x8a>
    }
    
    return 0;                                                                               /* success return 0 */
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	0800b304 	.word	0x0800b304
 8003a30:	0800b330 	.word	0x0800b330

08003a34 <mpu9250_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fifo_enable(mpu9250_handle_t *handle, mpu9250_fifo_t fifo, mpu9250_bool_t enable)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
 8003a40:	4613      	mov	r3, r2
 8003a42:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <mpu9250_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e043      	b.n	8003ad6 <mpu9250_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <mpu9250_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e03c      	b.n	8003ad6 <mpu9250_set_fifo_enable+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8003a5c:	f107 020e 	add.w	r2, r7, #14
 8003a60:	2301      	movs	r3, #1
 8003a62:	2123      	movs	r1, #35	; 0x23
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fc fda7 	bl	80005b8 <a_mpu9250_read>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <mpu9250_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu9250: read fifo enable config failed.\n");          /* read fifo enable config failed */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	4819      	ldr	r0, [pc, #100]	; (8003ae0 <mpu9250_set_fifo_enable+0xac>)
 8003a7a:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e02a      	b.n	8003ad6 <mpu9250_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	2201      	movs	r2, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	b25b      	sxtb	r3, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	b25a      	sxtb	r2, r3
 8003a8e:	7bbb      	ldrb	r3, [r7, #14]
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	4013      	ands	r3, r2
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 8003a9a:	78ba      	ldrb	r2, [r7, #2]
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	b25a      	sxtb	r2, r3
 8003aa4:	7bbb      	ldrb	r3, [r7, #14]
 8003aa6:	b25b      	sxtb	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8003ab0:	f107 020e 	add.w	r2, r7, #14
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	2123      	movs	r1, #35	; 0x23
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fc fdae 	bl	800061a <a_mpu9250_write>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <mpu9250_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu9250: write fifo enable config failed.\n");         /* write fifo enable config failed */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <mpu9250_set_fifo_enable+0xb0>)
 8003ace:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <mpu9250_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	0800b35c 	.word	0x0800b35c
 8003ae4:	0800b388 	.word	0x0800b388

08003ae8 <mpu9250_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_level(mpu9250_handle_t *handle, mpu9250_pin_level_t level)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <mpu9250_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8003afa:	2302      	movs	r3, #2
 8003afc:	e039      	b.n	8003b72 <mpu9250_set_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d001      	beq.n	8003b0c <mpu9250_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e032      	b.n	8003b72 <mpu9250_set_interrupt_level+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003b0c:	f107 020e 	add.w	r2, r7, #14
 8003b10:	2301      	movs	r3, #1
 8003b12:	2137      	movs	r1, #55	; 0x37
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fc fd4f 	bl	80005b8 <a_mpu9250_read>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <mpu9250_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	4814      	ldr	r0, [pc, #80]	; (8003b7c <mpu9250_set_interrupt_level+0x94>)
 8003b2a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e020      	b.n	8003b72 <mpu9250_set_interrupt_level+0x8a>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 8003b30:	7bbb      	ldrb	r3, [r7, #14]
 8003b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	01db      	lsls	r3, r3, #7
 8003b3e:	b25a      	sxtb	r2, r3
 8003b40:	7bbb      	ldrb	r3, [r7, #14]
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003b4c:	f107 020e 	add.w	r2, r7, #14
 8003b50:	2301      	movs	r3, #1
 8003b52:	2137      	movs	r1, #55	; 0x37
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7fc fd60 	bl	800061a <a_mpu9250_write>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <mpu9250_set_interrupt_level+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <mpu9250_set_interrupt_level+0x98>)
 8003b6a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <mpu9250_set_interrupt_level+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0800b3b4 	.word	0x0800b3b4
 8003b80:	0800b3dc 	.word	0x0800b3dc

08003b84 <mpu9250_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_pin_type(mpu9250_handle_t *handle, mpu9250_pin_type_t type)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <mpu9250_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 8003b96:	2302      	movs	r3, #2
 8003b98:	e039      	b.n	8003c0e <mpu9250_set_interrupt_pin_type+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d001      	beq.n	8003ba8 <mpu9250_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e032      	b.n	8003c0e <mpu9250_set_interrupt_pin_type+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003ba8:	f107 020e 	add.w	r2, r7, #14
 8003bac:	2301      	movs	r3, #1
 8003bae:	2137      	movs	r1, #55	; 0x37
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fc fd01 	bl	80005b8 <a_mpu9250_read>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <mpu9250_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	4814      	ldr	r0, [pc, #80]	; (8003c18 <mpu9250_set_interrupt_pin_type+0x94>)
 8003bc6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e020      	b.n	8003c0e <mpu9250_set_interrupt_pin_type+0x8a>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 8003bcc:	7bbb      	ldrb	r3, [r7, #14]
 8003bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	b25a      	sxtb	r2, r3
 8003bdc:	7bbb      	ldrb	r3, [r7, #14]
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003be8:	f107 020e 	add.w	r2, r7, #14
 8003bec:	2301      	movs	r3, #1
 8003bee:	2137      	movs	r1, #55	; 0x37
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fc fd12 	bl	800061a <a_mpu9250_write>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <mpu9250_set_interrupt_pin_type+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	4805      	ldr	r0, [pc, #20]	; (8003c1c <mpu9250_set_interrupt_pin_type+0x98>)
 8003c06:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <mpu9250_set_interrupt_pin_type+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	0800b3b4 	.word	0x0800b3b4
 8003c1c:	0800b3dc 	.word	0x0800b3dc

08003c20 <mpu9250_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_latch(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <mpu9250_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 8003c32:	2302      	movs	r3, #2
 8003c34:	e03c      	b.n	8003cb0 <mpu9250_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d001      	beq.n	8003c44 <mpu9250_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 8003c40:	2303      	movs	r3, #3
 8003c42:	e035      	b.n	8003cb0 <mpu9250_set_interrupt_latch+0x90>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003c44:	f107 020e 	add.w	r2, r7, #14
 8003c48:	2301      	movs	r3, #1
 8003c4a:	2137      	movs	r1, #55	; 0x37
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fc fcb3 	bl	80005b8 <a_mpu9250_read>
 8003c52:	4603      	mov	r3, r0
 8003c54:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <mpu9250_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	4815      	ldr	r0, [pc, #84]	; (8003cb8 <mpu9250_set_interrupt_latch+0x98>)
 8003c62:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003c64:	2301      	movs	r3, #1
 8003c66:	e023      	b.n	8003cb0 <mpu9250_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 8003c68:	7bbb      	ldrb	r3, [r7, #14]
 8003c6a:	f023 0320 	bic.w	r3, r3, #32
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <mpu9250_set_interrupt_latch+0x5c>
 8003c78:	2220      	movs	r2, #32
 8003c7a:	e000      	b.n	8003c7e <mpu9250_set_interrupt_latch+0x5e>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	7bbb      	ldrb	r3, [r7, #14]
 8003c80:	b25b      	sxtb	r3, r3
 8003c82:	4313      	orrs	r3, r2
 8003c84:	b25b      	sxtb	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003c8a:	f107 020e 	add.w	r2, r7, #14
 8003c8e:	2301      	movs	r3, #1
 8003c90:	2137      	movs	r1, #55	; 0x37
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fc fcc1 	bl	800061a <a_mpu9250_write>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <mpu9250_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	4805      	ldr	r0, [pc, #20]	; (8003cbc <mpu9250_set_interrupt_latch+0x9c>)
 8003ca8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <mpu9250_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	0800b3b4 	.word	0x0800b3b4
 8003cbc:	0800b3dc 	.word	0x0800b3dc

08003cc0 <mpu9250_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt_read_clear(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <mpu9250_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e039      	b.n	8003d4a <mpu9250_set_interrupt_read_clear+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d001      	beq.n	8003ce4 <mpu9250_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e032      	b.n	8003d4a <mpu9250_set_interrupt_read_clear+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003ce4:	f107 020e 	add.w	r2, r7, #14
 8003ce8:	2301      	movs	r3, #1
 8003cea:	2137      	movs	r1, #55	; 0x37
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fc fc63 	bl	80005b8 <a_mpu9250_read>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <mpu9250_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	4814      	ldr	r0, [pc, #80]	; (8003d54 <mpu9250_set_interrupt_read_clear+0x94>)
 8003d02:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003d04:	2301      	movs	r3, #1
 8003d06:	e020      	b.n	8003d4a <mpu9250_set_interrupt_read_clear+0x8a>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 8003d08:	7bbb      	ldrb	r3, [r7, #14]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	b25a      	sxtb	r2, r3
 8003d18:	7bbb      	ldrb	r3, [r7, #14]
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003d24:	f107 020e 	add.w	r2, r7, #14
 8003d28:	2301      	movs	r3, #1
 8003d2a:	2137      	movs	r1, #55	; 0x37
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7fc fc74 	bl	800061a <a_mpu9250_write>
 8003d32:	4603      	mov	r3, r0
 8003d34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <mpu9250_set_interrupt_read_clear+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	4805      	ldr	r0, [pc, #20]	; (8003d58 <mpu9250_set_interrupt_read_clear+0x98>)
 8003d42:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <mpu9250_set_interrupt_read_clear+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	0800b3b4 	.word	0x0800b3b4
 8003d58:	0800b3dc 	.word	0x0800b3dc

08003d5c <mpu9250_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fsync_interrupt_level(mpu9250_handle_t *handle, mpu9250_pin_level_t level)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <mpu9250_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e039      	b.n	8003de6 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <mpu9250_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e032      	b.n	8003de6 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003d80:	f107 020e 	add.w	r2, r7, #14
 8003d84:	2301      	movs	r3, #1
 8003d86:	2137      	movs	r1, #55	; 0x37
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fc fc15 	bl	80005b8 <a_mpu9250_read>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <mpu9250_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	4814      	ldr	r0, [pc, #80]	; (8003df0 <mpu9250_set_fsync_interrupt_level+0x94>)
 8003d9e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003da0:	2301      	movs	r3, #1
 8003da2:	e020      	b.n	8003de6 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8003da4:	7bbb      	ldrb	r3, [r7, #14]
 8003da6:	f023 0308 	bic.w	r3, r3, #8
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	b25a      	sxtb	r2, r3
 8003db4:	7bbb      	ldrb	r3, [r7, #14]
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003dc0:	f107 020e 	add.w	r2, r7, #14
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	2137      	movs	r1, #55	; 0x37
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fc fc26 	bl	800061a <a_mpu9250_write>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <mpu9250_set_fsync_interrupt_level+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	4805      	ldr	r0, [pc, #20]	; (8003df4 <mpu9250_set_fsync_interrupt_level+0x98>)
 8003dde:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <mpu9250_set_fsync_interrupt_level+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	0800b3b4 	.word	0x0800b3b4
 8003df4:	0800b3dc 	.word	0x0800b3dc

08003df8 <mpu9250_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_fsync_interrupt(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <mpu9250_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e039      	b.n	8003e82 <mpu9250_set_fsync_interrupt+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d001      	beq.n	8003e1c <mpu9250_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e032      	b.n	8003e82 <mpu9250_set_fsync_interrupt+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8003e1c:	f107 020e 	add.w	r2, r7, #14
 8003e20:	2301      	movs	r3, #1
 8003e22:	2137      	movs	r1, #55	; 0x37
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fc fbc7 	bl	80005b8 <a_mpu9250_read>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <mpu9250_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	4814      	ldr	r0, [pc, #80]	; (8003e8c <mpu9250_set_fsync_interrupt+0x94>)
 8003e3a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e020      	b.n	8003e82 <mpu9250_set_fsync_interrupt+0x8a>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 8003e40:	7bbb      	ldrb	r3, [r7, #14]
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	b25a      	sxtb	r2, r3
 8003e50:	7bbb      	ldrb	r3, [r7, #14]
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b25b      	sxtb	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003e5c:	f107 020e 	add.w	r2, r7, #14
 8003e60:	2301      	movs	r3, #1
 8003e62:	2137      	movs	r1, #55	; 0x37
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fc fbd8 	bl	800061a <a_mpu9250_write>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <mpu9250_set_fsync_interrupt+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	4805      	ldr	r0, [pc, #20]	; (8003e90 <mpu9250_set_fsync_interrupt+0x98>)
 8003e7a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <mpu9250_set_fsync_interrupt+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	0800b3b4 	.word	0x0800b3b4
 8003e90:	0800b3dc 	.word	0x0800b3dc

08003e94 <mpu9250_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_iic_bypass(mpu9250_handle_t *handle, mpu9250_bool_t enable)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <mpu9250_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e039      	b.n	8003f1e <mpu9250_set_iic_bypass+0x8a>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d001      	beq.n	8003eb8 <mpu9250_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e032      	b.n	8003f1e <mpu9250_set_iic_bypass+0x8a>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8003eb8:	f107 020e 	add.w	r2, r7, #14
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	2137      	movs	r1, #55	; 0x37
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fc fb79 	bl	80005b8 <a_mpu9250_read>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <mpu9250_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu9250: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	4814      	ldr	r0, [pc, #80]	; (8003f28 <mpu9250_set_iic_bypass+0x94>)
 8003ed6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e020      	b.n	8003f1e <mpu9250_set_iic_bypass+0x8a>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 8003edc:	7bbb      	ldrb	r3, [r7, #14]
 8003ede:	f023 0302 	bic.w	r3, r3, #2
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	b25a      	sxtb	r2, r3
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8003ef8:	f107 020e 	add.w	r2, r7, #14
 8003efc:	2301      	movs	r3, #1
 8003efe:	2137      	movs	r1, #55	; 0x37
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fc fb8a 	bl	800061a <a_mpu9250_write>
 8003f06:	4603      	mov	r3, r0
 8003f08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <mpu9250_set_iic_bypass+0x88>
    {
        handle->debug_print("mpu9250: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	4805      	ldr	r0, [pc, #20]	; (8003f2c <mpu9250_set_iic_bypass+0x98>)
 8003f16:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <mpu9250_set_iic_bypass+0x8a>
    }
    
    return 0;                                                                           /* success return 0 */
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	0800b3b4 	.word	0x0800b3b4
 8003f2c:	0800b3dc 	.word	0x0800b3dc

08003f30 <mpu9250_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu9250_set_interrupt(mpu9250_handle_t *handle, mpu9250_interrupt_t type, mpu9250_bool_t enable)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <mpu9250_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 8003f46:	2302      	movs	r3, #2
 8003f48:	e043      	b.n	8003fd2 <mpu9250_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d001      	beq.n	8003f58 <mpu9250_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 8003f54:	2303      	movs	r3, #3
 8003f56:	e03c      	b.n	8003fd2 <mpu9250_set_interrupt+0xa2>
    }
    
    res = a_mpu9250_read(handle, MPU9250_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8003f58:	f107 020e 	add.w	r2, r7, #14
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	2138      	movs	r1, #56	; 0x38
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc fb29 	bl	80005b8 <a_mpu9250_read>
 8003f66:	4603      	mov	r3, r0
 8003f68:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <mpu9250_set_interrupt+0x4c>
    {
        handle->debug_print("mpu9250: read interrupt enable failed.\n");                /* read interrupt enable failed */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	4819      	ldr	r0, [pc, #100]	; (8003fdc <mpu9250_set_interrupt+0xac>)
 8003f76:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e02a      	b.n	8003fd2 <mpu9250_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	b25b      	sxtb	r3, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	b25a      	sxtb	r2, r3
 8003f8a:	7bbb      	ldrb	r3, [r7, #14]
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	4013      	ands	r3, r2
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 8003f96:	78ba      	ldrb	r2, [r7, #2]
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	b25a      	sxtb	r2, r3
 8003fa0:	7bbb      	ldrb	r3, [r7, #14]
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	73bb      	strb	r3, [r7, #14]
    res = a_mpu9250_write(handle, MPU9250_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8003fac:	f107 020e 	add.w	r2, r7, #14
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	2138      	movs	r1, #56	; 0x38
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fc fb30 	bl	800061a <a_mpu9250_write>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <mpu9250_set_interrupt+0xa0>
    {
        handle->debug_print("mpu9250: write interrupt enable failed.\n");               /* write interrupt enable failed */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	4805      	ldr	r0, [pc, #20]	; (8003fe0 <mpu9250_set_interrupt+0xb0>)
 8003fca:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <mpu9250_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800b404 	.word	0x0800b404
 8003fe0:	0800b42c 	.word	0x0800b42c

08003fe4 <mpu9250_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu9250_basic_init(mpu9250_interface_t interface, mpu9250_address_t addr_pin)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	460a      	mov	r2, r1
 8003fee:	71fb      	strb	r3, [r7, #7]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU9250_LINK_INIT(&gs_handle, mpu9250_handle_t);
 8003ff4:	f240 4244 	movw	r2, #1092	; 0x444
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	48a5      	ldr	r0, [pc, #660]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8003ffc:	f005 fe72 	bl	8009ce4 <memset>
    DRIVER_MPU9250_LINK_IIC_INIT(&gs_handle, mpu9250_interface_iic_init);
 8004000:	4ba3      	ldr	r3, [pc, #652]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004002:	4aa4      	ldr	r2, [pc, #656]	; (8004294 <mpu9250_basic_init+0x2b0>)
 8004004:	605a      	str	r2, [r3, #4]
    DRIVER_MPU9250_LINK_IIC_DEINIT(&gs_handle, mpu9250_interface_iic_deinit);
 8004006:	4ba2      	ldr	r3, [pc, #648]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004008:	4aa3      	ldr	r2, [pc, #652]	; (8004298 <mpu9250_basic_init+0x2b4>)
 800400a:	609a      	str	r2, [r3, #8]
    DRIVER_MPU9250_LINK_IIC_READ(&gs_handle, mpu9250_interface_iic_read);
 800400c:	4ba0      	ldr	r3, [pc, #640]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800400e:	4aa3      	ldr	r2, [pc, #652]	; (800429c <mpu9250_basic_init+0x2b8>)
 8004010:	60da      	str	r2, [r3, #12]
    DRIVER_MPU9250_LINK_IIC_WRITE(&gs_handle, mpu9250_interface_iic_write);
 8004012:	4b9f      	ldr	r3, [pc, #636]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004014:	4aa2      	ldr	r2, [pc, #648]	; (80042a0 <mpu9250_basic_init+0x2bc>)
 8004016:	611a      	str	r2, [r3, #16]
    DRIVER_MPU9250_LINK_SPI_INIT(&gs_handle, mpu9250_interface_spi_init);
 8004018:	4b9d      	ldr	r3, [pc, #628]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800401a:	4aa2      	ldr	r2, [pc, #648]	; (80042a4 <mpu9250_basic_init+0x2c0>)
 800401c:	615a      	str	r2, [r3, #20]
    DRIVER_MPU9250_LINK_SPI_DEINIT(&gs_handle, mpu9250_interface_spi_deinit);
 800401e:	4b9c      	ldr	r3, [pc, #624]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004020:	4aa1      	ldr	r2, [pc, #644]	; (80042a8 <mpu9250_basic_init+0x2c4>)
 8004022:	619a      	str	r2, [r3, #24]
    DRIVER_MPU9250_LINK_SPI_READ(&gs_handle, mpu9250_interface_spi_read);
 8004024:	4b9a      	ldr	r3, [pc, #616]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004026:	4aa1      	ldr	r2, [pc, #644]	; (80042ac <mpu9250_basic_init+0x2c8>)
 8004028:	61da      	str	r2, [r3, #28]
    DRIVER_MPU9250_LINK_SPI_WRITE(&gs_handle, mpu9250_interface_spi_write);
 800402a:	4b99      	ldr	r3, [pc, #612]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800402c:	4aa0      	ldr	r2, [pc, #640]	; (80042b0 <mpu9250_basic_init+0x2cc>)
 800402e:	621a      	str	r2, [r3, #32]
    DRIVER_MPU9250_LINK_DELAY_MS(&gs_handle, mpu9250_interface_delay_ms);
 8004030:	4b97      	ldr	r3, [pc, #604]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004032:	4aa0      	ldr	r2, [pc, #640]	; (80042b4 <mpu9250_basic_init+0x2d0>)
 8004034:	625a      	str	r2, [r3, #36]	; 0x24
    DRIVER_MPU9250_LINK_DEBUG_PRINT(&gs_handle, mpu9250_interface_debug_print);
 8004036:	4b96      	ldr	r3, [pc, #600]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004038:	4a9f      	ldr	r2, [pc, #636]	; (80042b8 <mpu9250_basic_init+0x2d4>)
 800403a:	629a      	str	r2, [r3, #40]	; 0x28
    DRIVER_MPU9250_LINK_RECEIVE_CALLBACK(&gs_handle, mpu9250_interface_receive_callback);
 800403c:	4b94      	ldr	r3, [pc, #592]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800403e:	4a9f      	ldr	r2, [pc, #636]	; (80042bc <mpu9250_basic_init+0x2d8>)
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* set the interface */
    res = mpu9250_set_interface(&gs_handle, interface);
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	4619      	mov	r1, r3
 8004046:	4892      	ldr	r0, [pc, #584]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004048:	f7fc fb79 	bl	800073e <mpu9250_set_interface>
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <mpu9250_basic_init+0x7e>
    {
        mpu9250_interface_debug_print("mpu9250: set interface failed.\n");
 8004056:	489a      	ldr	r0, [pc, #616]	; (80042c0 <mpu9250_basic_init+0x2dc>)
 8004058:	f000 fd64 	bl	8004b24 <mpu9250_interface_debug_print>
       
        return 1;
 800405c:	2301      	movs	r3, #1
 800405e:	f000 bc0b 	b.w	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the addr pin */
    res = mpu9250_set_addr_pin(&gs_handle, addr_pin);
 8004062:	79bb      	ldrb	r3, [r7, #6]
 8004064:	4619      	mov	r1, r3
 8004066:	488a      	ldr	r0, [pc, #552]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004068:	f7fc fb7f 	bl	800076a <mpu9250_set_addr_pin>
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <mpu9250_basic_init+0x9c>
    {
        mpu9250_interface_debug_print("mpu9250: set addr pin failed.\n");
 8004076:	4893      	ldr	r0, [pc, #588]	; (80042c4 <mpu9250_basic_init+0x2e0>)
 8004078:	f000 fd54 	bl	8004b24 <mpu9250_interface_debug_print>
       
        return 1;
 800407c:	2301      	movs	r3, #1
 800407e:	e3fb      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* init */
    res = mpu9250_init(&gs_handle);
 8004080:	4883      	ldr	r0, [pc, #524]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004082:	f7fc fb87 	bl	8000794 <mpu9250_init>
 8004086:	4603      	mov	r3, r0
 8004088:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <mpu9250_basic_init+0xb6>
    {
        mpu9250_interface_debug_print("mpu9250: init failed.\n");
 8004090:	488d      	ldr	r0, [pc, #564]	; (80042c8 <mpu9250_basic_init+0x2e4>)
 8004092:	f000 fd47 	bl	8004b24 <mpu9250_interface_debug_print>
       
        return 1;
 8004096:	2301      	movs	r3, #1
 8004098:	e3ee      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* delay 100 ms */
    mpu9250_interface_delay_ms(100);
 800409a:	2064      	movs	r0, #100	; 0x64
 800409c:	f000 fd36 	bl	8004b0c <mpu9250_interface_delay_ms>
    
    /* disable sleep */
    res = mpu9250_set_sleep(&gs_handle, MPU9250_BOOL_FALSE);
 80040a0:	2100      	movs	r1, #0
 80040a2:	487b      	ldr	r0, [pc, #492]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80040a4:	f7fe ff4c 	bl	8002f40 <mpu9250_set_sleep>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <mpu9250_basic_init+0xde>
    {
        mpu9250_interface_debug_print("mpu9250: set sleep failed.\n");
 80040b2:	4886      	ldr	r0, [pc, #536]	; (80042cc <mpu9250_basic_init+0x2e8>)
 80040b4:	f000 fd36 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80040b8:	4875      	ldr	r0, [pc, #468]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80040ba:	f7fc fc97 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	e3da      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU9250_INTERFACE_SPI)
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d110      	bne.n	80040ea <mpu9250_basic_init+0x106>
    {
        /* disable iic */
        res = mpu9250_set_disable_iic_slave(&gs_handle, MPU9250_BOOL_TRUE);
 80040c8:	2101      	movs	r1, #1
 80040ca:	4871      	ldr	r0, [pc, #452]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80040cc:	f7fe fe02 	bl	8002cd4 <mpu9250_set_disable_iic_slave>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <mpu9250_basic_init+0x106>
        {
            mpu9250_interface_debug_print("mpu9250: set disable iic slave failed.\n");
 80040da:	487d      	ldr	r0, [pc, #500]	; (80042d0 <mpu9250_basic_init+0x2ec>)
 80040dc:	f000 fd22 	bl	8004b24 <mpu9250_interface_debug_print>
            (void)mpu9250_deinit(&gs_handle);
 80040e0:	486b      	ldr	r0, [pc, #428]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80040e2:	f7fc fc83 	bl	80009ec <mpu9250_deinit>
           
            return 1;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e3c6      	b.n	8004878 <mpu9250_basic_init+0x894>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu9250_set_fifo_1024kb(&gs_handle);
 80040ea:	4869      	ldr	r0, [pc, #420]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80040ec:	f7ff fad2 	bl	8003694 <mpu9250_set_fifo_1024kb>
 80040f0:	4603      	mov	r3, r0
 80040f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <mpu9250_basic_init+0x126>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo 1024kb failed.\n");
 80040fa:	4876      	ldr	r0, [pc, #472]	; (80042d4 <mpu9250_basic_init+0x2f0>)
 80040fc:	f000 fd12 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004100:	4863      	ldr	r0, [pc, #396]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004102:	f7fc fc73 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004106:	2301      	movs	r3, #1
 8004108:	e3b6      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default clock source */
    res = mpu9250_set_clock_source(&gs_handle, MPU9250_BASIC_DEFAULT_CLOCK_SOURCE);
 800410a:	2101      	movs	r1, #1
 800410c:	4860      	ldr	r0, [pc, #384]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800410e:	f7fe fe2f 	bl	8002d70 <mpu9250_set_clock_source>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <mpu9250_basic_init+0x148>
    {
        mpu9250_interface_debug_print("mpu9250: set clock source failed.\n");
 800411c:	486e      	ldr	r0, [pc, #440]	; (80042d8 <mpu9250_basic_init+0x2f4>)
 800411e:	f000 fd01 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004122:	485b      	ldr	r0, [pc, #364]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004124:	f7fc fc62 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004128:	2301      	movs	r3, #1
 800412a:	e3a5      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default rate */
    res = mpu9250_set_sample_rate_divider(&gs_handle, 1000 / (MPU9250_BASIC_DEFAULT_RATE - 1));
 800412c:	2101      	movs	r1, #1
 800412e:	4858      	ldr	r0, [pc, #352]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004130:	f7fe fffc 	bl	800312c <mpu9250_set_sample_rate_divider>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <mpu9250_basic_init+0x16a>
    {
        mpu9250_interface_debug_print("mpu9250: set sample rate divider failed.\n");
 800413e:	4867      	ldr	r0, [pc, #412]	; (80042dc <mpu9250_basic_init+0x2f8>)
 8004140:	f000 fcf0 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004144:	4852      	ldr	r0, [pc, #328]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004146:	f7fc fc51 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800414a:	2301      	movs	r3, #1
 800414c:	e394      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* enable temperature sensor */
    res = mpu9250_set_ptat(&gs_handle, MPU9250_BOOL_TRUE);
 800414e:	2101      	movs	r1, #1
 8004150:	484f      	ldr	r0, [pc, #316]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004152:	f7fe fe57 	bl	8002e04 <mpu9250_set_ptat>
 8004156:	4603      	mov	r3, r0
 8004158:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <mpu9250_basic_init+0x18c>
    {
        mpu9250_interface_debug_print("mpu9250: set ptat failed.\n");
 8004160:	485f      	ldr	r0, [pc, #380]	; (80042e0 <mpu9250_basic_init+0x2fc>)
 8004162:	f000 fcdf 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004166:	484a      	ldr	r0, [pc, #296]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004168:	f7fc fc40 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800416c:	2301      	movs	r3, #1
 800416e:	e383      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default cycle wake up */
    res = mpu9250_set_cycle_wake_up(&gs_handle, MPU9250_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8004170:	2100      	movs	r1, #0
 8004172:	4847      	ldr	r0, [pc, #284]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004174:	f7fe fe96 	bl	8002ea4 <mpu9250_set_cycle_wake_up>
 8004178:	4603      	mov	r3, r0
 800417a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <mpu9250_basic_init+0x1ae>
    {
        mpu9250_interface_debug_print("mpu9250: set cycle wake up failed.\n");
 8004182:	4858      	ldr	r0, [pc, #352]	; (80042e4 <mpu9250_basic_init+0x300>)
 8004184:	f000 fcce 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004188:	4841      	ldr	r0, [pc, #260]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800418a:	f7fc fc2f 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800418e:	2301      	movs	r3, #1
 8004190:	e372      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc x */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_X, MPU9250_BOOL_FALSE);
 8004192:	2200      	movs	r2, #0
 8004194:	2105      	movs	r1, #5
 8004196:	483e      	ldr	r0, [pc, #248]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004198:	f7fe ff6e 	bl	8003078 <mpu9250_set_standby_mode>
 800419c:	4603      	mov	r3, r0
 800419e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <mpu9250_basic_init+0x1d2>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 80041a6:	4850      	ldr	r0, [pc, #320]	; (80042e8 <mpu9250_basic_init+0x304>)
 80041a8:	f000 fcbc 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80041ac:	4838      	ldr	r0, [pc, #224]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80041ae:	f7fc fc1d 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e360      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc y */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_Y, MPU9250_BOOL_FALSE);
 80041b6:	2200      	movs	r2, #0
 80041b8:	2104      	movs	r1, #4
 80041ba:	4835      	ldr	r0, [pc, #212]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80041bc:	f7fe ff5c 	bl	8003078 <mpu9250_set_standby_mode>
 80041c0:	4603      	mov	r3, r0
 80041c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <mpu9250_basic_init+0x1f6>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 80041ca:	4847      	ldr	r0, [pc, #284]	; (80042e8 <mpu9250_basic_init+0x304>)
 80041cc:	f000 fcaa 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80041d0:	482f      	ldr	r0, [pc, #188]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80041d2:	f7fc fc0b 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e34e      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* enable acc z */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_ACC_Z, MPU9250_BOOL_FALSE);
 80041da:	2200      	movs	r2, #0
 80041dc:	2103      	movs	r1, #3
 80041de:	482c      	ldr	r0, [pc, #176]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80041e0:	f7fe ff4a 	bl	8003078 <mpu9250_set_standby_mode>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <mpu9250_basic_init+0x21a>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 80041ee:	483e      	ldr	r0, [pc, #248]	; (80042e8 <mpu9250_basic_init+0x304>)
 80041f0:	f000 fc98 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80041f4:	4826      	ldr	r0, [pc, #152]	; (8004290 <mpu9250_basic_init+0x2ac>)
 80041f6:	f7fc fbf9 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e33c      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro x */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_X, MPU9250_BOOL_FALSE);
 80041fe:	2200      	movs	r2, #0
 8004200:	2102      	movs	r1, #2
 8004202:	4823      	ldr	r0, [pc, #140]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004204:	f7fe ff38 	bl	8003078 <mpu9250_set_standby_mode>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <mpu9250_basic_init+0x23e>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 8004212:	4835      	ldr	r0, [pc, #212]	; (80042e8 <mpu9250_basic_init+0x304>)
 8004214:	f000 fc86 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004218:	481d      	ldr	r0, [pc, #116]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800421a:	f7fc fbe7 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800421e:	2301      	movs	r3, #1
 8004220:	e32a      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro y */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_Y, MPU9250_BOOL_FALSE);
 8004222:	2200      	movs	r2, #0
 8004224:	2101      	movs	r1, #1
 8004226:	481a      	ldr	r0, [pc, #104]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004228:	f7fe ff26 	bl	8003078 <mpu9250_set_standby_mode>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <mpu9250_basic_init+0x262>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 8004236:	482c      	ldr	r0, [pc, #176]	; (80042e8 <mpu9250_basic_init+0x304>)
 8004238:	f000 fc74 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800423c:	4814      	ldr	r0, [pc, #80]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800423e:	f7fc fbd5 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004242:	2301      	movs	r3, #1
 8004244:	e318      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* enable gyro z */
    res = mpu9250_set_standby_mode(&gs_handle, MPU9250_SOURCE_GYRO_Z, MPU9250_BOOL_FALSE);
 8004246:	2200      	movs	r2, #0
 8004248:	2100      	movs	r1, #0
 800424a:	4811      	ldr	r0, [pc, #68]	; (8004290 <mpu9250_basic_init+0x2ac>)
 800424c:	f7fe ff14 	bl	8003078 <mpu9250_set_standby_mode>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <mpu9250_basic_init+0x286>
    {
        mpu9250_interface_debug_print("mpu9250: set standby mode failed.\n");
 800425a:	4823      	ldr	r0, [pc, #140]	; (80042e8 <mpu9250_basic_init+0x304>)
 800425c:	f000 fc62 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004260:	480b      	ldr	r0, [pc, #44]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004262:	f7fc fbc3 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004266:	2301      	movs	r3, #1
 8004268:	e306      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable gyroscope x test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_X, MPU9250_BOOL_FALSE);
 800426a:	2200      	movs	r2, #0
 800426c:	2107      	movs	r1, #7
 800426e:	4808      	ldr	r0, [pc, #32]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004270:	f7ff f86c 	bl	800334c <mpu9250_set_gyroscope_test>
 8004274:	4603      	mov	r3, r0
 8004276:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d038      	beq.n	80042f0 <mpu9250_basic_init+0x30c>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 800427e:	481b      	ldr	r0, [pc, #108]	; (80042ec <mpu9250_basic_init+0x308>)
 8004280:	f000 fc50 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <mpu9250_basic_init+0x2ac>)
 8004286:	f7fc fbb1 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800428a:	2301      	movs	r3, #1
 800428c:	e2f4      	b.n	8004878 <mpu9250_basic_init+0x894>
 800428e:	bf00      	nop
 8004290:	2000007c 	.word	0x2000007c
 8004294:	080049ad 	.word	0x080049ad
 8004298:	080049bb 	.word	0x080049bb
 800429c:	080049cb 	.word	0x080049cb
 80042a0:	080049ef 	.word	0x080049ef
 80042a4:	08004a13 	.word	0x08004a13
 80042a8:	08004a23 	.word	0x08004a23
 80042ac:	08004a35 	.word	0x08004a35
 80042b0:	08004aa5 	.word	0x08004aa5
 80042b4:	08004b0d 	.word	0x08004b0d
 80042b8:	08004b25 	.word	0x08004b25
 80042bc:	08004bbd 	.word	0x08004bbd
 80042c0:	0800bf7c 	.word	0x0800bf7c
 80042c4:	0800bf9c 	.word	0x0800bf9c
 80042c8:	0800bfbc 	.word	0x0800bfbc
 80042cc:	0800bfd4 	.word	0x0800bfd4
 80042d0:	0800bff0 	.word	0x0800bff0
 80042d4:	0800c018 	.word	0x0800c018
 80042d8:	0800c03c 	.word	0x0800c03c
 80042dc:	0800c060 	.word	0x0800c060
 80042e0:	0800c08c 	.word	0x0800c08c
 80042e4:	0800c0a8 	.word	0x0800c0a8
 80042e8:	0800c0cc 	.word	0x0800c0cc
 80042ec:	0800c0f0 	.word	0x0800c0f0
    }
    
    /* disable gyroscope y test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_Y, MPU9250_BOOL_FALSE);
 80042f0:	2200      	movs	r2, #0
 80042f2:	2106      	movs	r1, #6
 80042f4:	48b0      	ldr	r0, [pc, #704]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80042f6:	f7ff f829 	bl	800334c <mpu9250_set_gyroscope_test>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <mpu9250_basic_init+0x330>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 8004304:	48ad      	ldr	r0, [pc, #692]	; (80045bc <mpu9250_basic_init+0x5d8>)
 8004306:	f000 fc0d 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800430a:	48ab      	ldr	r0, [pc, #684]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800430c:	f7fc fb6e 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004310:	2301      	movs	r3, #1
 8004312:	e2b1      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable gyroscope z test */
    res = mpu9250_set_gyroscope_test(&gs_handle, MPU9250_AXIS_Z, MPU9250_BOOL_FALSE);
 8004314:	2200      	movs	r2, #0
 8004316:	2105      	movs	r1, #5
 8004318:	48a7      	ldr	r0, [pc, #668]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800431a:	f7ff f817 	bl	800334c <mpu9250_set_gyroscope_test>
 800431e:	4603      	mov	r3, r0
 8004320:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <mpu9250_basic_init+0x354>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope test failed.\n");
 8004328:	48a4      	ldr	r0, [pc, #656]	; (80045bc <mpu9250_basic_init+0x5d8>)
 800432a:	f000 fbfb 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800432e:	48a2      	ldr	r0, [pc, #648]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004330:	f7fc fb5c 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004334:	2301      	movs	r3, #1
 8004336:	e29f      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer x test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_X, MPU9250_BOOL_FALSE);
 8004338:	2200      	movs	r2, #0
 800433a:	2107      	movs	r1, #7
 800433c:	489e      	ldr	r0, [pc, #632]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800433e:	f7ff f901 	bl	8003544 <mpu9250_set_accelerometer_test>
 8004342:	4603      	mov	r3, r0
 8004344:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <mpu9250_basic_init+0x378>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 800434c:	489c      	ldr	r0, [pc, #624]	; (80045c0 <mpu9250_basic_init+0x5dc>)
 800434e:	f000 fbe9 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004352:	4899      	ldr	r0, [pc, #612]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004354:	f7fc fb4a 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004358:	2301      	movs	r3, #1
 800435a:	e28d      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer y test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_Y, MPU9250_BOOL_FALSE);
 800435c:	2200      	movs	r2, #0
 800435e:	2106      	movs	r1, #6
 8004360:	4895      	ldr	r0, [pc, #596]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004362:	f7ff f8ef 	bl	8003544 <mpu9250_set_accelerometer_test>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <mpu9250_basic_init+0x39c>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 8004370:	4893      	ldr	r0, [pc, #588]	; (80045c0 <mpu9250_basic_init+0x5dc>)
 8004372:	f000 fbd7 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004376:	4890      	ldr	r0, [pc, #576]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004378:	f7fc fb38 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800437c:	2301      	movs	r3, #1
 800437e:	e27b      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable accelerometer z test */
    res = mpu9250_set_accelerometer_test(&gs_handle, MPU9250_AXIS_Z, MPU9250_BOOL_FALSE);
 8004380:	2200      	movs	r2, #0
 8004382:	2105      	movs	r1, #5
 8004384:	488c      	ldr	r0, [pc, #560]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004386:	f7ff f8dd 	bl	8003544 <mpu9250_set_accelerometer_test>
 800438a:	4603      	mov	r3, r0
 800438c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <mpu9250_basic_init+0x3c0>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer test failed.\n");
 8004394:	488a      	ldr	r0, [pc, #552]	; (80045c0 <mpu9250_basic_init+0x5dc>)
 8004396:	f000 fbc5 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800439a:	4887      	ldr	r0, [pc, #540]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800439c:	f7fc fb26 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e269      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable fifo */
    res = mpu9250_set_fifo(&gs_handle, MPU9250_BOOL_FALSE);
 80043a4:	2100      	movs	r1, #0
 80043a6:	4884      	ldr	r0, [pc, #528]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80043a8:	f7fe fbf8 	bl	8002b9c <mpu9250_set_fifo>
 80043ac:	4603      	mov	r3, r0
 80043ae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <mpu9250_basic_init+0x3e2>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo failed.\n");
 80043b6:	4883      	ldr	r0, [pc, #524]	; (80045c4 <mpu9250_basic_init+0x5e0>)
 80043b8:	f000 fbb4 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80043bc:	487e      	ldr	r0, [pc, #504]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80043be:	f7fc fb15 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e258      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable temp fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_TEMP, MPU9250_BOOL_FALSE);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2107      	movs	r1, #7
 80043ca:	487b      	ldr	r0, [pc, #492]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80043cc:	f7ff fb32 	bl	8003a34 <mpu9250_set_fifo_enable>
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <mpu9250_basic_init+0x406>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 80043da:	487b      	ldr	r0, [pc, #492]	; (80045c8 <mpu9250_basic_init+0x5e4>)
 80043dc:	f000 fba2 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80043e0:	4875      	ldr	r0, [pc, #468]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80043e2:	f7fc fb03 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e246      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable xg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_XG, MPU9250_BOOL_FALSE);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2106      	movs	r1, #6
 80043ee:	4872      	ldr	r0, [pc, #456]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80043f0:	f7ff fb20 	bl	8003a34 <mpu9250_set_fifo_enable>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <mpu9250_basic_init+0x42a>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 80043fe:	4872      	ldr	r0, [pc, #456]	; (80045c8 <mpu9250_basic_init+0x5e4>)
 8004400:	f000 fb90 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004404:	486c      	ldr	r0, [pc, #432]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004406:	f7fc faf1 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800440a:	2301      	movs	r3, #1
 800440c:	e234      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable yg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_YG, MPU9250_BOOL_FALSE);
 800440e:	2200      	movs	r2, #0
 8004410:	2105      	movs	r1, #5
 8004412:	4869      	ldr	r0, [pc, #420]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004414:	f7ff fb0e 	bl	8003a34 <mpu9250_set_fifo_enable>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <mpu9250_basic_init+0x44e>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 8004422:	4869      	ldr	r0, [pc, #420]	; (80045c8 <mpu9250_basic_init+0x5e4>)
 8004424:	f000 fb7e 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004428:	4863      	ldr	r0, [pc, #396]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800442a:	f7fc fadf 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800442e:	2301      	movs	r3, #1
 8004430:	e222      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable zg fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_ZG, MPU9250_BOOL_FALSE);
 8004432:	2200      	movs	r2, #0
 8004434:	2104      	movs	r1, #4
 8004436:	4860      	ldr	r0, [pc, #384]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004438:	f7ff fafc 	bl	8003a34 <mpu9250_set_fifo_enable>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <mpu9250_basic_init+0x472>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 8004446:	4860      	ldr	r0, [pc, #384]	; (80045c8 <mpu9250_basic_init+0x5e4>)
 8004448:	f000 fb6c 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800444c:	485a      	ldr	r0, [pc, #360]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800444e:	f7fc facd 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004452:	2301      	movs	r3, #1
 8004454:	e210      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* disable accel fifo */
    res = mpu9250_set_fifo_enable(&gs_handle, MPU9250_FIFO_ACCEL, MPU9250_BOOL_FALSE);
 8004456:	2200      	movs	r2, #0
 8004458:	2103      	movs	r1, #3
 800445a:	4857      	ldr	r0, [pc, #348]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800445c:	f7ff faea 	bl	8003a34 <mpu9250_set_fifo_enable>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <mpu9250_basic_init+0x496>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo enable failed.\n");
 800446a:	4857      	ldr	r0, [pc, #348]	; (80045c8 <mpu9250_basic_init+0x5e4>)
 800446c:	f000 fb5a 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004470:	4851      	ldr	r0, [pc, #324]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004472:	f7fc fabb 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004476:	2301      	movs	r3, #1
 8004478:	e1fe      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt level */
    res = mpu9250_set_interrupt_level(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 800447a:	2101      	movs	r1, #1
 800447c:	484e      	ldr	r0, [pc, #312]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800447e:	f7ff fb33 	bl	8003ae8 <mpu9250_set_interrupt_level>
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <mpu9250_basic_init+0x4b8>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt level failed.\n");
 800448c:	484f      	ldr	r0, [pc, #316]	; (80045cc <mpu9250_basic_init+0x5e8>)
 800448e:	f000 fb49 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004492:	4849      	ldr	r0, [pc, #292]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004494:	f7fc faaa 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004498:	2301      	movs	r3, #1
 800449a:	e1ed      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default pin type */
    res = mpu9250_set_interrupt_pin_type(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 800449c:	2100      	movs	r1, #0
 800449e:	4846      	ldr	r0, [pc, #280]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80044a0:	f7ff fb70 	bl	8003b84 <mpu9250_set_interrupt_pin_type>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <mpu9250_basic_init+0x4da>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt pin type failed.\n");
 80044ae:	4848      	ldr	r0, [pc, #288]	; (80045d0 <mpu9250_basic_init+0x5ec>)
 80044b0:	f000 fb38 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80044b4:	4840      	ldr	r0, [pc, #256]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80044b6:	f7fc fa99 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e1dc      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default motion interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_MOTION, MPU9250_BASIC_DEFAULT_INTERRUPT_MOTION);
 80044be:	2200      	movs	r2, #0
 80044c0:	2106      	movs	r1, #6
 80044c2:	483d      	ldr	r0, [pc, #244]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80044c4:	f7ff fd34 	bl	8003f30 <mpu9250_set_interrupt>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <mpu9250_basic_init+0x4fe>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 80044d2:	4840      	ldr	r0, [pc, #256]	; (80045d4 <mpu9250_basic_init+0x5f0>)
 80044d4:	f000 fb26 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80044d8:	4837      	ldr	r0, [pc, #220]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80044da:	f7fc fa87 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	e1ca      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_FIFO_OVERFLOW, MPU9250_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 80044e2:	2200      	movs	r2, #0
 80044e4:	2104      	movs	r1, #4
 80044e6:	4834      	ldr	r0, [pc, #208]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80044e8:	f7ff fd22 	bl	8003f30 <mpu9250_set_interrupt>
 80044ec:	4603      	mov	r3, r0
 80044ee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <mpu9250_basic_init+0x522>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 80044f6:	4837      	ldr	r0, [pc, #220]	; (80045d4 <mpu9250_basic_init+0x5f0>)
 80044f8:	f000 fb14 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80044fc:	482e      	ldr	r0, [pc, #184]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80044fe:	f7fc fa75 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004502:	2301      	movs	r3, #1
 8004504:	e1b8      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default dmp interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_DMP, MPU9250_BASIC_DEFAULT_INTERRUPT_DMP);
 8004506:	2200      	movs	r2, #0
 8004508:	2101      	movs	r1, #1
 800450a:	482b      	ldr	r0, [pc, #172]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800450c:	f7ff fd10 	bl	8003f30 <mpu9250_set_interrupt>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <mpu9250_basic_init+0x546>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 800451a:	482e      	ldr	r0, [pc, #184]	; (80045d4 <mpu9250_basic_init+0x5f0>)
 800451c:	f000 fb02 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004520:	4825      	ldr	r0, [pc, #148]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004522:	f7fc fa63 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004526:	2301      	movs	r3, #1
 8004528:	e1a6      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync int interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_FSYNC_INT, MPU9250_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 800452a:	2200      	movs	r2, #0
 800452c:	2103      	movs	r1, #3
 800452e:	4822      	ldr	r0, [pc, #136]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004530:	f7ff fcfe 	bl	8003f30 <mpu9250_set_interrupt>
 8004534:	4603      	mov	r3, r0
 8004536:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <mpu9250_basic_init+0x56a>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 800453e:	4825      	ldr	r0, [pc, #148]	; (80045d4 <mpu9250_basic_init+0x5f0>)
 8004540:	f000 faf0 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004544:	481c      	ldr	r0, [pc, #112]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004546:	f7fc fa51 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800454a:	2301      	movs	r3, #1
 800454c:	e194      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default data ready interrupt */
    res = mpu9250_set_interrupt(&gs_handle, MPU9250_INTERRUPT_DATA_READY, MPU9250_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	4819      	ldr	r0, [pc, #100]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004554:	f7ff fcec 	bl	8003f30 <mpu9250_set_interrupt>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <mpu9250_basic_init+0x58e>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt failed.\n");
 8004562:	481c      	ldr	r0, [pc, #112]	; (80045d4 <mpu9250_basic_init+0x5f0>)
 8004564:	f000 fade 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004568:	4813      	ldr	r0, [pc, #76]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800456a:	f7fc fa3f 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800456e:	2301      	movs	r3, #1
 8004570:	e182      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt latch */
    res = mpu9250_set_interrupt_latch(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_LATCH);
 8004572:	2101      	movs	r1, #1
 8004574:	4810      	ldr	r0, [pc, #64]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004576:	f7ff fb53 	bl	8003c20 <mpu9250_set_interrupt_latch>
 800457a:	4603      	mov	r3, r0
 800457c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <mpu9250_basic_init+0x5b0>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt latch failed.\n");
 8004584:	4814      	ldr	r0, [pc, #80]	; (80045d8 <mpu9250_basic_init+0x5f4>)
 8004586:	f000 facd 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800458a:	480b      	ldr	r0, [pc, #44]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 800458c:	f7fc fa2e 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004590:	2301      	movs	r3, #1
 8004592:	e171      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default interrupt read clear */
    res = mpu9250_set_interrupt_read_clear(&gs_handle, MPU9250_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8004594:	2101      	movs	r1, #1
 8004596:	4808      	ldr	r0, [pc, #32]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 8004598:	f7ff fb92 	bl	8003cc0 <mpu9250_set_interrupt_read_clear>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01c      	beq.n	80045e0 <mpu9250_basic_init+0x5fc>
    {
        mpu9250_interface_debug_print("mpu9250: set interrupt read clear failed.\n");
 80045a6:	480d      	ldr	r0, [pc, #52]	; (80045dc <mpu9250_basic_init+0x5f8>)
 80045a8:	f000 fabc 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <mpu9250_basic_init+0x5d4>)
 80045ae:	f7fc fa1d 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e160      	b.n	8004878 <mpu9250_basic_init+0x894>
 80045b6:	bf00      	nop
 80045b8:	2000007c 	.word	0x2000007c
 80045bc:	0800c0f0 	.word	0x0800c0f0
 80045c0:	0800c118 	.word	0x0800c118
 80045c4:	0800c144 	.word	0x0800c144
 80045c8:	0800c160 	.word	0x0800c160
 80045cc:	0800c184 	.word	0x0800c184
 80045d0:	0800c1ac 	.word	0x0800c1ac
 80045d4:	0800c1d8 	.word	0x0800c1d8
 80045d8:	0800c1f8 	.word	0x0800c1f8
 80045dc:	0800c220 	.word	0x0800c220
    }
    
    /* set the extern sync */
    res = mpu9250_set_extern_sync(&gs_handle, MPU9250_BASIC_DEFAULT_EXTERN_SYNC);
 80045e0:	2100      	movs	r1, #0
 80045e2:	48a7      	ldr	r0, [pc, #668]	; (8004880 <mpu9250_basic_init+0x89c>)
 80045e4:	f7fe fdcc 	bl	8003180 <mpu9250_set_extern_sync>
 80045e8:	4603      	mov	r3, r0
 80045ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <mpu9250_basic_init+0x61e>
    {
        mpu9250_interface_debug_print("mpu9250: set extern sync failed.\n");
 80045f2:	48a4      	ldr	r0, [pc, #656]	; (8004884 <mpu9250_basic_init+0x8a0>)
 80045f4:	f000 fa96 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80045f8:	48a1      	ldr	r0, [pc, #644]	; (8004880 <mpu9250_basic_init+0x89c>)
 80045fa:	f7fc f9f7 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80045fe:	2301      	movs	r3, #1
 8004600:	e13a      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync interrupt */
    res = mpu9250_set_fsync_interrupt(&gs_handle, MPU9250_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8004602:	2100      	movs	r1, #0
 8004604:	489e      	ldr	r0, [pc, #632]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004606:	f7ff fbf7 	bl	8003df8 <mpu9250_set_fsync_interrupt>
 800460a:	4603      	mov	r3, r0
 800460c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <mpu9250_basic_init+0x640>
    {
        mpu9250_interface_debug_print("mpu9250: set fsync interrupt failed.\n");
 8004614:	489c      	ldr	r0, [pc, #624]	; (8004888 <mpu9250_basic_init+0x8a4>)
 8004616:	f000 fa85 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800461a:	4899      	ldr	r0, [pc, #612]	; (8004880 <mpu9250_basic_init+0x89c>)
 800461c:	f7fc f9e6 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004620:	2301      	movs	r3, #1
 8004622:	e129      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fsync interrupt level */
    res = mpu9250_set_fsync_interrupt_level(&gs_handle, MPU9250_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8004624:	2101      	movs	r1, #1
 8004626:	4896      	ldr	r0, [pc, #600]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004628:	f7ff fb98 	bl	8003d5c <mpu9250_set_fsync_interrupt_level>
 800462c:	4603      	mov	r3, r0
 800462e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <mpu9250_basic_init+0x662>
    {
        mpu9250_interface_debug_print("mpu9250: set fsync interrupt level failed.\n");
 8004636:	4895      	ldr	r0, [pc, #596]	; (800488c <mpu9250_basic_init+0x8a8>)
 8004638:	f000 fa74 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800463c:	4890      	ldr	r0, [pc, #576]	; (8004880 <mpu9250_basic_init+0x89c>)
 800463e:	f7fc f9d5 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004642:	2301      	movs	r3, #1
 8004644:	e118      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default iic master */
    res = mpu9250_set_iic_master(&gs_handle, MPU9250_BASIC_DEFAULT_IIC_MASTER);
 8004646:	2100      	movs	r1, #0
 8004648:	488d      	ldr	r0, [pc, #564]	; (8004880 <mpu9250_basic_init+0x89c>)
 800464a:	f7fe faf5 	bl	8002c38 <mpu9250_set_iic_master>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <mpu9250_basic_init+0x684>
    {
        mpu9250_interface_debug_print("mpu9250: set iic master failed.\n");
 8004658:	488d      	ldr	r0, [pc, #564]	; (8004890 <mpu9250_basic_init+0x8ac>)
 800465a:	f000 fa63 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800465e:	4888      	ldr	r0, [pc, #544]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004660:	f7fc f9c4 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004664:	2301      	movs	r3, #1
 8004666:	e107      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default iic bypass */
    res = mpu9250_set_iic_bypass(&gs_handle, MPU9250_BASIC_DEFAULT_IIC_BYPASS);
 8004668:	2100      	movs	r1, #0
 800466a:	4885      	ldr	r0, [pc, #532]	; (8004880 <mpu9250_basic_init+0x89c>)
 800466c:	f7ff fc12 	bl	8003e94 <mpu9250_set_iic_bypass>
 8004670:	4603      	mov	r3, r0
 8004672:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <mpu9250_basic_init+0x6a6>
    {
        mpu9250_interface_debug_print("mpu9250: set iic bypass failed.\n");
 800467a:	4886      	ldr	r0, [pc, #536]	; (8004894 <mpu9250_basic_init+0x8b0>)
 800467c:	f000 fa52 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004680:	487f      	ldr	r0, [pc, #508]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004682:	f7fc f9b3 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004686:	2301      	movs	r3, #1
 8004688:	e0f6      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer range */
    res = mpu9250_set_accelerometer_range(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 800468a:	2100      	movs	r1, #0
 800468c:	487c      	ldr	r0, [pc, #496]	; (8004880 <mpu9250_basic_init+0x89c>)
 800468e:	f7fe ffb3 	bl	80035f8 <mpu9250_set_accelerometer_range>
 8004692:	4603      	mov	r3, r0
 8004694:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <mpu9250_basic_init+0x6c8>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer range failed.\n");
 800469c:	487e      	ldr	r0, [pc, #504]	; (8004898 <mpu9250_basic_init+0x8b4>)
 800469e:	f000 fa41 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80046a2:	4877      	ldr	r0, [pc, #476]	; (8004880 <mpu9250_basic_init+0x89c>)
 80046a4:	f7fc f9a2 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0e5      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyroscope range */
    res = mpu9250_set_gyroscope_range(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_RANGE);
 80046ac:	2100      	movs	r1, #0
 80046ae:	4874      	ldr	r0, [pc, #464]	; (8004880 <mpu9250_basic_init+0x89c>)
 80046b0:	f7fe fea6 	bl	8003400 <mpu9250_set_gyroscope_range>
 80046b4:	4603      	mov	r3, r0
 80046b6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <mpu9250_basic_init+0x6ea>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope range failed.\n");
 80046be:	4877      	ldr	r0, [pc, #476]	; (800489c <mpu9250_basic_init+0x8b8>)
 80046c0:	f000 fa30 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80046c4:	486e      	ldr	r0, [pc, #440]	; (8004880 <mpu9250_basic_init+0x89c>)
 80046c6:	f7fc f991 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e0d4      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyro standby */
    res = mpu9250_set_gyro_standby(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 80046ce:	2100      	movs	r1, #0
 80046d0:	486b      	ldr	r0, [pc, #428]	; (8004880 <mpu9250_basic_init+0x89c>)
 80046d2:	f7fe fc83 	bl	8002fdc <mpu9250_set_gyro_standby>
 80046d6:	4603      	mov	r3, r0
 80046d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <mpu9250_basic_init+0x70c>
    {
        mpu9250_interface_debug_print("mpu9250: set gyro standby failed.\n");
 80046e0:	486f      	ldr	r0, [pc, #444]	; (80048a0 <mpu9250_basic_init+0x8bc>)
 80046e2:	f000 fa1f 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80046e6:	4866      	ldr	r0, [pc, #408]	; (8004880 <mpu9250_basic_init+0x89c>)
 80046e8:	f7fc f980 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0c3      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default fifo mode */
    res = mpu9250_set_fifo_mode(&gs_handle, MPU9250_BASIC_DEFAULT_FIFO_MODE);
 80046f0:	2101      	movs	r1, #1
 80046f2:	4863      	ldr	r0, [pc, #396]	; (8004880 <mpu9250_basic_init+0x89c>)
 80046f4:	f7fe fddc 	bl	80032b0 <mpu9250_set_fifo_mode>
 80046f8:	4603      	mov	r3, r0
 80046fa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <mpu9250_basic_init+0x72e>
    {
        mpu9250_interface_debug_print("mpu9250: set fifo mode failed.\n");
 8004702:	4868      	ldr	r0, [pc, #416]	; (80048a4 <mpu9250_basic_init+0x8c0>)
 8004704:	f000 fa0e 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004708:	485d      	ldr	r0, [pc, #372]	; (8004880 <mpu9250_basic_init+0x89c>)
 800470a:	f7fc f96f 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 800470e:	2301      	movs	r3, #1
 8004710:	e0b2      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default gyroscope choice */
    res = mpu9250_set_gyroscope_choice(&gs_handle, MPU9250_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 8004712:	2100      	movs	r1, #0
 8004714:	485a      	ldr	r0, [pc, #360]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004716:	f7fe fec1 	bl	800349c <mpu9250_set_gyroscope_choice>
 800471a:	4603      	mov	r3, r0
 800471c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <mpu9250_basic_init+0x750>
    {
        mpu9250_interface_debug_print("mpu9250: set gyroscope choice failed.\n");
 8004724:	4860      	ldr	r0, [pc, #384]	; (80048a8 <mpu9250_basic_init+0x8c4>)
 8004726:	f000 f9fd 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800472a:	4855      	ldr	r0, [pc, #340]	; (8004880 <mpu9250_basic_init+0x89c>)
 800472c:	f7fc f95e 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004730:	2301      	movs	r3, #1
 8004732:	e0a1      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default low pass filter */
    res = mpu9250_set_low_pass_filter(&gs_handle, MPU9250_BASIC_DEFAULT_LOW_PASS_FILTER);
 8004734:	2100      	movs	r1, #0
 8004736:	4852      	ldr	r0, [pc, #328]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004738:	f7fe fd70 	bl	800321c <mpu9250_set_low_pass_filter>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <mpu9250_basic_init+0x772>
    {
        mpu9250_interface_debug_print("mpu9250: set low pass filter failed.\n");
 8004746:	4859      	ldr	r0, [pc, #356]	; (80048ac <mpu9250_basic_init+0x8c8>)
 8004748:	f000 f9ec 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800474c:	484c      	ldr	r0, [pc, #304]	; (8004880 <mpu9250_basic_init+0x89c>)
 800474e:	f7fc f94d 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004752:	2301      	movs	r3, #1
 8004754:	e090      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer choice */
    res = mpu9250_set_accelerometer_choice(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 8004756:	2100      	movs	r1, #0
 8004758:	4849      	ldr	r0, [pc, #292]	; (8004880 <mpu9250_basic_init+0x89c>)
 800475a:	f7fe ffe3 	bl	8003724 <mpu9250_set_accelerometer_choice>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <mpu9250_basic_init+0x794>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer choice failed.\n");
 8004768:	4851      	ldr	r0, [pc, #324]	; (80048b0 <mpu9250_basic_init+0x8cc>)
 800476a:	f000 f9db 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 800476e:	4844      	ldr	r0, [pc, #272]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004770:	f7fc f93c 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004774:	2301      	movs	r3, #1
 8004776:	e07f      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu9250_set_accelerometer_low_pass_filter(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 8004778:	2100      	movs	r1, #0
 800477a:	4841      	ldr	r0, [pc, #260]	; (8004880 <mpu9250_basic_init+0x89c>)
 800477c:	f7ff f82a 	bl	80037d4 <mpu9250_set_accelerometer_low_pass_filter>
 8004780:	4603      	mov	r3, r0
 8004782:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <mpu9250_basic_init+0x7b6>
    {
        mpu9250_interface_debug_print("mpu9250: set accelerometer low pass filter failed.\n");
 800478a:	484a      	ldr	r0, [pc, #296]	; (80048b4 <mpu9250_basic_init+0x8d0>)
 800478c:	f000 f9ca 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 8004790:	483b      	ldr	r0, [pc, #236]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004792:	f7fc f92b 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 8004796:	2301      	movs	r3, #1
 8004798:	e06e      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default low power accel output rate */
    res = mpu9250_set_low_power_accel_output_rate(&gs_handle, MPU9250_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 800479a:	2108      	movs	r1, #8
 800479c:	4838      	ldr	r0, [pc, #224]	; (8004880 <mpu9250_basic_init+0x89c>)
 800479e:	f7ff f863 	bl	8003868 <mpu9250_set_low_power_accel_output_rate>
 80047a2:	4603      	mov	r3, r0
 80047a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <mpu9250_basic_init+0x7d8>
    {
        mpu9250_interface_debug_print("mpu9250: set low power accel output rate failed.\n");
 80047ac:	4842      	ldr	r0, [pc, #264]	; (80048b8 <mpu9250_basic_init+0x8d4>)
 80047ae:	f000 f9b9 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80047b2:	4833      	ldr	r0, [pc, #204]	; (8004880 <mpu9250_basic_init+0x89c>)
 80047b4:	f7fc f91a 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e05d      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default wake on motion */
    res = mpu9250_set_wake_on_motion(&gs_handle, MPU9250_BASIC_DEFAULT_WAKE_ON_MOTION);
 80047bc:	2100      	movs	r1, #0
 80047be:	4830      	ldr	r0, [pc, #192]	; (8004880 <mpu9250_basic_init+0x89c>)
 80047c0:	f7ff f89c 	bl	80038fc <mpu9250_set_wake_on_motion>
 80047c4:	4603      	mov	r3, r0
 80047c6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <mpu9250_basic_init+0x7fa>
    {
        mpu9250_interface_debug_print("mpu9250: set wake on motion failed.\n");
 80047ce:	483b      	ldr	r0, [pc, #236]	; (80048bc <mpu9250_basic_init+0x8d8>)
 80047d0:	f000 f9a8 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80047d4:	482a      	ldr	r0, [pc, #168]	; (8004880 <mpu9250_basic_init+0x89c>)
 80047d6:	f7fc f909 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80047da:	2301      	movs	r3, #1
 80047dc:	e04c      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu9250_set_accel_compare_with_previous_sample(&gs_handle, MPU9250_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 80047de:	2101      	movs	r1, #1
 80047e0:	4827      	ldr	r0, [pc, #156]	; (8004880 <mpu9250_basic_init+0x89c>)
 80047e2:	f7ff f8d9 	bl	8003998 <mpu9250_set_accel_compare_with_previous_sample>
 80047e6:	4603      	mov	r3, r0
 80047e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <mpu9250_basic_init+0x81c>
    {
        mpu9250_interface_debug_print("mpu9250: set accel compare with previous sample failed.\n");
 80047f0:	4833      	ldr	r0, [pc, #204]	; (80048c0 <mpu9250_basic_init+0x8dc>)
 80047f2:	f000 f997 	bl	8004b24 <mpu9250_interface_debug_print>
        (void)mpu9250_deinit(&gs_handle);
 80047f6:	4822      	ldr	r0, [pc, #136]	; (8004880 <mpu9250_basic_init+0x89c>)
 80047f8:	f7fc f8f8 	bl	80009ec <mpu9250_deinit>
       
        return 1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e03b      	b.n	8004878 <mpu9250_basic_init+0x894>
    }
    
    /* if iic interface */
    if (interface == MPU9250_INTERFACE_IIC)
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d137      	bne.n	8004876 <mpu9250_basic_init+0x892>
    {
        /* mag init */
        res = mpu9250_mag_init(&gs_handle); 
 8004806:	481e      	ldr	r0, [pc, #120]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004808:	f7fd fefa 	bl	8002600 <mpu9250_mag_init>
 800480c:	4603      	mov	r3, r0
 800480e:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <mpu9250_basic_init+0x842>
        {
            mpu9250_interface_debug_print("mpu9250: mag init failed.\n");
 8004816:	482b      	ldr	r0, [pc, #172]	; (80048c4 <mpu9250_basic_init+0x8e0>)
 8004818:	f000 f984 	bl	8004b24 <mpu9250_interface_debug_print>
            (void)mpu9250_deinit(&gs_handle);
 800481c:	4818      	ldr	r0, [pc, #96]	; (8004880 <mpu9250_basic_init+0x89c>)
 800481e:	f7fc f8e5 	bl	80009ec <mpu9250_deinit>
           
            return 1;
 8004822:	2301      	movs	r3, #1
 8004824:	e028      	b.n	8004878 <mpu9250_basic_init+0x894>
        }
        
        /* set the mag default mode */
        res = mpu9250_mag_set_mode(&gs_handle, MPU9250_BASIC_DEFAULT_MAGNETOMETER_MODE);
 8004826:	2106      	movs	r1, #6
 8004828:	4815      	ldr	r0, [pc, #84]	; (8004880 <mpu9250_basic_init+0x89c>)
 800482a:	f7fe f907 	bl	8002a3c <mpu9250_mag_set_mode>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <mpu9250_basic_init+0x86a>
        {
            mpu9250_interface_debug_print("mpu9250: mag set mode failed.\n");
 8004838:	4823      	ldr	r0, [pc, #140]	; (80048c8 <mpu9250_basic_init+0x8e4>)
 800483a:	f000 f973 	bl	8004b24 <mpu9250_interface_debug_print>
            (void)mpu9250_mag_deinit(&gs_handle); 
 800483e:	4810      	ldr	r0, [pc, #64]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004840:	f7fe f828 	bl	8002894 <mpu9250_mag_deinit>
            (void)mpu9250_deinit(&gs_handle);
 8004844:	480e      	ldr	r0, [pc, #56]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004846:	f7fc f8d1 	bl	80009ec <mpu9250_deinit>
           
            return 1;
 800484a:	2301      	movs	r3, #1
 800484c:	e014      	b.n	8004878 <mpu9250_basic_init+0x894>
        }
        
        /* set the mag default bits */
        res = mpu9250_mag_set_bits(&gs_handle, MPU9250_BASIC_DEFAULT_MAGNETOMETER_BITS);
 800484e:	2101      	movs	r1, #1
 8004850:	480b      	ldr	r0, [pc, #44]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004852:	f7fe f949 	bl	8002ae8 <mpu9250_mag_set_bits>
 8004856:	4603      	mov	r3, r0
 8004858:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <mpu9250_basic_init+0x892>
        {
            mpu9250_interface_debug_print("mpu9250: mag set bits failed.\n");
 8004860:	481a      	ldr	r0, [pc, #104]	; (80048cc <mpu9250_basic_init+0x8e8>)
 8004862:	f000 f95f 	bl	8004b24 <mpu9250_interface_debug_print>
            (void)mpu9250_mag_deinit(&gs_handle); 
 8004866:	4806      	ldr	r0, [pc, #24]	; (8004880 <mpu9250_basic_init+0x89c>)
 8004868:	f7fe f814 	bl	8002894 <mpu9250_mag_deinit>
            (void)mpu9250_deinit(&gs_handle);
 800486c:	4804      	ldr	r0, [pc, #16]	; (8004880 <mpu9250_basic_init+0x89c>)
 800486e:	f7fc f8bd 	bl	80009ec <mpu9250_deinit>
           
            return 1;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <mpu9250_basic_init+0x894>
        }
    }
    
    return 0;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000007c 	.word	0x2000007c
 8004884:	0800c24c 	.word	0x0800c24c
 8004888:	0800c270 	.word	0x0800c270
 800488c:	0800c298 	.word	0x0800c298
 8004890:	0800c2c4 	.word	0x0800c2c4
 8004894:	0800c2e8 	.word	0x0800c2e8
 8004898:	0800c30c 	.word	0x0800c30c
 800489c:	0800c338 	.word	0x0800c338
 80048a0:	0800c360 	.word	0x0800c360
 80048a4:	0800c384 	.word	0x0800c384
 80048a8:	0800c3a4 	.word	0x0800c3a4
 80048ac:	0800c3cc 	.word	0x0800c3cc
 80048b0:	0800c3f4 	.word	0x0800c3f4
 80048b4:	0800c420 	.word	0x0800c420
 80048b8:	0800c454 	.word	0x0800c454
 80048bc:	0800c488 	.word	0x0800c488
 80048c0:	0800c4b0 	.word	0x0800c4b0
 80048c4:	0800c4ec 	.word	0x0800c4ec
 80048c8:	0800c508 	.word	0x0800c508
 80048cc:	0800c528 	.word	0x0800c528

080048d0 <mpu9250_basic_read_temperature>:
 *             - 0 success
 *             - 1 read temperature failed
 * @note       none
 */
uint8_t mpu9250_basic_read_temperature(int16_t raw, float *degrees)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	80fb      	strh	r3, [r7, #6]
    /* read temperature */
    if (mpu9250_read_temperature(&gs_handle, &raw, degrees) != 0)
 80048dc:	1dbb      	adds	r3, r7, #6
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	4619      	mov	r1, r3
 80048e2:	4806      	ldr	r0, [pc, #24]	; (80048fc <mpu9250_basic_read_temperature+0x2c>)
 80048e4:	f7fd fe44 	bl	8002570 <mpu9250_read_temperature>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <mpu9250_basic_read_temperature+0x22>
    {
        return 1;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <mpu9250_basic_read_temperature+0x24>
    }
    
    return 0;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	2000007c 	.word	0x2000007c

08004900 <mpu9250_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_basic_read(int16_t res[9])
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b096      	sub	sp, #88	; 0x58
 8004904:	af04      	add	r7, sp, #16
 8004906:	6078      	str	r0, [r7, #4]
    float accel[3];
    float gyro[3];
    float mag[3];
    
    /* set 1 */
    len = 1;
 8004908:	2301      	movs	r3, #1
 800490a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    
    /* read data */
    if (mpu9250_read(&gs_handle,
 800490e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004912:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004916:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800491a:	f107 0346 	add.w	r3, r7, #70	; 0x46
 800491e:	9303      	str	r3, [sp, #12]
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	f107 0318 	add.w	r3, r7, #24
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4603      	mov	r3, r0
 8004934:	481c      	ldr	r0, [pc, #112]	; (80049a8 <mpu9250_basic_read+0xa8>)
 8004936:	f7fc f89d 	bl	8000a74 <mpu9250_read>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <mpu9250_basic_read+0x44>
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                    (int16_t (*)[3])&mag_raw, (float (*)[3])&mag,
                     &len) != 0
                    )
    {
        return 1;
 8004940:	2301      	movs	r3, #1
 8004942:	e02c      	b.n	800499e <mpu9250_basic_read+0x9e>
    }
    
    /* copy the data */
    res[0] = accel_raw[0];
 8004944:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	801a      	strh	r2, [r3, #0]
    res[1] = accel_raw[1];
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3302      	adds	r3, #2
 8004950:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8004954:	801a      	strh	r2, [r3, #0]
    res[2] = accel_raw[2];
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800495e:	801a      	strh	r2, [r3, #0]
    res[3] = gyro_raw[0];
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3306      	adds	r3, #6
 8004964:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8004968:	801a      	strh	r2, [r3, #0]
    res[4] = gyro_raw[1];
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3308      	adds	r3, #8
 800496e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8004972:	801a      	strh	r2, [r3, #0]
    res[5] = gyro_raw[2];
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	330a      	adds	r3, #10
 8004978:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800497c:	801a      	strh	r2, [r3, #0]
    res[6] = mag_raw[0];
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	330c      	adds	r3, #12
 8004982:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004986:	801a      	strh	r2, [r3, #0]
    res[7] = mag_raw[1];
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	330e      	adds	r3, #14
 800498c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004990:	801a      	strh	r2, [r3, #0]
    res[8] = mag_raw[2];
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3310      	adds	r3, #16
 8004996:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800499a:	801a      	strh	r2, [r3, #0]
    
    return 0;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3748      	adds	r7, #72	; 0x48
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000007c 	.word	0x2000007c

080049ac <mpu9250_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu9250_interface_iic_init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
	Error_Handler();
 80049b0:	f000 fa72 	bl	8004e98 <Error_Handler>
    return 0;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	bd80      	pop	{r7, pc}

080049ba <mpu9250_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu9250_interface_iic_deinit(void)
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0
    return 0;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <mpu9250_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	603a      	str	r2, [r7, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	4603      	mov	r3, r0
 80049d6:	71fb      	strb	r3, [r7, #7]
 80049d8:	460b      	mov	r3, r1
 80049da:	71bb      	strb	r3, [r7, #6]
 80049dc:	4613      	mov	r3, r2
 80049de:	80bb      	strh	r3, [r7, #4]
	Error_Handler();
 80049e0:	f000 fa5a 	bl	8004e98 <Error_Handler>
    return 0;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <mpu9250_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu9250_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	603a      	str	r2, [r7, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	4603      	mov	r3, r0
 80049fa:	71fb      	strb	r3, [r7, #7]
 80049fc:	460b      	mov	r3, r1
 80049fe:	71bb      	strb	r3, [r7, #6]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80bb      	strh	r3, [r7, #4]
	Error_Handler();
 8004a04:	f000 fa48 	bl	8004e98 <Error_Handler>
    return 0;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <mpu9250_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu9250_interface_spi_init(void)
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0
	// spi used but initialized
    return 0;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <mpu9250_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu9250_interface_spi_deinit(void)
{   
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0
	// spi used but no need to initialize
    return 0;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <mpu9250_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu9250_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	6039      	str	r1, [r7, #0]
 8004a3e:	71fb      	strb	r3, [r7, #7]
 8004a40:	4613      	mov	r3, r2
 8004a42:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(SPI1_SSEL_GPIO_Port, SPI1_SSEL_Pin, RESET);
 8004a44:	2200      	movs	r2, #0
 8004a46:	2110      	movs	r1, #16
 8004a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a4c:	f001 fa52 	bl	8005ef4 <HAL_GPIO_WritePin>
	reg |= 0x80;
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	71fb      	strb	r3, [r7, #7]
	status = HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8004a5a:	1df9      	adds	r1, r7, #7
 8004a5c:	2364      	movs	r3, #100	; 0x64
 8004a5e:	2201      	movs	r2, #1
 8004a60:	480f      	ldr	r0, [pc, #60]	; (8004aa0 <mpu9250_interface_spi_read+0x6c>)
 8004a62:	f002 fca6 	bl	80073b2 <HAL_SPI_Transmit>
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]
	status |= HAL_SPI_Receive(&hspi1, buf, len, 100);
 8004a6a:	88ba      	ldrh	r2, [r7, #4]
 8004a6c:	2364      	movs	r3, #100	; 0x64
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	480b      	ldr	r0, [pc, #44]	; (8004aa0 <mpu9250_interface_spi_read+0x6c>)
 8004a72:	f002 fe13 	bl	800769c <HAL_SPI_Receive>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI1_SSEL_GPIO_Port, SPI1_SSEL_Pin, SET);
 8004a80:	2201      	movs	r2, #1
 8004a82:	2110      	movs	r1, #16
 8004a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a88:	f001 fa34 	bl	8005ef4 <HAL_GPIO_WritePin>
	return !(status == HAL_OK);
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	200004c0 	.word	0x200004c0

08004aa4 <mpu9250_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu9250_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(SPI1_SSEL_GPIO_Port, SPI1_SSEL_Pin, RESET);
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2110      	movs	r1, #16
 8004ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004abc:	f001 fa1a 	bl	8005ef4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8004ac0:	1df9      	adds	r1, r7, #7
 8004ac2:	2364      	movs	r3, #100	; 0x64
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	4810      	ldr	r0, [pc, #64]	; (8004b08 <mpu9250_interface_spi_write+0x64>)
 8004ac8:	f002 fc73 	bl	80073b2 <HAL_SPI_Transmit>
 8004acc:	4603      	mov	r3, r0
 8004ace:	73fb      	strb	r3, [r7, #15]
	status |= HAL_SPI_Transmit(&hspi1, buf, len, 100);
 8004ad0:	88ba      	ldrh	r2, [r7, #4]
 8004ad2:	2364      	movs	r3, #100	; 0x64
 8004ad4:	6839      	ldr	r1, [r7, #0]
 8004ad6:	480c      	ldr	r0, [pc, #48]	; (8004b08 <mpu9250_interface_spi_write+0x64>)
 8004ad8:	f002 fc6b 	bl	80073b2 <HAL_SPI_Transmit>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI1_SSEL_GPIO_Port, SPI1_SSEL_Pin, SET);
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	2110      	movs	r1, #16
 8004aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aee:	f001 fa01 	bl	8005ef4 <HAL_GPIO_WritePin>
	return !(status == HAL_OK);
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	200004c0 	.word	0x200004c0

08004b0c <mpu9250_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mpu9250_interface_delay_ms(uint32_t ms)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fcd7 	bl	80054c8 <HAL_Delay>
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <mpu9250_interface_debug_print>:
 * @note      none
 */
#include "usart.h"

void mpu9250_interface_debug_print(const char *const fmt, ...)
{
 8004b24:	b40f      	push	{r0, r1, r2, r3}
 8004b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	466b      	mov	r3, sp
 8004b2e:	461e      	mov	r6, r3
	const size_t buffer_size = 256;
 8004b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b34:	60fb      	str	r3, [r7, #12]
	char buffer[buffer_size];
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	461c      	mov	r4, r3
 8004b42:	4615      	mov	r5, r2
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	00eb      	lsls	r3, r5, #3
 8004b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b52:	00e2      	lsls	r2, r4, #3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	00cb      	lsls	r3, r1, #3
 8004b66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004b6a:	00c2      	lsls	r2, r0, #3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3307      	adds	r3, #7
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	ebad 0d03 	sub.w	sp, sp, r3
 8004b78:	466b      	mov	r3, sp
 8004b7a:	3300      	adds	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]

	va_list args;
	va_start(args, fmt);
 8004b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b82:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, buffer_size, fmt, args);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b88:	68f9      	ldr	r1, [r7, #12]
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f005 f89c 	bl	8009cc8 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fb fb1d 	bl	80001d0 <strlen>
 8004b96:	4603      	mov	r3, r0
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4805      	ldr	r0, [pc, #20]	; (8004bb8 <mpu9250_interface_debug_print+0x94>)
 8004ba2:	f003 ff01 	bl	80089a8 <HAL_UART_Transmit>
 8004ba6:	46b5      	mov	sp, r6

}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004bb2:	b004      	add	sp, #16
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000574 	.word	0x20000574

08004bbc <mpu9250_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the irq type
 * @note      none
 */
void mpu9250_interface_receive_callback(uint8_t type)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
    switch (type)
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	2b06      	cmp	r3, #6
 8004bca:	d825      	bhi.n	8004c18 <mpu9250_interface_receive_callback+0x5c>
 8004bcc:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <mpu9250_interface_receive_callback+0x18>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004c11 	.word	0x08004c11
 8004bd8:	08004c09 	.word	0x08004c09
 8004bdc:	08004c19 	.word	0x08004c19
 8004be0:	08004c01 	.word	0x08004c01
 8004be4:	08004bf9 	.word	0x08004bf9
 8004be8:	08004c19 	.word	0x08004c19
 8004bec:	08004bf1 	.word	0x08004bf1
    {
        case MPU9250_INTERRUPT_MOTION :
        {
            mpu9250_interface_debug_print("mpu9250: irq motion.\n");
 8004bf0:	480d      	ldr	r0, [pc, #52]	; (8004c28 <mpu9250_interface_receive_callback+0x6c>)
 8004bf2:	f7ff ff97 	bl	8004b24 <mpu9250_interface_debug_print>
            
            break;
 8004bf6:	e013      	b.n	8004c20 <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu9250_interface_debug_print("mpu9250: irq fifo overflow.\n");
 8004bf8:	480c      	ldr	r0, [pc, #48]	; (8004c2c <mpu9250_interface_receive_callback+0x70>)
 8004bfa:	f7ff ff93 	bl	8004b24 <mpu9250_interface_debug_print>
            
            break;
 8004bfe:	e00f      	b.n	8004c20 <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_FSYNC_INT :
        {
            mpu9250_interface_debug_print("mpu9250: irq fsync int.\n");
 8004c00:	480b      	ldr	r0, [pc, #44]	; (8004c30 <mpu9250_interface_receive_callback+0x74>)
 8004c02:	f7ff ff8f 	bl	8004b24 <mpu9250_interface_debug_print>
            
            break;
 8004c06:	e00b      	b.n	8004c20 <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_DMP :
        {
            mpu9250_interface_debug_print("mpu9250: irq dmp\n");
 8004c08:	480a      	ldr	r0, [pc, #40]	; (8004c34 <mpu9250_interface_receive_callback+0x78>)
 8004c0a:	f7ff ff8b 	bl	8004b24 <mpu9250_interface_debug_print>
            
            break;
 8004c0e:	e007      	b.n	8004c20 <mpu9250_interface_receive_callback+0x64>
        }
        case MPU9250_INTERRUPT_DATA_READY :
        {
            mpu9250_interface_debug_print("mpu9250: irq data ready\n");
 8004c10:	4809      	ldr	r0, [pc, #36]	; (8004c38 <mpu9250_interface_receive_callback+0x7c>)
 8004c12:	f7ff ff87 	bl	8004b24 <mpu9250_interface_debug_print>
            
            break;
 8004c16:	e003      	b.n	8004c20 <mpu9250_interface_receive_callback+0x64>
        }
        default :
        {
            mpu9250_interface_debug_print("mpu9250: irq unknown code.\n");
 8004c18:	4808      	ldr	r0, [pc, #32]	; (8004c3c <mpu9250_interface_receive_callback+0x80>)
 8004c1a:	f7ff ff83 	bl	8004b24 <mpu9250_interface_debug_print>
            
            break;
 8004c1e:	bf00      	nop
        }
    }
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	0800c548 	.word	0x0800c548
 8004c2c:	0800c560 	.word	0x0800c560
 8004c30:	0800c580 	.word	0x0800c580
 8004c34:	0800c59c 	.word	0x0800c59c
 8004c38:	0800c5b0 	.word	0x0800c5b0
 8004c3c:	0800c5cc 	.word	0x0800c5cc

08004c40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c5c:	f043 0304 	orr.w	r3, r3, #4
 8004c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c62:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6e:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8a:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c92:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <MX_GPIO_Init+0xb8>)
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SSEL_GPIO_Port, SPI1_SSEL_Pin, GPIO_PIN_RESET);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2110      	movs	r1, #16
 8004ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ca6:	f001 f925 	bl	8005ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2108      	movs	r1, #8
 8004cae:	4813      	ldr	r0, [pc, #76]	; (8004cfc <MX_GPIO_Init+0xbc>)
 8004cb0:	f001 f920 	bl	8005ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SSEL_Pin;
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_SSEL_GPIO_Port, &GPIO_InitStruct);
 8004cc4:	f107 030c 	add.w	r3, r7, #12
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cce:	f000 ffa7 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4804      	ldr	r0, [pc, #16]	; (8004cfc <MX_GPIO_Init+0xbc>)
 8004cea:	f000 ff99 	bl	8005c20 <HAL_GPIO_Init>

}
 8004cee:	bf00      	nop
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	48000400 	.word	0x48000400

08004d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	; 0x30
 8004d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d06:	f000 fb6a 	bl	80053de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d0a:	f000 f853 	bl	8004db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d0e:	f7ff ff97 	bl	8004c40 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d12:	f7fb fc33 	bl	800057c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004d16:	f000 fa6b 	bl	80051f0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8004d1a:	f000 f8c3 	bl	8004ea4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8004d1e:	f000 f9f5 	bl	800510c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t measurements_so_far = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  float degrees;
  uint32_t i = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
  mpu9250_address_t address = MPU9250_ADDRESS_AD0_LOW;
 8004d2a:	23d0      	movs	r3, #208	; 0xd0
 8004d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t res = mpu9250_basic_init(MPU9250_INTERFACE_SPI, address);
 8004d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d34:	4619      	mov	r1, r3
 8004d36:	2001      	movs	r0, #1
 8004d38:	f7ff f954 	bl	8003fe4 <mpu9250_basic_init>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t measurements_message_buffer[23];
  measurements_message_buffer[0] = '$'; // start bit
 8004d42:	2324      	movs	r3, #36	; 0x24
 8004d44:	713b      	strb	r3, [r7, #4]
  measurements_message_buffer[1] = '$';
 8004d46:	2324      	movs	r3, #36	; 0x24
 8004d48:	717b      	strb	r3, [r7, #5]
  measurements_message_buffer[22] = '\n';
 8004d4a:	230a      	movs	r3, #10
 8004d4c:	76bb      	strb	r3, [r7, #26]
  // must be compiled with -fno-strict-aliasing !!!
  int16_t * measurements = &(measurements_message_buffer[2]);
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	3302      	adds	r3, #2
 8004d52:	623b      	str	r3, [r7, #32]

  HAL_TIM_Base_Start_IT(&htim2);
 8004d54:	4814      	ldr	r0, [pc, #80]	; (8004da8 <main+0xa8>)
 8004d56:	f003 fa0f 	bl	8008178 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  if (read_sensor) {
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <main+0xac>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0fb      	beq.n	8004d5a <main+0x5a>
		  read_sensor = 0;
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <main+0xac>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
		  if (mpu9250_basic_read(measurements) not_eq 0) {
 8004d68:	6a38      	ldr	r0, [r7, #32]
 8004d6a:	f7ff fdc9 	bl	8004900 <mpu9250_basic_read>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <main+0x78>
			  Error_Handler();
 8004d74:	f000 f890 	bl	8004e98 <Error_Handler>
	  	  }
		  if (mpu9250_basic_read_temperature(measurements + 9, &degrees) not_eq 0) {
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	3312      	adds	r3, #18
 8004d7c:	b21b      	sxth	r3, r3
 8004d7e:	f107 021c 	add.w	r2, r7, #28
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fda3 	bl	80048d0 <mpu9250_basic_read_temperature>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <main+0x94>
			  Error_Handler();
 8004d90:	f000 f882 	bl	8004e98 <Error_Handler>
		  }
		  measurements_so_far++;
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	3301      	adds	r3, #1
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
		  HAL_UART_Transmit_DMA(&huart2, measurements_message_buffer, 23);
 8004d9a:	1d3b      	adds	r3, r7, #4
 8004d9c:	2217      	movs	r2, #23
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4803      	ldr	r0, [pc, #12]	; (8004db0 <main+0xb0>)
 8004da2:	f003 fe8b 	bl	8008abc <HAL_UART_Transmit_DMA>
	  if (read_sensor) {
 8004da6:	e7d8      	b.n	8004d5a <main+0x5a>
 8004da8:	20000528 	.word	0x20000528
 8004dac:	20000000 	.word	0x20000000
 8004db0:	20000574 	.word	0x20000574

08004db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b096      	sub	sp, #88	; 0x58
 8004db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dba:	f107 0314 	add.w	r3, r7, #20
 8004dbe:	2244      	movs	r2, #68	; 0x44
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f004 ff8e 	bl	8009ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dc8:	463b      	mov	r3, r7
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	609a      	str	r2, [r3, #8]
 8004dd2:	60da      	str	r2, [r3, #12]
 8004dd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004dd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004dda:	f001 f8c1 	bl	8005f60 <HAL_PWREx_ControlVoltageScaling>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004de4:	f000 f858 	bl	8004e98 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004de8:	f001 f89c 	bl	8005f24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004dec:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <SystemClock_Config+0xc0>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <SystemClock_Config+0xc0>)
 8004df4:	f023 0318 	bic.w	r3, r3, #24
 8004df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004dfc:	2314      	movs	r3, #20
 8004dfe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004e00:	2301      	movs	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004e04:	2301      	movs	r3, #1
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004e0c:	2360      	movs	r3, #96	; 0x60
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e10:	2302      	movs	r3, #2
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004e14:	2301      	movs	r3, #1
 8004e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004e1c:	2328      	movs	r3, #40	; 0x28
 8004e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004e20:	2307      	movs	r3, #7
 8004e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004e24:	2302      	movs	r3, #2
 8004e26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 f8eb 	bl	800600c <HAL_RCC_OscConfig>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004e3c:	f000 f82c 	bl	8004e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e40:	230f      	movs	r3, #15
 8004e42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e44:	2303      	movs	r3, #3
 8004e46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004e54:	463b      	mov	r3, r7
 8004e56:	2104      	movs	r1, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fceb 	bl	8006834 <HAL_RCC_ClockConfig>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004e64:	f000 f818 	bl	8004e98 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004e68:	f002 f8fe 	bl	8007068 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004e6c:	bf00      	nop
 8004e6e:	3758      	adds	r7, #88	; 0x58
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000

08004e78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	read_sensor = 1;
 8004e80:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000000 	.word	0x20000000

08004e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e9c:	b672      	cpsid	i
}
 8004e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ea0:	e7fe      	b.n	8004ea0 <Error_Handler+0x8>
	...

08004ea4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <MX_SPI1_Init+0x78>)
 8004eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004eae:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004eb6:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ebc:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004ebe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ec2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ed0:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004eda:	2230      	movs	r2, #48	; 0x30
 8004edc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ede:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eea:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004efe:	2208      	movs	r2, #8
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f02:	4805      	ldr	r0, [pc, #20]	; (8004f18 <MX_SPI1_Init+0x74>)
 8004f04:	f002 f9b2 	bl	800726c <HAL_SPI_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004f0e:	f7ff ffc3 	bl	8004e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	200004c0 	.word	0x200004c0
 8004f1c:	40013000 	.word	0x40013000

08004f20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f28:	f107 0314 	add.w	r3, r7, #20
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <HAL_SPI_MspInit+0x7c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d128      	bne.n	8004f94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f42:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <HAL_SPI_MspInit+0x80>)
 8004f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f46:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <HAL_SPI_MspInit+0x80>)
 8004f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8004f4e:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <HAL_SPI_MspInit+0x80>)
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <HAL_SPI_MspInit+0x80>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <HAL_SPI_MspInit+0x80>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f66:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <HAL_SPI_MspInit+0x80>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004f72:	23e0      	movs	r3, #224	; 0xe0
 8004f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f76:	2302      	movs	r3, #2
 8004f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f82:	2305      	movs	r3, #5
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f90:	f000 fe46 	bl	8005c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004f94:	bf00      	nop
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40013000 	.word	0x40013000
 8004fa0:	40021000 	.word	0x40021000

08004fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_MspInit+0x44>)
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <HAL_MspInit+0x44>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_MspInit+0x44>)
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <HAL_MspInit+0x44>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <HAL_MspInit+0x44>)
 8004fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_MspInit+0x44>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000

08004fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ff0:	e7fe      	b.n	8004ff0 <NMI_Handler+0x4>

08004ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ff6:	e7fe      	b.n	8004ff6 <HardFault_Handler+0x4>

08004ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ffc:	e7fe      	b.n	8004ffc <MemManage_Handler+0x4>

08004ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005002:	e7fe      	b.n	8005002 <BusFault_Handler+0x4>

08005004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005008:	e7fe      	b.n	8005008 <UsageFault_Handler+0x4>

0800500a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800502a:	bf00      	nop
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005038:	f000 fa26 	bl	8005488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800503c:	bf00      	nop
 800503e:	bd80      	pop	{r7, pc}

08005040 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005044:	4802      	ldr	r0, [pc, #8]	; (8005050 <DMA1_Channel7_IRQHandler+0x10>)
 8005046:	f000 fd0c 	bl	8005a62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200005fc 	.word	0x200005fc

08005054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005058:	4802      	ldr	r0, [pc, #8]	; (8005064 <TIM2_IRQHandler+0x10>)
 800505a:	f003 f8e1 	bl	8008220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000528 	.word	0x20000528

08005068 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800506c:	4802      	ldr	r0, [pc, #8]	; (8005078 <USART2_IRQHandler+0x10>)
 800506e:	f003 fda1 	bl	8008bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000574 	.word	0x20000574

0800507c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005084:	4a14      	ldr	r2, [pc, #80]	; (80050d8 <_sbrk+0x5c>)
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <_sbrk+0x60>)
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005090:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <_sbrk+0x64>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005098:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <_sbrk+0x64>)
 800509a:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <_sbrk+0x68>)
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800509e:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <_sbrk+0x64>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d207      	bcs.n	80050bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050ac:	f004 fe22 	bl	8009cf4 <__errno>
 80050b0:	4603      	mov	r3, r0
 80050b2:	220c      	movs	r2, #12
 80050b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050b6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ba:	e009      	b.n	80050d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050bc:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <_sbrk+0x64>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <_sbrk+0x64>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <_sbrk+0x64>)
 80050cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050ce:	68fb      	ldr	r3, [r7, #12]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20010000 	.word	0x20010000
 80050dc:	00000400 	.word	0x00000400
 80050e0:	20000524 	.word	0x20000524
 80050e4:	20000790 	.word	0x20000790

080050e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <SystemInit+0x20>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	4a05      	ldr	r2, [pc, #20]	; (8005108 <SystemInit+0x20>)
 80050f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	e000ed00 	.word	0xe000ed00

0800510c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005112:	f107 0310 	add.w	r3, r7, #16
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	605a      	str	r2, [r3, #4]
 800511c:	609a      	str	r2, [r3, #8]
 800511e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	605a      	str	r2, [r3, #4]
 8005128:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800512a:	4b1e      	ldr	r3, [pc, #120]	; (80051a4 <MX_TIM2_Init+0x98>)
 800512c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005130:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <MX_TIM2_Init+0x98>)
 8005134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005138:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <MX_TIM2_Init+0x98>)
 800513c:	2200      	movs	r2, #0
 800513e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8005140:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <MX_TIM2_Init+0x98>)
 8005142:	224f      	movs	r2, #79	; 0x4f
 8005144:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005146:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <MX_TIM2_Init+0x98>)
 8005148:	2200      	movs	r2, #0
 800514a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800514c:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <MX_TIM2_Init+0x98>)
 800514e:	2200      	movs	r2, #0
 8005150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005152:	4814      	ldr	r0, [pc, #80]	; (80051a4 <MX_TIM2_Init+0x98>)
 8005154:	f002 ffb8 	bl	80080c8 <HAL_TIM_Base_Init>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800515e:	f7ff fe9b 	bl	8004e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005168:	f107 0310 	add.w	r3, r7, #16
 800516c:	4619      	mov	r1, r3
 800516e:	480d      	ldr	r0, [pc, #52]	; (80051a4 <MX_TIM2_Init+0x98>)
 8005170:	f003 f958 	bl	8008424 <HAL_TIM_ConfigClockSource>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800517a:	f7ff fe8d 	bl	8004e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4806      	ldr	r0, [pc, #24]	; (80051a4 <MX_TIM2_Init+0x98>)
 800518c:	f003 fb3a 	bl	8008804 <HAL_TIMEx_MasterConfigSynchronization>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005196:	f7ff fe7f 	bl	8004e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800519a:	bf00      	nop
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000528 	.word	0x20000528

080051a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d113      	bne.n	80051e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <HAL_TIM_Base_MspInit+0x44>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	4a0b      	ldr	r2, [pc, #44]	; (80051ec <HAL_TIM_Base_MspInit+0x44>)
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	6593      	str	r3, [r2, #88]	; 0x58
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <HAL_TIM_Base_MspInit+0x44>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80051d2:	2200      	movs	r2, #0
 80051d4:	2100      	movs	r1, #0
 80051d6:	201c      	movs	r0, #28
 80051d8:	f000 fa75 	bl	80056c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051dc:	201c      	movs	r0, #28
 80051de:	f000 fa8e 	bl	80056fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000

080051f0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80051f4:	4b13      	ldr	r3, [pc, #76]	; (8005244 <MX_USART2_UART_Init+0x54>)
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <MX_USART2_UART_Init+0x58>)
 80051f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <MX_USART2_UART_Init+0x54>)
 80051fc:	4a13      	ldr	r2, [pc, #76]	; (800524c <MX_USART2_UART_Init+0x5c>)
 80051fe:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005200:	4b10      	ldr	r3, [pc, #64]	; (8005244 <MX_USART2_UART_Init+0x54>)
 8005202:	2200      	movs	r2, #0
 8005204:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <MX_USART2_UART_Init+0x54>)
 8005208:	2200      	movs	r2, #0
 800520a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <MX_USART2_UART_Init+0x54>)
 800520e:	2200      	movs	r2, #0
 8005210:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <MX_USART2_UART_Init+0x54>)
 8005214:	220c      	movs	r2, #12
 8005216:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <MX_USART2_UART_Init+0x54>)
 800521a:	2200      	movs	r2, #0
 800521c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <MX_USART2_UART_Init+0x54>)
 8005220:	2200      	movs	r2, #0
 8005222:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <MX_USART2_UART_Init+0x54>)
 8005226:	2200      	movs	r2, #0
 8005228:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <MX_USART2_UART_Init+0x54>)
 800522c:	2200      	movs	r2, #0
 800522e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005230:	4804      	ldr	r0, [pc, #16]	; (8005244 <MX_USART2_UART_Init+0x54>)
 8005232:	f003 fb6b 	bl	800890c <HAL_UART_Init>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 800523c:	f7ff fe2c 	bl	8004e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005240:	bf00      	nop
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000574 	.word	0x20000574
 8005248:	40004400 	.word	0x40004400
 800524c:	0003d090 	.word	0x0003d090

08005250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b09e      	sub	sp, #120	; 0x78
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005258:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005268:	f107 0310 	add.w	r3, r7, #16
 800526c:	2254      	movs	r2, #84	; 0x54
 800526e:	2100      	movs	r1, #0
 8005270:	4618      	mov	r0, r3
 8005272:	f004 fd37 	bl	8009ce4 <memset>
  if(uartHandle->Instance==USART2)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a40      	ldr	r2, [pc, #256]	; (800537c <HAL_UART_MspInit+0x12c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d179      	bne.n	8005374 <HAL_UART_MspInit+0x124>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005280:	2302      	movs	r3, #2
 8005282:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005284:	2300      	movs	r3, #0
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005288:	f107 0310 	add.w	r3, r7, #16
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fcf5 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005298:	f7ff fdfe 	bl	8004e98 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800529c:	4b38      	ldr	r3, [pc, #224]	; (8005380 <HAL_UART_MspInit+0x130>)
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	4a37      	ldr	r2, [pc, #220]	; (8005380 <HAL_UART_MspInit+0x130>)
 80052a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a6:	6593      	str	r3, [r2, #88]	; 0x58
 80052a8:	4b35      	ldr	r3, [pc, #212]	; (8005380 <HAL_UART_MspInit+0x130>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b4:	4b32      	ldr	r3, [pc, #200]	; (8005380 <HAL_UART_MspInit+0x130>)
 80052b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b8:	4a31      	ldr	r2, [pc, #196]	; (8005380 <HAL_UART_MspInit+0x130>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052c0:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <HAL_UART_MspInit+0x130>)
 80052c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80052cc:	2304      	movs	r3, #4
 80052ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d0:	2302      	movs	r3, #2
 80052d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d8:	2303      	movs	r3, #3
 80052da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80052dc:	2307      	movs	r3, #7
 80052de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80052e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80052e4:	4619      	mov	r1, r3
 80052e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052ea:	f000 fc99 	bl	8005c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f4:	2302      	movs	r3, #2
 80052f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fc:	2303      	movs	r3, #3
 80052fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8005300:	2303      	movs	r3, #3
 8005302:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005304:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005308:	4619      	mov	r1, r3
 800530a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800530e:	f000 fc87 	bl	8005c20 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005312:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <HAL_UART_MspInit+0x134>)
 8005314:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <HAL_UART_MspInit+0x138>)
 8005316:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <HAL_UART_MspInit+0x134>)
 800531a:	2202      	movs	r2, #2
 800531c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800531e:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_UART_MspInit+0x134>)
 8005320:	2210      	movs	r2, #16
 8005322:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005324:	4b17      	ldr	r3, [pc, #92]	; (8005384 <HAL_UART_MspInit+0x134>)
 8005326:	2200      	movs	r2, #0
 8005328:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800532a:	4b16      	ldr	r3, [pc, #88]	; (8005384 <HAL_UART_MspInit+0x134>)
 800532c:	2280      	movs	r2, #128	; 0x80
 800532e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <HAL_UART_MspInit+0x134>)
 8005332:	2200      	movs	r2, #0
 8005334:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <HAL_UART_MspInit+0x134>)
 8005338:	2200      	movs	r2, #0
 800533a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <HAL_UART_MspInit+0x134>)
 800533e:	2200      	movs	r2, #0
 8005340:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <HAL_UART_MspInit+0x134>)
 8005344:	2200      	movs	r2, #0
 8005346:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005348:	480e      	ldr	r0, [pc, #56]	; (8005384 <HAL_UART_MspInit+0x134>)
 800534a:	f000 f9f3 	bl	8005734 <HAL_DMA_Init>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005354:	f7ff fda0 	bl	8004e98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <HAL_UART_MspInit+0x134>)
 800535c:	671a      	str	r2, [r3, #112]	; 0x70
 800535e:	4a09      	ldr	r2, [pc, #36]	; (8005384 <HAL_UART_MspInit+0x134>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005364:	2200      	movs	r2, #0
 8005366:	2100      	movs	r1, #0
 8005368:	2026      	movs	r0, #38	; 0x26
 800536a:	f000 f9ac 	bl	80056c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800536e:	2026      	movs	r0, #38	; 0x26
 8005370:	f000 f9c5 	bl	80056fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005374:	bf00      	nop
 8005376:	3778      	adds	r7, #120	; 0x78
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40004400 	.word	0x40004400
 8005380:	40021000 	.word	0x40021000
 8005384:	200005fc 	.word	0x200005fc
 8005388:	40020080 	.word	0x40020080

0800538c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800538c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005390:	f7ff feaa 	bl	80050e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005394:	480c      	ldr	r0, [pc, #48]	; (80053c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005396:	490d      	ldr	r1, [pc, #52]	; (80053cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005398:	4a0d      	ldr	r2, [pc, #52]	; (80053d0 <LoopForever+0xe>)
  movs r3, #0
 800539a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800539c:	e002      	b.n	80053a4 <LoopCopyDataInit>

0800539e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800539e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053a2:	3304      	adds	r3, #4

080053a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053a8:	d3f9      	bcc.n	800539e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053aa:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053ac:	4c0a      	ldr	r4, [pc, #40]	; (80053d8 <LoopForever+0x16>)
  movs r3, #0
 80053ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053b0:	e001      	b.n	80053b6 <LoopFillZerobss>

080053b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053b4:	3204      	adds	r2, #4

080053b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053b8:	d3fb      	bcc.n	80053b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053ba:	f004 fca1 	bl	8009d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80053be:	f7ff fc9f 	bl	8004d00 <main>

080053c2 <LoopForever>:

LoopForever:
    b LoopForever
 80053c2:	e7fe      	b.n	80053c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80053c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80053c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80053d0:	0800c814 	.word	0x0800c814
  ldr r2, =_sbss
 80053d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80053d8:	20000790 	.word	0x20000790

080053dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80053dc:	e7fe      	b.n	80053dc <ADC1_IRQHandler>

080053de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053e8:	2003      	movs	r0, #3
 80053ea:	f000 f961 	bl	80056b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053ee:	2000      	movs	r0, #0
 80053f0:	f000 f80e 	bl	8005410 <HAL_InitTick>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	71fb      	strb	r3, [r7, #7]
 80053fe:	e001      	b.n	8005404 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005400:	f7ff fdd0 	bl	8004fa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005404:	79fb      	ldrb	r3, [r7, #7]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800541c:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_InitTick+0x6c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d023      	beq.n	800546c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <HAL_InitTick+0x70>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4b14      	ldr	r3, [pc, #80]	; (800547c <HAL_InitTick+0x6c>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	4619      	mov	r1, r3
 800542e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005432:	fbb3 f3f1 	udiv	r3, r3, r1
 8005436:	fbb2 f3f3 	udiv	r3, r2, r3
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f96d 	bl	800571a <HAL_SYSTICK_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10f      	bne.n	8005466 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b0f      	cmp	r3, #15
 800544a:	d809      	bhi.n	8005460 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800544c:	2200      	movs	r2, #0
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	f000 f937 	bl	80056c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005458:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <HAL_InitTick+0x74>)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e007      	b.n	8005470 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
 8005464:	e004      	b.n	8005470 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
 800546a:	e001      	b.n	8005470 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	2000000c 	.word	0x2000000c
 8005480:	20000004 	.word	0x20000004
 8005484:	20000008 	.word	0x20000008

08005488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_IncTick+0x20>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_IncTick+0x24>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4413      	add	r3, r2
 8005498:	4a04      	ldr	r2, [pc, #16]	; (80054ac <HAL_IncTick+0x24>)
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	2000000c 	.word	0x2000000c
 80054ac:	20000644 	.word	0x20000644

080054b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return uwTick;
 80054b4:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <HAL_GetTick+0x14>)
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000644 	.word	0x20000644

080054c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7ff ffee 	bl	80054b0 <HAL_GetTick>
 80054d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d005      	beq.n	80054ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80054e2:	4b0a      	ldr	r3, [pc, #40]	; (800550c <HAL_Delay+0x44>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054ee:	bf00      	nop
 80054f0:	f7ff ffde 	bl	80054b0 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d8f7      	bhi.n	80054f0 <HAL_Delay+0x28>
  {
  }
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	2000000c 	.word	0x2000000c

08005510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <__NVIC_SetPriorityGrouping+0x44>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800552c:	4013      	ands	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800553c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005542:	4a04      	ldr	r2, [pc, #16]	; (8005554 <__NVIC_SetPriorityGrouping+0x44>)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	60d3      	str	r3, [r2, #12]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800555c:	4b04      	ldr	r3, [pc, #16]	; (8005570 <__NVIC_GetPriorityGrouping+0x18>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	f003 0307 	and.w	r3, r3, #7
}
 8005566:	4618      	mov	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	e000ed00 	.word	0xe000ed00

08005574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800557e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005582:	2b00      	cmp	r3, #0
 8005584:	db0b      	blt.n	800559e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	f003 021f 	and.w	r2, r3, #31
 800558c:	4907      	ldr	r1, [pc, #28]	; (80055ac <__NVIC_EnableIRQ+0x38>)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	2001      	movs	r0, #1
 8005596:	fa00 f202 	lsl.w	r2, r0, r2
 800559a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	e000e100 	.word	0xe000e100

080055b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	6039      	str	r1, [r7, #0]
 80055ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	db0a      	blt.n	80055da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	490c      	ldr	r1, [pc, #48]	; (80055fc <__NVIC_SetPriority+0x4c>)
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	0112      	lsls	r2, r2, #4
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	440b      	add	r3, r1
 80055d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055d8:	e00a      	b.n	80055f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	4908      	ldr	r1, [pc, #32]	; (8005600 <__NVIC_SetPriority+0x50>)
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	3b04      	subs	r3, #4
 80055e8:	0112      	lsls	r2, r2, #4
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	440b      	add	r3, r1
 80055ee:	761a      	strb	r2, [r3, #24]
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	e000e100 	.word	0xe000e100
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005604:	b480      	push	{r7}
 8005606:	b089      	sub	sp, #36	; 0x24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f1c3 0307 	rsb	r3, r3, #7
 800561e:	2b04      	cmp	r3, #4
 8005620:	bf28      	it	cs
 8005622:	2304      	movcs	r3, #4
 8005624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	3304      	adds	r3, #4
 800562a:	2b06      	cmp	r3, #6
 800562c:	d902      	bls.n	8005634 <NVIC_EncodePriority+0x30>
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	3b03      	subs	r3, #3
 8005632:	e000      	b.n	8005636 <NVIC_EncodePriority+0x32>
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43da      	mvns	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	401a      	ands	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800564c:	f04f 31ff 	mov.w	r1, #4294967295
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	43d9      	mvns	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800565c:	4313      	orrs	r3, r2
         );
}
 800565e:	4618      	mov	r0, r3
 8005660:	3724      	adds	r7, #36	; 0x24
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3b01      	subs	r3, #1
 8005678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800567c:	d301      	bcc.n	8005682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800567e:	2301      	movs	r3, #1
 8005680:	e00f      	b.n	80056a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005682:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <SysTick_Config+0x40>)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800568a:	210f      	movs	r1, #15
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	f7ff ff8e 	bl	80055b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <SysTick_Config+0x40>)
 8005696:	2200      	movs	r2, #0
 8005698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <SysTick_Config+0x40>)
 800569c:	2207      	movs	r2, #7
 800569e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	e000e010 	.word	0xe000e010

080056b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff29 	bl	8005510 <__NVIC_SetPriorityGrouping>
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	4603      	mov	r3, r0
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056d8:	f7ff ff3e 	bl	8005558 <__NVIC_GetPriorityGrouping>
 80056dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f7ff ff8e 	bl	8005604 <NVIC_EncodePriority>
 80056e8:	4602      	mov	r2, r0
 80056ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ff5d 	bl	80055b0 <__NVIC_SetPriority>
}
 80056f6:	bf00      	nop
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	4603      	mov	r3, r0
 8005706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff31 	bl	8005574 <__NVIC_EnableIRQ>
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ffa2 	bl	800566c <SysTick_Config>
 8005728:	4603      	mov	r3, r0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e098      	b.n	8005878 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	4b4d      	ldr	r3, [pc, #308]	; (8005884 <HAL_DMA_Init+0x150>)
 800574e:	429a      	cmp	r2, r3
 8005750:	d80f      	bhi.n	8005772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <HAL_DMA_Init+0x154>)
 800575a:	4413      	add	r3, r2
 800575c:	4a4b      	ldr	r2, [pc, #300]	; (800588c <HAL_DMA_Init+0x158>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	009a      	lsls	r2, r3, #2
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a48      	ldr	r2, [pc, #288]	; (8005890 <HAL_DMA_Init+0x15c>)
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
 8005770:	e00e      	b.n	8005790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	4b46      	ldr	r3, [pc, #280]	; (8005894 <HAL_DMA_Init+0x160>)
 800577a:	4413      	add	r3, r2
 800577c:	4a43      	ldr	r2, [pc, #268]	; (800588c <HAL_DMA_Init+0x158>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	009a      	lsls	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a42      	ldr	r2, [pc, #264]	; (8005898 <HAL_DMA_Init+0x164>)
 800578e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80057b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ea:	d039      	beq.n	8005860 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	4a27      	ldr	r2, [pc, #156]	; (8005890 <HAL_DMA_Init+0x15c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d11a      	bne.n	800582c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80057f6:	4b29      	ldr	r3, [pc, #164]	; (800589c <HAL_DMA_Init+0x168>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	f003 031c 	and.w	r3, r3, #28
 8005802:	210f      	movs	r1, #15
 8005804:	fa01 f303 	lsl.w	r3, r1, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	4924      	ldr	r1, [pc, #144]	; (800589c <HAL_DMA_Init+0x168>)
 800580c:	4013      	ands	r3, r2
 800580e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005810:	4b22      	ldr	r3, [pc, #136]	; (800589c <HAL_DMA_Init+0x168>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581c:	f003 031c 	and.w	r3, r3, #28
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	491d      	ldr	r1, [pc, #116]	; (800589c <HAL_DMA_Init+0x168>)
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]
 800582a:	e019      	b.n	8005860 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800582c:	4b1c      	ldr	r3, [pc, #112]	; (80058a0 <HAL_DMA_Init+0x16c>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	f003 031c 	and.w	r3, r3, #28
 8005838:	210f      	movs	r1, #15
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	4917      	ldr	r1, [pc, #92]	; (80058a0 <HAL_DMA_Init+0x16c>)
 8005842:	4013      	ands	r3, r2
 8005844:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <HAL_DMA_Init+0x16c>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f003 031c 	and.w	r3, r3, #28
 8005856:	fa01 f303 	lsl.w	r3, r1, r3
 800585a:	4911      	ldr	r1, [pc, #68]	; (80058a0 <HAL_DMA_Init+0x16c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	40020407 	.word	0x40020407
 8005888:	bffdfff8 	.word	0xbffdfff8
 800588c:	cccccccd 	.word	0xcccccccd
 8005890:	40020000 	.word	0x40020000
 8005894:	bffdfbf8 	.word	0xbffdfbf8
 8005898:	40020400 	.word	0x40020400
 800589c:	400200a8 	.word	0x400200a8
 80058a0:	400204a8 	.word	0x400204a8

080058a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_DMA_Start_IT+0x20>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e04b      	b.n	800595c <HAL_DMA_Start_IT+0xb8>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d13a      	bne.n	800594e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f95f 	bl	8005bc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 020e 	orr.w	r2, r2, #14
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e00f      	b.n	800593c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0204 	bic.w	r2, r2, #4
 800592a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 020a 	orr.w	r2, r2, #10
 800593a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e005      	b.n	800595a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005956:	2302      	movs	r3, #2
 8005958:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800595a:	7dfb      	ldrb	r3, [r7, #23]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d008      	beq.n	800598e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2204      	movs	r2, #4
 8005980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e022      	b.n	80059d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 020e 	bic.w	r2, r2, #14
 800599c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	f003 021c 	and.w	r2, r3, #28
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	2101      	movs	r1, #1
 80059bc:	fa01 f202 	lsl.w	r2, r1, r2
 80059c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d005      	beq.n	8005a04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2204      	movs	r2, #4
 80059fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
 8005a02:	e029      	b.n	8005a58 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 020e 	bic.w	r2, r2, #14
 8005a12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	f003 021c 	and.w	r2, r3, #28
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f202 	lsl.w	r2, r1, r2
 8005a36:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
    }
  }
  return status;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7e:	f003 031c 	and.w	r3, r3, #28
 8005a82:	2204      	movs	r2, #4
 8005a84:	409a      	lsls	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d026      	beq.n	8005adc <HAL_DMA_IRQHandler+0x7a>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d021      	beq.n	8005adc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d107      	bne.n	8005ab6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0204 	bic.w	r2, r2, #4
 8005ab4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f003 021c 	and.w	r2, r3, #28
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	2104      	movs	r1, #4
 8005ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d071      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005ada:	e06c      	b.n	8005bb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae0:	f003 031c 	and.w	r3, r3, #28
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d02e      	beq.n	8005b4e <HAL_DMA_IRQHandler+0xec>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d029      	beq.n	8005b4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10b      	bne.n	8005b20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 020a 	bic.w	r2, r2, #10
 8005b16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b24:	f003 021c 	and.w	r2, r3, #28
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2102      	movs	r1, #2
 8005b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d038      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005b4c:	e033      	b.n	8005bb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	f003 031c 	and.w	r3, r3, #28
 8005b56:	2208      	movs	r2, #8
 8005b58:	409a      	lsls	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02a      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x156>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d025      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 020e 	bic.w	r2, r2, #14
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	f003 021c 	and.w	r2, r3, #28
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	2101      	movs	r1, #1
 8005b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005bb6:	bf00      	nop
 8005bb8:	bf00      	nop
}
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	f003 021c 	and.w	r2, r3, #28
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2101      	movs	r1, #1
 8005bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005be0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d108      	bne.n	8005c04 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c02:	e007      	b.n	8005c14 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c2e:	e148      	b.n	8005ec2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	2101      	movs	r1, #1
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 813a 	beq.w	8005ebc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d005      	beq.n	8005c60 <HAL_GPIO_Init+0x40>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d130      	bne.n	8005cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4013      	ands	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c96:	2201      	movs	r2, #1
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0201 	and.w	r2, r3, #1
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d017      	beq.n	8005cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	2203      	movs	r2, #3
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d123      	bne.n	8005d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	08da      	lsrs	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3208      	adds	r2, #8
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	220f      	movs	r2, #15
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	08da      	lsrs	r2, r3, #3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3208      	adds	r2, #8
 8005d4c:	6939      	ldr	r1, [r7, #16]
 8005d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	43db      	mvns	r3, r3
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4013      	ands	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 0203 	and.w	r2, r3, #3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 8094 	beq.w	8005ebc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d94:	4b52      	ldr	r3, [pc, #328]	; (8005ee0 <HAL_GPIO_Init+0x2c0>)
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	4a51      	ldr	r2, [pc, #324]	; (8005ee0 <HAL_GPIO_Init+0x2c0>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6613      	str	r3, [r2, #96]	; 0x60
 8005da0:	4b4f      	ldr	r3, [pc, #316]	; (8005ee0 <HAL_GPIO_Init+0x2c0>)
 8005da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005dac:	4a4d      	ldr	r2, [pc, #308]	; (8005ee4 <HAL_GPIO_Init+0x2c4>)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	089b      	lsrs	r3, r3, #2
 8005db2:	3302      	adds	r3, #2
 8005db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	220f      	movs	r2, #15
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dd6:	d00d      	beq.n	8005df4 <HAL_GPIO_Init+0x1d4>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a43      	ldr	r2, [pc, #268]	; (8005ee8 <HAL_GPIO_Init+0x2c8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <HAL_GPIO_Init+0x1d0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a42      	ldr	r2, [pc, #264]	; (8005eec <HAL_GPIO_Init+0x2cc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d101      	bne.n	8005dec <HAL_GPIO_Init+0x1cc>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e004      	b.n	8005df6 <HAL_GPIO_Init+0x1d6>
 8005dec:	2307      	movs	r3, #7
 8005dee:	e002      	b.n	8005df6 <HAL_GPIO_Init+0x1d6>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <HAL_GPIO_Init+0x1d6>
 8005df4:	2300      	movs	r3, #0
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	f002 0203 	and.w	r2, r2, #3
 8005dfc:	0092      	lsls	r2, r2, #2
 8005dfe:	4093      	lsls	r3, r2
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e06:	4937      	ldr	r1, [pc, #220]	; (8005ee4 <HAL_GPIO_Init+0x2c4>)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	089b      	lsrs	r3, r3, #2
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e14:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <HAL_GPIO_Init+0x2d0>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4013      	ands	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e38:	4a2d      	ldr	r2, [pc, #180]	; (8005ef0 <HAL_GPIO_Init+0x2d0>)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e3e:	4b2c      	ldr	r3, [pc, #176]	; (8005ef0 <HAL_GPIO_Init+0x2d0>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	43db      	mvns	r3, r3
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e62:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <HAL_GPIO_Init+0x2d0>)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005e68:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <HAL_GPIO_Init+0x2d0>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	43db      	mvns	r3, r3
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4013      	ands	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <HAL_GPIO_Init+0x2d0>)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005e92:	4b17      	ldr	r3, [pc, #92]	; (8005ef0 <HAL_GPIO_Init+0x2d0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005eb6:	4a0e      	ldr	r2, [pc, #56]	; (8005ef0 <HAL_GPIO_Init+0x2d0>)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f47f aeaf 	bne.w	8005c30 <HAL_GPIO_Init+0x10>
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	371c      	adds	r7, #28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40010000 	.word	0x40010000
 8005ee8:	48000400 	.word	0x48000400
 8005eec:	48000800 	.word	0x48000800
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
 8005f00:	4613      	mov	r3, r2
 8005f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f04:	787b      	ldrb	r3, [r7, #1]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f0a:	887a      	ldrh	r2, [r7, #2]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f10:	e002      	b.n	8005f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f32:	6013      	str	r3, [r2, #0]
}
 8005f34:	bf00      	nop
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40007000 	.word	0x40007000

08005f44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f48:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <HAL_PWREx_GetVoltageRange+0x18>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40007000 	.word	0x40007000

08005f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6e:	d130      	bne.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f70:	4b23      	ldr	r3, [pc, #140]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7c:	d038      	beq.n	8005ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f7e:	4b20      	ldr	r3, [pc, #128]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f86:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f8e:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2232      	movs	r2, #50	; 0x32
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0c9b      	lsrs	r3, r3, #18
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa4:	e002      	b.n	8005fac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fac:	4b14      	ldr	r3, [pc, #80]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb8:	d102      	bne.n	8005fc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f2      	bne.n	8005fa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fcc:	d110      	bne.n	8005ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e00f      	b.n	8005ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d007      	beq.n	8005ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fe8:	4a05      	ldr	r2, [pc, #20]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40007000 	.word	0x40007000
 8006004:	20000004 	.word	0x20000004
 8006008:	431bde83 	.word	0x431bde83

0800600c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f000 bc02 	b.w	8006824 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006020:	4b96      	ldr	r3, [pc, #600]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 030c 	and.w	r3, r3, #12
 8006028:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800602a:	4b94      	ldr	r3, [pc, #592]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 80e4 	beq.w	800620a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_RCC_OscConfig+0x4c>
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b0c      	cmp	r3, #12
 800604c:	f040 808b 	bne.w	8006166 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2b01      	cmp	r3, #1
 8006054:	f040 8087 	bne.w	8006166 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006058:	4b88      	ldr	r3, [pc, #544]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_RCC_OscConfig+0x64>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e3d9      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <HAL_RCC_OscConfig+0x7e>
 8006080:	4b7e      	ldr	r3, [pc, #504]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006088:	e005      	b.n	8006096 <HAL_RCC_OscConfig+0x8a>
 800608a:	4b7c      	ldr	r3, [pc, #496]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800608c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006090:	091b      	lsrs	r3, r3, #4
 8006092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006096:	4293      	cmp	r3, r2
 8006098:	d223      	bcs.n	80060e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fd8c 	bl	8006bbc <RCC_SetFlashLatencyFromMSIRange>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e3ba      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060ae:	4b73      	ldr	r3, [pc, #460]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a72      	ldr	r2, [pc, #456]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060b4:	f043 0308 	orr.w	r3, r3, #8
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	4b70      	ldr	r3, [pc, #448]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	496d      	ldr	r1, [pc, #436]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060cc:	4b6b      	ldr	r3, [pc, #428]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	4968      	ldr	r1, [pc, #416]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	604b      	str	r3, [r1, #4]
 80060e0:	e025      	b.n	800612e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060e2:	4b66      	ldr	r3, [pc, #408]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a65      	ldr	r2, [pc, #404]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060e8:	f043 0308 	orr.w	r3, r3, #8
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	4b63      	ldr	r3, [pc, #396]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	4960      	ldr	r1, [pc, #384]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006100:	4b5e      	ldr	r3, [pc, #376]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	495b      	ldr	r1, [pc, #364]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006110:	4313      	orrs	r3, r2
 8006112:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fd4c 	bl	8006bbc <RCC_SetFlashLatencyFromMSIRange>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e37a      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800612e:	f000 fc81 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 8006132:	4602      	mov	r2, r0
 8006134:	4b51      	ldr	r3, [pc, #324]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	4950      	ldr	r1, [pc, #320]	; (8006280 <HAL_RCC_OscConfig+0x274>)
 8006140:	5ccb      	ldrb	r3, [r1, r3]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	fa22 f303 	lsr.w	r3, r2, r3
 800614a:	4a4e      	ldr	r2, [pc, #312]	; (8006284 <HAL_RCC_OscConfig+0x278>)
 800614c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800614e:	4b4e      	ldr	r3, [pc, #312]	; (8006288 <HAL_RCC_OscConfig+0x27c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff f95c 	bl	8005410 <HAL_InitTick>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d052      	beq.n	8006208 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	e35e      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d032      	beq.n	80061d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800616e:	4b43      	ldr	r3, [pc, #268]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a42      	ldr	r2, [pc, #264]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006174:	f043 0301 	orr.w	r3, r3, #1
 8006178:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800617a:	f7ff f999 	bl	80054b0 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006182:	f7ff f995 	bl	80054b0 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e347      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006194:	4b39      	ldr	r3, [pc, #228]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061a0:	4b36      	ldr	r3, [pc, #216]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a35      	ldr	r2, [pc, #212]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061a6:	f043 0308 	orr.w	r3, r3, #8
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	4b33      	ldr	r3, [pc, #204]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	4930      	ldr	r1, [pc, #192]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061be:	4b2f      	ldr	r3, [pc, #188]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	492b      	ldr	r1, [pc, #172]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	604b      	str	r3, [r1, #4]
 80061d2:	e01a      	b.n	800620a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061d4:	4b29      	ldr	r3, [pc, #164]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a28      	ldr	r2, [pc, #160]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061e0:	f7ff f966 	bl	80054b0 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061e8:	f7ff f962 	bl	80054b0 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e314      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061fa:	4b20      	ldr	r3, [pc, #128]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f0      	bne.n	80061e8 <HAL_RCC_OscConfig+0x1dc>
 8006206:	e000      	b.n	800620a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006208:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d073      	beq.n	80062fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d005      	beq.n	8006228 <HAL_RCC_OscConfig+0x21c>
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	2b0c      	cmp	r3, #12
 8006220:	d10e      	bne.n	8006240 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b03      	cmp	r3, #3
 8006226:	d10b      	bne.n	8006240 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006228:	4b14      	ldr	r3, [pc, #80]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d063      	beq.n	80062fc <HAL_RCC_OscConfig+0x2f0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d15f      	bne.n	80062fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e2f1      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d106      	bne.n	8006258 <HAL_RCC_OscConfig+0x24c>
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a0b      	ldr	r2, [pc, #44]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e025      	b.n	80062a4 <HAL_RCC_OscConfig+0x298>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006260:	d114      	bne.n	800628c <HAL_RCC_OscConfig+0x280>
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a05      	ldr	r2, [pc, #20]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4b03      	ldr	r3, [pc, #12]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a02      	ldr	r2, [pc, #8]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e013      	b.n	80062a4 <HAL_RCC_OscConfig+0x298>
 800627c:	40021000 	.word	0x40021000
 8006280:	0800c788 	.word	0x0800c788
 8006284:	20000004 	.word	0x20000004
 8006288:	20000008 	.word	0x20000008
 800628c:	4ba0      	ldr	r3, [pc, #640]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a9f      	ldr	r2, [pc, #636]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b9d      	ldr	r3, [pc, #628]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a9c      	ldr	r2, [pc, #624]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7ff f900 	bl	80054b0 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b4:	f7ff f8fc 	bl	80054b0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e2ae      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c6:	4b92      	ldr	r3, [pc, #584]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0x2a8>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7ff f8ec 	bl	80054b0 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062dc:	f7ff f8e8 	bl	80054b0 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e29a      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ee:	4b88      	ldr	r3, [pc, #544]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x2d0>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d060      	beq.n	80063cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b04      	cmp	r3, #4
 800630e:	d005      	beq.n	800631c <HAL_RCC_OscConfig+0x310>
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b0c      	cmp	r3, #12
 8006314:	d119      	bne.n	800634a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d116      	bne.n	800634a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800631c:	4b7c      	ldr	r3, [pc, #496]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <HAL_RCC_OscConfig+0x328>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e277      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006334:	4b76      	ldr	r3, [pc, #472]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	061b      	lsls	r3, r3, #24
 8006342:	4973      	ldr	r1, [pc, #460]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006344:	4313      	orrs	r3, r2
 8006346:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006348:	e040      	b.n	80063cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d023      	beq.n	800639a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006352:	4b6f      	ldr	r3, [pc, #444]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a6e      	ldr	r2, [pc, #440]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635e:	f7ff f8a7 	bl	80054b0 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006366:	f7ff f8a3 	bl	80054b0 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e255      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006378:	4b65      	ldr	r3, [pc, #404]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006384:	4b62      	ldr	r3, [pc, #392]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	495f      	ldr	r1, [pc, #380]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006394:	4313      	orrs	r3, r2
 8006396:	604b      	str	r3, [r1, #4]
 8006398:	e018      	b.n	80063cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800639a:	4b5d      	ldr	r3, [pc, #372]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a5c      	ldr	r2, [pc, #368]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80063a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a6:	f7ff f883 	bl	80054b0 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ae:	f7ff f87f 	bl	80054b0 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e231      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063c0:	4b53      	ldr	r3, [pc, #332]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f0      	bne.n	80063ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d03c      	beq.n	8006452 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01c      	beq.n	800641a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e0:	4b4b      	ldr	r3, [pc, #300]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80063e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e6:	4a4a      	ldr	r2, [pc, #296]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7ff f85e 	bl	80054b0 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f8:	f7ff f85a 	bl	80054b0 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e20c      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800640a:	4b41      	ldr	r3, [pc, #260]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800640c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0ef      	beq.n	80063f8 <HAL_RCC_OscConfig+0x3ec>
 8006418:	e01b      	b.n	8006452 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641a:	4b3d      	ldr	r3, [pc, #244]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800641c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006420:	4a3b      	ldr	r2, [pc, #236]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006422:	f023 0301 	bic.w	r3, r3, #1
 8006426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642a:	f7ff f841 	bl	80054b0 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006432:	f7ff f83d 	bl	80054b0 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e1ef      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006444:	4b32      	ldr	r3, [pc, #200]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1ef      	bne.n	8006432 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80a6 	beq.w	80065ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006460:	2300      	movs	r3, #0
 8006462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006464:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006470:	4b27      	ldr	r3, [pc, #156]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	4a26      	ldr	r2, [pc, #152]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647a:	6593      	str	r3, [r2, #88]	; 0x58
 800647c:	4b24      	ldr	r3, [pc, #144]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 800647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006488:	2301      	movs	r3, #1
 800648a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800648c:	4b21      	ldr	r3, [pc, #132]	; (8006514 <HAL_RCC_OscConfig+0x508>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d118      	bne.n	80064ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006498:	4b1e      	ldr	r3, [pc, #120]	; (8006514 <HAL_RCC_OscConfig+0x508>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <HAL_RCC_OscConfig+0x508>)
 800649e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a4:	f7ff f804 	bl	80054b0 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ac:	f7ff f800 	bl	80054b0 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e1b2      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064be:	4b15      	ldr	r3, [pc, #84]	; (8006514 <HAL_RCC_OscConfig+0x508>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d108      	bne.n	80064e4 <HAL_RCC_OscConfig+0x4d8>
 80064d2:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d8:	4a0d      	ldr	r2, [pc, #52]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064e2:	e029      	b.n	8006538 <HAL_RCC_OscConfig+0x52c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b05      	cmp	r3, #5
 80064ea:	d115      	bne.n	8006518 <HAL_RCC_OscConfig+0x50c>
 80064ec:	4b08      	ldr	r3, [pc, #32]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	4a07      	ldr	r2, [pc, #28]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80064f4:	f043 0304 	orr.w	r3, r3, #4
 80064f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064fc:	4b04      	ldr	r3, [pc, #16]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	4a03      	ldr	r2, [pc, #12]	; (8006510 <HAL_RCC_OscConfig+0x504>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800650c:	e014      	b.n	8006538 <HAL_RCC_OscConfig+0x52c>
 800650e:	bf00      	nop
 8006510:	40021000 	.word	0x40021000
 8006514:	40007000 	.word	0x40007000
 8006518:	4b9a      	ldr	r3, [pc, #616]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	4a99      	ldr	r2, [pc, #612]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006520:	f023 0301 	bic.w	r3, r3, #1
 8006524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006528:	4b96      	ldr	r3, [pc, #600]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652e:	4a95      	ldr	r2, [pc, #596]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d016      	beq.n	800656e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006540:	f7fe ffb6 	bl	80054b0 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006546:	e00a      	b.n	800655e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006548:	f7fe ffb2 	bl	80054b0 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f241 3288 	movw	r2, #5000	; 0x1388
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e162      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800655e:	4b89      	ldr	r3, [pc, #548]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0ed      	beq.n	8006548 <HAL_RCC_OscConfig+0x53c>
 800656c:	e015      	b.n	800659a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656e:	f7fe ff9f 	bl	80054b0 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006574:	e00a      	b.n	800658c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006576:	f7fe ff9b 	bl	80054b0 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f241 3288 	movw	r2, #5000	; 0x1388
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e14b      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800658c:	4b7d      	ldr	r3, [pc, #500]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1ed      	bne.n	8006576 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800659a:	7ffb      	ldrb	r3, [r7, #31]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d105      	bne.n	80065ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a0:	4b78      	ldr	r3, [pc, #480]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	4a77      	ldr	r2, [pc, #476]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80065a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d03c      	beq.n	8006632 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01c      	beq.n	80065fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065c0:	4b70      	ldr	r3, [pc, #448]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80065c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065c6:	4a6f      	ldr	r2, [pc, #444]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d0:	f7fe ff6e 	bl	80054b0 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065d8:	f7fe ff6a 	bl	80054b0 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e11c      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065ea:	4b66      	ldr	r3, [pc, #408]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80065ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0ef      	beq.n	80065d8 <HAL_RCC_OscConfig+0x5cc>
 80065f8:	e01b      	b.n	8006632 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065fa:	4b62      	ldr	r3, [pc, #392]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80065fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006600:	4a60      	ldr	r2, [pc, #384]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660a:	f7fe ff51 	bl	80054b0 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006612:	f7fe ff4d 	bl	80054b0 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e0ff      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006624:	4b57      	ldr	r3, [pc, #348]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1ef      	bne.n	8006612 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80f3 	beq.w	8006822 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	2b02      	cmp	r3, #2
 8006642:	f040 80c9 	bne.w	80067d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006646:	4b4f      	ldr	r3, [pc, #316]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f003 0203 	and.w	r2, r3, #3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	429a      	cmp	r2, r3
 8006658:	d12c      	bne.n	80066b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	3b01      	subs	r3, #1
 8006666:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d123      	bne.n	80066b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d11b      	bne.n	80066b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006688:	429a      	cmp	r2, r3
 800668a:	d113      	bne.n	80066b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	3b01      	subs	r3, #1
 800669a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d109      	bne.n	80066b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	3b01      	subs	r3, #1
 80066ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d06b      	beq.n	800678c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2b0c      	cmp	r3, #12
 80066b8:	d062      	beq.n	8006780 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80066ba:	4b32      	ldr	r3, [pc, #200]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e0ac      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80066ca:	4b2e      	ldr	r3, [pc, #184]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a2d      	ldr	r2, [pc, #180]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80066d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066d6:	f7fe feeb 	bl	80054b0 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066de:	f7fe fee7 	bl	80054b0 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e099      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066f0:	4b24      	ldr	r3, [pc, #144]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f0      	bne.n	80066de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066fc:	4b21      	ldr	r3, [pc, #132]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	4b21      	ldr	r3, [pc, #132]	; (8006788 <HAL_RCC_OscConfig+0x77c>)
 8006702:	4013      	ands	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800670c:	3a01      	subs	r2, #1
 800670e:	0112      	lsls	r2, r2, #4
 8006710:	4311      	orrs	r1, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006716:	0212      	lsls	r2, r2, #8
 8006718:	4311      	orrs	r1, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800671e:	0852      	lsrs	r2, r2, #1
 8006720:	3a01      	subs	r2, #1
 8006722:	0552      	lsls	r2, r2, #21
 8006724:	4311      	orrs	r1, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800672a:	0852      	lsrs	r2, r2, #1
 800672c:	3a01      	subs	r2, #1
 800672e:	0652      	lsls	r2, r2, #25
 8006730:	4311      	orrs	r1, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006736:	06d2      	lsls	r2, r2, #27
 8006738:	430a      	orrs	r2, r1
 800673a:	4912      	ldr	r1, [pc, #72]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 800673c:	4313      	orrs	r3, r2
 800673e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006740:	4b10      	ldr	r3, [pc, #64]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a0f      	ldr	r2, [pc, #60]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800674a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800674c:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4a0c      	ldr	r2, [pc, #48]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006758:	f7fe feaa 	bl	80054b0 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006760:	f7fe fea6 	bl	80054b0 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e058      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006772:	4b04      	ldr	r3, [pc, #16]	; (8006784 <HAL_RCC_OscConfig+0x778>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f0      	beq.n	8006760 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800677e:	e050      	b.n	8006822 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e04f      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
 8006784:	40021000 	.word	0x40021000
 8006788:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800678c:	4b27      	ldr	r3, [pc, #156]	; (800682c <HAL_RCC_OscConfig+0x820>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d144      	bne.n	8006822 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006798:	4b24      	ldr	r3, [pc, #144]	; (800682c <HAL_RCC_OscConfig+0x820>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a23      	ldr	r2, [pc, #140]	; (800682c <HAL_RCC_OscConfig+0x820>)
 800679e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067a4:	4b21      	ldr	r3, [pc, #132]	; (800682c <HAL_RCC_OscConfig+0x820>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4a20      	ldr	r2, [pc, #128]	; (800682c <HAL_RCC_OscConfig+0x820>)
 80067aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067b0:	f7fe fe7e 	bl	80054b0 <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b8:	f7fe fe7a 	bl	80054b0 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e02c      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <HAL_RCC_OscConfig+0x820>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0f0      	beq.n	80067b8 <HAL_RCC_OscConfig+0x7ac>
 80067d6:	e024      	b.n	8006822 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b0c      	cmp	r3, #12
 80067dc:	d01f      	beq.n	800681e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <HAL_RCC_OscConfig+0x820>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <HAL_RCC_OscConfig+0x820>)
 80067e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ea:	f7fe fe61 	bl	80054b0 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fe fe5d 	bl	80054b0 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e00f      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_RCC_OscConfig+0x820>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f0      	bne.n	80067f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCC_OscConfig+0x820>)
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	4905      	ldr	r1, [pc, #20]	; (800682c <HAL_RCC_OscConfig+0x820>)
 8006816:	4b06      	ldr	r3, [pc, #24]	; (8006830 <HAL_RCC_OscConfig+0x824>)
 8006818:	4013      	ands	r3, r2
 800681a:	60cb      	str	r3, [r1, #12]
 800681c:	e001      	b.n	8006822 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000
 8006830:	feeefffc 	.word	0xfeeefffc

08006834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0e7      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006848:	4b75      	ldr	r3, [pc, #468]	; (8006a20 <HAL_RCC_ClockConfig+0x1ec>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d910      	bls.n	8006878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006856:	4b72      	ldr	r3, [pc, #456]	; (8006a20 <HAL_RCC_ClockConfig+0x1ec>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f023 0207 	bic.w	r2, r3, #7
 800685e:	4970      	ldr	r1, [pc, #448]	; (8006a20 <HAL_RCC_ClockConfig+0x1ec>)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	4313      	orrs	r3, r2
 8006864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006866:	4b6e      	ldr	r3, [pc, #440]	; (8006a20 <HAL_RCC_ClockConfig+0x1ec>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0cf      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d010      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	4b66      	ldr	r3, [pc, #408]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006890:	429a      	cmp	r2, r3
 8006892:	d908      	bls.n	80068a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006894:	4b63      	ldr	r3, [pc, #396]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4960      	ldr	r1, [pc, #384]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04c      	beq.n	800694c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d107      	bne.n	80068ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ba:	4b5a      	ldr	r3, [pc, #360]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d121      	bne.n	800690a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e0a6      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d107      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068d2:	4b54      	ldr	r3, [pc, #336]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d115      	bne.n	800690a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e09a      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d107      	bne.n	80068fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068ea:	4b4e      	ldr	r3, [pc, #312]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e08e      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068fa:	4b4a      	ldr	r3, [pc, #296]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e086      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800690a:	4b46      	ldr	r3, [pc, #280]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f023 0203 	bic.w	r2, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	4943      	ldr	r1, [pc, #268]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 8006918:	4313      	orrs	r3, r2
 800691a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691c:	f7fe fdc8 	bl	80054b0 <HAL_GetTick>
 8006920:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006922:	e00a      	b.n	800693a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006924:	f7fe fdc4 	bl	80054b0 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006932:	4293      	cmp	r3, r2
 8006934:	d901      	bls.n	800693a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e06e      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693a:	4b3a      	ldr	r3, [pc, #232]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 020c 	and.w	r2, r3, #12
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	429a      	cmp	r2, r3
 800694a:	d1eb      	bne.n	8006924 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	4b31      	ldr	r3, [pc, #196]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006964:	429a      	cmp	r2, r3
 8006966:	d208      	bcs.n	800697a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006968:	4b2e      	ldr	r3, [pc, #184]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	492b      	ldr	r1, [pc, #172]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 8006976:	4313      	orrs	r3, r2
 8006978:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800697a:	4b29      	ldr	r3, [pc, #164]	; (8006a20 <HAL_RCC_ClockConfig+0x1ec>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d210      	bcs.n	80069aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006988:	4b25      	ldr	r3, [pc, #148]	; (8006a20 <HAL_RCC_ClockConfig+0x1ec>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 0207 	bic.w	r2, r3, #7
 8006990:	4923      	ldr	r1, [pc, #140]	; (8006a20 <HAL_RCC_ClockConfig+0x1ec>)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	4313      	orrs	r3, r2
 8006996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006998:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <HAL_RCC_ClockConfig+0x1ec>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d001      	beq.n	80069aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e036      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b6:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	4918      	ldr	r1, [pc, #96]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d009      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d4:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4910      	ldr	r1, [pc, #64]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069e8:	f000 f824 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <HAL_RCC_ClockConfig+0x1f0>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	091b      	lsrs	r3, r3, #4
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	490b      	ldr	r1, [pc, #44]	; (8006a28 <HAL_RCC_ClockConfig+0x1f4>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
 8006a04:	4a09      	ldr	r2, [pc, #36]	; (8006a2c <HAL_RCC_ClockConfig+0x1f8>)
 8006a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <HAL_RCC_ClockConfig+0x1fc>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fcff 	bl	8005410 <HAL_InitTick>
 8006a12:	4603      	mov	r3, r0
 8006a14:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a16:	7afb      	ldrb	r3, [r7, #11]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40022000 	.word	0x40022000
 8006a24:	40021000 	.word	0x40021000
 8006a28:	0800c788 	.word	0x0800c788
 8006a2c:	20000004 	.word	0x20000004
 8006a30:	20000008 	.word	0x20000008

08006a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b089      	sub	sp, #36	; 0x24
 8006a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a42:	4b3e      	ldr	r3, [pc, #248]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 030c 	and.w	r3, r3, #12
 8006a4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a4c:	4b3b      	ldr	r3, [pc, #236]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <HAL_RCC_GetSysClockFreq+0x34>
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b0c      	cmp	r3, #12
 8006a60:	d121      	bne.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d11e      	bne.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a68:	4b34      	ldr	r3, [pc, #208]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a74:	4b31      	ldr	r3, [pc, #196]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a7a:	0a1b      	lsrs	r3, r3, #8
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	e005      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a84:	4b2d      	ldr	r3, [pc, #180]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a90:	4a2b      	ldr	r2, [pc, #172]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006aa4:	e00a      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d102      	bne.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006aac:	4b25      	ldr	r3, [pc, #148]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8006aae:	61bb      	str	r3, [r7, #24]
 8006ab0:	e004      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d101      	bne.n	8006abc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ab8:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8006aba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b0c      	cmp	r3, #12
 8006ac0:	d134      	bne.n	8006b2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ac2:	4b1e      	ldr	r3, [pc, #120]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d003      	beq.n	8006ada <HAL_RCC_GetSysClockFreq+0xa6>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d003      	beq.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xac>
 8006ad8:	e005      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ada:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8006adc:	617b      	str	r3, [r7, #20]
      break;
 8006ade:	e005      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ae2:	617b      	str	r3, [r7, #20]
      break;
 8006ae4:	e002      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	617b      	str	r3, [r7, #20]
      break;
 8006aea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	091b      	lsrs	r3, r3, #4
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	3301      	adds	r3, #1
 8006af8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006afa:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	fb03 f202 	mul.w	r2, r3, r2
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b12:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	0e5b      	lsrs	r3, r3, #25
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3724      	adds	r7, #36	; 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	0800c7a0 	.word	0x0800c7a0
 8006b44:	00f42400 	.word	0x00f42400
 8006b48:	007a1200 	.word	0x007a1200

08006b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b50:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b52:	681b      	ldr	r3, [r3, #0]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000004 	.word	0x20000004

08006b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b68:	f7ff fff0 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	4904      	ldr	r1, [pc, #16]	; (8006b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b7a:	5ccb      	ldrb	r3, [r1, r3]
 8006b7c:	f003 031f 	and.w	r3, r3, #31
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	0800c798 	.word	0x0800c798

08006b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b94:	f7ff ffda 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	0adb      	lsrs	r3, r3, #11
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	4904      	ldr	r1, [pc, #16]	; (8006bb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ba6:	5ccb      	ldrb	r3, [r1, r3]
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	0800c798 	.word	0x0800c798

08006bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006bc8:	4b2a      	ldr	r3, [pc, #168]	; (8006c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006bd4:	f7ff f9b6 	bl	8005f44 <HAL_PWREx_GetVoltageRange>
 8006bd8:	6178      	str	r0, [r7, #20]
 8006bda:	e014      	b.n	8006c06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bdc:	4b25      	ldr	r3, [pc, #148]	; (8006c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	4a24      	ldr	r2, [pc, #144]	; (8006c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be6:	6593      	str	r3, [r2, #88]	; 0x58
 8006be8:	4b22      	ldr	r3, [pc, #136]	; (8006c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006bf4:	f7ff f9a6 	bl	8005f44 <HAL_PWREx_GetVoltageRange>
 8006bf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006bfa:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfe:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0c:	d10b      	bne.n	8006c26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d919      	bls.n	8006c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2ba0      	cmp	r3, #160	; 0xa0
 8006c18:	d902      	bls.n	8006c20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	e013      	b.n	8006c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c20:	2301      	movs	r3, #1
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	e010      	b.n	8006c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d902      	bls.n	8006c32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	e00a      	b.n	8006c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b80      	cmp	r3, #128	; 0x80
 8006c36:	d102      	bne.n	8006c3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c38:	2302      	movs	r3, #2
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	e004      	b.n	8006c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b70      	cmp	r3, #112	; 0x70
 8006c42:	d101      	bne.n	8006c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c44:	2301      	movs	r3, #1
 8006c46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c48:	4b0b      	ldr	r3, [pc, #44]	; (8006c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f023 0207 	bic.w	r2, r3, #7
 8006c50:	4909      	ldr	r1, [pc, #36]	; (8006c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d001      	beq.n	8006c6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40022000 	.word	0x40022000

08006c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c84:	2300      	movs	r3, #0
 8006c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c88:	2300      	movs	r3, #0
 8006c8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d031      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ca0:	d01a      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ca2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ca6:	d814      	bhi.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cb0:	d10f      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006cb2:	4b5d      	ldr	r3, [pc, #372]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	4a5c      	ldr	r2, [pc, #368]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cbe:	e00c      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f9de 	bl	8007088 <RCCEx_PLLSAI1_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cd0:	e003      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	74fb      	strb	r3, [r7, #19]
      break;
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cda:	7cfb      	ldrb	r3, [r7, #19]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ce0:	4b51      	ldr	r3, [pc, #324]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cee:	494e      	ldr	r1, [pc, #312]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006cf6:	e001      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf8:	7cfb      	ldrb	r3, [r7, #19]
 8006cfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 809e 	beq.w	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d0e:	4b46      	ldr	r3, [pc, #280]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00d      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d24:	4b40      	ldr	r3, [pc, #256]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d28:	4a3f      	ldr	r2, [pc, #252]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8006d30:	4b3d      	ldr	r3, [pc, #244]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d40:	4b3a      	ldr	r3, [pc, #232]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a39      	ldr	r2, [pc, #228]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d4c:	f7fe fbb0 	bl	80054b0 <HAL_GetTick>
 8006d50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d52:	e009      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d54:	f7fe fbac 	bl	80054b0 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d902      	bls.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	74fb      	strb	r3, [r7, #19]
        break;
 8006d66:	e005      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d68:	4b30      	ldr	r3, [pc, #192]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0ef      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006d74:	7cfb      	ldrb	r3, [r7, #19]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d15a      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d7a:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01e      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d019      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006da2:	4b21      	ldr	r3, [pc, #132]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da8:	4a1f      	ldr	r2, [pc, #124]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006db2:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dc2:	4a19      	ldr	r2, [pc, #100]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d016      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fe fb6c 	bl	80054b0 <HAL_GetTick>
 8006dd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dda:	e00b      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ddc:	f7fe fb68 	bl	80054b0 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d902      	bls.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	74fb      	strb	r3, [r7, #19]
            break;
 8006df2:	e006      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006df4:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0ec      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006e02:	7cfb      	ldrb	r3, [r7, #19]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	4904      	ldr	r1, [pc, #16]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006e1e:	e009      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e20:	7cfb      	ldrb	r3, [r7, #19]
 8006e22:	74bb      	strb	r3, [r7, #18]
 8006e24:	e006      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006e26:	bf00      	nop
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	7cfb      	ldrb	r3, [r7, #19]
 8006e32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e34:	7c7b      	ldrb	r3, [r7, #17]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d105      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e3a:	4b8a      	ldr	r3, [pc, #552]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3e:	4a89      	ldr	r2, [pc, #548]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e52:	4b84      	ldr	r3, [pc, #528]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e58:	f023 0203 	bic.w	r2, r3, #3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	4980      	ldr	r1, [pc, #512]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e74:	4b7b      	ldr	r3, [pc, #492]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7a:	f023 020c 	bic.w	r2, r3, #12
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	4978      	ldr	r1, [pc, #480]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e96:	4b73      	ldr	r3, [pc, #460]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	496f      	ldr	r1, [pc, #444]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eb8:	4b6a      	ldr	r3, [pc, #424]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ebe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	4967      	ldr	r1, [pc, #412]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eda:	4b62      	ldr	r3, [pc, #392]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	495e      	ldr	r1, [pc, #376]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006efc:	4b59      	ldr	r3, [pc, #356]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	4956      	ldr	r1, [pc, #344]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f1e:	4b51      	ldr	r3, [pc, #324]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	494d      	ldr	r1, [pc, #308]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d028      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f40:	4b48      	ldr	r3, [pc, #288]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	4945      	ldr	r1, [pc, #276]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f5e:	d106      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f60:	4b40      	ldr	r3, [pc, #256]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	4a3f      	ldr	r2, [pc, #252]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f6a:	60d3      	str	r3, [r2, #12]
 8006f6c:	e011      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f76:	d10c      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 f882 	bl	8007088 <RCCEx_PLLSAI1_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f88:	7cfb      	ldrb	r3, [r7, #19]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006f8e:	7cfb      	ldrb	r3, [r7, #19]
 8006f90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d028      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f9e:	4b31      	ldr	r3, [pc, #196]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fac:	492d      	ldr	r1, [pc, #180]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fbc:	d106      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fbe:	4b29      	ldr	r3, [pc, #164]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	4a28      	ldr	r2, [pc, #160]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc8:	60d3      	str	r3, [r2, #12]
 8006fca:	e011      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 f853 	bl	8007088 <RCCEx_PLLSAI1_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fe6:	7cfb      	ldrb	r3, [r7, #19]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006fec:	7cfb      	ldrb	r3, [r7, #19]
 8006fee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01c      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ffc:	4b19      	ldr	r3, [pc, #100]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007002:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700a:	4916      	ldr	r1, [pc, #88]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800700c:	4313      	orrs	r3, r2
 800700e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800701a:	d10c      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	2102      	movs	r1, #2
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f830 	bl	8007088 <RCCEx_PLLSAI1_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800702c:	7cfb      	ldrb	r3, [r7, #19]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007032:	7cfb      	ldrb	r3, [r7, #19]
 8007034:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007042:	4b08      	ldr	r3, [pc, #32]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007048:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007050:	4904      	ldr	r1, [pc, #16]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007058:	7cbb      	ldrb	r3, [r7, #18]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40021000 	.word	0x40021000

08007068 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a04      	ldr	r2, [pc, #16]	; (8007084 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007072:	f043 0304 	orr.w	r3, r3, #4
 8007076:	6013      	str	r3, [r2, #0]
}
 8007078:	bf00      	nop
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40021000 	.word	0x40021000

08007088 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007096:	4b74      	ldr	r3, [pc, #464]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d018      	beq.n	80070d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80070a2:	4b71      	ldr	r3, [pc, #452]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f003 0203 	and.w	r2, r3, #3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d10d      	bne.n	80070ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
       ||
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d009      	beq.n	80070ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80070ba:	4b6b      	ldr	r3, [pc, #428]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
       ||
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d047      	beq.n	800715e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	73fb      	strb	r3, [r7, #15]
 80070d2:	e044      	b.n	800715e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d018      	beq.n	800710e <RCCEx_PLLSAI1_Config+0x86>
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d825      	bhi.n	800712c <RCCEx_PLLSAI1_Config+0xa4>
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d002      	beq.n	80070ea <RCCEx_PLLSAI1_Config+0x62>
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d009      	beq.n	80070fc <RCCEx_PLLSAI1_Config+0x74>
 80070e8:	e020      	b.n	800712c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070ea:	4b5f      	ldr	r3, [pc, #380]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d11d      	bne.n	8007132 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070fa:	e01a      	b.n	8007132 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070fc:	4b5a      	ldr	r3, [pc, #360]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007104:	2b00      	cmp	r3, #0
 8007106:	d116      	bne.n	8007136 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800710c:	e013      	b.n	8007136 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800710e:	4b56      	ldr	r3, [pc, #344]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10f      	bne.n	800713a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800711a:	4b53      	ldr	r3, [pc, #332]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800712a:	e006      	b.n	800713a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
      break;
 8007130:	e004      	b.n	800713c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007132:	bf00      	nop
 8007134:	e002      	b.n	800713c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007136:	bf00      	nop
 8007138:	e000      	b.n	800713c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800713a:	bf00      	nop
    }

    if(status == HAL_OK)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10d      	bne.n	800715e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007142:	4b49      	ldr	r3, [pc, #292]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6819      	ldr	r1, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	3b01      	subs	r3, #1
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	430b      	orrs	r3, r1
 8007158:	4943      	ldr	r1, [pc, #268]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800715a:	4313      	orrs	r3, r2
 800715c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d17c      	bne.n	800725e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007164:	4b40      	ldr	r3, [pc, #256]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800716a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800716e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007170:	f7fe f99e 	bl	80054b0 <HAL_GetTick>
 8007174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007176:	e009      	b.n	800718c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007178:	f7fe f99a 	bl	80054b0 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d902      	bls.n	800718c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	73fb      	strb	r3, [r7, #15]
        break;
 800718a:	e005      	b.n	8007198 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1ef      	bne.n	8007178 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d15f      	bne.n	800725e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d110      	bne.n	80071c6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071a4:	4b30      	ldr	r3, [pc, #192]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80071ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6892      	ldr	r2, [r2, #8]
 80071b4:	0211      	lsls	r1, r2, #8
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	68d2      	ldr	r2, [r2, #12]
 80071ba:	06d2      	lsls	r2, r2, #27
 80071bc:	430a      	orrs	r2, r1
 80071be:	492a      	ldr	r1, [pc, #168]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	610b      	str	r3, [r1, #16]
 80071c4:	e027      	b.n	8007216 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d112      	bne.n	80071f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071cc:	4b26      	ldr	r3, [pc, #152]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80071d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6892      	ldr	r2, [r2, #8]
 80071dc:	0211      	lsls	r1, r2, #8
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6912      	ldr	r2, [r2, #16]
 80071e2:	0852      	lsrs	r2, r2, #1
 80071e4:	3a01      	subs	r2, #1
 80071e6:	0552      	lsls	r2, r2, #21
 80071e8:	430a      	orrs	r2, r1
 80071ea:	491f      	ldr	r1, [pc, #124]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	610b      	str	r3, [r1, #16]
 80071f0:	e011      	b.n	8007216 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071f2:	4b1d      	ldr	r3, [pc, #116]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80071fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6892      	ldr	r2, [r2, #8]
 8007202:	0211      	lsls	r1, r2, #8
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6952      	ldr	r2, [r2, #20]
 8007208:	0852      	lsrs	r2, r2, #1
 800720a:	3a01      	subs	r2, #1
 800720c:	0652      	lsls	r2, r2, #25
 800720e:	430a      	orrs	r2, r1
 8007210:	4915      	ldr	r1, [pc, #84]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007212:	4313      	orrs	r3, r2
 8007214:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007216:	4b14      	ldr	r3, [pc, #80]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a13      	ldr	r2, [pc, #76]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800721c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007220:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007222:	f7fe f945 	bl	80054b0 <HAL_GetTick>
 8007226:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007228:	e009      	b.n	800723e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800722a:	f7fe f941 	bl	80054b0 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d902      	bls.n	800723e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	73fb      	strb	r3, [r7, #15]
          break;
 800723c:	e005      	b.n	800724a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800723e:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0ef      	beq.n	800722a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d106      	bne.n	800725e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	4903      	ldr	r1, [pc, #12]	; (8007268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800725a:	4313      	orrs	r3, r2
 800725c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40021000 	.word	0x40021000

0800726c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e095      	b.n	80073aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	d108      	bne.n	8007298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728e:	d009      	beq.n	80072a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	61da      	str	r2, [r3, #28]
 8007296:	e005      	b.n	80072a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fd fe2e 	bl	8004f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072e4:	d902      	bls.n	80072ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e002      	b.n	80072f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80072fa:	d007      	beq.n	800730c <HAL_SPI_Init+0xa0>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007304:	d002      	beq.n	800730c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734e:	ea42 0103 	orr.w	r1, r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	0c1b      	lsrs	r3, r3, #16
 8007368:	f003 0204 	and.w	r2, r3, #4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007388:	ea42 0103 	orr.w	r1, r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b088      	sub	sp, #32
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_SPI_Transmit+0x22>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e15f      	b.n	8007694 <HAL_SPI_Transmit+0x2e2>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073dc:	f7fe f868 	bl	80054b0 <HAL_GetTick>
 80073e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d002      	beq.n	80073f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
 80073f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073f6:	e148      	b.n	800768a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <HAL_SPI_Transmit+0x52>
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d102      	bne.n	800740a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007408:	e13f      	b.n	800768a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2203      	movs	r2, #3
 800740e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	88fa      	ldrh	r2, [r7, #6]
 8007422:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	88fa      	ldrh	r2, [r7, #6]
 8007428:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007454:	d10f      	bne.n	8007476 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007464:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007474:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	d007      	beq.n	8007494 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800749c:	d94f      	bls.n	800753e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <HAL_SPI_Transmit+0xfa>
 80074a6:	8afb      	ldrh	r3, [r7, #22]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d142      	bne.n	8007532 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	881a      	ldrh	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074d0:	e02f      	b.n	8007532 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d112      	bne.n	8007506 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	881a      	ldrh	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	1c9a      	adds	r2, r3, #2
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007504:	e015      	b.n	8007532 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007506:	f7fd ffd3 	bl	80054b0 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d803      	bhi.n	800751e <HAL_SPI_Transmit+0x16c>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d102      	bne.n	8007524 <HAL_SPI_Transmit+0x172>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007530:	e0ab      	b.n	800768a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007536:	b29b      	uxth	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1ca      	bne.n	80074d2 <HAL_SPI_Transmit+0x120>
 800753c:	e080      	b.n	8007640 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <HAL_SPI_Transmit+0x19a>
 8007546:	8afb      	ldrh	r3, [r7, #22]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d174      	bne.n	8007636 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b01      	cmp	r3, #1
 8007554:	d912      	bls.n	800757c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	881a      	ldrh	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	1c9a      	adds	r2, r3, #2
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b02      	subs	r3, #2
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	87da      	strh	r2, [r3, #62]	; 0x3e
 800757a:	e05c      	b.n	8007636 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80075a2:	e048      	b.n	8007636 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d12b      	bne.n	800760a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d912      	bls.n	80075e2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	881a      	ldrh	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	1c9a      	adds	r2, r3, #2
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b02      	subs	r3, #2
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075e0:	e029      	b.n	8007636 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	330c      	adds	r3, #12
 80075ec:	7812      	ldrb	r2, [r2, #0]
 80075ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007608:	e015      	b.n	8007636 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800760a:	f7fd ff51 	bl	80054b0 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d803      	bhi.n	8007622 <HAL_SPI_Transmit+0x270>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d102      	bne.n	8007628 <HAL_SPI_Transmit+0x276>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007634:	e029      	b.n	800768a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1b1      	bne.n	80075a4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 fcf9 	bl	800803c <SPI_EndRxTxTransaction>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	613b      	str	r3, [r7, #16]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	613b      	str	r3, [r7, #16]
 8007672:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e003      	b.n	800768a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007692:	7ffb      	ldrb	r3, [r7, #31]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3720      	adds	r7, #32
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d002      	beq.n	80076c2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80076bc:	2302      	movs	r3, #2
 80076be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076c0:	e11a      	b.n	80078f8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ca:	d112      	bne.n	80076f2 <HAL_SPI_Receive+0x56>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10e      	bne.n	80076f2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2204      	movs	r2, #4
 80076d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076dc:	88fa      	ldrh	r2, [r7, #6]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	4613      	mov	r3, r2
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f90e 	bl	800790a <HAL_SPI_TransmitReceive>
 80076ee:	4603      	mov	r3, r0
 80076f0:	e107      	b.n	8007902 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_SPI_Receive+0x64>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e100      	b.n	8007902 <HAL_SPI_Receive+0x266>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007708:	f7fd fed2 	bl	80054b0 <HAL_GetTick>
 800770c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <HAL_SPI_Receive+0x7e>
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800771e:	e0eb      	b.n	80078f8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2204      	movs	r2, #4
 8007724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800776a:	d908      	bls.n	800777e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	e007      	b.n	800778e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800778c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007796:	d10f      	bne.n	80077b8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d007      	beq.n	80077d6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077de:	d86f      	bhi.n	80078c0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077e0:	e034      	b.n	800784c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d117      	bne.n	8007820 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f103 020c 	add.w	r2, r3, #12
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	7812      	ldrb	r2, [r2, #0]
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800781e:	e015      	b.n	800784c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007820:	f7fd fe46 	bl	80054b0 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d803      	bhi.n	8007838 <HAL_SPI_Receive+0x19c>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007836:	d102      	bne.n	800783e <HAL_SPI_Receive+0x1a2>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800784a:	e055      	b.n	80078f8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1c4      	bne.n	80077e2 <HAL_SPI_Receive+0x146>
 8007858:	e038      	b.n	80078cc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b01      	cmp	r3, #1
 8007866:	d115      	bne.n	8007894 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	b292      	uxth	r2, r2
 8007874:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	1c9a      	adds	r2, r3, #2
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007892:	e015      	b.n	80078c0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007894:	f7fd fe0c 	bl	80054b0 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d803      	bhi.n	80078ac <HAL_SPI_Receive+0x210>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078aa:	d102      	bne.n	80078b2 <HAL_SPI_Receive+0x216>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80078be:	e01b      	b.n	80078f8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1c6      	bne.n	800785a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fb5b 	bl	8007f8c <SPI_EndRxTransaction>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	75fb      	strb	r3, [r7, #23]
 80078ee:	e003      	b.n	80078f8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b08a      	sub	sp, #40	; 0x28
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007918:	2301      	movs	r3, #1
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x26>
 800792c:	2302      	movs	r3, #2
 800792e:	e20a      	b.n	8007d46 <HAL_SPI_TransmitReceive+0x43c>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007938:	f7fd fdba 	bl	80054b0 <HAL_GetTick>
 800793c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007944:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800794c:	887b      	ldrh	r3, [r7, #2]
 800794e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007950:	887b      	ldrh	r3, [r7, #2]
 8007952:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007954:	7efb      	ldrb	r3, [r7, #27]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d00e      	beq.n	8007978 <HAL_SPI_TransmitReceive+0x6e>
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007960:	d106      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d102      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x66>
 800796a:	7efb      	ldrb	r3, [r7, #27]
 800796c:	2b04      	cmp	r3, #4
 800796e:	d003      	beq.n	8007978 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007970:	2302      	movs	r3, #2
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007976:	e1e0      	b.n	8007d3a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_SPI_TransmitReceive+0x80>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_SPI_TransmitReceive+0x80>
 8007984:	887b      	ldrh	r3, [r7, #2]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007990:	e1d3      	b.n	8007d3a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b04      	cmp	r3, #4
 800799c:	d003      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2205      	movs	r2, #5
 80079a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	887a      	ldrh	r2, [r7, #2]
 80079b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	887a      	ldrh	r2, [r7, #2]
 80079be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	887a      	ldrh	r2, [r7, #2]
 80079cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	887a      	ldrh	r2, [r7, #2]
 80079d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079e8:	d802      	bhi.n	80079f0 <HAL_SPI_TransmitReceive+0xe6>
 80079ea:	8a3b      	ldrh	r3, [r7, #16]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d908      	bls.n	8007a02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079fe:	605a      	str	r2, [r3, #4]
 8007a00:	e007      	b.n	8007a12 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d007      	beq.n	8007a30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a38:	f240 8081 	bls.w	8007b3e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_SPI_TransmitReceive+0x140>
 8007a44:	8a7b      	ldrh	r3, [r7, #18]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d16d      	bne.n	8007b26 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	881a      	ldrh	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5a:	1c9a      	adds	r2, r3, #2
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a6e:	e05a      	b.n	8007b26 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d11b      	bne.n	8007ab6 <HAL_SPI_TransmitReceive+0x1ac>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d016      	beq.n	8007ab6 <HAL_SPI_TransmitReceive+0x1ac>
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d113      	bne.n	8007ab6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	881a      	ldrh	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	1c9a      	adds	r2, r3, #2
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d11c      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x1f4>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d016      	beq.n	8007afe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	b292      	uxth	r2, r2
 8007adc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	1c9a      	adds	r2, r3, #2
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007afa:	2301      	movs	r3, #1
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007afe:	f7fd fcd7 	bl	80054b0 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d80b      	bhi.n	8007b26 <HAL_SPI_TransmitReceive+0x21c>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d007      	beq.n	8007b26 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007b24:	e109      	b.n	8007d3a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d19f      	bne.n	8007a70 <HAL_SPI_TransmitReceive+0x166>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d199      	bne.n	8007a70 <HAL_SPI_TransmitReceive+0x166>
 8007b3c:	e0e3      	b.n	8007d06 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <HAL_SPI_TransmitReceive+0x244>
 8007b46:	8a7b      	ldrh	r3, [r7, #18]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f040 80cf 	bne.w	8007cec <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d912      	bls.n	8007b7e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	881a      	ldrh	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	1c9a      	adds	r2, r3, #2
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b02      	subs	r3, #2
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b7c:	e0b6      	b.n	8007cec <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ba4:	e0a2      	b.n	8007cec <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d134      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x314>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d02f      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x314>
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d12c      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d912      	bls.n	8007bf4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	881a      	ldrh	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	1c9a      	adds	r2, r3, #2
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	3b02      	subs	r3, #2
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bf2:	e012      	b.n	8007c1a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d148      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x3b4>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d042      	beq.n	8007cbe <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d923      	bls.n	8007c8c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	b292      	uxth	r2, r2
 8007c50:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	1c9a      	adds	r2, r3, #2
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b02      	subs	r3, #2
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d81f      	bhi.n	8007cba <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	e016      	b.n	8007cba <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f103 020c 	add.w	r2, r3, #12
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	7812      	ldrb	r2, [r2, #0]
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cbe:	f7fd fbf7 	bl	80054b0 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d803      	bhi.n	8007cd6 <HAL_SPI_TransmitReceive+0x3cc>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d102      	bne.n	8007cdc <HAL_SPI_TransmitReceive+0x3d2>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d107      	bne.n	8007cec <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007cea:	e026      	b.n	8007d3a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f47f af57 	bne.w	8007ba6 <HAL_SPI_TransmitReceive+0x29c>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f47f af50 	bne.w	8007ba6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f996 	bl	800803c <SPI_EndRxTxTransaction>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d30:	e003      	b.n	8007d3a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	; 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d60:	f7fd fba6 	bl	80054b0 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d70:	f7fd fb9e 	bl	80054b0 <HAL_GetTick>
 8007d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d76:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	015b      	lsls	r3, r3, #5
 8007d7c:	0d1b      	lsrs	r3, r3, #20
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	fb02 f303 	mul.w	r3, r2, r3
 8007d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d86:	e054      	b.n	8007e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8e:	d050      	beq.n	8007e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d90:	f7fd fb8e 	bl	80054b0 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d902      	bls.n	8007da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d13d      	bne.n	8007e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dbe:	d111      	bne.n	8007de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc8:	d004      	beq.n	8007dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd2:	d107      	bne.n	8007de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dec:	d10f      	bne.n	8007e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e017      	b.n	8007e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	bf0c      	ite	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	2300      	movne	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d19b      	bne.n	8007d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000004 	.word	0x20000004

08007e60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08a      	sub	sp, #40	; 0x28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e72:	f7fd fb1d 	bl	80054b0 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	4413      	add	r3, r2
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007e82:	f7fd fb15 	bl	80054b0 <HAL_GetTick>
 8007e86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	330c      	adds	r3, #12
 8007e8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e90:	4b3d      	ldr	r3, [pc, #244]	; (8007f88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	00da      	lsls	r2, r3, #3
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	0d1b      	lsrs	r3, r3, #20
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ea8:	e060      	b.n	8007f6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007eb0:	d107      	bne.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d050      	beq.n	8007f6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eca:	f7fd faf1 	bl	80054b0 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d902      	bls.n	8007ee0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d13d      	bne.n	8007f5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007eee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ef8:	d111      	bne.n	8007f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f02:	d004      	beq.n	8007f0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0c:	d107      	bne.n	8007f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f26:	d10f      	bne.n	8007f48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e010      	b.n	8007f7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	4013      	ands	r3, r2
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d196      	bne.n	8007eaa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3728      	adds	r7, #40	; 0x28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000004 	.word	0x20000004

08007f8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fa0:	d111      	bne.n	8007fc6 <SPI_EndRxTransaction+0x3a>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007faa:	d004      	beq.n	8007fb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fb4:	d107      	bne.n	8007fc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2180      	movs	r1, #128	; 0x80
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff febd 	bl	8007d50 <SPI_WaitFlagStateUntilTimeout>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe0:	f043 0220 	orr.w	r2, r3, #32
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e023      	b.n	8008034 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ff4:	d11d      	bne.n	8008032 <SPI_EndRxTransaction+0xa6>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffe:	d004      	beq.n	800800a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008008:	d113      	bne.n	8008032 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2200      	movs	r2, #0
 8008012:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff ff22 	bl	8007e60 <SPI_WaitFifoStateUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008026:	f043 0220 	orr.w	r2, r3, #32
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e000      	b.n	8008034 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af02      	add	r7, sp, #8
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2200      	movs	r2, #0
 8008050:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7ff ff03 	bl	8007e60 <SPI_WaitFifoStateUntilTimeout>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008064:	f043 0220 	orr.w	r2, r3, #32
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e027      	b.n	80080c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2200      	movs	r2, #0
 8008078:	2180      	movs	r1, #128	; 0x80
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7ff fe68 	bl	8007d50 <SPI_WaitFlagStateUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800808a:	f043 0220 	orr.w	r2, r3, #32
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e014      	b.n	80080c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2200      	movs	r2, #0
 800809e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff fedc 	bl	8007e60 <SPI_WaitFifoStateUntilTimeout>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d007      	beq.n	80080be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b2:	f043 0220 	orr.w	r2, r3, #32
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e000      	b.n	80080c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e049      	b.n	800816e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fd f85a 	bl	80051a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f000 fa7e 	bl	8008608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b01      	cmp	r3, #1
 800818a:	d001      	beq.n	8008190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e03b      	b.n	8008208 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0201 	orr.w	r2, r2, #1
 80081a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a19      	ldr	r2, [pc, #100]	; (8008214 <HAL_TIM_Base_Start_IT+0x9c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d009      	beq.n	80081c6 <HAL_TIM_Base_Start_IT+0x4e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ba:	d004      	beq.n	80081c6 <HAL_TIM_Base_Start_IT+0x4e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a15      	ldr	r2, [pc, #84]	; (8008218 <HAL_TIM_Base_Start_IT+0xa0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d115      	bne.n	80081f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689a      	ldr	r2, [r3, #8]
 80081cc:	4b13      	ldr	r3, [pc, #76]	; (800821c <HAL_TIM_Base_Start_IT+0xa4>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b06      	cmp	r3, #6
 80081d6:	d015      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x8c>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081de:	d011      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f0:	e008      	b.n	8008204 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0201 	orr.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	e000      	b.n	8008206 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	40012c00 	.word	0x40012c00
 8008218:	40014000 	.word	0x40014000
 800821c:	00010007 	.word	0x00010007

08008220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d020      	beq.n	8008284 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01b      	beq.n	8008284 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0202 	mvn.w	r2, #2
 8008254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f9ad 	bl	80085ca <HAL_TIM_IC_CaptureCallback>
 8008270:	e005      	b.n	800827e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f99f 	bl	80085b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f9b0 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d020      	beq.n	80082d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01b      	beq.n	80082d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f06f 0204 	mvn.w	r2, #4
 80082a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2202      	movs	r2, #2
 80082a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f987 	bl	80085ca <HAL_TIM_IC_CaptureCallback>
 80082bc:	e005      	b.n	80082ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f979 	bl	80085b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f98a 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d020      	beq.n	800831c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01b      	beq.n	800831c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0208 	mvn.w	r2, #8
 80082ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2204      	movs	r2, #4
 80082f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f961 	bl	80085ca <HAL_TIM_IC_CaptureCallback>
 8008308:	e005      	b.n	8008316 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f953 	bl	80085b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f964 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f003 0310 	and.w	r3, r3, #16
 8008322:	2b00      	cmp	r3, #0
 8008324:	d020      	beq.n	8008368 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f003 0310 	and.w	r3, r3, #16
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01b      	beq.n	8008368 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f06f 0210 	mvn.w	r2, #16
 8008338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2208      	movs	r2, #8
 800833e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f93b 	bl	80085ca <HAL_TIM_IC_CaptureCallback>
 8008354:	e005      	b.n	8008362 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f92d 	bl	80085b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f93e 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00c      	beq.n	800838c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f06f 0201 	mvn.w	r2, #1
 8008384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7fc fd76 	bl	8004e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00c      	beq.n	80083b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839c:	2b00      	cmp	r3, #0
 800839e:	d007      	beq.n	80083b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa9a 	bl	80088e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00c      	beq.n	80083d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa92 	bl	80088f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00c      	beq.n	80083f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f8fd 	bl	80085f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00c      	beq.n	800841c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0220 	mvn.w	r2, #32
 8008414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa5a 	bl	80088d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_TIM_ConfigClockSource+0x1c>
 800843c:	2302      	movs	r3, #2
 800843e:	e0b6      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x18a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800845e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800846a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847c:	d03e      	beq.n	80084fc <HAL_TIM_ConfigClockSource+0xd8>
 800847e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008482:	f200 8087 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x170>
 8008486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848a:	f000 8086 	beq.w	800859a <HAL_TIM_ConfigClockSource+0x176>
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008492:	d87f      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x170>
 8008494:	2b70      	cmp	r3, #112	; 0x70
 8008496:	d01a      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0xaa>
 8008498:	2b70      	cmp	r3, #112	; 0x70
 800849a:	d87b      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x170>
 800849c:	2b60      	cmp	r3, #96	; 0x60
 800849e:	d050      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0x11e>
 80084a0:	2b60      	cmp	r3, #96	; 0x60
 80084a2:	d877      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x170>
 80084a4:	2b50      	cmp	r3, #80	; 0x50
 80084a6:	d03c      	beq.n	8008522 <HAL_TIM_ConfigClockSource+0xfe>
 80084a8:	2b50      	cmp	r3, #80	; 0x50
 80084aa:	d873      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x170>
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d058      	beq.n	8008562 <HAL_TIM_ConfigClockSource+0x13e>
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d86f      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x170>
 80084b4:	2b30      	cmp	r3, #48	; 0x30
 80084b6:	d064      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x15e>
 80084b8:	2b30      	cmp	r3, #48	; 0x30
 80084ba:	d86b      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x170>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d060      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x15e>
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d867      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x170>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d05c      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x15e>
 80084c8:	2b10      	cmp	r3, #16
 80084ca:	d05a      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x15e>
 80084cc:	e062      	b.n	8008594 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084de:	f000 f971 	bl	80087c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	609a      	str	r2, [r3, #8]
      break;
 80084fa:	e04f      	b.n	800859c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800850c:	f000 f95a 	bl	80087c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800851e:	609a      	str	r2, [r3, #8]
      break;
 8008520:	e03c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800852e:	461a      	mov	r2, r3
 8008530:	f000 f8ce 	bl	80086d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2150      	movs	r1, #80	; 0x50
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f927 	bl	800878e <TIM_ITRx_SetConfig>
      break;
 8008540:	e02c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800854e:	461a      	mov	r2, r3
 8008550:	f000 f8ed 	bl	800872e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2160      	movs	r1, #96	; 0x60
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f917 	bl	800878e <TIM_ITRx_SetConfig>
      break;
 8008560:	e01c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800856e:	461a      	mov	r2, r3
 8008570:	f000 f8ae 	bl	80086d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2140      	movs	r1, #64	; 0x40
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f907 	bl	800878e <TIM_ITRx_SetConfig>
      break;
 8008580:	e00c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f000 f8fe 	bl	800878e <TIM_ITRx_SetConfig>
      break;
 8008592:	e003      	b.n	800859c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	73fb      	strb	r3, [r7, #15]
      break;
 8008598:	e000      	b.n	800859c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800859a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a2a      	ldr	r2, [pc, #168]	; (80086c4 <TIM_Base_SetConfig+0xbc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_Base_SetConfig+0x20>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008626:	d108      	bne.n	800863a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a21      	ldr	r2, [pc, #132]	; (80086c4 <TIM_Base_SetConfig+0xbc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00b      	beq.n	800865a <TIM_Base_SetConfig+0x52>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008648:	d007      	beq.n	800865a <TIM_Base_SetConfig+0x52>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a1e      	ldr	r2, [pc, #120]	; (80086c8 <TIM_Base_SetConfig+0xc0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d003      	beq.n	800865a <TIM_Base_SetConfig+0x52>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a1d      	ldr	r2, [pc, #116]	; (80086cc <TIM_Base_SetConfig+0xc4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d108      	bne.n	800866c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4313      	orrs	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a0c      	ldr	r2, [pc, #48]	; (80086c4 <TIM_Base_SetConfig+0xbc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d007      	beq.n	80086a8 <TIM_Base_SetConfig+0xa0>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a0b      	ldr	r2, [pc, #44]	; (80086c8 <TIM_Base_SetConfig+0xc0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d003      	beq.n	80086a8 <TIM_Base_SetConfig+0xa0>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <TIM_Base_SetConfig+0xc4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d103      	bne.n	80086b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	691a      	ldr	r2, [r3, #16]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	615a      	str	r2, [r3, #20]
}
 80086b6:	bf00      	nop
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	40014000 	.word	0x40014000
 80086cc:	40014400 	.word	0x40014400

080086d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	f023 0201 	bic.w	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f023 030a 	bic.w	r3, r3, #10
 800870c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	4313      	orrs	r3, r2
 8008714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	621a      	str	r2, [r3, #32]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800872e:	b480      	push	{r7}
 8008730:	b087      	sub	sp, #28
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	f023 0210 	bic.w	r2, r3, #16
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	031b      	lsls	r3, r3, #12
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800876a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	4313      	orrs	r3, r2
 8008774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800878e:	b480      	push	{r7}
 8008790:	b085      	sub	sp, #20
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	f043 0307 	orr.w	r3, r3, #7
 80087b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	609a      	str	r2, [r3, #8]
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	021a      	lsls	r2, r3, #8
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	609a      	str	r2, [r3, #8]
}
 80087f8:	bf00      	nop
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008814:	2b01      	cmp	r3, #1
 8008816:	d101      	bne.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008818:	2302      	movs	r3, #2
 800881a:	e04f      	b.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a21      	ldr	r2, [pc, #132]	; (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d108      	bne.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800884c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a14      	ldr	r2, [pc, #80]	; (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d009      	beq.n	8008890 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008884:	d004      	beq.n	8008890 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a10      	ldr	r2, [pc, #64]	; (80088cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d10c      	bne.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40014000 	.word	0x40014000

080088d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e040      	b.n	80089a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fc fc8e 	bl	8005250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2224      	movs	r2, #36	; 0x24
 8008938:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0201 	bic.w	r2, r2, #1
 8008948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fe6e 	bl	8009634 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fc3f 	bl	80091dc <UART_SetConfig>
 800895e:	4603      	mov	r3, r0
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e01b      	b.n	80089a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689a      	ldr	r2, [r3, #8]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 feed 	bl	8009778 <UART_CheckIdleState>
 800899e:	4603      	mov	r3, r0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	; 0x28
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	4613      	mov	r3, r2
 80089b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d178      	bne.n	8008ab2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_UART_Transmit+0x24>
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e071      	b.n	8008ab4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2221      	movs	r2, #33	; 0x21
 80089dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089de:	f7fc fd67 	bl	80054b0 <HAL_GetTick>
 80089e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fc:	d108      	bne.n	8008a10 <HAL_UART_Transmit+0x68>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	61bb      	str	r3, [r7, #24]
 8008a0e:	e003      	b.n	8008a18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a18:	e030      	b.n	8008a7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2200      	movs	r2, #0
 8008a22:	2180      	movs	r1, #128	; 0x80
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 ff4f 	bl	80098c8 <UART_WaitOnFlagUntilTimeout>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d004      	beq.n	8008a3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e03c      	b.n	8008ab4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	881a      	ldrh	r2, [r3, #0]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a4c:	b292      	uxth	r2, r2
 8008a4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	3302      	adds	r3, #2
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	e008      	b.n	8008a6a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	b292      	uxth	r2, r2
 8008a62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3301      	adds	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1c8      	bne.n	8008a1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2140      	movs	r1, #64	; 0x40
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 ff18 	bl	80098c8 <UART_WaitOnFlagUntilTimeout>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d004      	beq.n	8008aa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e005      	b.n	8008ab4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e000      	b.n	8008ab4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008ab2:	2302      	movs	r3, #2
  }
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08a      	sub	sp, #40	; 0x28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	d165      	bne.n	8008b9e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <HAL_UART_Transmit_DMA+0x22>
 8008ad8:	88fb      	ldrh	r3, [r7, #6]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e05e      	b.n	8008ba0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	88fa      	ldrh	r2, [r7, #6]
 8008aec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	88fa      	ldrh	r2, [r7, #6]
 8008af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2221      	movs	r2, #33	; 0x21
 8008b04:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d027      	beq.n	8008b5e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b12:	4a25      	ldr	r2, [pc, #148]	; (8008ba8 <HAL_UART_Transmit_DMA+0xec>)
 8008b14:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1a:	4a24      	ldr	r2, [pc, #144]	; (8008bac <HAL_UART_Transmit_DMA+0xf0>)
 8008b1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b22:	4a23      	ldr	r2, [pc, #140]	; (8008bb0 <HAL_UART_Transmit_DMA+0xf4>)
 8008b24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b36:	4619      	mov	r1, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3328      	adds	r3, #40	; 0x28
 8008b3e:	461a      	mov	r2, r3
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	f7fc feaf 	bl	80058a4 <HAL_DMA_Start_IT>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d008      	beq.n	8008b5e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2210      	movs	r2, #16
 8008b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e020      	b.n	8008ba0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2240      	movs	r2, #64	; 0x40
 8008b64:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	613b      	str	r3, [r7, #16]
   return(result);
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3308      	adds	r3, #8
 8008b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b86:	623a      	str	r2, [r7, #32]
 8008b88:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	69f9      	ldr	r1, [r7, #28]
 8008b8c:	6a3a      	ldr	r2, [r7, #32]
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e5      	bne.n	8008b66 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e000      	b.n	8008ba0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008b9e:	2302      	movs	r3, #2
  }
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3728      	adds	r7, #40	; 0x28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	08009aab 	.word	0x08009aab
 8008bac:	08009b45 	.word	0x08009b45
 8008bb0:	08009b61 	.word	0x08009b61

08008bb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b0ba      	sub	sp, #232	; 0xe8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008bde:	f640 030f 	movw	r3, #2063	; 0x80f
 8008be2:	4013      	ands	r3, r2
 8008be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d115      	bne.n	8008c1c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf4:	f003 0320 	and.w	r3, r3, #32
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00f      	beq.n	8008c1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 82ae 	beq.w	800916e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
      }
      return;
 8008c1a:	e2a8      	b.n	800916e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 8117 	beq.w	8008e54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008c32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008c36:	4b85      	ldr	r3, [pc, #532]	; (8008e4c <HAL_UART_IRQHandler+0x298>)
 8008c38:	4013      	ands	r3, r2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 810a 	beq.w	8008e54 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d011      	beq.n	8008c70 <HAL_UART_IRQHandler+0xbc>
 8008c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00b      	beq.n	8008c70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c66:	f043 0201 	orr.w	r2, r3, #1
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d011      	beq.n	8008ca0 <HAL_UART_IRQHandler+0xec>
 8008c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c96:	f043 0204 	orr.w	r2, r3, #4
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d011      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x11c>
 8008cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00b      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2204      	movs	r2, #4
 8008cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cc6:	f043 0202 	orr.w	r2, r3, #2
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d017      	beq.n	8008d0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce0:	f003 0320 	and.w	r3, r3, #32
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d105      	bne.n	8008cf4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00b      	beq.n	8008d0c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d02:	f043 0208 	orr.w	r2, r3, #8
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d012      	beq.n	8008d3e <HAL_UART_IRQHandler+0x18a>
 8008d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00c      	beq.n	8008d3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d34:	f043 0220 	orr.w	r2, r3, #32
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8214 	beq.w	8009172 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d4e:	f003 0320 	and.w	r3, r3, #32
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00d      	beq.n	8008d72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d86:	2b40      	cmp	r3, #64	; 0x40
 8008d88:	d005      	beq.n	8008d96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d04f      	beq.n	8008e36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fe23 	bl	80099e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d141      	bne.n	8008e2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1d9      	bne.n	8008daa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d013      	beq.n	8008e26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e02:	4a13      	ldr	r2, [pc, #76]	; (8008e50 <HAL_UART_IRQHandler+0x29c>)
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fc fde8 	bl	80059e0 <HAL_DMA_Abort_IT>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d017      	beq.n	8008e46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e24:	e00f      	b.n	8008e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f9c2 	bl	80091b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2c:	e00b      	b.n	8008e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f9be 	bl	80091b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e34:	e007      	b.n	8008e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f9ba 	bl	80091b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008e44:	e195      	b.n	8009172 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e46:	bf00      	nop
    return;
 8008e48:	e193      	b.n	8009172 <HAL_UART_IRQHandler+0x5be>
 8008e4a:	bf00      	nop
 8008e4c:	04000120 	.word	0x04000120
 8008e50:	08009bdf 	.word	0x08009bdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	f040 814e 	bne.w	80090fa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e62:	f003 0310 	and.w	r3, r3, #16
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 8147 	beq.w	80090fa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 8140 	beq.w	80090fa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2210      	movs	r2, #16
 8008e80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b40      	cmp	r3, #64	; 0x40
 8008e8e:	f040 80b8 	bne.w	8009002 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8167 	beq.w	8009176 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	f080 815f 	bcs.w	8009176 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 8086 	bne.w	8008fe0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1da      	bne.n	8008ed4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f30:	f023 0301 	bic.w	r3, r3, #1
 8008f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e1      	bne.n	8008f1e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e3      	bne.n	8008f5a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb0:	f023 0310 	bic.w	r3, r3, #16
 8008fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e4      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fc fcc2 	bl	8005964 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8e2 	bl	80091c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009000:	e0b9      	b.n	8009176 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800900e:	b29b      	uxth	r3, r3
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 80ab 	beq.w	800917a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8009024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 80a6 	beq.w	800917a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800903c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009050:	647b      	str	r3, [r7, #68]	; 0x44
 8009052:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800905e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e4      	bne.n	800902e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	623b      	str	r3, [r7, #32]
   return(result);
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	f023 0301 	bic.w	r3, r3, #1
 800907a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009088:	633a      	str	r2, [r7, #48]	; 0x30
 800908a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800908e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e3      	bne.n	8009064 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2220      	movs	r2, #32
 80090a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f023 0310 	bic.w	r3, r3, #16
 80090c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	69b9      	ldr	r1, [r7, #24]
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	617b      	str	r3, [r7, #20]
   return(result);
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e4      	bne.n	80090b0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2202      	movs	r2, #2
 80090ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f866 	bl	80091c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090f8:	e03f      	b.n	800917a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00e      	beq.n	8009124 <HAL_UART_IRQHandler+0x570>
 8009106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800910a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d008      	beq.n	8009124 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800911a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fd9e 	bl	8009c5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009122:	e02d      	b.n	8009180 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00e      	beq.n	800914e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009138:	2b00      	cmp	r3, #0
 800913a:	d008      	beq.n	800914e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01c      	beq.n	800917e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	4798      	blx	r3
    }
    return;
 800914c:	e017      	b.n	800917e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d012      	beq.n	8009180 <HAL_UART_IRQHandler+0x5cc>
 800915a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800915e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00c      	beq.n	8009180 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fd4f 	bl	8009c0a <UART_EndTransmit_IT>
    return;
 800916c:	e008      	b.n	8009180 <HAL_UART_IRQHandler+0x5cc>
      return;
 800916e:	bf00      	nop
 8009170:	e006      	b.n	8009180 <HAL_UART_IRQHandler+0x5cc>
    return;
 8009172:	bf00      	nop
 8009174:	e004      	b.n	8009180 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009176:	bf00      	nop
 8009178:	e002      	b.n	8009180 <HAL_UART_IRQHandler+0x5cc>
      return;
 800917a:	bf00      	nop
 800917c:	e000      	b.n	8009180 <HAL_UART_IRQHandler+0x5cc>
    return;
 800917e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009180:	37e8      	adds	r7, #232	; 0xe8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop

08009188 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091e0:	b08a      	sub	sp, #40	; 0x28
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	431a      	orrs	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	431a      	orrs	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	4313      	orrs	r3, r2
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	4bb4      	ldr	r3, [pc, #720]	; (80094dc <UART_SetConfig+0x300>)
 800920c:	4013      	ands	r3, r2
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	6812      	ldr	r2, [r2, #0]
 8009212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009214:	430b      	orrs	r3, r1
 8009216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4aa9      	ldr	r2, [pc, #676]	; (80094e0 <UART_SetConfig+0x304>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d004      	beq.n	8009248 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009244:	4313      	orrs	r3, r2
 8009246:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009258:	430a      	orrs	r2, r1
 800925a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4aa0      	ldr	r2, [pc, #640]	; (80094e4 <UART_SetConfig+0x308>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d126      	bne.n	80092b4 <UART_SetConfig+0xd8>
 8009266:	4ba0      	ldr	r3, [pc, #640]	; (80094e8 <UART_SetConfig+0x30c>)
 8009268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	2b03      	cmp	r3, #3
 8009272:	d81b      	bhi.n	80092ac <UART_SetConfig+0xd0>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <UART_SetConfig+0xa0>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	0800928d 	.word	0x0800928d
 8009280:	0800929d 	.word	0x0800929d
 8009284:	08009295 	.word	0x08009295
 8009288:	080092a5 	.word	0x080092a5
 800928c:	2301      	movs	r3, #1
 800928e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009292:	e080      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009294:	2302      	movs	r3, #2
 8009296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800929a:	e07c      	b.n	8009396 <UART_SetConfig+0x1ba>
 800929c:	2304      	movs	r3, #4
 800929e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092a2:	e078      	b.n	8009396 <UART_SetConfig+0x1ba>
 80092a4:	2308      	movs	r3, #8
 80092a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092aa:	e074      	b.n	8009396 <UART_SetConfig+0x1ba>
 80092ac:	2310      	movs	r3, #16
 80092ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092b2:	e070      	b.n	8009396 <UART_SetConfig+0x1ba>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a8c      	ldr	r2, [pc, #560]	; (80094ec <UART_SetConfig+0x310>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d138      	bne.n	8009330 <UART_SetConfig+0x154>
 80092be:	4b8a      	ldr	r3, [pc, #552]	; (80094e8 <UART_SetConfig+0x30c>)
 80092c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c4:	f003 030c 	and.w	r3, r3, #12
 80092c8:	2b0c      	cmp	r3, #12
 80092ca:	d82d      	bhi.n	8009328 <UART_SetConfig+0x14c>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <UART_SetConfig+0xf8>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	08009309 	.word	0x08009309
 80092d8:	08009329 	.word	0x08009329
 80092dc:	08009329 	.word	0x08009329
 80092e0:	08009329 	.word	0x08009329
 80092e4:	08009319 	.word	0x08009319
 80092e8:	08009329 	.word	0x08009329
 80092ec:	08009329 	.word	0x08009329
 80092f0:	08009329 	.word	0x08009329
 80092f4:	08009311 	.word	0x08009311
 80092f8:	08009329 	.word	0x08009329
 80092fc:	08009329 	.word	0x08009329
 8009300:	08009329 	.word	0x08009329
 8009304:	08009321 	.word	0x08009321
 8009308:	2300      	movs	r3, #0
 800930a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800930e:	e042      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009310:	2302      	movs	r3, #2
 8009312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009316:	e03e      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009318:	2304      	movs	r3, #4
 800931a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800931e:	e03a      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009320:	2308      	movs	r3, #8
 8009322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009326:	e036      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009328:	2310      	movs	r3, #16
 800932a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800932e:	e032      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a6a      	ldr	r2, [pc, #424]	; (80094e0 <UART_SetConfig+0x304>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d12a      	bne.n	8009390 <UART_SetConfig+0x1b4>
 800933a:	4b6b      	ldr	r3, [pc, #428]	; (80094e8 <UART_SetConfig+0x30c>)
 800933c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009348:	d01a      	beq.n	8009380 <UART_SetConfig+0x1a4>
 800934a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800934e:	d81b      	bhi.n	8009388 <UART_SetConfig+0x1ac>
 8009350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009354:	d00c      	beq.n	8009370 <UART_SetConfig+0x194>
 8009356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800935a:	d815      	bhi.n	8009388 <UART_SetConfig+0x1ac>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d003      	beq.n	8009368 <UART_SetConfig+0x18c>
 8009360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009364:	d008      	beq.n	8009378 <UART_SetConfig+0x19c>
 8009366:	e00f      	b.n	8009388 <UART_SetConfig+0x1ac>
 8009368:	2300      	movs	r3, #0
 800936a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800936e:	e012      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009370:	2302      	movs	r3, #2
 8009372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009376:	e00e      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009378:	2304      	movs	r3, #4
 800937a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800937e:	e00a      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009380:	2308      	movs	r3, #8
 8009382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009386:	e006      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009388:	2310      	movs	r3, #16
 800938a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800938e:	e002      	b.n	8009396 <UART_SetConfig+0x1ba>
 8009390:	2310      	movs	r3, #16
 8009392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a51      	ldr	r2, [pc, #324]	; (80094e0 <UART_SetConfig+0x304>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d17a      	bne.n	8009496 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d824      	bhi.n	80093f2 <UART_SetConfig+0x216>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <UART_SetConfig+0x1d4>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093d5 	.word	0x080093d5
 80093b4:	080093f3 	.word	0x080093f3
 80093b8:	080093dd 	.word	0x080093dd
 80093bc:	080093f3 	.word	0x080093f3
 80093c0:	080093e3 	.word	0x080093e3
 80093c4:	080093f3 	.word	0x080093f3
 80093c8:	080093f3 	.word	0x080093f3
 80093cc:	080093f3 	.word	0x080093f3
 80093d0:	080093eb 	.word	0x080093eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093d4:	f7fd fbc6 	bl	8006b64 <HAL_RCC_GetPCLK1Freq>
 80093d8:	61f8      	str	r0, [r7, #28]
        break;
 80093da:	e010      	b.n	80093fe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093dc:	4b44      	ldr	r3, [pc, #272]	; (80094f0 <UART_SetConfig+0x314>)
 80093de:	61fb      	str	r3, [r7, #28]
        break;
 80093e0:	e00d      	b.n	80093fe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093e2:	f7fd fb27 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 80093e6:	61f8      	str	r0, [r7, #28]
        break;
 80093e8:	e009      	b.n	80093fe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ee:	61fb      	str	r3, [r7, #28]
        break;
 80093f0:	e005      	b.n	80093fe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80093fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 8107 	beq.w	8009614 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	4613      	mov	r3, r2
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4413      	add	r3, r2
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	429a      	cmp	r2, r3
 8009414:	d305      	bcc.n	8009422 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	429a      	cmp	r2, r3
 8009420:	d903      	bls.n	800942a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009428:	e0f4      	b.n	8009614 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	2200      	movs	r2, #0
 800942e:	461c      	mov	r4, r3
 8009430:	4615      	mov	r5, r2
 8009432:	f04f 0200 	mov.w	r2, #0
 8009436:	f04f 0300 	mov.w	r3, #0
 800943a:	022b      	lsls	r3, r5, #8
 800943c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009440:	0222      	lsls	r2, r4, #8
 8009442:	68f9      	ldr	r1, [r7, #12]
 8009444:	6849      	ldr	r1, [r1, #4]
 8009446:	0849      	lsrs	r1, r1, #1
 8009448:	2000      	movs	r0, #0
 800944a:	4688      	mov	r8, r1
 800944c:	4681      	mov	r9, r0
 800944e:	eb12 0a08 	adds.w	sl, r2, r8
 8009452:	eb43 0b09 	adc.w	fp, r3, r9
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	603b      	str	r3, [r7, #0]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009464:	4650      	mov	r0, sl
 8009466:	4659      	mov	r1, fp
 8009468:	f7f6 ff0a 	bl	8000280 <__aeabi_uldivmod>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4613      	mov	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800947a:	d308      	bcc.n	800948e <UART_SetConfig+0x2b2>
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009482:	d204      	bcs.n	800948e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	60da      	str	r2, [r3, #12]
 800948c:	e0c2      	b.n	8009614 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009494:	e0be      	b.n	8009614 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800949e:	d16a      	bne.n	8009576 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80094a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d834      	bhi.n	8009512 <UART_SetConfig+0x336>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <UART_SetConfig+0x2d4>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094d5 	.word	0x080094d5
 80094b4:	080094f5 	.word	0x080094f5
 80094b8:	080094fd 	.word	0x080094fd
 80094bc:	08009513 	.word	0x08009513
 80094c0:	08009503 	.word	0x08009503
 80094c4:	08009513 	.word	0x08009513
 80094c8:	08009513 	.word	0x08009513
 80094cc:	08009513 	.word	0x08009513
 80094d0:	0800950b 	.word	0x0800950b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094d4:	f7fd fb46 	bl	8006b64 <HAL_RCC_GetPCLK1Freq>
 80094d8:	61f8      	str	r0, [r7, #28]
        break;
 80094da:	e020      	b.n	800951e <UART_SetConfig+0x342>
 80094dc:	efff69f3 	.word	0xefff69f3
 80094e0:	40008000 	.word	0x40008000
 80094e4:	40013800 	.word	0x40013800
 80094e8:	40021000 	.word	0x40021000
 80094ec:	40004400 	.word	0x40004400
 80094f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094f4:	f7fd fb4c 	bl	8006b90 <HAL_RCC_GetPCLK2Freq>
 80094f8:	61f8      	str	r0, [r7, #28]
        break;
 80094fa:	e010      	b.n	800951e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094fc:	4b4c      	ldr	r3, [pc, #304]	; (8009630 <UART_SetConfig+0x454>)
 80094fe:	61fb      	str	r3, [r7, #28]
        break;
 8009500:	e00d      	b.n	800951e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009502:	f7fd fa97 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 8009506:	61f8      	str	r0, [r7, #28]
        break;
 8009508:	e009      	b.n	800951e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800950a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800950e:	61fb      	str	r3, [r7, #28]
        break;
 8009510:	e005      	b.n	800951e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800951c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d077      	beq.n	8009614 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	005a      	lsls	r2, r3, #1
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	085b      	lsrs	r3, r3, #1
 800952e:	441a      	add	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	fbb2 f3f3 	udiv	r3, r2, r3
 8009538:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2b0f      	cmp	r3, #15
 800953e:	d916      	bls.n	800956e <UART_SetConfig+0x392>
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009546:	d212      	bcs.n	800956e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f023 030f 	bic.w	r3, r3, #15
 8009550:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	085b      	lsrs	r3, r3, #1
 8009556:	b29b      	uxth	r3, r3
 8009558:	f003 0307 	and.w	r3, r3, #7
 800955c:	b29a      	uxth	r2, r3
 800955e:	8afb      	ldrh	r3, [r7, #22]
 8009560:	4313      	orrs	r3, r2
 8009562:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	8afa      	ldrh	r2, [r7, #22]
 800956a:	60da      	str	r2, [r3, #12]
 800956c:	e052      	b.n	8009614 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009574:	e04e      	b.n	8009614 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800957a:	2b08      	cmp	r3, #8
 800957c:	d827      	bhi.n	80095ce <UART_SetConfig+0x3f2>
 800957e:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <UART_SetConfig+0x3a8>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	080095a9 	.word	0x080095a9
 8009588:	080095b1 	.word	0x080095b1
 800958c:	080095b9 	.word	0x080095b9
 8009590:	080095cf 	.word	0x080095cf
 8009594:	080095bf 	.word	0x080095bf
 8009598:	080095cf 	.word	0x080095cf
 800959c:	080095cf 	.word	0x080095cf
 80095a0:	080095cf 	.word	0x080095cf
 80095a4:	080095c7 	.word	0x080095c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095a8:	f7fd fadc 	bl	8006b64 <HAL_RCC_GetPCLK1Freq>
 80095ac:	61f8      	str	r0, [r7, #28]
        break;
 80095ae:	e014      	b.n	80095da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095b0:	f7fd faee 	bl	8006b90 <HAL_RCC_GetPCLK2Freq>
 80095b4:	61f8      	str	r0, [r7, #28]
        break;
 80095b6:	e010      	b.n	80095da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095b8:	4b1d      	ldr	r3, [pc, #116]	; (8009630 <UART_SetConfig+0x454>)
 80095ba:	61fb      	str	r3, [r7, #28]
        break;
 80095bc:	e00d      	b.n	80095da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095be:	f7fd fa39 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 80095c2:	61f8      	str	r0, [r7, #28]
        break;
 80095c4:	e009      	b.n	80095da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ca:	61fb      	str	r3, [r7, #28]
        break;
 80095cc:	e005      	b.n	80095da <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80095d8:	bf00      	nop
    }

    if (pclk != 0U)
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d019      	beq.n	8009614 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	085a      	lsrs	r2, r3, #1
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	441a      	add	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	2b0f      	cmp	r3, #15
 80095f8:	d909      	bls.n	800960e <UART_SetConfig+0x432>
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009600:	d205      	bcs.n	800960e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	b29a      	uxth	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60da      	str	r2, [r3, #12]
 800960c:	e002      	b.n	8009614 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009620:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009624:	4618      	mov	r0, r3
 8009626:	3728      	adds	r7, #40	; 0x28
 8009628:	46bd      	mov	sp, r7
 800962a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800962e:	bf00      	nop
 8009630:	00f42400 	.word	0x00f42400

08009634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00a      	beq.n	800965e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	f003 0304 	and.w	r3, r3, #4
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c8:	f003 0310 	and.w	r3, r3, #16
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	f003 0320 	and.w	r3, r3, #32
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01a      	beq.n	800974a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009732:	d10a      	bne.n	800974a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	430a      	orrs	r2, r1
 800976a:	605a      	str	r2, [r3, #4]
  }
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b098      	sub	sp, #96	; 0x60
 800977c:	af02      	add	r7, sp, #8
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009788:	f7fb fe92 	bl	80054b0 <HAL_GetTick>
 800978c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b08      	cmp	r3, #8
 800979a:	d12e      	bne.n	80097fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800979c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a4:	2200      	movs	r2, #0
 80097a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f88c 	bl	80098c8 <UART_WaitOnFlagUntilTimeout>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d021      	beq.n	80097fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ca:	653b      	str	r3, [r7, #80]	; 0x50
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d4:	647b      	str	r3, [r7, #68]	; 0x44
 80097d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e6      	bne.n	80097b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2220      	movs	r2, #32
 80097ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e062      	b.n	80098c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b04      	cmp	r3, #4
 8009806:	d149      	bne.n	800989c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009810:	2200      	movs	r2, #0
 8009812:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f856 	bl	80098c8 <UART_WaitOnFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d03c      	beq.n	800989c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	623b      	str	r3, [r7, #32]
   return(result);
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	461a      	mov	r2, r3
 800983e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009840:	633b      	str	r3, [r7, #48]	; 0x30
 8009842:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009848:	e841 2300 	strex	r3, r2, [r1]
 800984c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e6      	bne.n	8009822 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	3308      	adds	r3, #8
 800985a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	e853 3f00 	ldrex	r3, [r3]
 8009862:	60fb      	str	r3, [r7, #12]
   return(result);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0301 	bic.w	r3, r3, #1
 800986a:	64bb      	str	r3, [r7, #72]	; 0x48
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3308      	adds	r3, #8
 8009872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009874:	61fa      	str	r2, [r7, #28]
 8009876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	69b9      	ldr	r1, [r7, #24]
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	e841 2300 	strex	r3, r2, [r1]
 8009880:	617b      	str	r3, [r7, #20]
   return(result);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e5      	bne.n	8009854 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2220      	movs	r2, #32
 800988c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e011      	b.n	80098c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2220      	movs	r2, #32
 80098a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3758      	adds	r7, #88	; 0x58
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4613      	mov	r3, r2
 80098d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098d8:	e049      	b.n	800996e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d045      	beq.n	800996e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098e2:	f7fb fde5 	bl	80054b0 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d302      	bcc.n	80098f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e048      	b.n	800998e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d031      	beq.n	800996e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b08      	cmp	r3, #8
 8009916:	d110      	bne.n	800993a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2208      	movs	r2, #8
 800991e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f85e 	bl	80099e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2208      	movs	r2, #8
 800992a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e029      	b.n	800998e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009948:	d111      	bne.n	800996e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 f844 	bl	80099e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2220      	movs	r2, #32
 800995e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e00f      	b.n	800998e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	69da      	ldr	r2, [r3, #28]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4013      	ands	r3, r2
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	429a      	cmp	r2, r3
 800997c:	bf0c      	ite	eq
 800997e:	2301      	moveq	r3, #1
 8009980:	2300      	movne	r3, #0
 8009982:	b2db      	uxtb	r3, r3
 8009984:	461a      	mov	r2, r3
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	429a      	cmp	r2, r3
 800998a:	d0a6      	beq.n	80098da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009996:	b480      	push	{r7}
 8009998:	b089      	sub	sp, #36	; 0x24
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	461a      	mov	r2, r3
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	61bb      	str	r3, [r7, #24]
 80099be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	6979      	ldr	r1, [r7, #20]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	e841 2300 	strex	r3, r2, [r1]
 80099c8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e6      	bne.n	800999e <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80099d6:	bf00      	nop
 80099d8:	3724      	adds	r7, #36	; 0x24
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b095      	sub	sp, #84	; 0x54
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a08:	643b      	str	r3, [r7, #64]	; 0x40
 8009a0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a10:	e841 2300 	strex	r3, r2, [r1]
 8009a14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e6      	bne.n	80099ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3308      	adds	r3, #8
 8009a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	f023 0301 	bic.w	r3, r3, #1
 8009a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e5      	bne.n	8009a1c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d118      	bne.n	8009a8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f023 0310 	bic.w	r3, r3, #16
 8009a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a76:	61bb      	str	r3, [r7, #24]
 8009a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6979      	ldr	r1, [r7, #20]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	613b      	str	r3, [r7, #16]
   return(result);
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e6      	bne.n	8009a58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009a9e:	bf00      	nop
 8009aa0:	3754      	adds	r7, #84	; 0x54
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b090      	sub	sp, #64	; 0x40
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d137      	bne.n	8009b36 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3308      	adds	r3, #8
 8009aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aee:	633a      	str	r2, [r7, #48]	; 0x30
 8009af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e5      	bne.n	8009ace <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	e853 3f00 	ldrex	r3, [r3]
 8009b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b16:	637b      	str	r3, [r7, #52]	; 0x34
 8009b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b20:	61fb      	str	r3, [r7, #28]
 8009b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	69b9      	ldr	r1, [r7, #24]
 8009b26:	69fa      	ldr	r2, [r7, #28]
 8009b28:	e841 2300 	strex	r3, r2, [r1]
 8009b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e6      	bne.n	8009b02 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b34:	e002      	b.n	8009b3c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009b36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009b38:	f7ff fb26 	bl	8009188 <HAL_UART_TxCpltCallback>
}
 8009b3c:	bf00      	nop
 8009b3e:	3740      	adds	r7, #64	; 0x40
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff fb22 	bl	800919c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b86:	2b80      	cmp	r3, #128	; 0x80
 8009b88:	d109      	bne.n	8009b9e <UART_DMAError+0x3e>
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b21      	cmp	r3, #33	; 0x21
 8009b8e:	d106      	bne.n	8009b9e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009b98:	6978      	ldr	r0, [r7, #20]
 8009b9a:	f7ff fefc 	bl	8009996 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba8:	2b40      	cmp	r3, #64	; 0x40
 8009baa:	d109      	bne.n	8009bc0 <UART_DMAError+0x60>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b22      	cmp	r3, #34	; 0x22
 8009bb0:	d106      	bne.n	8009bc0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009bba:	6978      	ldr	r0, [r7, #20]
 8009bbc:	f7ff ff11 	bl	80099e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bc6:	f043 0210 	orr.w	r2, r3, #16
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bd0:	6978      	ldr	r0, [r7, #20]
 8009bd2:	f7ff faed 	bl	80091b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bd6:	bf00      	nop
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff fad7 	bl	80091b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c02:	bf00      	nop
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b088      	sub	sp, #32
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	e853 3f00 	ldrex	r3, [r3]
 8009c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c26:	61fb      	str	r3, [r7, #28]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	61bb      	str	r3, [r7, #24]
 8009c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6979      	ldr	r1, [r7, #20]
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e6      	bne.n	8009c12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff fa99 	bl	8009188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c56:	bf00      	nop
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <_vsniprintf_r>:
 8009c72:	b530      	push	{r4, r5, lr}
 8009c74:	4614      	mov	r4, r2
 8009c76:	2c00      	cmp	r4, #0
 8009c78:	b09b      	sub	sp, #108	; 0x6c
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	da05      	bge.n	8009c8c <_vsniprintf_r+0x1a>
 8009c80:	238b      	movs	r3, #139	; 0x8b
 8009c82:	6003      	str	r3, [r0, #0]
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	b01b      	add	sp, #108	; 0x6c
 8009c8a:	bd30      	pop	{r4, r5, pc}
 8009c8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c90:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009c94:	bf14      	ite	ne
 8009c96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c9a:	4623      	moveq	r3, r4
 8009c9c:	9302      	str	r3, [sp, #8]
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ca4:	9100      	str	r1, [sp, #0]
 8009ca6:	9104      	str	r1, [sp, #16]
 8009ca8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009cac:	4669      	mov	r1, sp
 8009cae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009cb0:	f000 f99e 	bl	8009ff0 <_svfiprintf_r>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	bfbc      	itt	lt
 8009cb8:	238b      	movlt	r3, #139	; 0x8b
 8009cba:	602b      	strlt	r3, [r5, #0]
 8009cbc:	2c00      	cmp	r4, #0
 8009cbe:	d0e3      	beq.n	8009c88 <_vsniprintf_r+0x16>
 8009cc0:	9b00      	ldr	r3, [sp, #0]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
 8009cc6:	e7df      	b.n	8009c88 <_vsniprintf_r+0x16>

08009cc8 <vsniprintf>:
 8009cc8:	b507      	push	{r0, r1, r2, lr}
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	460a      	mov	r2, r1
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	4803      	ldr	r0, [pc, #12]	; (8009ce0 <vsniprintf+0x18>)
 8009cd4:	6800      	ldr	r0, [r0, #0]
 8009cd6:	f7ff ffcc 	bl	8009c72 <_vsniprintf_r>
 8009cda:	b003      	add	sp, #12
 8009cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ce0:	2000005c 	.word	0x2000005c

08009ce4 <memset>:
 8009ce4:	4402      	add	r2, r0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d100      	bne.n	8009cee <memset+0xa>
 8009cec:	4770      	bx	lr
 8009cee:	f803 1b01 	strb.w	r1, [r3], #1
 8009cf2:	e7f9      	b.n	8009ce8 <memset+0x4>

08009cf4 <__errno>:
 8009cf4:	4b01      	ldr	r3, [pc, #4]	; (8009cfc <__errno+0x8>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	2000005c 	.word	0x2000005c

08009d00 <__libc_init_array>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	4d0d      	ldr	r5, [pc, #52]	; (8009d38 <__libc_init_array+0x38>)
 8009d04:	4c0d      	ldr	r4, [pc, #52]	; (8009d3c <__libc_init_array+0x3c>)
 8009d06:	1b64      	subs	r4, r4, r5
 8009d08:	10a4      	asrs	r4, r4, #2
 8009d0a:	2600      	movs	r6, #0
 8009d0c:	42a6      	cmp	r6, r4
 8009d0e:	d109      	bne.n	8009d24 <__libc_init_array+0x24>
 8009d10:	4d0b      	ldr	r5, [pc, #44]	; (8009d40 <__libc_init_array+0x40>)
 8009d12:	4c0c      	ldr	r4, [pc, #48]	; (8009d44 <__libc_init_array+0x44>)
 8009d14:	f000 fc6a 	bl	800a5ec <_init>
 8009d18:	1b64      	subs	r4, r4, r5
 8009d1a:	10a4      	asrs	r4, r4, #2
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	42a6      	cmp	r6, r4
 8009d20:	d105      	bne.n	8009d2e <__libc_init_array+0x2e>
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d28:	4798      	blx	r3
 8009d2a:	3601      	adds	r6, #1
 8009d2c:	e7ee      	b.n	8009d0c <__libc_init_array+0xc>
 8009d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d32:	4798      	blx	r3
 8009d34:	3601      	adds	r6, #1
 8009d36:	e7f2      	b.n	8009d1e <__libc_init_array+0x1e>
 8009d38:	0800c80c 	.word	0x0800c80c
 8009d3c:	0800c80c 	.word	0x0800c80c
 8009d40:	0800c80c 	.word	0x0800c80c
 8009d44:	0800c810 	.word	0x0800c810

08009d48 <__retarget_lock_acquire_recursive>:
 8009d48:	4770      	bx	lr

08009d4a <__retarget_lock_release_recursive>:
 8009d4a:	4770      	bx	lr

08009d4c <_free_r>:
 8009d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d044      	beq.n	8009ddc <_free_r+0x90>
 8009d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d56:	9001      	str	r0, [sp, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d5e:	bfb8      	it	lt
 8009d60:	18e4      	addlt	r4, r4, r3
 8009d62:	f000 f8df 	bl	8009f24 <__malloc_lock>
 8009d66:	4a1e      	ldr	r2, [pc, #120]	; (8009de0 <_free_r+0x94>)
 8009d68:	9801      	ldr	r0, [sp, #4]
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	b933      	cbnz	r3, 8009d7c <_free_r+0x30>
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	6014      	str	r4, [r2, #0]
 8009d72:	b003      	add	sp, #12
 8009d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d78:	f000 b8da 	b.w	8009f30 <__malloc_unlock>
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d908      	bls.n	8009d92 <_free_r+0x46>
 8009d80:	6825      	ldr	r5, [r4, #0]
 8009d82:	1961      	adds	r1, r4, r5
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf01      	itttt	eq
 8009d88:	6819      	ldreq	r1, [r3, #0]
 8009d8a:	685b      	ldreq	r3, [r3, #4]
 8009d8c:	1949      	addeq	r1, r1, r5
 8009d8e:	6021      	streq	r1, [r4, #0]
 8009d90:	e7ed      	b.n	8009d6e <_free_r+0x22>
 8009d92:	461a      	mov	r2, r3
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	b10b      	cbz	r3, 8009d9c <_free_r+0x50>
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	d9fa      	bls.n	8009d92 <_free_r+0x46>
 8009d9c:	6811      	ldr	r1, [r2, #0]
 8009d9e:	1855      	adds	r5, r2, r1
 8009da0:	42a5      	cmp	r5, r4
 8009da2:	d10b      	bne.n	8009dbc <_free_r+0x70>
 8009da4:	6824      	ldr	r4, [r4, #0]
 8009da6:	4421      	add	r1, r4
 8009da8:	1854      	adds	r4, r2, r1
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	d1e0      	bne.n	8009d72 <_free_r+0x26>
 8009db0:	681c      	ldr	r4, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	6053      	str	r3, [r2, #4]
 8009db6:	440c      	add	r4, r1
 8009db8:	6014      	str	r4, [r2, #0]
 8009dba:	e7da      	b.n	8009d72 <_free_r+0x26>
 8009dbc:	d902      	bls.n	8009dc4 <_free_r+0x78>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	e7d6      	b.n	8009d72 <_free_r+0x26>
 8009dc4:	6825      	ldr	r5, [r4, #0]
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf04      	itt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	bf04      	itt	eq
 8009dd4:	1949      	addeq	r1, r1, r5
 8009dd6:	6021      	streq	r1, [r4, #0]
 8009dd8:	6054      	str	r4, [r2, #4]
 8009dda:	e7ca      	b.n	8009d72 <_free_r+0x26>
 8009ddc:	b003      	add	sp, #12
 8009dde:	bd30      	pop	{r4, r5, pc}
 8009de0:	20000788 	.word	0x20000788

08009de4 <sbrk_aligned>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	4e0e      	ldr	r6, [pc, #56]	; (8009e20 <sbrk_aligned+0x3c>)
 8009de8:	460c      	mov	r4, r1
 8009dea:	6831      	ldr	r1, [r6, #0]
 8009dec:	4605      	mov	r5, r0
 8009dee:	b911      	cbnz	r1, 8009df6 <sbrk_aligned+0x12>
 8009df0:	f000 fba6 	bl	800a540 <_sbrk_r>
 8009df4:	6030      	str	r0, [r6, #0]
 8009df6:	4621      	mov	r1, r4
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 fba1 	bl	800a540 <_sbrk_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d00a      	beq.n	8009e18 <sbrk_aligned+0x34>
 8009e02:	1cc4      	adds	r4, r0, #3
 8009e04:	f024 0403 	bic.w	r4, r4, #3
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	d007      	beq.n	8009e1c <sbrk_aligned+0x38>
 8009e0c:	1a21      	subs	r1, r4, r0
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f000 fb96 	bl	800a540 <_sbrk_r>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d101      	bne.n	8009e1c <sbrk_aligned+0x38>
 8009e18:	f04f 34ff 	mov.w	r4, #4294967295
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	2000078c 	.word	0x2000078c

08009e24 <_malloc_r>:
 8009e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e28:	1ccd      	adds	r5, r1, #3
 8009e2a:	f025 0503 	bic.w	r5, r5, #3
 8009e2e:	3508      	adds	r5, #8
 8009e30:	2d0c      	cmp	r5, #12
 8009e32:	bf38      	it	cc
 8009e34:	250c      	movcc	r5, #12
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	4607      	mov	r7, r0
 8009e3a:	db01      	blt.n	8009e40 <_malloc_r+0x1c>
 8009e3c:	42a9      	cmp	r1, r5
 8009e3e:	d905      	bls.n	8009e4c <_malloc_r+0x28>
 8009e40:	230c      	movs	r3, #12
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	2600      	movs	r6, #0
 8009e46:	4630      	mov	r0, r6
 8009e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f20 <_malloc_r+0xfc>
 8009e50:	f000 f868 	bl	8009f24 <__malloc_lock>
 8009e54:	f8d8 3000 	ldr.w	r3, [r8]
 8009e58:	461c      	mov	r4, r3
 8009e5a:	bb5c      	cbnz	r4, 8009eb4 <_malloc_r+0x90>
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4638      	mov	r0, r7
 8009e60:	f7ff ffc0 	bl	8009de4 <sbrk_aligned>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	4604      	mov	r4, r0
 8009e68:	d155      	bne.n	8009f16 <_malloc_r+0xf2>
 8009e6a:	f8d8 4000 	ldr.w	r4, [r8]
 8009e6e:	4626      	mov	r6, r4
 8009e70:	2e00      	cmp	r6, #0
 8009e72:	d145      	bne.n	8009f00 <_malloc_r+0xdc>
 8009e74:	2c00      	cmp	r4, #0
 8009e76:	d048      	beq.n	8009f0a <_malloc_r+0xe6>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	eb04 0903 	add.w	r9, r4, r3
 8009e82:	f000 fb5d 	bl	800a540 <_sbrk_r>
 8009e86:	4581      	cmp	r9, r0
 8009e88:	d13f      	bne.n	8009f0a <_malloc_r+0xe6>
 8009e8a:	6821      	ldr	r1, [r4, #0]
 8009e8c:	1a6d      	subs	r5, r5, r1
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4638      	mov	r0, r7
 8009e92:	f7ff ffa7 	bl	8009de4 <sbrk_aligned>
 8009e96:	3001      	adds	r0, #1
 8009e98:	d037      	beq.n	8009f0a <_malloc_r+0xe6>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	442b      	add	r3, r5
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d038      	beq.n	8009f1a <_malloc_r+0xf6>
 8009ea8:	685a      	ldr	r2, [r3, #4]
 8009eaa:	42a2      	cmp	r2, r4
 8009eac:	d12b      	bne.n	8009f06 <_malloc_r+0xe2>
 8009eae:	2200      	movs	r2, #0
 8009eb0:	605a      	str	r2, [r3, #4]
 8009eb2:	e00f      	b.n	8009ed4 <_malloc_r+0xb0>
 8009eb4:	6822      	ldr	r2, [r4, #0]
 8009eb6:	1b52      	subs	r2, r2, r5
 8009eb8:	d41f      	bmi.n	8009efa <_malloc_r+0xd6>
 8009eba:	2a0b      	cmp	r2, #11
 8009ebc:	d917      	bls.n	8009eee <_malloc_r+0xca>
 8009ebe:	1961      	adds	r1, r4, r5
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	6025      	str	r5, [r4, #0]
 8009ec4:	bf18      	it	ne
 8009ec6:	6059      	strne	r1, [r3, #4]
 8009ec8:	6863      	ldr	r3, [r4, #4]
 8009eca:	bf08      	it	eq
 8009ecc:	f8c8 1000 	streq.w	r1, [r8]
 8009ed0:	5162      	str	r2, [r4, r5]
 8009ed2:	604b      	str	r3, [r1, #4]
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f104 060b 	add.w	r6, r4, #11
 8009eda:	f000 f829 	bl	8009f30 <__malloc_unlock>
 8009ede:	f026 0607 	bic.w	r6, r6, #7
 8009ee2:	1d23      	adds	r3, r4, #4
 8009ee4:	1af2      	subs	r2, r6, r3
 8009ee6:	d0ae      	beq.n	8009e46 <_malloc_r+0x22>
 8009ee8:	1b9b      	subs	r3, r3, r6
 8009eea:	50a3      	str	r3, [r4, r2]
 8009eec:	e7ab      	b.n	8009e46 <_malloc_r+0x22>
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	6862      	ldr	r2, [r4, #4]
 8009ef2:	d1dd      	bne.n	8009eb0 <_malloc_r+0x8c>
 8009ef4:	f8c8 2000 	str.w	r2, [r8]
 8009ef8:	e7ec      	b.n	8009ed4 <_malloc_r+0xb0>
 8009efa:	4623      	mov	r3, r4
 8009efc:	6864      	ldr	r4, [r4, #4]
 8009efe:	e7ac      	b.n	8009e5a <_malloc_r+0x36>
 8009f00:	4634      	mov	r4, r6
 8009f02:	6876      	ldr	r6, [r6, #4]
 8009f04:	e7b4      	b.n	8009e70 <_malloc_r+0x4c>
 8009f06:	4613      	mov	r3, r2
 8009f08:	e7cc      	b.n	8009ea4 <_malloc_r+0x80>
 8009f0a:	230c      	movs	r3, #12
 8009f0c:	603b      	str	r3, [r7, #0]
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f000 f80e 	bl	8009f30 <__malloc_unlock>
 8009f14:	e797      	b.n	8009e46 <_malloc_r+0x22>
 8009f16:	6025      	str	r5, [r4, #0]
 8009f18:	e7dc      	b.n	8009ed4 <_malloc_r+0xb0>
 8009f1a:	605b      	str	r3, [r3, #4]
 8009f1c:	deff      	udf	#255	; 0xff
 8009f1e:	bf00      	nop
 8009f20:	20000788 	.word	0x20000788

08009f24 <__malloc_lock>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__malloc_lock+0x8>)
 8009f26:	f7ff bf0f 	b.w	8009d48 <__retarget_lock_acquire_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20000784 	.word	0x20000784

08009f30 <__malloc_unlock>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__malloc_unlock+0x8>)
 8009f32:	f7ff bf0a 	b.w	8009d4a <__retarget_lock_release_recursive>
 8009f36:	bf00      	nop
 8009f38:	20000784 	.word	0x20000784

08009f3c <__ssputs_r>:
 8009f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f40:	688e      	ldr	r6, [r1, #8]
 8009f42:	461f      	mov	r7, r3
 8009f44:	42be      	cmp	r6, r7
 8009f46:	680b      	ldr	r3, [r1, #0]
 8009f48:	4682      	mov	sl, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	4690      	mov	r8, r2
 8009f4e:	d82c      	bhi.n	8009faa <__ssputs_r+0x6e>
 8009f50:	898a      	ldrh	r2, [r1, #12]
 8009f52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f56:	d026      	beq.n	8009fa6 <__ssputs_r+0x6a>
 8009f58:	6965      	ldr	r5, [r4, #20]
 8009f5a:	6909      	ldr	r1, [r1, #16]
 8009f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f60:	eba3 0901 	sub.w	r9, r3, r1
 8009f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f68:	1c7b      	adds	r3, r7, #1
 8009f6a:	444b      	add	r3, r9
 8009f6c:	106d      	asrs	r5, r5, #1
 8009f6e:	429d      	cmp	r5, r3
 8009f70:	bf38      	it	cc
 8009f72:	461d      	movcc	r5, r3
 8009f74:	0553      	lsls	r3, r2, #21
 8009f76:	d527      	bpl.n	8009fc8 <__ssputs_r+0x8c>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7ff ff53 	bl	8009e24 <_malloc_r>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	b360      	cbz	r0, 8009fdc <__ssputs_r+0xa0>
 8009f82:	6921      	ldr	r1, [r4, #16]
 8009f84:	464a      	mov	r2, r9
 8009f86:	f000 faeb 	bl	800a560 <memcpy>
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f94:	81a3      	strh	r3, [r4, #12]
 8009f96:	6126      	str	r6, [r4, #16]
 8009f98:	6165      	str	r5, [r4, #20]
 8009f9a:	444e      	add	r6, r9
 8009f9c:	eba5 0509 	sub.w	r5, r5, r9
 8009fa0:	6026      	str	r6, [r4, #0]
 8009fa2:	60a5      	str	r5, [r4, #8]
 8009fa4:	463e      	mov	r6, r7
 8009fa6:	42be      	cmp	r6, r7
 8009fa8:	d900      	bls.n	8009fac <__ssputs_r+0x70>
 8009faa:	463e      	mov	r6, r7
 8009fac:	6820      	ldr	r0, [r4, #0]
 8009fae:	4632      	mov	r2, r6
 8009fb0:	4641      	mov	r1, r8
 8009fb2:	f000 faab 	bl	800a50c <memmove>
 8009fb6:	68a3      	ldr	r3, [r4, #8]
 8009fb8:	1b9b      	subs	r3, r3, r6
 8009fba:	60a3      	str	r3, [r4, #8]
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	4433      	add	r3, r6
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc8:	462a      	mov	r2, r5
 8009fca:	f000 fad7 	bl	800a57c <_realloc_r>
 8009fce:	4606      	mov	r6, r0
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d1e0      	bne.n	8009f96 <__ssputs_r+0x5a>
 8009fd4:	6921      	ldr	r1, [r4, #16]
 8009fd6:	4650      	mov	r0, sl
 8009fd8:	f7ff feb8 	bl	8009d4c <_free_r>
 8009fdc:	230c      	movs	r3, #12
 8009fde:	f8ca 3000 	str.w	r3, [sl]
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	f04f 30ff 	mov.w	r0, #4294967295
 8009fee:	e7e9      	b.n	8009fc4 <__ssputs_r+0x88>

08009ff0 <_svfiprintf_r>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	4698      	mov	r8, r3
 8009ff6:	898b      	ldrh	r3, [r1, #12]
 8009ff8:	061b      	lsls	r3, r3, #24
 8009ffa:	b09d      	sub	sp, #116	; 0x74
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	460d      	mov	r5, r1
 800a000:	4614      	mov	r4, r2
 800a002:	d50e      	bpl.n	800a022 <_svfiprintf_r+0x32>
 800a004:	690b      	ldr	r3, [r1, #16]
 800a006:	b963      	cbnz	r3, 800a022 <_svfiprintf_r+0x32>
 800a008:	2140      	movs	r1, #64	; 0x40
 800a00a:	f7ff ff0b 	bl	8009e24 <_malloc_r>
 800a00e:	6028      	str	r0, [r5, #0]
 800a010:	6128      	str	r0, [r5, #16]
 800a012:	b920      	cbnz	r0, 800a01e <_svfiprintf_r+0x2e>
 800a014:	230c      	movs	r3, #12
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	e0d0      	b.n	800a1c0 <_svfiprintf_r+0x1d0>
 800a01e:	2340      	movs	r3, #64	; 0x40
 800a020:	616b      	str	r3, [r5, #20]
 800a022:	2300      	movs	r3, #0
 800a024:	9309      	str	r3, [sp, #36]	; 0x24
 800a026:	2320      	movs	r3, #32
 800a028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a030:	2330      	movs	r3, #48	; 0x30
 800a032:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a1d8 <_svfiprintf_r+0x1e8>
 800a036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a03a:	f04f 0901 	mov.w	r9, #1
 800a03e:	4623      	mov	r3, r4
 800a040:	469a      	mov	sl, r3
 800a042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a046:	b10a      	cbz	r2, 800a04c <_svfiprintf_r+0x5c>
 800a048:	2a25      	cmp	r2, #37	; 0x25
 800a04a:	d1f9      	bne.n	800a040 <_svfiprintf_r+0x50>
 800a04c:	ebba 0b04 	subs.w	fp, sl, r4
 800a050:	d00b      	beq.n	800a06a <_svfiprintf_r+0x7a>
 800a052:	465b      	mov	r3, fp
 800a054:	4622      	mov	r2, r4
 800a056:	4629      	mov	r1, r5
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff ff6f 	bl	8009f3c <__ssputs_r>
 800a05e:	3001      	adds	r0, #1
 800a060:	f000 80a9 	beq.w	800a1b6 <_svfiprintf_r+0x1c6>
 800a064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a066:	445a      	add	r2, fp
 800a068:	9209      	str	r2, [sp, #36]	; 0x24
 800a06a:	f89a 3000 	ldrb.w	r3, [sl]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80a1 	beq.w	800a1b6 <_svfiprintf_r+0x1c6>
 800a074:	2300      	movs	r3, #0
 800a076:	f04f 32ff 	mov.w	r2, #4294967295
 800a07a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a07e:	f10a 0a01 	add.w	sl, sl, #1
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	9307      	str	r3, [sp, #28]
 800a086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a08a:	931a      	str	r3, [sp, #104]	; 0x68
 800a08c:	4654      	mov	r4, sl
 800a08e:	2205      	movs	r2, #5
 800a090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a094:	4850      	ldr	r0, [pc, #320]	; (800a1d8 <_svfiprintf_r+0x1e8>)
 800a096:	f7f6 f8a3 	bl	80001e0 <memchr>
 800a09a:	9a04      	ldr	r2, [sp, #16]
 800a09c:	b9d8      	cbnz	r0, 800a0d6 <_svfiprintf_r+0xe6>
 800a09e:	06d0      	lsls	r0, r2, #27
 800a0a0:	bf44      	itt	mi
 800a0a2:	2320      	movmi	r3, #32
 800a0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a8:	0711      	lsls	r1, r2, #28
 800a0aa:	bf44      	itt	mi
 800a0ac:	232b      	movmi	r3, #43	; 0x2b
 800a0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b8:	d015      	beq.n	800a0e6 <_svfiprintf_r+0xf6>
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	4654      	mov	r4, sl
 800a0be:	2000      	movs	r0, #0
 800a0c0:	f04f 0c0a 	mov.w	ip, #10
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ca:	3b30      	subs	r3, #48	; 0x30
 800a0cc:	2b09      	cmp	r3, #9
 800a0ce:	d94d      	bls.n	800a16c <_svfiprintf_r+0x17c>
 800a0d0:	b1b0      	cbz	r0, 800a100 <_svfiprintf_r+0x110>
 800a0d2:	9207      	str	r2, [sp, #28]
 800a0d4:	e014      	b.n	800a100 <_svfiprintf_r+0x110>
 800a0d6:	eba0 0308 	sub.w	r3, r0, r8
 800a0da:	fa09 f303 	lsl.w	r3, r9, r3
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	46a2      	mov	sl, r4
 800a0e4:	e7d2      	b.n	800a08c <_svfiprintf_r+0x9c>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	1d19      	adds	r1, r3, #4
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	9103      	str	r1, [sp, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	bfbb      	ittet	lt
 800a0f2:	425b      	neglt	r3, r3
 800a0f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f8:	9307      	strge	r3, [sp, #28]
 800a0fa:	9307      	strlt	r3, [sp, #28]
 800a0fc:	bfb8      	it	lt
 800a0fe:	9204      	strlt	r2, [sp, #16]
 800a100:	7823      	ldrb	r3, [r4, #0]
 800a102:	2b2e      	cmp	r3, #46	; 0x2e
 800a104:	d10c      	bne.n	800a120 <_svfiprintf_r+0x130>
 800a106:	7863      	ldrb	r3, [r4, #1]
 800a108:	2b2a      	cmp	r3, #42	; 0x2a
 800a10a:	d134      	bne.n	800a176 <_svfiprintf_r+0x186>
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	9203      	str	r2, [sp, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	bfb8      	it	lt
 800a118:	f04f 33ff 	movlt.w	r3, #4294967295
 800a11c:	3402      	adds	r4, #2
 800a11e:	9305      	str	r3, [sp, #20]
 800a120:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a1e8 <_svfiprintf_r+0x1f8>
 800a124:	7821      	ldrb	r1, [r4, #0]
 800a126:	2203      	movs	r2, #3
 800a128:	4650      	mov	r0, sl
 800a12a:	f7f6 f859 	bl	80001e0 <memchr>
 800a12e:	b138      	cbz	r0, 800a140 <_svfiprintf_r+0x150>
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	eba0 000a 	sub.w	r0, r0, sl
 800a136:	2240      	movs	r2, #64	; 0x40
 800a138:	4082      	lsls	r2, r0
 800a13a:	4313      	orrs	r3, r2
 800a13c:	3401      	adds	r4, #1
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a144:	4825      	ldr	r0, [pc, #148]	; (800a1dc <_svfiprintf_r+0x1ec>)
 800a146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a14a:	2206      	movs	r2, #6
 800a14c:	f7f6 f848 	bl	80001e0 <memchr>
 800a150:	2800      	cmp	r0, #0
 800a152:	d038      	beq.n	800a1c6 <_svfiprintf_r+0x1d6>
 800a154:	4b22      	ldr	r3, [pc, #136]	; (800a1e0 <_svfiprintf_r+0x1f0>)
 800a156:	bb1b      	cbnz	r3, 800a1a0 <_svfiprintf_r+0x1b0>
 800a158:	9b03      	ldr	r3, [sp, #12]
 800a15a:	3307      	adds	r3, #7
 800a15c:	f023 0307 	bic.w	r3, r3, #7
 800a160:	3308      	adds	r3, #8
 800a162:	9303      	str	r3, [sp, #12]
 800a164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a166:	4433      	add	r3, r6
 800a168:	9309      	str	r3, [sp, #36]	; 0x24
 800a16a:	e768      	b.n	800a03e <_svfiprintf_r+0x4e>
 800a16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a170:	460c      	mov	r4, r1
 800a172:	2001      	movs	r0, #1
 800a174:	e7a6      	b.n	800a0c4 <_svfiprintf_r+0xd4>
 800a176:	2300      	movs	r3, #0
 800a178:	3401      	adds	r4, #1
 800a17a:	9305      	str	r3, [sp, #20]
 800a17c:	4619      	mov	r1, r3
 800a17e:	f04f 0c0a 	mov.w	ip, #10
 800a182:	4620      	mov	r0, r4
 800a184:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a188:	3a30      	subs	r2, #48	; 0x30
 800a18a:	2a09      	cmp	r2, #9
 800a18c:	d903      	bls.n	800a196 <_svfiprintf_r+0x1a6>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0c6      	beq.n	800a120 <_svfiprintf_r+0x130>
 800a192:	9105      	str	r1, [sp, #20]
 800a194:	e7c4      	b.n	800a120 <_svfiprintf_r+0x130>
 800a196:	fb0c 2101 	mla	r1, ip, r1, r2
 800a19a:	4604      	mov	r4, r0
 800a19c:	2301      	movs	r3, #1
 800a19e:	e7f0      	b.n	800a182 <_svfiprintf_r+0x192>
 800a1a0:	ab03      	add	r3, sp, #12
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	462a      	mov	r2, r5
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <_svfiprintf_r+0x1f4>)
 800a1a8:	a904      	add	r1, sp, #16
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	f3af 8000 	nop.w
 800a1b0:	1c42      	adds	r2, r0, #1
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	d1d6      	bne.n	800a164 <_svfiprintf_r+0x174>
 800a1b6:	89ab      	ldrh	r3, [r5, #12]
 800a1b8:	065b      	lsls	r3, r3, #25
 800a1ba:	f53f af2d 	bmi.w	800a018 <_svfiprintf_r+0x28>
 800a1be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c0:	b01d      	add	sp, #116	; 0x74
 800a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c6:	ab03      	add	r3, sp, #12
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <_svfiprintf_r+0x1f4>)
 800a1ce:	a904      	add	r1, sp, #16
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f000 f879 	bl	800a2c8 <_printf_i>
 800a1d6:	e7eb      	b.n	800a1b0 <_svfiprintf_r+0x1c0>
 800a1d8:	0800c7d0 	.word	0x0800c7d0
 800a1dc:	0800c7da 	.word	0x0800c7da
 800a1e0:	00000000 	.word	0x00000000
 800a1e4:	08009f3d 	.word	0x08009f3d
 800a1e8:	0800c7d6 	.word	0x0800c7d6

0800a1ec <_printf_common>:
 800a1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f0:	4616      	mov	r6, r2
 800a1f2:	4699      	mov	r9, r3
 800a1f4:	688a      	ldr	r2, [r1, #8]
 800a1f6:	690b      	ldr	r3, [r1, #16]
 800a1f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bfb8      	it	lt
 800a200:	4613      	movlt	r3, r2
 800a202:	6033      	str	r3, [r6, #0]
 800a204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a208:	4607      	mov	r7, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	b10a      	cbz	r2, 800a212 <_printf_common+0x26>
 800a20e:	3301      	adds	r3, #1
 800a210:	6033      	str	r3, [r6, #0]
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	0699      	lsls	r1, r3, #26
 800a216:	bf42      	ittt	mi
 800a218:	6833      	ldrmi	r3, [r6, #0]
 800a21a:	3302      	addmi	r3, #2
 800a21c:	6033      	strmi	r3, [r6, #0]
 800a21e:	6825      	ldr	r5, [r4, #0]
 800a220:	f015 0506 	ands.w	r5, r5, #6
 800a224:	d106      	bne.n	800a234 <_printf_common+0x48>
 800a226:	f104 0a19 	add.w	sl, r4, #25
 800a22a:	68e3      	ldr	r3, [r4, #12]
 800a22c:	6832      	ldr	r2, [r6, #0]
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	42ab      	cmp	r3, r5
 800a232:	dc26      	bgt.n	800a282 <_printf_common+0x96>
 800a234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a238:	1e13      	subs	r3, r2, #0
 800a23a:	6822      	ldr	r2, [r4, #0]
 800a23c:	bf18      	it	ne
 800a23e:	2301      	movne	r3, #1
 800a240:	0692      	lsls	r2, r2, #26
 800a242:	d42b      	bmi.n	800a29c <_printf_common+0xb0>
 800a244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a248:	4649      	mov	r1, r9
 800a24a:	4638      	mov	r0, r7
 800a24c:	47c0      	blx	r8
 800a24e:	3001      	adds	r0, #1
 800a250:	d01e      	beq.n	800a290 <_printf_common+0xa4>
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	6922      	ldr	r2, [r4, #16]
 800a256:	f003 0306 	and.w	r3, r3, #6
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	bf02      	ittt	eq
 800a25e:	68e5      	ldreq	r5, [r4, #12]
 800a260:	6833      	ldreq	r3, [r6, #0]
 800a262:	1aed      	subeq	r5, r5, r3
 800a264:	68a3      	ldr	r3, [r4, #8]
 800a266:	bf0c      	ite	eq
 800a268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a26c:	2500      	movne	r5, #0
 800a26e:	4293      	cmp	r3, r2
 800a270:	bfc4      	itt	gt
 800a272:	1a9b      	subgt	r3, r3, r2
 800a274:	18ed      	addgt	r5, r5, r3
 800a276:	2600      	movs	r6, #0
 800a278:	341a      	adds	r4, #26
 800a27a:	42b5      	cmp	r5, r6
 800a27c:	d11a      	bne.n	800a2b4 <_printf_common+0xc8>
 800a27e:	2000      	movs	r0, #0
 800a280:	e008      	b.n	800a294 <_printf_common+0xa8>
 800a282:	2301      	movs	r3, #1
 800a284:	4652      	mov	r2, sl
 800a286:	4649      	mov	r1, r9
 800a288:	4638      	mov	r0, r7
 800a28a:	47c0      	blx	r8
 800a28c:	3001      	adds	r0, #1
 800a28e:	d103      	bne.n	800a298 <_printf_common+0xac>
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a298:	3501      	adds	r5, #1
 800a29a:	e7c6      	b.n	800a22a <_printf_common+0x3e>
 800a29c:	18e1      	adds	r1, r4, r3
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	2030      	movs	r0, #48	; 0x30
 800a2a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2a6:	4422      	add	r2, r4
 800a2a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2b0:	3302      	adds	r3, #2
 800a2b2:	e7c7      	b.n	800a244 <_printf_common+0x58>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	47c0      	blx	r8
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d0e6      	beq.n	800a290 <_printf_common+0xa4>
 800a2c2:	3601      	adds	r6, #1
 800a2c4:	e7d9      	b.n	800a27a <_printf_common+0x8e>
	...

0800a2c8 <_printf_i>:
 800a2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	7e0f      	ldrb	r7, [r1, #24]
 800a2ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2d0:	2f78      	cmp	r7, #120	; 0x78
 800a2d2:	4691      	mov	r9, r2
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	469a      	mov	sl, r3
 800a2da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2de:	d807      	bhi.n	800a2f0 <_printf_i+0x28>
 800a2e0:	2f62      	cmp	r7, #98	; 0x62
 800a2e2:	d80a      	bhi.n	800a2fa <_printf_i+0x32>
 800a2e4:	2f00      	cmp	r7, #0
 800a2e6:	f000 80d4 	beq.w	800a492 <_printf_i+0x1ca>
 800a2ea:	2f58      	cmp	r7, #88	; 0x58
 800a2ec:	f000 80c0 	beq.w	800a470 <_printf_i+0x1a8>
 800a2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2f8:	e03a      	b.n	800a370 <_printf_i+0xa8>
 800a2fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2fe:	2b15      	cmp	r3, #21
 800a300:	d8f6      	bhi.n	800a2f0 <_printf_i+0x28>
 800a302:	a101      	add	r1, pc, #4	; (adr r1, 800a308 <_printf_i+0x40>)
 800a304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a308:	0800a361 	.word	0x0800a361
 800a30c:	0800a375 	.word	0x0800a375
 800a310:	0800a2f1 	.word	0x0800a2f1
 800a314:	0800a2f1 	.word	0x0800a2f1
 800a318:	0800a2f1 	.word	0x0800a2f1
 800a31c:	0800a2f1 	.word	0x0800a2f1
 800a320:	0800a375 	.word	0x0800a375
 800a324:	0800a2f1 	.word	0x0800a2f1
 800a328:	0800a2f1 	.word	0x0800a2f1
 800a32c:	0800a2f1 	.word	0x0800a2f1
 800a330:	0800a2f1 	.word	0x0800a2f1
 800a334:	0800a479 	.word	0x0800a479
 800a338:	0800a3a1 	.word	0x0800a3a1
 800a33c:	0800a433 	.word	0x0800a433
 800a340:	0800a2f1 	.word	0x0800a2f1
 800a344:	0800a2f1 	.word	0x0800a2f1
 800a348:	0800a49b 	.word	0x0800a49b
 800a34c:	0800a2f1 	.word	0x0800a2f1
 800a350:	0800a3a1 	.word	0x0800a3a1
 800a354:	0800a2f1 	.word	0x0800a2f1
 800a358:	0800a2f1 	.word	0x0800a2f1
 800a35c:	0800a43b 	.word	0x0800a43b
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	1d1a      	adds	r2, r3, #4
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	602a      	str	r2, [r5, #0]
 800a368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a370:	2301      	movs	r3, #1
 800a372:	e09f      	b.n	800a4b4 <_printf_i+0x1ec>
 800a374:	6820      	ldr	r0, [r4, #0]
 800a376:	682b      	ldr	r3, [r5, #0]
 800a378:	0607      	lsls	r7, r0, #24
 800a37a:	f103 0104 	add.w	r1, r3, #4
 800a37e:	6029      	str	r1, [r5, #0]
 800a380:	d501      	bpl.n	800a386 <_printf_i+0xbe>
 800a382:	681e      	ldr	r6, [r3, #0]
 800a384:	e003      	b.n	800a38e <_printf_i+0xc6>
 800a386:	0646      	lsls	r6, r0, #25
 800a388:	d5fb      	bpl.n	800a382 <_printf_i+0xba>
 800a38a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a38e:	2e00      	cmp	r6, #0
 800a390:	da03      	bge.n	800a39a <_printf_i+0xd2>
 800a392:	232d      	movs	r3, #45	; 0x2d
 800a394:	4276      	negs	r6, r6
 800a396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a39a:	485a      	ldr	r0, [pc, #360]	; (800a504 <_printf_i+0x23c>)
 800a39c:	230a      	movs	r3, #10
 800a39e:	e012      	b.n	800a3c6 <_printf_i+0xfe>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	6820      	ldr	r0, [r4, #0]
 800a3a4:	1d19      	adds	r1, r3, #4
 800a3a6:	6029      	str	r1, [r5, #0]
 800a3a8:	0605      	lsls	r5, r0, #24
 800a3aa:	d501      	bpl.n	800a3b0 <_printf_i+0xe8>
 800a3ac:	681e      	ldr	r6, [r3, #0]
 800a3ae:	e002      	b.n	800a3b6 <_printf_i+0xee>
 800a3b0:	0641      	lsls	r1, r0, #25
 800a3b2:	d5fb      	bpl.n	800a3ac <_printf_i+0xe4>
 800a3b4:	881e      	ldrh	r6, [r3, #0]
 800a3b6:	4853      	ldr	r0, [pc, #332]	; (800a504 <_printf_i+0x23c>)
 800a3b8:	2f6f      	cmp	r7, #111	; 0x6f
 800a3ba:	bf0c      	ite	eq
 800a3bc:	2308      	moveq	r3, #8
 800a3be:	230a      	movne	r3, #10
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3c6:	6865      	ldr	r5, [r4, #4]
 800a3c8:	60a5      	str	r5, [r4, #8]
 800a3ca:	2d00      	cmp	r5, #0
 800a3cc:	bfa2      	ittt	ge
 800a3ce:	6821      	ldrge	r1, [r4, #0]
 800a3d0:	f021 0104 	bicge.w	r1, r1, #4
 800a3d4:	6021      	strge	r1, [r4, #0]
 800a3d6:	b90e      	cbnz	r6, 800a3dc <_printf_i+0x114>
 800a3d8:	2d00      	cmp	r5, #0
 800a3da:	d04b      	beq.n	800a474 <_printf_i+0x1ac>
 800a3dc:	4615      	mov	r5, r2
 800a3de:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3e2:	fb03 6711 	mls	r7, r3, r1, r6
 800a3e6:	5dc7      	ldrb	r7, [r0, r7]
 800a3e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3ec:	4637      	mov	r7, r6
 800a3ee:	42bb      	cmp	r3, r7
 800a3f0:	460e      	mov	r6, r1
 800a3f2:	d9f4      	bls.n	800a3de <_printf_i+0x116>
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d10b      	bne.n	800a410 <_printf_i+0x148>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	07de      	lsls	r6, r3, #31
 800a3fc:	d508      	bpl.n	800a410 <_printf_i+0x148>
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	6861      	ldr	r1, [r4, #4]
 800a402:	4299      	cmp	r1, r3
 800a404:	bfde      	ittt	le
 800a406:	2330      	movle	r3, #48	; 0x30
 800a408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a40c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a410:	1b52      	subs	r2, r2, r5
 800a412:	6122      	str	r2, [r4, #16]
 800a414:	f8cd a000 	str.w	sl, [sp]
 800a418:	464b      	mov	r3, r9
 800a41a:	aa03      	add	r2, sp, #12
 800a41c:	4621      	mov	r1, r4
 800a41e:	4640      	mov	r0, r8
 800a420:	f7ff fee4 	bl	800a1ec <_printf_common>
 800a424:	3001      	adds	r0, #1
 800a426:	d14a      	bne.n	800a4be <_printf_i+0x1f6>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295
 800a42c:	b004      	add	sp, #16
 800a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	f043 0320 	orr.w	r3, r3, #32
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	4833      	ldr	r0, [pc, #204]	; (800a508 <_printf_i+0x240>)
 800a43c:	2778      	movs	r7, #120	; 0x78
 800a43e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	6829      	ldr	r1, [r5, #0]
 800a446:	061f      	lsls	r7, r3, #24
 800a448:	f851 6b04 	ldr.w	r6, [r1], #4
 800a44c:	d402      	bmi.n	800a454 <_printf_i+0x18c>
 800a44e:	065f      	lsls	r7, r3, #25
 800a450:	bf48      	it	mi
 800a452:	b2b6      	uxthmi	r6, r6
 800a454:	07df      	lsls	r7, r3, #31
 800a456:	bf48      	it	mi
 800a458:	f043 0320 	orrmi.w	r3, r3, #32
 800a45c:	6029      	str	r1, [r5, #0]
 800a45e:	bf48      	it	mi
 800a460:	6023      	strmi	r3, [r4, #0]
 800a462:	b91e      	cbnz	r6, 800a46c <_printf_i+0x1a4>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	f023 0320 	bic.w	r3, r3, #32
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	2310      	movs	r3, #16
 800a46e:	e7a7      	b.n	800a3c0 <_printf_i+0xf8>
 800a470:	4824      	ldr	r0, [pc, #144]	; (800a504 <_printf_i+0x23c>)
 800a472:	e7e4      	b.n	800a43e <_printf_i+0x176>
 800a474:	4615      	mov	r5, r2
 800a476:	e7bd      	b.n	800a3f4 <_printf_i+0x12c>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	6826      	ldr	r6, [r4, #0]
 800a47c:	6961      	ldr	r1, [r4, #20]
 800a47e:	1d18      	adds	r0, r3, #4
 800a480:	6028      	str	r0, [r5, #0]
 800a482:	0635      	lsls	r5, r6, #24
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	d501      	bpl.n	800a48c <_printf_i+0x1c4>
 800a488:	6019      	str	r1, [r3, #0]
 800a48a:	e002      	b.n	800a492 <_printf_i+0x1ca>
 800a48c:	0670      	lsls	r0, r6, #25
 800a48e:	d5fb      	bpl.n	800a488 <_printf_i+0x1c0>
 800a490:	8019      	strh	r1, [r3, #0]
 800a492:	2300      	movs	r3, #0
 800a494:	6123      	str	r3, [r4, #16]
 800a496:	4615      	mov	r5, r2
 800a498:	e7bc      	b.n	800a414 <_printf_i+0x14c>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	1d1a      	adds	r2, r3, #4
 800a49e:	602a      	str	r2, [r5, #0]
 800a4a0:	681d      	ldr	r5, [r3, #0]
 800a4a2:	6862      	ldr	r2, [r4, #4]
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7f5 fe9a 	bl	80001e0 <memchr>
 800a4ac:	b108      	cbz	r0, 800a4b2 <_printf_i+0x1ea>
 800a4ae:	1b40      	subs	r0, r0, r5
 800a4b0:	6060      	str	r0, [r4, #4]
 800a4b2:	6863      	ldr	r3, [r4, #4]
 800a4b4:	6123      	str	r3, [r4, #16]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4bc:	e7aa      	b.n	800a414 <_printf_i+0x14c>
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	4640      	mov	r0, r8
 800a4c6:	47d0      	blx	sl
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d0ad      	beq.n	800a428 <_printf_i+0x160>
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	079b      	lsls	r3, r3, #30
 800a4d0:	d413      	bmi.n	800a4fa <_printf_i+0x232>
 800a4d2:	68e0      	ldr	r0, [r4, #12]
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	4298      	cmp	r0, r3
 800a4d8:	bfb8      	it	lt
 800a4da:	4618      	movlt	r0, r3
 800a4dc:	e7a6      	b.n	800a42c <_printf_i+0x164>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	47d0      	blx	sl
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d09d      	beq.n	800a428 <_printf_i+0x160>
 800a4ec:	3501      	adds	r5, #1
 800a4ee:	68e3      	ldr	r3, [r4, #12]
 800a4f0:	9903      	ldr	r1, [sp, #12]
 800a4f2:	1a5b      	subs	r3, r3, r1
 800a4f4:	42ab      	cmp	r3, r5
 800a4f6:	dcf2      	bgt.n	800a4de <_printf_i+0x216>
 800a4f8:	e7eb      	b.n	800a4d2 <_printf_i+0x20a>
 800a4fa:	2500      	movs	r5, #0
 800a4fc:	f104 0619 	add.w	r6, r4, #25
 800a500:	e7f5      	b.n	800a4ee <_printf_i+0x226>
 800a502:	bf00      	nop
 800a504:	0800c7e1 	.word	0x0800c7e1
 800a508:	0800c7f2 	.word	0x0800c7f2

0800a50c <memmove>:
 800a50c:	4288      	cmp	r0, r1
 800a50e:	b510      	push	{r4, lr}
 800a510:	eb01 0402 	add.w	r4, r1, r2
 800a514:	d902      	bls.n	800a51c <memmove+0x10>
 800a516:	4284      	cmp	r4, r0
 800a518:	4623      	mov	r3, r4
 800a51a:	d807      	bhi.n	800a52c <memmove+0x20>
 800a51c:	1e43      	subs	r3, r0, #1
 800a51e:	42a1      	cmp	r1, r4
 800a520:	d008      	beq.n	800a534 <memmove+0x28>
 800a522:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a52a:	e7f8      	b.n	800a51e <memmove+0x12>
 800a52c:	4402      	add	r2, r0
 800a52e:	4601      	mov	r1, r0
 800a530:	428a      	cmp	r2, r1
 800a532:	d100      	bne.n	800a536 <memmove+0x2a>
 800a534:	bd10      	pop	{r4, pc}
 800a536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a53a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a53e:	e7f7      	b.n	800a530 <memmove+0x24>

0800a540 <_sbrk_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d06      	ldr	r5, [pc, #24]	; (800a55c <_sbrk_r+0x1c>)
 800a544:	2300      	movs	r3, #0
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	602b      	str	r3, [r5, #0]
 800a54c:	f7fa fd96 	bl	800507c <_sbrk>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d102      	bne.n	800a55a <_sbrk_r+0x1a>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	b103      	cbz	r3, 800a55a <_sbrk_r+0x1a>
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	20000780 	.word	0x20000780

0800a560 <memcpy>:
 800a560:	440a      	add	r2, r1
 800a562:	4291      	cmp	r1, r2
 800a564:	f100 33ff 	add.w	r3, r0, #4294967295
 800a568:	d100      	bne.n	800a56c <memcpy+0xc>
 800a56a:	4770      	bx	lr
 800a56c:	b510      	push	{r4, lr}
 800a56e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a572:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a576:	4291      	cmp	r1, r2
 800a578:	d1f9      	bne.n	800a56e <memcpy+0xe>
 800a57a:	bd10      	pop	{r4, pc}

0800a57c <_realloc_r>:
 800a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a580:	4680      	mov	r8, r0
 800a582:	4614      	mov	r4, r2
 800a584:	460e      	mov	r6, r1
 800a586:	b921      	cbnz	r1, 800a592 <_realloc_r+0x16>
 800a588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a58c:	4611      	mov	r1, r2
 800a58e:	f7ff bc49 	b.w	8009e24 <_malloc_r>
 800a592:	b92a      	cbnz	r2, 800a5a0 <_realloc_r+0x24>
 800a594:	f7ff fbda 	bl	8009d4c <_free_r>
 800a598:	4625      	mov	r5, r4
 800a59a:	4628      	mov	r0, r5
 800a59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a0:	f000 f81b 	bl	800a5da <_malloc_usable_size_r>
 800a5a4:	4284      	cmp	r4, r0
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	d802      	bhi.n	800a5b0 <_realloc_r+0x34>
 800a5aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5ae:	d812      	bhi.n	800a5d6 <_realloc_r+0x5a>
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f7ff fc36 	bl	8009e24 <_malloc_r>
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d0ed      	beq.n	800a59a <_realloc_r+0x1e>
 800a5be:	42bc      	cmp	r4, r7
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	bf28      	it	cs
 800a5c6:	463a      	movcs	r2, r7
 800a5c8:	f7ff ffca 	bl	800a560 <memcpy>
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	f7ff fbbc 	bl	8009d4c <_free_r>
 800a5d4:	e7e1      	b.n	800a59a <_realloc_r+0x1e>
 800a5d6:	4635      	mov	r5, r6
 800a5d8:	e7df      	b.n	800a59a <_realloc_r+0x1e>

0800a5da <_malloc_usable_size_r>:
 800a5da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5de:	1f18      	subs	r0, r3, #4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	bfbc      	itt	lt
 800a5e4:	580b      	ldrlt	r3, [r1, r0]
 800a5e6:	18c0      	addlt	r0, r0, r3
 800a5e8:	4770      	bx	lr
	...

0800a5ec <_init>:
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	bf00      	nop
 800a5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f2:	bc08      	pop	{r3}
 800a5f4:	469e      	mov	lr, r3
 800a5f6:	4770      	bx	lr

0800a5f8 <_fini>:
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fa:	bf00      	nop
 800a5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5fe:	bc08      	pop	{r3}
 800a600:	469e      	mov	lr, r3
 800a602:	4770      	bx	lr
